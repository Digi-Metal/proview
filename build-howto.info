A guide on how to build Proview
--------------------------------

Written by: Robert Karlsson

The following libraries (devel and runtime) are needed to build Proview:

gcc
g++
make
flex
libgtk2.0-dev
libdb5.3-dev  (Any Berkeley DB version > 4.3, on Fedora db4-devel)
libdb5.3++-dev
libasound2-dev (on Fedora alsa-lib-devel)
doxygen
jdk


Proview has been built with the follwing compilers:

gcc v4.3.2
javac (jdk6)

1. Preparations
--------------

Install the following packages

Mandatory:

make
flex
gcc
g++
libgtk2.0-dev
cpp
libasound2-dev
libdb5.3-dev
libdb5.3++-dev
doxygen

qt4-dev-tools
libphonon4
libphonon-dev 

Optional:

openjdk-6-jdk               Web interface and java API
libmysql++-dev              History database with mysql
libsqlite3-dev              History database with sqlite
libhdf5-openmpi-dev         History database with hdf5
libusb-1.0.0-dev            USB I/O cards (Velleman)
librsvg2-dev                SVG image support in Ge
libgstreamer1.0-dev        Network video camera
libgstreamer-plugins-base1.0-dev Network video camera
openPOWERLINK-V1.08.2       Ethernet Powerlink zip-file. Build from sources.
libpcap-dev                 Ethernet Powerlink

There has to be a valid display when building proview.
If you do not have a display, or want to build Proview on a server, see section "Building without a display" below

2. Easy way
-----------
Unpack the source package

> tar -xzvf pwrsrc_4.8.0.tar.gz

Enter the sourcecode root directory

> cd pwr_4.8.0

Execute the makefile

> make

Follow the instructions to insert three lines in your .bashrc file.


3. Thorough way
---------------

This is a more thorough way to install the development environment, which
is recommended if you will make a lots of changes in the source code and
handle different version of proview.

3.1 Setting up the environment
------------------------------

The first thing to do is to set up your environment properly. Add the 
following lines to .bashrc:

# Where /home/robert/x4-8-0 is replaced with wherever you unpacked the sources.
export pwre_bin="/home/robert/x4-8-0/pwr/src/tools/pwre/src/os_linux"
export pwre_dir_symbols="$pwre_bin/dir_symbols.mk"
source $pwre_bin/pwre_function
export pwre_env_db="/home/robert/pwre_new"


3.2 Creating the environment
----------------------------

Creating and handling your environment is done with the pwre-function (added
by sourcing $pwre_bin/pwre_function). See section "Cross-compiling" below
about compiling a 32-bit version of Proview on a 64-bit machine.

> pwre 

shows all possibilites with the pwre function.

Add environment named 'x460x86' (choose any name you like).

> pwre add x460x86

Source root [...] ? /home/robert/x4-8-0/pwr/src  (where /home/robert/x4-8-0 is
replaced with wherever you unpacked the sources)
Import root [] ?
Build root [...] ? /home/robert/pwr/x4-8-0/rls_dbg  (choose typically .../pwr/version/rls_dbg)
Build type [dbg] ? 
OS [linux] ? 		(linux or macos)
Hardware [x86] ? 	(x86 or x86_64)
Description  ? robert's environment  (whatever...)

list all existing environments:

> pwre list
-- Defined environments:
   x460x86
--
himBh

Initiate your new environment:

> pwre init x460x86

Now, create the build tree

> pwre create_all_modules

Finally the environment is set up and we can start the build procedure.

3.3 Building Proview
--------------------

To build Proview from scratch 

> pwre build_all_modules

This will build everything and also produces some documentation.

Otherwise Proview is divided in several modules which can be built
separately. The modules are however not independant of eachother.
The modules currently consists of:

abb, bcomp, inor, java, klocknermoeller, nmps, othermanu, profibus, remote,
siemens, ssabox, telemecanique, tlog, wb and xtt.

On top of this there is also a kernel-module under directory src on the top level.

To "move" between the different modules 

> pwre module wb    (for example)

To "move" back to kernel module just do:

> pwre module 

To build all in current module

> pwre build_all

To build parts of current module (for example lib/rt/src in kernel module)

> pwre build lib rt src	  (command syntax build 'branch' 'subbranch' ['phase'] ['flavour')

Each of the modules have their own build tree. When finished your work in a
specific module this must be merged to the common build tree. This is done
via:

> pwre merge 

Some important environment variables:

$pwre_croot    The source root
$pwre_sroot    Source root in current module
$pwre_broot    The build root
$pwr_eexe      The common exe directory in build tree
$pwr_elib      The common library directory in build tree
$pwr_eobj      The common object directory in build tree
$pwr_exe       The exe directory for current module
$pwr_lib       The library directory for current module
 
4. Start using Proview

When finished building it is time to start using Proview. This intention of
this guide is not to show you how. Instead please refer to documentation from 
the proview homepage [www.proview.se]. There are though some final things you
must set up to be able to work with Proview.

Create directory :

/usr/pwrp/adm/db

This is the place that will keeps track of your projects and volumes aswell as
the different Proview-versions you have installed. If you already have a
Proview-version installed then this directory probably exists.

Copy some files to this directory (if they do not already exist)

> cp $pwre_croot/src/tools/pkg/deb/adm/pwr_* /usr/pwrp/adm/db/.

Create a file name pwr_projectlist.dat in this directory and add the following
line to this file:

%base X4.8.0	/home/robert/pwr/X4-8-0/rls_dbg

where the path is your build-root ($pwre_broot).

Add the following two lines to your .bashrc-file:

export pwra_db="/usr/pwrp/adm/db"
source $pwra_db/pwr_setup.sh

Voila, finished !



Powerlink (optional)
--------------------
Install

libpcap-dev
cmake
cmake-qt-gui

unpack openPOWERLINK-V1.08.2.zip

create build directories for MN and CN

openPOWERLINK-V1.08.2/build
openPOWERLINK-V1.08.2/buildcn

Configure and generate MN with cmake-gui from openPOWERLINK-V1.08.2/build, and build with make
Configure and generate CN with cmake-gui from openPOWERLINK-V1.08.2/buildcn, and build with make



Building Motif version
----------------------
If someone for some unfathomable reason wants to build the old motif version
the following packages has to be installed

libx11-dev
libxt-dev
libmotif-dev
x11proto-print-dev
libxmu-dev
libxpm-dev
libxp-dev
imlib11-dev

build with 

> pwre build_all_modules motif

Start wb and motif with

> wb_motif
> rt_xtt_motif



Build on FreeBSD
----------------

Install gnome2 (pkg_add -r gnome2)

Create a link /bin/bash to /usr/local/bin/bash (ln -s /usr/local/bin/bash /bin/bash)

Set default shell of the build user to bash (/usr/local/bin/bash)

Install BerkeleyDB 4.8 (pkg_add -r db48)

Install jdk (cd /usr/port/java/jdk16; make install clean)

Install doxygen (cd /usr/devel/doxygen; make install clean)

Continue to build Proview following the instructions in section 2 or 3 above.

Increase the default value of kern.ipc.shmmax to 67108864. Add the following row to /etc/sysctl.conf

kern.ipc.shmmax=67108864



Build on Mac OS X 1.6
---------------------

Install xCode from the installation CD or download from ...

Download and install fink from www.finkproject.org.

Install gtk+2 (fink install gtk+2; fink install gtk+2-dev)

Download BerkeleyDB 4.8 from www.oracle.com/technetwork/database/berkeleydb/download

Install doxygen (fink install doxygen)

Download libiconv from http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.13.1.tar.gz

Continue to build Proview following the instructions in section 2 or 3 above.

Add the following rows to /etc/sysctl.conf

kern.sysv.symmax=167772160
kern.sysv.shmseg=16
kern.sysv.shmall=65536



Building without a display
--------------------------

Install the xserver-xorg-video-dummy package:
> apt-get install xserver-xorg-video-dummy

Start the dummy display with:
> Xorg -noreset +extension GLX +extension RANDR +extension RENDER -config src/tools/dummy_display/xorg.conf :99 &

Set the DISPLAY environment variable accordingly:
> export DISPLAY=:99

Build proview as normal, either by executing the makefile:
> make
or by configuring the build yourself, see section "3. Thorough way" above.



Cross-compiling
---------------
To compile a 32-bit version of Proview on a 64-bit system, you need to install
multiarch support and add a 32-bit architecture:

> apt-get install multiarch
> dpkg --add-architecture i386
> apt-get update

Then you need to install the libraries required to build 32-bit executables:

> apt-get install gcc-multilib g++-multilib libc6:i386 libc6-dev:i386 libc6-i386 libc6-dev-i386

You also need 32-bit versions of all the libraries required by Proview. The
easiest way to get these is to copy the /usr/lib/i386-linux-gnu folder and the
/lib/i386-linux-gnu/ folder from a 32-bit machine to your 64-bit machine. If
you try to install all libraries using "apt-get install x:i386" you will most
likely run into problems with some 32-bit packages replacing your 64-bit
packages and vice versa.

After that, you should be able to compile 32-bit versions by specifying "x86"
as hardware during "pwre add", see section "3.2 Creating the environment" above.

> pwre add proview32bit
...
Hardware [x86] ? x86
