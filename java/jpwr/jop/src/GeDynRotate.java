/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2016 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import javax.swing.*;
import jpwr.rt.*;

/**
   Ge dynamic type Rotate.
*/
public class GeDynRotate extends GeDynElem {
  String attribute;
  double x0;
  double y0;
  double factor;

  boolean attrFound;
  PwrtRefId subid;
  int p;
  int typeId;
  float oldValue;
  boolean firstScan = true;

  public GeDynRotate( GeDyn dyn, String attribute, double x0, double y0, double factor) {
    super( dyn, GeDyn.mDynType_Rotate, GeDyn.mActionType_No);
    this.attribute = attribute;
    this.x0 = x0;
    this.y0 = y0;
    this.factor = factor;
  }
  public void connect() {
    String attrName = dyn.getAttrName( attribute);
    if ( attrName.compareTo("") != 0) {
      GdhrRefObjectInfo ret = dyn.en.gdh.refObjectInfo( attrName);
      if ( ret.evenSts())
	System.out.println( "Rotate: " + attrName);
      else {
	attrFound = true;
	p = ret.id;
	subid = ret.refid;
	typeId = ret.typeId;
	dyn.x0 = x0;
	dyn.y0 = y0;
      }
    }
  }
  public void disconnect() {
    if ( attrFound)
      dyn.en.gdh.unrefObjectInfo( subid);
  }
  public void scan() {
    if ( !attrFound)
      return;

    float value0 = dyn.en.gdh.getObjectRefInfoFloat( p);
    if ( value0 != oldValue  || firstScan) {
      dyn.rotate = value0 * factor;
      oldValue = value0;
      // dyn.repaintNow = true;
      ((JComponent)dyn.comp).repaint();
    }
    if ( firstScan)
      firstScan = false;
  }
}













