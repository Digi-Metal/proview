/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2015 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jop;
import jpwr.rt.*;

public class JopCcm {

    Gdh gdh;
    Ccm ccm;
    CcmApplIfc appl;

    public JopCcm( CcmApplIfc appl, Gdh gdh, String cmd, String script) {
	this.gdh = gdh;
	this.appl = appl;

	ccm = new Ccm();

	ccm.registerFunction( new CcmFuncGetRootList("GetRootList"));
	ccm.registerFunction( new CcmFuncGetNodeObject("GetNodeObject"));
	ccm.registerFunction( new CcmFuncGetClassList("GetClassList"));
	ccm.registerFunction( new CcmFuncGetNextObject("GetNextObject"));
	ccm.registerFunction( new CcmFuncGetObjectClass("GetObjectClass"));
	ccm.registerFunction( new CcmFuncGetParent("GetParent"));
	ccm.registerFunction( new CcmFuncGetChild("GetChild"));
	ccm.registerFunction( new CcmFuncGetNextSibling("GetNextSibling"));
	ccm.registerFunction( new CcmFuncGetAttribute("GetAttribute"));
	ccm.registerFunction( new CcmFuncMessageError("MessageError"));
	ccm.registerFunction( new CcmFuncMessageInfo("MessageInfo"));
	ccm.registerFunction( new CcmFuncConfirmDialog("ConfirmDialog"));
	ccm.registerFunction( new CcmFuncCutObjectName("CutObjectName"));
	ccm.registerFunction( new CcmFuncGetCurrentObject("GetCurrentObject"));
	ccm.registerFunction( new CcmFuncGetCurrentText("GetCurrentText"));

	CcmFileReturn fret;
	if ( cmd != null)
	    fret = ccm.fileExec( cmd, false, false, 0,
				 false, null, null, null, appl);
	else if ( script != null) 
	    fret = ccm.bufferExec( script, false, false, 0,
				   null, null, null, appl);
    }

    public class CcmFuncGetRootList extends CcmSysFunc {
	public CcmFuncGetRootList( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    CcmReturn ret = new CcmReturn();
	    int sts;

	    if ( args.length != 0) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    
	    CdhrObjid reto = gdh.getRootList();
	    sts = reto.sts;
	    if ( reto.oddSts()) {
		CdhrString rets = gdh.objidToName( reto.objid, Cdh.mName_volumeStrict);
		sts = rets.sts;
		if ( rets.oddSts())
		    ret.rstring = rets.str;
	    }			
	    if ( Ccm.EVEN(sts))
		ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;	    
	    
	    return ret;
	}
    }

    public class CcmFuncGetNodeObject extends CcmSysFunc {
	public CcmFuncGetNodeObject( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    CcmReturn ret = new CcmReturn();
	    int sts;

	    if ( args.length != 0) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    
	    CdhrObjid reto = gdh.getNodeObject( 0);
	    sts = reto.sts;
	    if ( reto.oddSts()) {
		CdhrString rets = gdh.objidToName( reto.objid, Cdh.mName_volumeStrict);
		sts = rets.sts;
		if ( rets.oddSts())
		    ret.rstring = rets.str;
	    }			
	    if ( Ccm.EVEN(sts))
		ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;	    
	    
	    return ret;
	}
    }

    public class CcmFuncGetClassList extends CcmSysFunc {
	public CcmFuncGetClassList( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    CcmReturn ret = new CcmReturn();
	    int sts;

	    if ( args.length != 1) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    CdhrClassId retc = gdh.classNameToId( args[0].value_string);
	    sts = retc.sts;
	    if ( retc.oddSts()) {
		CdhrObjid reto = gdh.getClassList( retc.classId);
		sts = reto.sts;
		if ( reto.oddSts()) {
		    CdhrString rets = gdh.objidToName( reto.objid, Cdh.mName_volumeStrict);
		    sts = rets.sts;
		    if ( rets.oddSts())
			ret.rstring = rets.str;
		}			
	    }
	    if ( Ccm.EVEN(sts))
		ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;	    
	    
	    return ret;
	}
    }

    public class CcmFuncGetNextObject extends CcmSysFunc {
	public CcmFuncGetNextObject( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 1) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    CdhrObjid reto = gdh.nameToObjid( args[0].value_string);
	    sts = reto.sts;
	    if ( reto.oddSts()) {
		reto = gdh.getNextObject( reto.objid);
		sts = reto.sts;
		if ( reto.oddSts()) {
		    CdhrString rets = gdh.objidToName( reto.objid, Cdh.mName_volumeStrict);
		    sts = rets.sts;
		    if ( rets.oddSts())
			ret.rstring = rets.str;
		}			
	    }
	    if ( Ccm.EVEN(sts))
		ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;
	    
	    return ret;
	}
    }

    public class CcmFuncGetObjectClass extends CcmSysFunc {
	public CcmFuncGetObjectClass( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 1) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    CdhrObjid reto;
	    CdhrClassId retc = null;
	    reto = gdh.nameToObjid( args[0].value_string);
	    sts = reto.sts;
	    if ( Ccm.ODD(sts)) {
		retc = gdh.getObjectClass( reto.objid);
		sts = retc.sts;
	    }
	    if ( Ccm.ODD(sts)) {
		reto = gdh.classIdToObjid( retc.classId);
		sts = reto.sts;
	    }
	    if ( Ccm.ODD(sts)) {
		CdhrString rets = gdh.objidToName( reto.objid, Cdh.mName_object);
		sts = rets.sts;
		if ( rets.oddSts())
		    ret.rstring = rets.str;
	    }			
	    if ( Ccm.EVEN(sts))
		ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;
	    
	    return ret;
	}
    }

    public class CcmFuncGetParent extends CcmSysFunc {
	public CcmFuncGetParent( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 1) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    CdhrObjid reto;
	    reto = gdh.nameToObjid( args[0].value_string);
	    sts = reto.sts;
	    if ( Ccm.ODD(sts)) {
		reto = gdh.getParent( reto.objid);
		sts = reto.sts;
	    }
	    if ( Ccm.ODD(sts)) {
		CdhrString rets = gdh.objidToName( reto.objid, Cdh.mName_volumeStrict);
		sts = rets.sts;
		if ( rets.oddSts())
		    ret.rstring = rets.str;
	    }			
	    if ( Ccm.EVEN(sts))
		ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;
	    
	    return ret;
	}
    }

    public class CcmFuncGetChild extends CcmSysFunc {
	public CcmFuncGetChild( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 1) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    CdhrObjid reto;
	    reto = gdh.nameToObjid( args[0].value_string);
	    sts = reto.sts;
	    if ( Ccm.ODD(sts)) {
		reto = gdh.getChild( reto.objid);
		sts = reto.sts;
	    }
	    if ( Ccm.ODD(sts)) {
		CdhrString rets = gdh.objidToName( reto.objid, Cdh.mName_volumeStrict);
		sts = rets.sts;
		if ( rets.oddSts())
		    ret.rstring = rets.str;
	    }			
	    if ( Ccm.EVEN(sts))
		ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;
	    
	    return ret;
	}
    }

    public class CcmFuncGetNextSibling extends CcmSysFunc {
	public CcmFuncGetNextSibling( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 1) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    CdhrObjid reto;
	    reto = gdh.nameToObjid( args[0].value_string);
	    sts = reto.sts;
	    if ( Ccm.ODD(sts)) {
		reto = gdh.getNextSibling( reto.objid);
		sts = reto.sts;
	    }
	    if ( Ccm.ODD(sts)) {
		CdhrString rets = gdh.objidToName( reto.objid, Cdh.mName_volumeStrict);
		sts = rets.sts;
		if ( rets.oddSts())
		    ret.rstring = rets.str;
	    }			
	    if ( Ccm.EVEN(sts))
		ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;
	    
	    return ret;
	}
    }

    public class CcmFuncGetAttribute extends CcmSysFunc {
	public CcmFuncGetAttribute( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( !(args.length == 1 || args.length == 2)) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }
	    if ( args.length == 2 && args[1].value_decl != Ccm.K_DECL_INT) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    
	    GdhrGetAttributeChar retc = gdh.getAttributeChar( args[0].value_string);
	    sts = retc.sts;
	    if ( Ccm.EVEN(sts)) {
		if ( args.length == 2) {
		    args[1].value_int = sts;
		    args[1].value_returned = true;
		    args[1].var_decl = args[1].value_decl;
		}
		ret.decl = Ccm.K_DECL_UNKNOWN;
		return ret;
	    }
	    
	    switch ( retc.typeId) {
	    case Pwr.eType_Boolean: {
		CdhrBoolean retb = gdh.getObjectInfoBoolean( args[0].value_string);
		sts = retb.sts;
		if ( Ccm.EVEN(sts))
		    ret.rint = 0;
		else 
		    ret.rint = retb.value ? 1 : 0;
		ret.decl = Ccm.K_DECL_INT;
		break;
	    }
	    case Pwr.eType_Int8:
	    case Pwr.eType_Int16:
	    case Pwr.eType_Int32:
	    case Pwr.eType_Int64:
	    case Pwr.eType_UInt8:
	    case Pwr.eType_UInt16:
	    case Pwr.eType_UInt32:
	    case Pwr.eType_UInt64:
	    case Pwr.eType_Enum:
	    case Pwr.eType_Mask:
	    case Pwr.eType_Status:
	    case Pwr.eType_NetStatus: {
		CdhrInt reti = gdh.getObjectInfoInt( args[0].value_string);
		sts = reti.sts;
		if ( Ccm.EVEN(sts))
		    ret.rint = 0;
		else 
		    ret.rint = reti.value;
		ret.decl = Ccm.K_DECL_INT;
		break;
	    }
	    case Pwr.eType_Float32:
	    case Pwr.eType_Float64: {
		CdhrFloat retf = gdh.getObjectInfoFloat( args[0].value_string);
		sts = retf.sts;
		if ( Ccm.EVEN(sts))
		    ret.rfloat = 0;
		else 
		    ret.rfloat = retf.value;
		ret.decl = Ccm.K_DECL_FLOAT;
		break;
	    }
	    case Pwr.eType_Objid:
	    case Pwr.eType_AttrRef:
	    case Pwr.eType_ObjectIx:
	    case Pwr.eType_ClassId:
	    case Pwr.eType_TypeId:
	    case Pwr.eType_VolumeId:
	    case Pwr.eType_RefId:
	    case Pwr.eType_Time:
	    case Pwr.eType_DeltaTime:
	    case Pwr.eType_Char:
	    case Pwr.eType_String: {
		CdhrString rets = gdh.getObjectInfoString( args[0].value_string);
		sts = rets.sts;
		if ( Ccm.EVEN(sts))
		    ret.rstring = "";
		else 
		    ret.rstring = rets.str;
		ret.decl = Ccm.K_DECL_STRING;
		break;
	    }
	    default: {
		ret.decl = Ccm.K_DECL_UNKNOWN;
		sts = 0;
	    }
	    }
	    if ( Ccm.EVEN(sts)) {
		if ( args.length == 2) {
		    args[1].value_int = sts;
		    args[1].value_returned = true;
		    args[1].var_decl = args[1].value_decl;
		}
	    }
	    return ret;
	}
    }

    public class CcmFuncMessageError extends CcmSysFunc {
	public CcmFuncMessageError( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 1) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    appl.errorMessage( args[0].value_string, 0);

	    ret.decl = Ccm.K_DECL_INT;	    
	    ret.rint = 1;
	    return ret;
	}
    }

    public class CcmFuncMessageInfo extends CcmSysFunc {
	public CcmFuncMessageInfo( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 1) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    appl.errorMessage( args[0].value_string, 'I');

	    ret.decl = Ccm.K_DECL_INT;	    
	    ret.rint = 1;
	    return ret;
	}
    }

    public class CcmFuncConfirmDialog extends CcmSysFunc {
	public CcmFuncConfirmDialog( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 2) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }
	    if ( args[1].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    sts = appl.confirmDialog( args[0].value_string, args[1].value_string);

	    ret.decl = Ccm.K_DECL_INT;	    
	    ret.rint = sts;
	    return ret;
	}
    }

    public class CcmFuncCutObjectName extends CcmSysFunc {
	public CcmFuncCutObjectName( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 2) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    if ( args[0].value_decl != Ccm.K_DECL_STRING) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }
	    if ( args[1].value_decl != Ccm.K_DECL_INT) {
		ret.sts = Ccm.CCM__VARTYPE;
		return ret;
	    }

	    int idx = args[0].value_string.length() - 1;
	    if ( idx == -1) {
		ret.rstring = args[0].value_string;
	    }
	    else {
		for ( int i = 0; i < args[1].value_int; i++) {
		    idx = args[0].value_string.lastIndexOf('-', idx-1);
		    if ( idx == - 1 || idx == 0)
			break;
		}
		if ( idx == -1)
		    ret.rstring = args[0].value_string;
		else
		    ret.rstring = args[0].value_string.substring( idx + 1);
	    }
	    ret.decl = Ccm.K_DECL_STRING;	    
	    return ret;
	}
    }

    public class CcmFuncGetCurrentObject extends CcmSysFunc {
	public CcmFuncGetCurrentObject( String name) {
	    super(name);
	}
	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 0) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    // NYI
	    ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;	    
	    return ret;
	}
    }
    public class CcmFuncGetCurrentText extends CcmSysFunc {
	public CcmFuncGetCurrentText( String name) {
	    super(name);
	}

	public CcmReturn func( CcmFileCtx filectx, CcmArg[] args) {
	    int sts;
	    CcmReturn ret = new CcmReturn();

	    if ( args.length != 0) {
		ret.sts = Ccm.CCM__ARGMISM;
		return ret;
	    }
	    // NYI
	    ret.rstring = "";
	    ret.decl = Ccm.K_DECL_STRING;	    
	    return ret;
	}
    }
}
