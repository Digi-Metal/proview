/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2012 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class Dyn {

    public static final int DYN__NO_PROPAGATE			= 20001;
    public static final int eValueInput_Success			= 0;
    public static final int eValueInput_Error			= 1;
    public static final int eValueInput_SyntaxError	       	= 2;
    public static final int eValueInput_MinValueExceeded       	= 3;
    public static final int eValueInput_MaxValueExceeded       	= 4;

    public static final int mDynType1_No			= 0;
    public static final int mDynType1_Inherit      		= 1 << 0;
    public static final int mDynType1_Tone			= 1 << 1;
    public static final int mDynType1_DigLowColor		= 1 << 2;
    public static final int mDynType1_DigColor      		= 1 << 3;
    public static final int mDynType1_DigError      		= 1 << 4;
    public static final int mDynType1_DigWarning		= 1 << 5;
    public static final int mDynType1_DigFlash      		= 1 << 6;
    public static final int mDynType1_Invisible 		= 1 << 7;
    public static final int mDynType1_DigBorder     		= 1 << 8;
    public static final int mDynType1_DigText        		= 1 << 9;
    public static final int mDynType1_Value			= 1 << 10;
    public static final int mDynType1_AnalogColor		= 1 << 11;
    public static final int mDynType1_Rotate			= 1 << 12;
    public static final int mDynType1_Move			= 1 << 13;
    public static final int mDynType1_AnalogShift		= 1 << 14;
    public static final int mDynType1_DigShift      		= 1 << 15;
    public static final int mDynType1_Animation     		= 1 << 16;
    public static final int mDynType1_Bar			= 1 << 17;
    public static final int mDynType1_Trend			= 1 << 18;
    public static final int mDynType1_SliderBackground 		= 1 << 19;
    public static final int mDynType1_Video			= 1 << 20;
    public static final int mDynType1_FillLevel			= 1 << 21;
    public static final int mDynType1_FastCurve			= 1 << 22;
    public static final int mDynType1_AnalogText	       	= 1 << 23;
    public static final int mDynType1_Table			= 1 << 24;
    public static final int mDynType1_StatusColor   		= 1 << 25;
    public static final int mDynType1_HostObject    		= 1 << 26;
    public static final int mDynType1_DigSound    		= 1 << 27;
    public static final int mDynType1_XY_Curve    		= 1 << 28;
    public static final int mDynType1_DigCommand    		= 1 << 29;
    public static final int mDynType1_Pie	    		= 1 << 30;
    public static final int mDynType1_BarChart      		= 1 << 31;

    public static final int mDynType2_No			= 0;
    public static final int mDynType2_Axis			= 1 << 0;

    public static final int mActionType1_No			= 0;
    public static final int mActionType1_Inherit		= 1 << 0;
    public static final int mActionType1_PopupMenu   		= 1 << 1;
    public static final int mActionType1_SetDig     		= 1 << 2;
    public static final int mActionType1_ResetDig		= 1 << 3;
    public static final int mActionType1_ToggleDig   		= 1 << 4;
    public static final int mActionType1_StoDig     		= 1 << 5;
    public static final int mActionType1_Command		= 1 << 6;
    public static final int mActionType1_CommandDoubleClick 	= 1 << 7;
    public static final int mActionType1_Confirm		= 1 << 8;
    public static final int mActionType1_IncrAnalog		= 1 << 9;
    public static final int mActionType1_RadioButton		= 1 << 10;
    public static final int mActionType1_Slider     		= 1 << 11;
    public static final int mActionType1_ValueInput  		= 1 << 12;
    public static final int mActionType1_TipText    		= 1 << 13;
    public static final int mActionType1_Help       		= 1 << 14;
    public static final int mActionType1_OpenGraph		= 1 << 15;
    public static final int mActionType1_OpenURL		= 1 << 16;
    public static final int mActionType1_InputFocus		= 1 << 17;
    public static final int mActionType1_CloseGraph		= 1 << 18;
    public static final int mActionType1_PulldownMenu 		= 1 << 19;
    public static final int mActionType1_OptionMenu 		= 1 << 20;
    public static final int mActionType1_SetValue 		= 1 << 21;

    public static final int mActionType2_No			= 0;
    
    public static final int eSave_Dyn		       		= 1;
    public static final int eSave_DigLowColor	       		= 2;
    public static final int eSave_DigColor	       		= 3;
    public static final int eSave_DigError	       		= 7;
    public static final int eSave_DigWarning	       		= 8;
    public static final int eSave_Invisible	       		= 9;
    public static final int eSave_DigBorder	       		= 10;
    public static final int eSave_DigText	       		= 11;
    public static final int eSave_Value				= 12;
    public static final int eSave_ValueInput	       		= 13;
    public static final int eSave_Rotate	       		= 14;
    public static final int eSave_Move		       		= 15;
    public static final int eSave_AnalogShift	       		= 17;
    public static final int eSave_DigShift	       		= 18;
    public static final int eSave_Animation	       		= 19;
    public static final int eSave_Bar		       		= 22;
    public static final int eSave_Trend				= 23;
    public static final int eSave_SliderBackground     		= 24;
    public static final int eSave_Video				= 25;
    public static final int eSave_DigFlash	       		= 26;
    public static final int eSave_FillLevel	       		= 27;
    public static final int eSave_FastCurve   			= 28;
    public static final int eSave_AnalogText	    		= 29;
    public static final int eSave_Table	       			= 30;
    public static final int eSave_StatusColor         		= 31;
    public static final int eSave_HostObject         		= 32;
    public static final int eSave_DigSound	      		= 33;
    public static final int eSave_XY_Curve	      		= 34;
    public static final int eSave_DigCommand	       		= 35;
    public static final int eSave_Pie	             		= 36;
    public static final int eSave_BarChart	       		= 37;
    public static final int eSave_Axis	             		= 38;
    public static final int eSave_PopupMenu	       		= 50;
    public static final int eSave_SetDig	       		= 51;
    public static final int eSave_ResetDig	       		= 52;
    public static final int eSave_ToggleDig	       		= 53;
    public static final int eSave_StoDig	       		= 54;
    public static final int eSave_Command	       		= 55;
    public static final int eSave_CommandDC	       		= 56;
    public static final int eSave_Confirm	       		= 57;
    public static final int eSave_IncrAnalog	       		= 58;
    public static final int eSave_RadioButton	       		= 59;
    public static final int eSave_Slider	       		= 60;
    public static final int eSave_AnalogColor	       		= 61;
    public static final int eSave_TipText	       		= 62;
    public static final int eSave_Help		       		= 63;
    public static final int eSave_OpenGraph	       		= 64;
    public static final int eSave_OpenURL	       		= 65;
    public static final int eSave_InputFocus	       		= 66;
    public static final int eSave_CloseGraph	       		= 67;
    public static final int eSave_PulldownMenu         		= 68;
    public static final int eSave_OptionMenu           		= 69;
    public static final int eSave_SetValue	       		= 70;
    public static final int eSave_End		       		= 99;
    public static final int eSave_Dyn_dyn_type1	       		= 100;
    public static final int eSave_Dyn_action_type1      	= 101;
    public static final int eSave_Dyn_access	       		= 102;
    public static final int eSave_Dyn_cycle	       		= 103;
    public static final int eSave_Dyn_ref_object      		= 104;
    public static final int eSave_Dyn_dyn_type2	       		= 105;
    public static final int eSave_Dyn_action_type2     		= 106;
    public static final int eSave_DigLowColor_attribute		= 200;
    public static final int eSave_DigLowColor_color    		= 201;
    public static final int eSave_DigColor_attribute   		= 300;
    public static final int eSave_DigColor_color       		= 301;
    public static final int eSave_DigColor_instance    		= 302;
    public static final int eSave_DigColor_instance_mask 	= 303;
    public static final int eSave_DigError_attribute   		= 700;
    public static final int eSave_DigWarning_attribute  	= 800;
    public static final int eSave_Invisible_attribute 		= 900;
    public static final int eSave_Invisible_dimmed     		= 901;
    public static final int eSave_Invisible_instance   		= 902;
    public static final int eSave_Invisible_instance_mask 	= 903;
    public static final int eSave_DigBorder_attribute  		= 1000;
    public static final int eSave_DigBorder_color      		= 1001;
    public static final int eSave_DigText_attribute    		= 1100;
    public static final int eSave_DigText_low_text     		= 1101;
    public static final int eSave_DigText_instance     		= 1102;
    public static final int eSave_DigText_instance_mask 	= 1103;
    public static final int eSave_Value_attribute      		= 1200;
    public static final int eSave_Value_format	       		= 1201;
    public static final int eSave_Value_instance      		= 1202;
    public static final int eSave_Value_instance_mask 		= 1203;
    public static final int eSave_Value_zero_blank     		= 1204;
    public static final int eSave_ValueInput_attribute      	= 1300;
    public static final int eSave_ValueInput_format		= 1301;
    public static final int eSave_ValueInput_min_value      	= 1302;
    public static final int eSave_ValueInput_max_value      	= 1303;
    public static final int eSave_ValueInput_clear      	= 1304;
    public static final int eSave_ValueInput_popup      	= 1305;
    public static final int eSave_ValueInput_unselect      	= 1306;
    public static final int eSave_ValueInput_minvalue_attr   	= 1307;
    public static final int eSave_ValueInput_maxvalue_attr   	= 1308;
    public static final int eSave_ValueInput_escape_store    	= 1309;
    public static final int eSave_Rotate_attribute		= 1400;
    public static final int eSave_Rotate_x0			= 1401;
    public static final int eSave_Rotate_y0			= 1402;
    public static final int eSave_Rotate_factor             	= 1403;
    public static final int eSave_Move_move_x_attribute     	= 1500;
    public static final int eSave_Move_move_y_attribute    	= 1501;
    public static final int eSave_Move_x_offset	       		= 1502;
    public static final int eSave_Move_y_offset	        	= 1503;
    public static final int eSave_Move_x_factor	       		= 1504;
    public static final int eSave_Move_scale_x_attribute     	= 1505;
    public static final int eSave_Move_scale_y_attribute    	= 1506;
    public static final int eSave_Move_scale_x_factor      	= 1507;
    public static final int eSave_Move_scale_type      		= 1508;
    public static final int eSave_Move_y_factor	       		= 1509;
    public static final int eSave_Move_scale_y_factor      	= 1510;
    public static final int eSave_AnalogShift_attribute     	= 1700;
    public static final int eSave_DigShift_attribute		= 1800;
    public static final int eSave_Animation_attribute       	= 1900;
    public static final int eSave_Animation_sequence		= 1901;
    public static final int eSave_Bar_attribute	   		= 2200;
    public static final int eSave_Bar_minvalue_attr	   	= 2201;
    public static final int eSave_Bar_maxvalue_attr	   	= 2202;
    public static final int eSave_Trend_attribute1	   	= 2300;
    public static final int eSave_Trend_attribute2	   	= 2301;
    public static final int eSave_Trend_minvalue_attr1     	= 2302;
    public static final int eSave_Trend_maxvalue_attr1     	= 2303;
    public static final int eSave_Trend_minvalue_attr2      	= 2304;
    public static final int eSave_Trend_maxvalue_attr2      	= 2305;
    public static final int eSave_Trend_hold_attr	      	= 2306;
    public static final int eSave_DigFlash_attribute		= 2600;
    public static final int eSave_DigFlash_color		= 2601;
    public static final int eSave_DigFlash_color2		= 2602;
    public static final int eSave_FillLevel_attribute       	= 2700;
    public static final int eSave_FillLevel_color		= 2701;
    public static final int eSave_FillLevel_direction       	= 2702;
    public static final int eSave_FillLevel_min_value       	= 2703;
    public static final int eSave_FillLevel_max_value       	= 2704;
    public static final int eSave_FillLevel_minvalue_attr    	= 2705;
    public static final int eSave_FillLevel_maxvalue_attr    	= 2706;
    public static final int eSave_FastCurve_fast_object   	= 2800;
    public static final int eSave_FastCurve_curve_index1   	= 2801;
    public static final int eSave_FastCurve_curve_index2   	= 2802;
    public static final int eSave_AnalogText_super   		= 2900;
    public static final int eSave_Table_attribute1	   	= 3000;
    public static final int eSave_Table_format1	   		= 3001;
    public static final int eSave_Table_sel_attribute1      	= 3002;
    public static final int eSave_Table_attribute2	   	= 3003;
    public static final int eSave_Table_format2	   		= 3004;
    public static final int eSave_Table_sel_attribute2      	= 3005;
    public static final int eSave_Table_attribute3	   	= 3006;
    public static final int eSave_Table_format3	   		= 3007;
    public static final int eSave_Table_sel_attribute3      	= 3008;
    public static final int eSave_Table_attribute4	   	= 3009;
    public static final int eSave_Table_format4	   		= 3010;
    public static final int eSave_Table_sel_attribute4      	= 3011;
    public static final int eSave_Table_attribute5	   	= 3012;
    public static final int eSave_Table_format5	   		= 3013;
    public static final int eSave_Table_sel_attribute5      	= 3014;
    public static final int eSave_Table_attribute6	   	= 3015;
    public static final int eSave_Table_format6	   		= 3016;
    public static final int eSave_Table_sel_attribute6      	= 3017;
    public static final int eSave_Table_attribute7	   	= 3018;
    public static final int eSave_Table_format7	   		= 3019;
    public static final int eSave_Table_sel_attribute7      	= 3020;
    public static final int eSave_Table_attribute8	   	= 3021;
    public static final int eSave_Table_format8	   		= 3022;
    public static final int eSave_Table_sel_attribute8      	= 3023;
    public static final int eSave_Table_attribute9	   	= 3024;
    public static final int eSave_Table_format9	   		= 3025;
    public static final int eSave_Table_sel_attribute9      	= 3026;
    public static final int eSave_Table_attribute10	   	= 3027;
    public static final int eSave_Table_format10	   	= 3028;
    public static final int eSave_Table_sel_attribute10     	= 3029;
    public static final int eSave_Table_attribute11	   	= 3030;
    public static final int eSave_Table_format11	   	= 3031;
    public static final int eSave_Table_sel_attribute11     	= 3032;
    public static final int eSave_Table_attribute12	   	= 3033;
    public static final int eSave_Table_format12	   	= 3034;
    public static final int eSave_Table_sel_attribute12     	= 3035;
    public static final int eSave_StatusColor_attribute     	= 3100;
    public static final int eSave_StatusColor_nostatus_color 	= 3101;
    public static final int eSave_HostObject_object     	= 3200;
    public static final int eSave_DigSound_attribute     	= 3300;
    public static final int eSave_DigSound_soundobject     	= 3301;
    public static final int eSave_DigSound_level     		= 3302;
    public static final int eSave_DigSound_interval     	= 3303;
    public static final int eSave_DigSound_instance		= 3304;
    public static final int eSave_DigSound_instance_mask    	= 3305;
    public static final int eSave_XY_Curve_x_attr      		= 3400;
    public static final int eSave_XY_Curve_y_attr      		= 3401;
    public static final int eSave_XY_Curve_y_min_value 		= 3402;
    public static final int eSave_XY_Curve_y_max_value 		= 3403;
    public static final int eSave_XY_Curve_x_min_value 		= 3404;
    public static final int eSave_XY_Curve_x_max_value 		= 3405;
    public static final int eSave_XY_Curve_y_minvalue_attr 	= 3406;
    public static final int eSave_XY_Curve_y_maxvalue_attr 	= 3407;
    public static final int eSave_XY_Curve_x_minvalue_attr 	= 3408;
    public static final int eSave_XY_Curve_x_maxvalue_attr 	= 3409;
    public static final int eSave_XY_Curve_noofpoints 		= 3410;
    public static final int eSave_XY_Curve_noofpoints_attr 	= 3411;
    public static final int eSave_XY_Curve_update_attr 		= 3412;
    public static final int eSave_XY_Curve_datatype 		= 3413;
    public static final int eSave_XY_Curve_instance		= 3414;
    public static final int eSave_XY_Curve_instance_mask    	= 3415;
    public static final int eSave_XY_Curve_curve_color    	= 3416;
    public static final int eSave_XY_Curve_fill_color    	= 3417;
    public static final int eSave_DigCommand_attribute      	= 3500;
    public static final int eSave_DigCommand_command      	= 3501;
    public static final int eSave_DigCommand_instance        	= 3502;
    public static final int eSave_DigCommand_instance_mask 	= 3503;
    public static final int eSave_Pie_attribute1      		= 3600;
    public static final int eSave_Pie_attribute2      		= 3601;
    public static final int eSave_Pie_attribute3      		= 3602;
    public static final int eSave_Pie_attribute4      		= 3603;
    public static final int eSave_Pie_attribute5      		= 3604;
    public static final int eSave_Pie_attribute6      		= 3605;
    public static final int eSave_Pie_attribute7      		= 3606;
    public static final int eSave_Pie_attribute8      		= 3607;
    public static final int eSave_Pie_attribute9      		= 3608;
    public static final int eSave_Pie_attribute10      		= 3609;
    public static final int eSave_Pie_attribute11      		= 3610;
    public static final int eSave_Pie_attribute12      		= 3611;
    public static final int eSave_Pie_fix_range      		= 3612;
    public static final int eSave_BarChart_attribute1      	= 3700;
    public static final int eSave_BarChart_attribute2      	= 3701;
    public static final int eSave_BarChart_attribute3      	= 3702;
    public static final int eSave_BarChart_attribute4      	= 3703;
    public static final int eSave_BarChart_attribute5      	= 3704;
    public static final int eSave_BarChart_attribute6      	= 3705;
    public static final int eSave_BarChart_attribute7      	= 3706;
    public static final int eSave_BarChart_attribute8      	= 3707;
    public static final int eSave_BarChart_attribute9      	= 3708;
    public static final int eSave_BarChart_attribute10      	= 3709;
    public static final int eSave_BarChart_attribute11      	= 3710;
    public static final int eSave_BarChart_attribute12      	= 3711;
    public static final int eSave_BarChart_fix_range      	= 3712;
    public static final int eSave_Axis_minvalue_attr      	= 3800;
    public static final int eSave_Axis_maxvalue_attr      	= 3801;
    public static final int eSave_PopupMenu_ref_object      	= 5000;
    public static final int eSave_SetDig_attribute		= 5100;
    public static final int eSave_SetDig_instance		= 5101;
    public static final int eSave_SetDig_instance_mask      	= 5102;
    public static final int eSave_ResetDig_attribute		= 5200;
    public static final int eSave_ResetDig_instance		= 5201;
    public static final int eSave_ResetDig_instance_mask    	= 5202;
    public static final int eSave_ToggleDig_attribute       	= 5300;
    public static final int eSave_StoDig_attribute		= 5400;
    public static final int eSave_Command_command		= 5500;
    public static final int eSave_CommandDC_command		= 5600;
    public static final int eSave_Confirm_text	       		= 5700;
    public static final int eSave_IncrAnalog_attribute      	= 5800;
    public static final int eSave_IncrAnalog_increment      	= 5801;
    public static final int eSave_IncrAnalog_min_value      	= 5802;
    public static final int eSave_IncrAnalog_max_value      	= 5803;
    public static final int eSave_RadioButton_attribute     	= 5900;
    public static final int eSave_Slider_attribute	       	= 6000;
    public static final int eSave_Slider_minvalue_attr     	= 6001;
    public static final int eSave_Slider_maxvalue_attr     	= 6002;
    public static final int eSave_Slider_insensitive_attr    	= 6003;
    public static final int eSave_AnalogColor_attribute      	= 6100;
    public static final int eSave_AnalogColor_limit        	= 6101;
    public static final int eSave_AnalogColor_limit_type     	= 6102;
    public static final int eSave_AnalogColor_color       	= 6103;
    public static final int eSave_AnalogColor_instance      	= 6104;
    public static final int eSave_AnalogColor_instance_mask 	= 6105;
    public static final int eSave_TipText_text              	= 6200;
    public static final int eSave_Help_topic        		= 6300;
    public static final int eSave_Help_bookmark             	= 6400;
    public static final int eSave_OpenGraph_graph_object    	= 6401;
    public static final int eSave_OpenURL_url               	= 6500;
    public static final int eSave_InputFocus_initial_focus	= 6600;
    public static final int eSave_InputFocus_next_horizontal	= 6601;
    public static final int eSave_InputFocus_next_vertical	= 6602;
    public static final int eSave_InputFocus_next_tab		= 6603;
    public static final int eSave_PulldownMenu_button_mask	= 6800;
    public static final int eSave_PulldownMenu_items_text0	= 6801;
    public static final int eSave_PulldownMenu_items_text1	= 6802;
    public static final int eSave_PulldownMenu_items_text2	= 6803;
    public static final int eSave_PulldownMenu_items_text3	= 6804;
    public static final int eSave_PulldownMenu_items_text4	= 6805;
    public static final int eSave_PulldownMenu_items_text5	= 6806;
    public static final int eSave_PulldownMenu_items_text6	= 6807;
    public static final int eSave_PulldownMenu_items_text7	= 6808;
    public static final int eSave_PulldownMenu_items_text8	= 6809;
    public static final int eSave_PulldownMenu_items_text9	= 6810;
    public static final int eSave_PulldownMenu_items_text10	= 6811;
    public static final int eSave_PulldownMenu_items_text11	= 6812;
    public static final int eSave_PulldownMenu_items_text12	= 6813;
    public static final int eSave_PulldownMenu_items_text13	= 6814;
    public static final int eSave_PulldownMenu_items_text14	= 6815;
    public static final int eSave_PulldownMenu_items_text15	= 6816;
    public static final int eSave_PulldownMenu_items_text16	= 6817;
    public static final int eSave_PulldownMenu_items_text17	= 6818;
    public static final int eSave_PulldownMenu_items_text18	= 6819;
    public static final int eSave_PulldownMenu_items_text19	= 6820;
    public static final int eSave_PulldownMenu_items_text20	= 6821;
    public static final int eSave_PulldownMenu_items_text21	= 6822;
    public static final int eSave_PulldownMenu_items_text22	= 6823;
    public static final int eSave_PulldownMenu_items_text23	= 6824;
    public static final int eSave_PulldownMenu_items_text24	= 6825;
    public static final int eSave_PulldownMenu_items_text25	= 6826;
    public static final int eSave_PulldownMenu_items_text26	= 6827;
    public static final int eSave_PulldownMenu_items_text27	= 6828;
    public static final int eSave_PulldownMenu_items_text28	= 6829;
    public static final int eSave_PulldownMenu_items_text29	= 6830;
    public static final int eSave_PulldownMenu_items_text30	= 6831;
    public static final int eSave_PulldownMenu_items_text31	= 6832;
    public static final int eSave_PulldownMenu_items_dyn0	= 6833;
    public static final int eSave_PulldownMenu_items_dyn1	= 6834;
    public static final int eSave_PulldownMenu_items_dyn2	= 6835;
    public static final int eSave_PulldownMenu_items_dyn3	= 6836;
    public static final int eSave_PulldownMenu_items_dyn4	= 6837;
    public static final int eSave_PulldownMenu_items_dyn5	= 6838;
    public static final int eSave_PulldownMenu_items_dyn6	= 6839;
    public static final int eSave_PulldownMenu_items_dyn7	= 6840;
    public static final int eSave_PulldownMenu_items_dyn8	= 6841;
    public static final int eSave_PulldownMenu_items_dyn9	= 6842;
    public static final int eSave_PulldownMenu_items_dyn10	= 6843;
    public static final int eSave_PulldownMenu_items_dyn11	= 6844;
    public static final int eSave_PulldownMenu_items_dyn12	= 6845;
    public static final int eSave_PulldownMenu_items_dyn13	= 6846;
    public static final int eSave_PulldownMenu_items_dyn14	= 6847;
    public static final int eSave_PulldownMenu_items_dyn15	= 6848;
    public static final int eSave_PulldownMenu_items_dyn16	= 6849;
    public static final int eSave_PulldownMenu_items_dyn17	= 6850;
    public static final int eSave_PulldownMenu_items_dyn18	= 6851;
    public static final int eSave_PulldownMenu_items_dyn19	= 6852;
    public static final int eSave_PulldownMenu_items_dyn20	= 6853;
    public static final int eSave_PulldownMenu_items_dyn21	= 6854;
    public static final int eSave_PulldownMenu_items_dyn22	= 6855;
    public static final int eSave_PulldownMenu_items_dyn23	= 6856;
    public static final int eSave_PulldownMenu_items_dyn24	= 6857;
    public static final int eSave_PulldownMenu_items_dyn25	= 6858;
    public static final int eSave_PulldownMenu_items_dyn26	= 6859;
    public static final int eSave_PulldownMenu_items_dyn27	= 6860;
    public static final int eSave_PulldownMenu_items_dyn28	= 6861;
    public static final int eSave_PulldownMenu_items_dyn29	= 6862;
    public static final int eSave_PulldownMenu_items_dyn30	= 6863;
    public static final int eSave_PulldownMenu_items_dyn31	= 6864;
    public static final int eSave_OptionMenu_button_mask	= 6900;
    public static final int eSave_OptionMenu_items_text0	= 6901;
    public static final int eSave_OptionMenu_items_text1	= 6902;
    public static final int eSave_OptionMenu_items_text2	= 6903;
    public static final int eSave_OptionMenu_items_text3	= 6904;
    public static final int eSave_OptionMenu_items_text4	= 6905;
    public static final int eSave_OptionMenu_items_text5	= 6906;
    public static final int eSave_OptionMenu_items_text6	= 6907;
    public static final int eSave_OptionMenu_items_text7	= 6908;
    public static final int eSave_OptionMenu_items_text8	= 6909;
    public static final int eSave_OptionMenu_items_text9	= 6910;
    public static final int eSave_OptionMenu_items_text10	= 6911;
    public static final int eSave_OptionMenu_items_text11	= 6912;
    public static final int eSave_OptionMenu_items_text12	= 6913;
    public static final int eSave_OptionMenu_items_text13	= 6914;
    public static final int eSave_OptionMenu_items_text14	= 6915;
    public static final int eSave_OptionMenu_items_text15	= 6916;
    public static final int eSave_OptionMenu_items_text16	= 6917;
    public static final int eSave_OptionMenu_items_text17	= 6918;
    public static final int eSave_OptionMenu_items_text18	= 6919;
    public static final int eSave_OptionMenu_items_text19	= 6920;
    public static final int eSave_OptionMenu_items_text20	= 6921;
    public static final int eSave_OptionMenu_items_text21	= 6922;
    public static final int eSave_OptionMenu_items_text22	= 6923;
    public static final int eSave_OptionMenu_items_text23	= 6924;
    public static final int eSave_OptionMenu_items_text24	= 6925;
    public static final int eSave_OptionMenu_items_text25	= 6926;
    public static final int eSave_OptionMenu_items_text26	= 6927;
    public static final int eSave_OptionMenu_items_text27	= 6928;
    public static final int eSave_OptionMenu_items_text28	= 6929;
    public static final int eSave_OptionMenu_items_text29	= 6930;
    public static final int eSave_OptionMenu_items_text30	= 6931;
    public static final int eSave_OptionMenu_items_text31	= 6932;
    public static final int eSave_OptionMenu_items_enum0	= 6933;
    public static final int eSave_OptionMenu_items_enum1	= 6934;
    public static final int eSave_OptionMenu_items_enum2	= 6935;
    public static final int eSave_OptionMenu_items_enum3	= 6936;
    public static final int eSave_OptionMenu_items_enum4	= 6937;
    public static final int eSave_OptionMenu_items_enum5	= 6938;
    public static final int eSave_OptionMenu_items_enum6	= 6939;
    public static final int eSave_OptionMenu_items_enum7	= 6940;
    public static final int eSave_OptionMenu_items_enum8	= 6941;
    public static final int eSave_OptionMenu_items_enum9	= 6942;
    public static final int eSave_OptionMenu_items_enum10	= 6943;
    public static final int eSave_OptionMenu_items_enum11	= 6944;
    public static final int eSave_OptionMenu_items_enum12	= 6945;
    public static final int eSave_OptionMenu_items_enum13	= 6946;
    public static final int eSave_OptionMenu_items_enum14	= 6947;
    public static final int eSave_OptionMenu_items_enum15	= 6948;
    public static final int eSave_OptionMenu_items_enum16	= 6949;
    public static final int eSave_OptionMenu_items_enum17	= 6950;
    public static final int eSave_OptionMenu_items_enum18	= 6951;
    public static final int eSave_OptionMenu_items_enum19	= 6952;
    public static final int eSave_OptionMenu_items_enum20	= 6953;
    public static final int eSave_OptionMenu_items_enum21	= 6954;
    public static final int eSave_OptionMenu_items_enum22	= 6955;
    public static final int eSave_OptionMenu_items_enum23	= 6956;
    public static final int eSave_OptionMenu_items_enum24	= 6957;
    public static final int eSave_OptionMenu_items_enum25	= 6958;
    public static final int eSave_OptionMenu_items_enum26	= 6959;
    public static final int eSave_OptionMenu_items_enum27	= 6960;
    public static final int eSave_OptionMenu_items_enum28	= 6961;
    public static final int eSave_OptionMenu_items_enum29	= 6962;
    public static final int eSave_OptionMenu_items_enum30	= 6963;
    public static final int eSave_OptionMenu_items_enum31	= 6964;
    public static final int eSave_OptionMenu_attribute		= 6965;
    public static final int eSave_OptionMenu_text_attribute	= 6966;
    public static final int eSave_OptionMenu_size_attribute	= 6967;
    public static final int eSave_OptionMenu_update_attribute 	= 6968;
    public static final int eSave_OptionMenu_optionmenu_type 	= 6969;
    public static final int eSave_SetValue_attribute		= 7000;
    public static final int eSave_SetValue_value		= 7001;
    public static final int eSave_SetValue_instance		= 7002;
    public static final int eSave_SetValue_instance_mask     	= 7003;

    public static final int eAnimSequence_Cycle		= 1;
    public static final int eAnimSequence_Dig		= 2;
    public static final int eAnimSequence_ForwBack	= 3;

    public static final int eLimitType_Gt		= 0;
    public static final int eLimitType_Lt		= 1;
    public static final int eLimitType_Ge		= 2;
    public static final int eLimitType_Le		= 3;
    public static final int eLimitType_Eq		= 4;

    public static final int ePwrStatus_No		= 0;
    public static final int ePwrStatus_Success		= 1;
    public static final int ePwrStatus_Warning		= 2;
    public static final int ePwrStatus_Error		= 3;
    public static final int ePwrStatus_Fatal		= 4;

    public static final boolean debug = true;

    Vector<DynElem> elements = new Vector<DynElem>();
    GraphIfc graph;
    int dyn_type1;
    int dyn_type2;
    int action_type1;
    int action_type2;
    int access;
    int cycle;
    int total_dyn_type1;
    int total_dyn_type2;
    int total_action_type1;
    int total_action_type2;

    boolean repaintNow;
    boolean ignoreColor;
    boolean resetColor;

    public Dyn(GraphIfc graph) {
	this.graph = graph;
    }

    public void open( BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;
	DynElem elem;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( Dyn.debug) System.out.println( "Dyn : " + line);

		elem = null;
		switch ( key) {
		case Dyn.eSave_Dyn: 
		    break;
		case Dyn.eSave_Dyn_dyn_type1: 
		    dyn_type1 = Integer.valueOf(token.nextToken());
		    break;
		case Dyn.eSave_Dyn_dyn_type2: 
		    dyn_type2 = Integer.valueOf(token.nextToken());
		    break;
		case Dyn.eSave_Dyn_action_type1: 
		    action_type1 = Integer.valueOf(token.nextToken());
		    break;
		case Dyn.eSave_Dyn_action_type2: 
		    action_type2 = Integer.valueOf(token.nextToken());
		    break;
		case Dyn.eSave_Dyn_access: 
		    access = Integer.valueOf(token.nextToken());
		    break;
		case Dyn.eSave_Dyn_cycle: 
		    cycle = Integer.valueOf(token.nextToken());
		    break;
		case Dyn.eSave_DigLowColor: 
		    elem = (DynElem) new DynDigLowColor(this); 
		    break;
		case Dyn.eSave_DigColor: 
		    elem = (DynElem) new DynDigColor(this); 
		    break;
		case Dyn.eSave_DigWarning: 
		    elem = (DynElem) new DynDigWarning(this); 
		    break;
		case Dyn.eSave_DigError: 
		    elem = (DynElem) new DynDigError(this); 
		    break;
		case Dyn.eSave_DigFlash: 
		    elem = (DynElem) new DynDigFlash(this); 
		    break;
		case Dyn.eSave_Invisible: 
		    elem = (DynElem) new DynInvisible(this); 
		    break;
		case Dyn.eSave_DigBorder: 
		    elem = (DynElem) new DynDigBorder(this); 
		    break;
		case Dyn.eSave_DigText: 
		    elem = (DynElem) new DynDigText(this); 
		    break;
		case Dyn.eSave_Value: 
		    elem = (DynElem) new DynValue(this); 
		    break;
		case Dyn.eSave_ValueInput: 
		    elem = (DynElem) new DynValueInput(this); 
		    break;
		case Dyn.eSave_AnalogColor: 
		    elem = (DynElem) new DynAnalogColor(this); 
		    break;
		case Dyn.eSave_Rotate: 
		    elem = (DynElem) new DynRotate(this); 
		    break;
		case Dyn.eSave_Move: 
		    elem = (DynElem) new DynMove(this); 
		    break;
		case Dyn.eSave_AnalogShift: 
		    elem = (DynElem) new DynAnalogShift(this); 
		    break;
		case Dyn.eSave_DigShift: 
		    elem = (DynElem) new DynDigShift(this); 
		    break;
		case Dyn.eSave_Animation: 
		    elem = (DynElem) new DynAnimation(this); 
		    break;
		case Dyn.eSave_Video: 
		    elem = (DynElem) new DynVideo(this); 
		    break;
		case Dyn.eSave_Bar: 
		    elem = (DynElem) new DynBar(this); 
		    break;
		case Dyn.eSave_Trend: 
		    elem = (DynElem) new DynTrend(this); 
		    break;
		case Dyn.eSave_FillLevel: 
		    elem = (DynElem) new DynFillLevel(this); 
		    break;
		case Dyn.eSave_FastCurve: 
		    elem = (DynElem) new DynFastCurve(this); 
		    break;
		case Dyn.eSave_AnalogText: 
		    elem = (DynElem) new DynAnalogText(this); 
		    break;
		case Dyn.eSave_Table: 
		    elem = (DynElem) new DynTable(this); 
		    break;
		case Dyn.eSave_StatusColor: 
		    elem = (DynElem) new DynStatusColor(this); 
		    break;
		case Dyn.eSave_Pie: 
		    elem = (DynElem) new DynPie(this); 
		    break;
		case Dyn.eSave_BarChart: 
		    elem = (DynElem) new DynBarChart(this); 
		    break;
		case Dyn.eSave_Axis: 
		    elem = (DynElem) new DynAxis(this); 
		    break;
		case Dyn.eSave_HostObject: 
		    elem = (DynElem) new DynHostObject(this); 
		    break;
		case Dyn.eSave_DigSound: 
		    elem = (DynElem) new DynDigSound(this); 
		    break;
		case Dyn.eSave_XY_Curve: 
		    elem = (DynElem) new DynXY_Curve(this); 
		    break;
		case Dyn.eSave_DigCommand: 
		    elem = (DynElem) new DynDigCommand(this); 
		    break;
		case Dyn.eSave_PopupMenu: 
		    elem = (DynElem) new DynPopupMenu(this); 
		    break;
		case Dyn.eSave_SetDig: 
		    elem = (DynElem) new DynSetDig(this); 
		    break;
		case Dyn.eSave_ResetDig: 
		    elem = (DynElem) new DynResetDig(this); 
		    break;
		case Dyn.eSave_ToggleDig: 
		    elem = (DynElem) new DynToggleDig(this); 
		    break;
		case Dyn.eSave_StoDig: 
		    elem = (DynElem) new DynStoDig(this); 
		    break;
		case Dyn.eSave_Command: 
		    elem = (DynElem) new DynCommand(this); 
		    break;
		case Dyn.eSave_CommandDC: 
		    elem = (DynElem) new DynCommandDoubleClick(this); 
		    break;
		case Dyn.eSave_Confirm: 
		    elem = (DynElem) new DynConfirm(this); 
		    break;
		case Dyn.eSave_IncrAnalog: 
		    elem = (DynElem) new DynIncrAnalog(this); 
		    break;
		case Dyn.eSave_RadioButton: 
		    elem = (DynElem) new DynRadioButton(this); 
		    break;
		case Dyn.eSave_Slider: 
		    elem = (DynElem) new DynSlider(this); 
		    break;
		case Dyn.eSave_TipText: 
		    elem = (DynElem) new DynTipText(this); 
		    break;
		case Dyn.eSave_Help: 
		    elem = (DynElem) new DynHelp(this); 
		    break;
		case Dyn.eSave_OpenGraph: 
		    elem = (DynElem) new DynOpenGraph(this); 
		    break;
		case Dyn.eSave_OpenURL: 
		    elem = (DynElem) new DynOpenURL(this); 
		    break;
		case Dyn.eSave_InputFocus: 
		    elem = (DynElem) new DynInputFocus(this); 
		    break;
		case Dyn.eSave_CloseGraph: 
		    elem = (DynElem) new DynCloseGraph(this); 
		    break;
		case Dyn.eSave_PulldownMenu: 
		    elem = (DynElem) new DynPulldownMenu(this); 
		    break;
		case Dyn.eSave_OptionMenu: 
		    elem = (DynElem) new DynOptionMenu(this); 
		    break;
		case Dyn.eSave_SetValue: 
		    elem = (DynElem) new DynSetValue(this); 
		    break;
		case Dyn.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in Dyn");
		    break;
		}
		if ( elem != null) {
		    elements.add(elem);
		    elem.open(reader);
		}

		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowRect");
	}
    }

    int getColor1(GrowNode object, int color) {
	if ( color == Glow.eDrawType_Inherit) {
	    return object.getClassTraceColor1();
	}
	return color;
    }
    int getColor2(GrowNode object, int color) {
	if ( color == Glow.eDrawType_Inherit) {
	    return object.getClassTraceColor2();
	}
	return color;
    }

    int getDynType1(GrowNode object) {
	if ( object != null && (dyn_type1 & Dyn.mDynType1_Inherit) != 0)
	    return object.getClassDynType1();
	return dyn_type1;
    }

    int getDynType2(GrowNode object) {
	if ( object != null && (dyn_type1 & Dyn.mDynType1_Inherit) != 0)
	    return object.getClassDynType2();
	return dyn_type2;
    }

    int getActionType1(GrowNode object) {
	if ( object != null && (action_type1 & Dyn.mActionType1_Inherit) != 0)
	    return object.getClassActionType1();
	return action_type1;
    }

    int getActionType2(GrowNode object) {
	if ( object != null && (action_type1 & Dyn.mDynType1_Inherit) != 0)
	    return object.getClassActionType2();
	return action_type2;
    }

    boolean getDig( int p, int a_typeid, int bitmask, int db) {
	switch ( a_typeid) {
	case Pwr.eType_Boolean: {
	    boolean value = false;
	    switch ( db) {
	    case GraphIfc.eDatabase_Gdh:
		value = graph.getGdh().getObjectRefInfoBoolean( p);
		break;
	    case GraphIfc.eDatabase_Local:
		value = graph.getLdb().getObjectRefInfoBoolean( p);
		break;
	    }	
	    return value;
	}
	case Pwr.eType_Int32:
	case Pwr.eType_UInt32:
	case Pwr.eType_Int64:
	case Pwr.eType_UInt64: {
	    int value = 0;
	    switch ( db) {
	    case GraphIfc.eDatabase_Gdh:
		value = graph.getGdh().getObjectRefInfoInt( p);
		break;
	    case GraphIfc.eDatabase_Local:
		value = graph.getLdb().getObjectRefInfoInt( p);
		break;
	    }	
	    return value != 0;
	}
	case GraphIfc.eType_Bit: {
	    int value = 0;
	    switch ( db) {
	    case GraphIfc.eDatabase_Gdh:
		value = graph.getGdh().getObjectRefInfoInt( p);
		break;
	    case GraphIfc.eDatabase_Local:
		value = graph.getLdb().getObjectRefInfoInt( p);
		break;
	    }
	    return (value & bitmask) != 0;
	}
	case Pwr.eType_Float32:
	case Pwr.eType_Float64: {
	    float value = 0;
	    switch ( db) {
	    case GraphIfc.eDatabase_Gdh:
		value = graph.getGdh().getObjectRefInfoFloat( p);
		break;
	    case GraphIfc.eDatabase_Local:
		value = graph.getLdb().getObjectRefInfoFloat( p);
		break;
	    }	
	    return value > Float.MIN_VALUE;
	}
	case Pwr.eType_String: {
	    switch ( db) {
	    case GraphIfc.eDatabase_Gdh: {
		String value = graph.getGdh().getObjectRefInfoString( p, a_typeid);
		return !value.equals("");
	    }	
	    }
	    return false;
	}
	default:
	    return false;
	}
    }

    int getBit( String str, int attr_type) {
	if ( attr_type == GraphIfc.eType_Bit) {
	    // Get bit number from parsed name
	    int idx1, idx2;
	    int bitnum;

	    if ( (idx1 = str.indexOf('[')) != -1 &&
		 (idx2 = str.indexOf(']')) != -1 &&
		 idx2 > idx1) {
		try {
		    bitnum = new Integer(str.substring(idx1+1, idx2)).intValue();
		}
		catch( NumberFormatException e) {
		    return 0;
		}
		if ( bitnum >= 0 && bitnum < 32) {
		    return 1 << bitnum;
		}
	    }
	}
	return 0;
    }

    public DynParsedAttrName parseAttrName(String name) {
	return graph.parseAttrName( name);
    }

    public int connect(GlowArrayElem object) {
	System.out.println("Dyn connect object 0 " + object + " elements " + elements.size());

	if ( (dyn_type1 & Dyn.mDynType1_Inherit) != 0) {
	System.out.println("Dyn connect object 1 " + object + " elements " + elements.size());
	    int inherit_dyn_type1 = object.getClassDynType1();
	System.out.println("Dyn connect object 2 " + object + " elements " + elements.size());
	    int inherit_dyn_type2 = object.getClassDynType2();
	    total_dyn_type1 = dyn_type1 | inherit_dyn_type1;
	    total_dyn_type2 = dyn_type2 | inherit_dyn_type2;
	}
	else {
	    total_dyn_type1 = dyn_type1;
	    total_dyn_type2 = dyn_type2;
	}
	System.out.println("Dyn connect object 3 " + object + " elements " + elements.size());

	if ( (action_type1 & Dyn.mActionType1_Inherit) != 0) {
	    int inherit_action_type1 = object.getClassActionType1();
	    int inherit_action_type2 = object.getClassActionType2();
	    total_action_type1 = action_type1 | inherit_action_type1;
	    total_action_type2 = action_type2 | inherit_action_type2;
	}
	else {
	    total_action_type1 = action_type1;
	    total_action_type2 = action_type2;
	}

	if ( cycle == Glow.eCycle_Inherit)
	    cycle = object.getClassCycle();

	for ( int i = 0; i < elements.size(); i++) {
	    System.out.println("Dyn connect " + elements.get(i));
	    elements.get(i).connect(object);
	}
	return 1;
    }


    public void disconnect() {
	for ( int i = 0; i < elements.size(); i++) {
	    elements.get(i).disconnect();
	}
    }

    public void scan(GlowArrayElem object) {
	repaintNow = false;
	ignoreColor = false;
	resetColor = false;

	for ( int i = 0; i < elements.size(); i++) {
	    elements.get(i).scan(object);
	}	
	if ( repaintNow)
	    object.draw();
    }

    int action(GlowArrayElem object, GlowEvent event) {
	int sts;
	for ( int i = 0; i < elements.size(); i++) {
	    sts = elements.get(i).action(object, event);
	    if ( sts == Dyn.DYN__NO_PROPAGATE || sts == Glow.GLOW__TERMINATED ||
		 sts == Glow.GLOW__SUBTERMINATED)
		return sts;
	}
	return 1;
    }

    public void confirmedAction( int event, Object object) {
	if ( elements == null)
	    return;

	GlowEvent e = new GlowEvent();
	e.event = event;	
	e.object = (GlowArrayElem)object;
	action_type1 &= ~mActionType1_Confirm;
	for ( int i = 0; i < elements.size(); i++)
	    elements.get(i).action((GlowArrayElem)object,  e);
	action_type1 |= mActionType1_Confirm;
    }    

    public class DynElem {
	Dyn dyn;
	int dyn_type1;
	int dyn_type2;
	int action_type1;
	int action_type2;
	int instance_mask;
	int instance;

	DynElem(Dyn dyn, int dyn_type1, int dyn_type2, int action_type1, int action_type2) {
	    this.dyn = dyn;
	    this.dyn_type1 = dyn_type1;
	    this.dyn_type2 = dyn_type2;
	    this.action_type1 = action_type1;
	    this.action_type2 = action_type2;
	}
	public int getDynType1() {return dyn_type1;}
	public void open( BufferedReader reader) {}
	public int connect(GlowArrayElem object) {return 0;}
	public void disconnect() {}
	public void scan(GlowArrayElem object) {}
	public int action(GlowArrayElem object, GlowEvent event) {return 0;}
    }

    public class DynDigLowColor extends DynElem {
	String attribute;
	int color;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	
	public DynDigLowColor( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigLowColor, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    color = dyn.getColor1(object, color);
	    if ( color < 0 || color >= Glow.eDrawType__)
		return 0;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;
	    System.out.println("DigLowColor: " + attribute + " pname " + pname.name + " db " + pname.database);

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    case GraphIfc.eDatabase_Local:
		ret = dyn.graph.getLdb().refObjectInfo( graph, pname.name);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigLowColor: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound || dyn.ignoreColor)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value && !dyn.resetColor)
		    return;
	    }
	    else
		firstScan = false;
	
	    if ( (dyn.total_dyn_type1 & Dyn.mDynType1_Tone) != 0) {
		if ( !value) {
		    if ( color >= Glow.eDrawTone__)
			object.setFillColor( color);
		    else
			object.setColorTone( color);
		}
		else {
		    if ( color >= Glow.eDrawTone__)
			object.resetFillColor();
		    object.resetColorTone();
		}
		dyn.repaintNow = true;
	    }
	    else {
		if ( !value)
		    object.setFillColor( color);
		else
		    object.resetFillColor();
		dyn.repaintNow = true;
	    }
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynDigLowColor : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigLowColor: 
			break;
		    case Dyn.eSave_DigLowColor_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_DigLowColor_color: 
			color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigLowColor");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigLowColor");
	    }
	}

    }

    public class DynDigColor extends DynElem {
	String attribute;
	int color;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;

	public DynDigColor( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigColor, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    color = dyn.getColor2(object, color);
	    if ( color < 0 || color >= Glow.eDrawType__)
		return 0;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigColor: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound || dyn.ignoreColor)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value && !dyn.resetColor) {
		    // No change since last time
		    if ( value)
			dyn.ignoreColor = true;
		    return;
		}
	    }
	    else
		firstScan = false;
	
	    if ( (dyn.total_dyn_type1 & Dyn.mDynType1_Tone) != 0) {
		if ( value) {
		    if ( color >= Glow.eDrawTone__) {
			if ( dyn.resetColor)
			    object.resetFillColor();
			object.setFillColor(color);
		    }
		    else
			object.setColorTone( color);
		    dyn.ignoreColor = true;
		}
		else {
		    if ( color >= Glow.eDrawTone__)
			object.resetFillColor();
		    object.resetColorTone();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    else {
		if ( value) {
		    object.setFillColor( color);
		    dyn.ignoreColor = true;
		}
		else {
		    object.resetFillColor();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynDigColor : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigColor: 
			break;
		    case Dyn.eSave_DigColor_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_DigColor_color: 
			color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_DigColor_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_DigColor_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigColor");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigColor");
	    }
	}

    }

    public class DynDigWarning extends DynElem {
	String attribute;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	

	public DynDigWarning( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigWarning, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigWarning: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound || dyn.ignoreColor)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value && !dyn.resetColor) {
		    // No change since last time
		    if ( value)
			dyn.ignoreColor = true;
		    return;
		}
	    }
	    else
		firstScan = false;
	
	    if ( (dyn.total_dyn_type1 & Dyn.mDynType1_Tone) != 0) {
		if ( value) {
		    object.setColorTone( Glow.eDrawTone_Yellow);
 		    dyn.ignoreColor = true;
		}
		else {
		    object.resetFillColor();
		    object.resetColorTone();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    else {
		if (  value) {
		    object.setFillColor( Glow.eDrawType_ColorYellow);
		    dyn.ignoreColor = true;
		}
		else {
		    object.resetFillColor();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynWarning : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigWarning: 
			break;
		    case Dyn.eSave_DigWarning_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigWarning");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigWarning");
	    }
	}

    }

    public class DynDigError extends DynElem {
	String attribute;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;

	public DynDigError( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigError, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigError: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database != GraphIfc.eDatabase_Local)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound || dyn.ignoreColor)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value && !dyn.resetColor) {
		    // No change since last time
		    if ( value)
			dyn.ignoreColor = true;
		    return;
		}
	    }
	    else
		firstScan = false;
	
	    if ( (dyn.total_dyn_type1 & Dyn.mDynType1_Tone) != 0) {
		if ( value) {
		    object.setColorTone( Glow.eDrawTone_Red);
 		    dyn.ignoreColor = true;
		}
		else {
		    object.resetFillColor();
		    object.resetColorTone();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    else {
		if (  value) {
		    object.setFillColor( Glow.eDrawType_ColorRed);
		    dyn.ignoreColor = true;
		}
		else {
		    object.resetFillColor();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynError : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigError: 
			break;
		    case Dyn.eSave_DigError_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigError");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigError");
	    }
	}

    }

    public class DynDigFlash extends DynElem {
	String attribute;
	int color;
	int color2;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	boolean on;

	public DynDigFlash( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigFlash, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigFlash: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database != GraphIfc.eDatabase_Local)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound || dyn.ignoreColor)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value && !dyn.resetColor) {
		    // No change since last time
		    if ( !value)
			return;
		}
	    }
	    else
		firstScan = false;
	
	    if ( (dyn.total_dyn_type1 & Dyn.mDynType1_Tone) != 0) {
		if ( value) {
		    if ( on) {
			if ( color >= Glow.eDrawTone__)
			    object.setColorTone(color);
			else
			    object.setFillColor(color);
			dyn.ignoreColor = true;
		    }
		    else {
			object.resetFillColor();
			object.resetColorTone();
			dyn.resetColor = true;
		    }
		    on = !on;
		}
		else {
		    object.resetFillColor();
		    object.resetColorTone();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    else {
		if (  value) {
		    if ( on) {
			object.setFillColor(color);
			dyn.ignoreColor = true;
		    }
		    else {
			if ( color2 == Glow.eDrawType_Inherit) {
			    object.resetFillColor();
			    dyn.resetColor = true;
			}
			else {
			    object.setFillColor(color2);
			    dyn.ignoreColor = true;
			}
		    }
		    on = !on;
		}
		else {
		    object.resetFillColor();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynDigFlash : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigFlash: 
			break;
		    case Dyn.eSave_DigFlash_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_DigFlash_color: 
			color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_DigFlash_color2: 
			color2 = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigFlash");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigFlash");
	    }
	}

    }

    public class DynInvisible extends DynElem {
	String attribute;
	int dimmed;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	boolean cmd;
	String command;

	public DynInvisible( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Invisible, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( attribute.toLowerCase().startsWith("$cmd(")) {
		cmd = true;
		int idx = attribute.lastIndexOf(')');
		if ( idx != -1 && idx > 5)
		    command = attribute.substring(5, idx);
		else
		    command = attribute.substring(5);
		command = graph.getCommand(command);
	    }
	    else {
		DynParsedAttrName pname = dyn.parseAttrName(attribute);
		if ( pname == null || pname.name.equals("")) 
		    return 1;

		GdhrRefObjectInfo ret = null;
		
		switch( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		    break;
		case GraphIfc.eDatabase_Local:
		    ret = dyn.graph.getLdb().refObjectInfo( graph, pname.name);
		    break;
		default:
		    ret = null;
		}

		if ( ret == null || ret.evenSts()) {
		    System.out.println("DigFlash: " + attribute);
		    return 1;
		}

		p = ret.id;
		subid = ret.refid;
		inverted = pname.inverted;
		a_typeid = pname.type;
		bitmask = pname.bitmask;
		database = pname.database;
		attrFound = true;
	    }
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database != GraphIfc.eDatabase_Local)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( cmd) {
		if ( firstScan) {
		    int sts = dyn.graph.command(command);
		    System.out.println( "DynInvisible: " + command + ", value: " + sts);
		    if ( sts == 0) {
			if ( dimmed == 0)
			    object.setVisibility( Glow.eVis_Invisible);
			else
			    object.setVisibility( Glow.eVis_Dimmed);
		    }
		    firstScan = false;
		}
		return;
	    }

	    if ( !attrFound || dyn.ignoreColor)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( a_typeid == Pwr.eType_String)
		value = !value;

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value && !dyn.resetColor) {
		    // No change since last time
		    if ( !value)
			return;
		}
	    }
	    else
		firstScan = false;

	    if ( value) {
		if ( dimmed == 0)
		    object.setVisibility( Glow.eVis_Invisible);
		else
		    object.setVisibility( Glow.eVis_Dimmed);
	    }
	    else {
		object.setVisibility( Glow.eVis_Visible);
	    }
	    dyn.repaintNow = true;
	    oldValue = value;
	}
	
	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynInvisible : " + line);

		    switch ( key) {
		    case Dyn.eSave_Invisible: 
			break;
		    case Dyn.eSave_Invisible_attribute: 
			if ( token.hasMoreTokens())
			    attribute = line.substring(4);
			break;
		    case Dyn.eSave_Invisible_dimmed: 
			dimmed = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_Invisible_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_Invisible_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynInvisible");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynInvisible");
	    }
	}

    }

    public class DynDigBorder extends DynElem {
	String attribute;
	int color;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;

	public DynDigBorder( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigBorder, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigBorder: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database != GraphIfc.eDatabase_Local)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value) {
		    // No change since last time
		    return;
		}
	    }
	    else
		firstScan = false;
	
	    System.out.println("DigBorder " + value + "  color " + color);
	    if ( value) {
		object.setBorderColor(color);
	    }
	    else {
		object.resetBorderColor();
	    }
	    dyn.repaintNow = true;
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynDigBorder : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigBorder: 
			break;
		    case Dyn.eSave_DigBorder_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_DigBorder_color: 
			color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigBorder");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigBorder");
	    }
	}

    }

    public class DynDigText extends DynElem {
	String attribute;
	String low_text;
	String high_text;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;

	public DynDigText( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigText, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    if ( low_text == null)
		return 1;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigText: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    high_text = object.getAnnotation(1);
	    if ( high_text == null)
		high_text = new String();
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database != GraphIfc.eDatabase_Local)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}
	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value)
		    return;
	    }
	    else
		firstScan = false;
	
	    if ( value)
		object.setAnnotation(1, high_text);
	    else
		object.setAnnotation(1, low_text);
	    dyn.repaintNow = true;
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynDigText : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigText: 
			break;
		    case Dyn.eSave_DigText_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_DigText_low_text: 
			if ( token.hasMoreTokens())
			    low_text = line.substring(5);
			break;
		    case Dyn.eSave_DigText_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_DigText_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigText");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigText");
	    }
	}

    }

    public class DynValue extends DynElem {
	String attribute;
	String format;
	int zero_blank;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	public boolean oldValueB;
	public float oldValueF;
	public int oldValueI;
	public String oldValueS;
	GlowCFormat	cFormat;
	StringBuffer sb = new StringBuffer();

	public DynValue( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Value, 0, 0, 0);
	}

 	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( format == null)
		return 1;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    case GraphIfc.eDatabase_Local:
		ret = dyn.graph.getLdb().refObjectInfo( graph, pname.name);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("Value: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database != GraphIfc.eDatabase_Local)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;

	    switch ( a_typeid) {
	    case Pwr.eType_Float32: {
		float value0 = 0;
		switch ( database) {
		case GraphIfc.eDatabase_Gdh:
		    value0 = dyn.graph.getGdh().getObjectRefInfoFloat( p);
		    break;
		case GraphIfc.eDatabase_Local:
		    value0 = dyn.graph.getLdb().getObjectRefInfoFloat( p);
		    break;
		}
		if ( value0 != oldValueF  || firstScan) {
		    sb = cFormat.format( value0, sb);
		    object.setAnnotation(1, new String(sb));
		    dyn.repaintNow = true;
		    oldValueF = value0;
		}
		break;
	    }
	    case Pwr.eType_Int32:
	    case Pwr.eType_UInt32:
	    case Pwr.eType_Int16:
	    case Pwr.eType_UInt16:
	    case Pwr.eType_Int8:
	    case Pwr.eType_UInt8: {
		int value0 = 0;
		switch ( database) {
		case GraphIfc.eDatabase_Gdh:
		    value0 = dyn.graph.getGdh().getObjectRefInfoInt( p);
		    break;
		case GraphIfc.eDatabase_Local:
		    value0 = dyn.graph.getLdb().getObjectRefInfoInt( p);
		    break;
		}

		if ( value0 != oldValueI || firstScan) {
		    sb = cFormat.format( value0, sb);
		    object.setAnnotation(1, new String(sb));
		    dyn.repaintNow = true;
		    oldValueI = value0;
		}
		break;
	    }
	    case Pwr.eType_Boolean: {
		boolean value0 = false;
		switch ( database) {
		case GraphIfc.eDatabase_Gdh:
		    value0 = dyn.graph.getGdh().getObjectRefInfoBoolean( p);
		    break;
		case GraphIfc.eDatabase_Local:
		    value0 = dyn.graph.getLdb().getObjectRefInfoBoolean( p);
		    break;
		}

		if ( value0 != oldValueB || firstScan) {
		    sb = cFormat.format( value0, sb);
		    object.setAnnotation(1, new String(sb));
		    dyn.repaintNow = true;
		    oldValueB = value0;
		}
		break;
	    }
	    case Pwr.eType_String:
	    case Pwr.eType_Objid:
	    case Pwr.eType_Time:
	    case Pwr.eType_DeltaTime: {
		String value0 = null;
		switch ( database) {
		case GraphIfc.eDatabase_Gdh:
		    value0 = dyn.graph.getGdh().getObjectRefInfoString( p, a_typeid);
		    break;
		case GraphIfc.eDatabase_Local:
		    value0 = dyn.graph.getLdb().getObjectRefInfoString( p, a_typeid);
		    break;
		}

		if ( firstScan || !value0.equals( oldValueS)) {
		    sb = cFormat.format( value0, sb);
		    object.setAnnotation(1, new String(sb));
		    dyn.repaintNow = true;
		    oldValueS = value0;
		}
		break;
	    }
	    case Pwr.eType_Status:
	    case Pwr.eType_NetStatus: {
		int value0 = 0;
		switch ( database) {
		case GraphIfc.eDatabase_Gdh:
		    value0 = dyn.graph.getGdh().getObjectRefInfoInt( p);
		    break;
		case GraphIfc.eDatabase_Local:
		    value0 = dyn.graph.getLdb().getObjectRefInfoInt( p);
		    break;
		}
		if ( value0 != oldValueI || firstScan) {
		    switch ( cFormat.type()) {
		    case GlowCFormat.FRM_M: {
			CdhrString cstr = dyn.graph.getGdh().getMsg( value0);
			object.setAnnotation(1, cstr.str);
			dyn.repaintNow = true;
			break;
		    }
		    case GlowCFormat.FRM_1M: {
			CdhrString cstr = dyn.graph.getGdh().getMsgText( value0);
			object.setAnnotation(1, cstr.str);
			dyn.repaintNow = true;
			break;
		    }
		    }
		}
		oldValueI = value0;
		break;
	    }
	    }
	    if ( firstScan)
		firstScan = false;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynValue : " + line);

		    switch ( key) {
		    case Dyn.eSave_Value: 
			break;
		    case Dyn.eSave_Value_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_Value_format: 
			if ( token.hasMoreTokens())
			    format = token.nextToken();
			break;
		    case Dyn.eSave_Value_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_Value_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_Value_zero_blank: 
			zero_blank = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynValue");
			break;
		    }

		    if ( end_found)
			break;
		}
		
		if ( format != null)
		    cFormat = new GlowCFormat(format);

	    } catch ( Exception e) {
		System.out.println( "IOException DynValue");
	    }
	}

    }

    public int valueInputAction( Object object, String str) {
	if ( elements == null)
	    return Dyn.eValueInput_Error;

	DynValueInput e = (DynValueInput)object;

	System.out.println("Dyn Value input: " + str);


	try {
	    PwrtStatus sts = null;
	    double minval = 0;
	    double maxval = 0;
	    if ( e.minvalue_attr != null) {
		DynParsedAttrName pname = e.dyn.parseAttrName(e.minvalue_attr);
		if ( pname != null && pname.type == Pwr.eType_Float32) {
		    CdhrFloat ret = e.dyn.graph.getGdh().getObjectInfoFloat( pname.name);
		    if ( ret.evenSts()) {
			System.out.println( "ValueInput " + pname.name);
			return Dyn.eValueInput_Error;
		    }
		    minval = ret.value;
		}
		else 
		    minval = e.min_value;
	    }
	    else
		minval = e.min_value;

	    if ( e.maxvalue_attr != null) {
		DynParsedAttrName pname = e.dyn.parseAttrName(e.maxvalue_attr);
		if ( pname == null || pname.name.equals("")) 
		    maxval = e.max_value;
		else {
		    if ( pname.type == Pwr.eType_Float32) {
			CdhrFloat ret = e.dyn.graph.getGdh().getObjectInfoFloat( pname.name);
			if ( ret.evenSts()) {
			    System.out.println( "ValueInput " + pname.name);
			    return Dyn.eValueInput_Error;
			}
			maxval = ret.value;
		    }
		    else
			maxval = e.max_value;
		}
	    }
	    else
		maxval = e.max_value;

	    switch ( e.a_typeid) {
	    case Pwr.eType_Float32: {
		float inputValue = Float.parseFloat( str.trim());
		if ( minval != 0 && maxval != 0 && inputValue < minval)
		    return Dyn.eValueInput_MinValueExceeded;
		if ( minval != 0 && maxval != 0 && inputValue > maxval )
		    return Dyn.eValueInput_MaxValueExceeded;
		
		DynParsedAttrName pname = e.dyn.parseAttrName(e.value_element.attribute);
		if ( pname == null || pname.name.equals(""))
		    break;
		    
		switch ( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = e.dyn.graph.getGdh().setObjectInfo( pname.name, inputValue);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = e.dyn.graph.getLdb().setObjectInfo( graph, pname.name, inputValue);
		    break;
		default:
		    return Dyn.eValueInput_Error;
		}
		if ( sts.evenSts()) {
		    System.out.println( "setObjectInfoError " + sts);
		    return Dyn.eValueInput_Error;
		}
		break;
	    }
	    case Pwr.eType_Int32:
	    case Pwr.eType_UInt32:
	    case Pwr.eType_Int16:
	    case Pwr.eType_UInt16:
	    case Pwr.eType_Int8:
	    case Pwr.eType_UInt8: {
		int inputValue = Integer.parseInt( str.trim(), 10);
		if ( minval != 0 && maxval != 0 && inputValue < minval)
		    return Dyn.eValueInput_MinValueExceeded;
		if ( minval != 0 && maxval != 0 && inputValue > maxval )
		    return Dyn.eValueInput_MaxValueExceeded;

		DynParsedAttrName pname = e.dyn.parseAttrName(e.value_element.attribute);
		if ( pname == null || pname.name.equals(""))
		    break;
		    
		switch ( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = e.dyn.graph.getGdh().setObjectInfo( pname.name, inputValue);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = e.dyn.graph.getLdb().setObjectInfo( graph, pname.name, inputValue);
		    break;
		default:
		    return Dyn.eValueInput_Error;
		}
		if ( sts.evenSts()) {
		    System.out.println( "setObjectInfoError " + sts);
		    return Dyn.eValueInput_Error;
		}		
		break;
	    }
	    case Pwr.eType_Boolean: {
		int inputValueInt = Integer.parseInt( str.trim(), 10);
		boolean inputValue;
		if ( inputValueInt == 0)
		    inputValue = false;
		else if ( inputValueInt == 1)
		    inputValue = true;
		else
		    break;

		// valueElement.oldValueB = inputValue;

		DynParsedAttrName pname = e.dyn.parseAttrName(e.value_element.attribute);
		if ( pname == null || pname.name.equals(""))
		    break;
		    
		switch ( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = e.dyn.graph.getGdh().setObjectInfo( pname.name, inputValue);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = e.dyn.graph.getLdb().setObjectInfo( graph, pname.name, inputValue);
		    break;
		default:
		    return Dyn.eValueInput_Error;
		}
		if ( sts.evenSts()) {
		    System.out.println( "setObjectInfoError " + sts);
		    return Dyn.eValueInput_Error;
		}
		break;
	    }
	    case Pwr.eType_String: {
		// valueElement.oldValueS = str;

		DynParsedAttrName pname = e.dyn.parseAttrName(e.value_element.attribute);
		if ( pname == null || pname.name.equals(""))
		    break;
		    
		switch ( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = e.dyn.graph.getGdh().setObjectInfo( pname.name, str);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = e.dyn.graph.getLdb().setObjectInfo( graph, pname.name, str);
		    break;
		default:
		    return Dyn.eValueInput_Error;
		}
		if ( sts.evenSts()) {
		    System.out.println( "setObjectInfoError " + sts);
		    return Dyn.eValueInput_Error;
		}
		break;
	    }
	    }
	}
	catch(NumberFormatException ex) {
	    System.out.println( ex.toString() );
 	    return Dyn.eValueInput_SyntaxError;
	}	
	return Dyn.eValueInput_Success;
    }

    public class DynValueInput extends DynElem {
	String attribute;
	double min_value;
	double max_value;
	int clear;
	int popup;
	int unselect;
	String minvalue_attr;
	String maxvalue_attr;
	int escape_store;
	DynValue value_element;
	int a_typeid;

	public DynValueInput( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_ValueInput, 0);
	}

 	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    // Get the Value element
	    value_element = null;
	    for ( int j = 0; j < dyn.elements.size(); j++) {
		if ( dyn.elements.get(j).dyn_type1 == Dyn.mDynType1_Value) {
		    value_element = (DynValue)dyn.elements.get(j);
		    a_typeid = value_element.a_typeid;
		    break;
		}
	    }
	    
	    return 1;
	}

	public int action( GlowArrayElem object, GlowEvent e) {
	    switch ( e.event) {
	    case Glow.eEvent_MB1Click:
		dyn.graph.openValueInputDialog( dyn, "Enter value", this);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynValueInput : " + line);

		    switch ( key) {
		    case Dyn.eSave_ValueInput: 
			break;
		    case Dyn.eSave_ValueInput_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_ValueInput_min_value: 
			min_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_ValueInput_max_value: 
			max_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_ValueInput_clear: 
			clear = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_ValueInput_popup: 
			popup = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_ValueInput_minvalue_attr: 
			if ( token.hasMoreTokens())
			    minvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_ValueInput_maxvalue_attr: 
			if ( token.hasMoreTokens())
			    maxvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_ValueInput_escape_store: 
			escape_store = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynValueInput");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynValueInput");
	    }
	}

    }

    public class DynAnalogColor extends DynElem {
	String attribute;
	double limit;
	int limit_type;
	int color;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean oldValue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	float oldValueF;
	int oldValueI;
	boolean oldState;
	boolean isMainInstance = false;

	public DynAnalogColor( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_AnalogColor, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    // Find the main instance
	    DynAnalogColor mainInstance = null;
	    for ( int i = dyn.elements.size() - 1; i >= 0; i--) {
		if ( dyn.elements.get(i).getDynType1() == Dyn.mDynType1_AnalogColor) {
		    mainInstance = (DynAnalogColor)dyn.elements.get(i);
		    break;
		}
	    }

	    if ( mainInstance != null) {
		if ( !mainInstance.attrFound) {
		    DynParsedAttrName pname = dyn.parseAttrName(mainInstance.attribute);
		    if ( pname == null || pname.name.equals("")) 
			return 1;

		    GdhrRefObjectInfo ret = null;

		    switch( pname.database) {
		    case GraphIfc.eDatabase_Gdh:
			ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
			break;
		    default:
			ret = null;
		    }

		    if ( ret == null || ret.evenSts()) {
			System.out.println("AnalogColor: " + mainInstance.attribute);
			return 1;
		    }

		    mainInstance.attrFound = true;
		    mainInstance.p = ret.id;
		    mainInstance.subid = ret.refid;
		    mainInstance.a_typeid = pname.type;
		    mainInstance.isMainInstance = true;
		    mainInstance.database = pname.database;
		}
		if ( !isMainInstance) {
		    p = mainInstance.p;
		    attrFound = mainInstance.attrFound;
		    a_typeid = mainInstance.a_typeid;
		    database = mainInstance.database;
		}
	    }
	    return 1;
	}


	public void disconnect() {
	    if ( isMainInstance && attrFound && database != GraphIfc.eDatabase_Local)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}
	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound || dyn.ignoreColor)
		return;

	    boolean state = false;
	    boolean set_color = false;
	    boolean reset_color = false;

	    if ( a_typeid == Pwr.eType_Float32) {
		float value = dyn.graph.getGdh().getObjectRefInfoFloat( p);
		int i;

		if ( !firstScan) {
		    if ( !dyn.resetColor && value == oldValueF) {
			if ( oldState)
			    dyn.ignoreColor = true;
			return;
		    }
		}
		else
		    firstScan = false;

		switch ( limit_type) {
		case Dyn.eLimitType_Gt:
		    state = value > limit;
		    break;
		case Dyn.eLimitType_Lt:
		    state = value < limit;
		    break;
		case Dyn.eLimitType_Ge:
		    state = value >= limit;
		    break;
		case Dyn.eLimitType_Le:
		    state = value >= limit;
		    break;
		case Dyn.eLimitType_Eq:
		    state = value == limit;
		    break;      
		}
		oldValueF = value;
	    }
	    else if ( a_typeid == Pwr.eType_Int32) {
		int value = dyn.graph.getGdh().getObjectRefInfoInt( p);
		int i;
		if ( !firstScan) {
		    if ( !dyn.resetColor && value == oldValueI) {
			if ( oldState)
			    dyn.ignoreColor = true;
			return;
		    }
		}
		else
		    firstScan = false;
  
		switch ( limit_type) {
		case Dyn.eLimitType_Gt:
		    state = value > limit;
		    break;
		case Dyn.eLimitType_Lt:
		    state = value < limit;
		    break;
		case Dyn.eLimitType_Ge:
		    state = value >= limit;
		    break;
		case Dyn.eLimitType_Le:
		    state = value >= limit;
		    break;
		case Dyn.eLimitType_Eq:
		    state = value == limit;
		    break;      
		}
		oldValueI = value;
	    }

	    if ( state != oldState || dyn.resetColor || firstScan) {
		if ( state) {
		    set_color = true;
		    dyn.ignoreColor = true;
		}
		else {
		    reset_color = true;
		    dyn.resetColor = true;
		}
		oldState = state;
	    }

	    else if ( state)
		dyn.ignoreColor = true;

	    if ( !set_color && !reset_color)
		return;

	    if ( (dyn.total_dyn_type1 & Dyn.mDynType1_Tone) != 0) {
		if ( set_color) {
		    if ( color < Glow.eDrawTone__)
			object.setColorTone( color);
		    else
			object.setFillColor( color);
		    dyn.ignoreColor = true;
		}
		else {
		    object.resetFillColor();
		    object.resetColorTone();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	    else {
		if ( set_color) {
		    object.setFillColor( color);
		    dyn.ignoreColor = true;
		}
		else {
		    object.resetFillColor();
		    dyn.resetColor = true;
		}
		dyn.repaintNow = true;
	    }
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynAnalogColor : " + line);

		    switch ( key) {
		    case Dyn.eSave_AnalogColor: 
			break;
		    case Dyn.eSave_AnalogColor_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_AnalogColor_limit: 
			limit = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_AnalogColor_limit_type: 
			limit_type = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_AnalogColor_color: 
			color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_AnalogColor_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_AnalogColor_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynAnalogColor");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynAnalogColor");
	    }
	}

    }

    public class DynRotate extends DynElem {
	String attribute;
	double x0;
	double y0;
	double factor;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	float oldValue;
	int rotation_point;

	public DynRotate( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Rotate, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("Rotate: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;

	    if ( x0 != 0 || y0 != 0)
		rotation_point = Glow.eRotationPoint_FixPoint;
	    else
		rotation_point = Glow.eRotationPoint_Zero;
	    
	    object.storeTransform();
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database != GraphIfc.eDatabase_Local)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}
	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;
	    float value0 = dyn.graph.getGdh().getObjectRefInfoFloat( p);
	    if ( value0 != oldValue  || firstScan) {
		System.out.println("Rotate " + value0 * factor + " x0 " + x0 + " y0 " + y0   + " rp " + rotation_point);
		object.setRotation(value0 * factor, x0, y0, rotation_point);

		dyn.repaintNow = true;
		oldValue = value0;
	    }
	    if ( firstScan)
		firstScan = false;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynRotate : " + line);

		    switch ( key) {
		    case Dyn.eSave_Rotate: 
			break;
		    case Dyn.eSave_Rotate_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_Rotate_x0: 
			x0 = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_Rotate_y0: 
			y0 = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_Rotate_factor: 
			factor = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynRotate");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynRotate");
	    }
	}

    }

    public class DynMove extends DynElem {
	String move_x_attribute;
	String move_y_attribute;
	String scale_x_attribute;
	String scale_y_attribute;
	double x_offset;
	double y_offset;
	double scale_x_factor;
	double scale_y_factor;
	int scale_type;

	public DynMove( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Move, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynMove : " + line);

		    switch ( key) {
		    case Dyn.eSave_Move: 
			break;
		    case Dyn.eSave_Move_move_x_attribute: 
			if ( token.hasMoreTokens())
			    move_x_attribute = token.nextToken();
			break;
		    case Dyn.eSave_Move_move_y_attribute: 
			if ( token.hasMoreTokens())
			    move_y_attribute = token.nextToken();
			break;
		    case Dyn.eSave_Move_scale_x_attribute: 
			if ( token.hasMoreTokens())
			    scale_x_attribute = token.nextToken();
			break;
		    case Dyn.eSave_Move_scale_y_attribute: 
			if ( token.hasMoreTokens())
			    scale_y_attribute = token.nextToken();
			break;
		    case Dyn.eSave_Move_x_offset: 
			x_offset = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_Move_y_offset: 
			y_offset = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_Move_scale_x_factor: 
			scale_x_factor = new Double(token.nextToken()).doubleValue();
			break;
 		    case Dyn.eSave_Move_scale_y_factor: 
			scale_y_factor = new Double(token.nextToken()).doubleValue();
			break;
 		    case Dyn.eSave_Move_scale_type: 
			scale_type = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynMove");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynMove");
	    }
	}

    }

    public class DynAnalogShift extends DynElem {
	String attribute;
 	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
        float oldValueF;
	int oldValueI;

	public DynAnalogShift( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_AnalogShift, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    case GraphIfc.eDatabase_Ccm:
		// TODO
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigLowColor: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;

	    int index = 0;

	    switch ( a_typeid) {
	    case Pwr.eType_Float32: {
		float value = dyn.graph.getGdh().getObjectRefInfoFloat( p);
		int i;

		if ( !firstScan) {
		    if ( value == oldValueF) {
			return;
		    }
		}
		else
		    firstScan = false;

		index = (int)( value + 0.5);
		oldValueF = value;

		break;
	    }
	    case Pwr.eType_Int32: {
		int value = dyn.graph.getGdh().getObjectRefInfoInt( p);
		int i;

		if ( !firstScan) {
		    if ( value == oldValueI) {
			return;
		    }
		}
		else
		    firstScan = false;

		index = value;
		oldValueI = value;

		break;
	    }
	    }
	    object.set_nodeclass_by_index(index);	    
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynAnalogShift : " + line);

		    switch ( key) {
		    case Dyn.eSave_AnalogShift: 
			break;
		    case Dyn.eSave_AnalogShift_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynAnalogShift");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynAnalogShift");
	    }
	}

    }

    public class DynDigShift extends DynElem {
	String attribute;
  	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	boolean oldValue;

	public DynDigShift( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigShift, 0, 0, 0);
	}

 	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    case GraphIfc.eDatabase_Ccm:
		// TODO
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigLowColor: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value)
		    return;
	    }
	    else
		firstScan = false;
	
	    if ( value) {
		object.set_last_nodeclass();
	    }
	    else {
		object.set_root_nodeclass();
	    }
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynDigShift : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigShift: 
			break;
		    case Dyn.eSave_DigShift_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigShift");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigShift");
	    }
	}

    }

    public class DynAnimation extends DynElem {
	String attribute;
	int sequence;

	public DynAnimation( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Animation, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynAnimation : " + line);

		    switch ( key) {
		    case Dyn.eSave_Animation: 
			break;
		    case Dyn.eSave_Animation_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_Animation_sequence: 
			sequence = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynAnimation");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynAnimation");
	    }
	}

    }

    public class DynVideo extends DynElem {

	public DynVideo( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Video, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynVideo : " + line);

		    switch ( key) {
		    case Dyn.eSave_Video: 
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynVideo");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynVideo");
	    }
	}

    }

    public class DynBar extends DynElem {
	String attribute;
	String minvalue_attr;
	String maxvalue_attr;
	float maxval;
	float minval;
 	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean firstScan = true;
	int a_typeid;
        float old_value;
	int old_ivalue;
	int max_value_p;
	int min_value_p;
	PwrtRefId max_value_subid;
	PwrtRefId min_value_subid;
	float old_max_value;
	float old_min_value;

	public DynBar( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Bar, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowBar object = (GrowBar)o;

	    if ( attribute == null)
		return 0;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("Bar: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    attrFound = true;

	    min_value_p = 0;
	    pname = dyn.parseAttrName(minvalue_attr);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 && database == GraphIfc.eDatabase_Gdh) {
		
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		if ( ret != null && ret.oddSts()) {
		    min_value_p = ret.id;
		    min_value_subid = ret.refid;
		}
	    }

	    max_value_p = 0;
	    pname = dyn.parseAttrName(maxvalue_attr);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 && database == GraphIfc.eDatabase_Gdh) {
		
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		if ( ret != null && ret.oddSts()) {
		    max_value_p = ret.id;
		    max_value_subid = ret.refid;
		}
	    }

	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	    if ( min_value_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(min_value_subid);
	    if ( max_value_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(max_value_subid);
	}

	public void scan( GlowArrayElem o) {
	    GrowBar object = (GrowBar)o;
	    if ( !attrFound)
		return;
  
	    float minval, maxval;
	    if ( max_value_p != 0 && min_value_p != 0) {
		minval = dyn.graph.getGdh().getObjectRefInfoFloat( min_value_p);
		maxval = dyn.graph.getGdh().getObjectRefInfoFloat( max_value_p);
		if ( minval != old_min_value ||
		     maxval != old_max_value) {
		    System.out.println("Bar set range min : " + minval + "   max : " + maxval);
 		    object.set_range(minval, maxval);
		    old_min_value = minval;
		    old_max_value = maxval;
		}
	    }

	    switch (a_typeid) {
	    case Pwr.eType_Float32: {
		float value = dyn.graph.getGdh().getObjectRefInfoFloat( p);

		if ( !firstScan) {
		    if ( Math.abs( old_value - value) < Float.MIN_VALUE)
			// No change since last time
			return;
		}
		else
		    firstScan = false;

		object.set_value(value);
		old_value = value;
		break;
	    }
	    case Pwr.eType_Int32:
	    case Pwr.eType_UInt32: {
		int value = dyn.graph.getGdh().getObjectRefInfoInt( p);
		if ( !firstScan) {
		    if ( old_ivalue == value)
			// No change since last time
			return;
		}
		else
		    firstScan = false;

		object.set_value(value);
		old_ivalue = value;
		break;
	    }
	    }
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynBar : " + line);

		    switch ( key) {
		    case Dyn.eSave_Bar: 
			break;
		    case Dyn.eSave_Bar_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_Bar_minvalue_attr: 
			if ( token.hasMoreTokens())
			    minvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_Bar_maxvalue_attr: 
			if ( token.hasMoreTokens())
			    maxvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynBar");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynBar");
	    }
	}

    }

    public class DynTrend extends DynElem {
	String attribute1;
	String attribute2;
	String minvalue_attr1;
	String maxvalue_attr1;
	String minvalue_attr2;
	String maxvalue_attr2;
	String hold_attr;
	int p1 = -1;
	int database1;
	boolean inverted1;
	int a_typeid1;
 	PwrtRefId subid1;
	int p2 = -1;
	int database2;
	boolean inverted2;
	int a_typeid2;
 	PwrtRefId subid2;
	boolean attrFound = false;
	boolean firstScan = true;
	int max_value1_p;
	int min_value1_p;
	PwrtRefId max_value1_subid;
	PwrtRefId min_value1_subid;
	float old_max_value1;
	float old_min_value1;
	int max_value2_p;
	int min_value2_p;
	PwrtRefId max_value2_subid;
	PwrtRefId min_value2_subid;
	float old_max_value2;
	float old_min_value2;
	double scan_time;
	double acc_time;
	int trend_hold;
	int hold_p;
	int hold_database;
	PwrtRefId hold_subid;

	public DynTrend( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Trend, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowTrend object = (GrowTrend)o;

	    if ( attribute1 == null)
		return 0;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute1);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("Trend: " + attribute1);
		return 1;
	    }

	    p1 = ret.id;
	    subid1 = ret.refid;
	    inverted1 = pname.inverted;
	    a_typeid1 = pname.type;
	    attrFound = true;

	    pname = dyn.parseAttrName(attribute2);
	    if ( pname != null && !pname.name.equals("")) {
		ret = null;

		switch( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		    break;
		default:
		    ret = null;
		}

		if ( ret == null || ret.evenSts()) {
		    System.out.println("Trend: " + attribute2);
		    return 1;

		}
		else {
		    p2 = ret.id;
		    subid2 = ret.refid;
		    inverted2 = pname.inverted;
		    a_typeid2 = pname.type;
		}
	    }

	    scan_time = object.get_scan_time();
	    acc_time = scan_time;
	    trend_hold = 0;

	    min_value1_p = 0;
	    pname = dyn.parseAttrName(minvalue_attr1);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 && pname.database == GraphIfc.eDatabase_Gdh) {
		
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		if ( ret != null && ret.oddSts()) {
		    min_value1_p = ret.id;
		    min_value1_subid = ret.refid;
		}
	    }

	    max_value1_p = 0;
	    pname = dyn.parseAttrName(maxvalue_attr1);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 && pname.database == GraphIfc.eDatabase_Gdh) {
		
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		if ( ret != null && ret.oddSts()) {
		    max_value1_p = ret.id;
		    max_value1_subid = ret.refid;
		}
	    }

	    min_value2_p = 0;
	    pname = dyn.parseAttrName(minvalue_attr2);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 && pname.database == GraphIfc.eDatabase_Gdh) {
		
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		if ( ret != null && ret.oddSts()) {
		    min_value2_p = ret.id;
		    min_value2_subid = ret.refid;
		}
	    }

	    max_value2_p = 0;
	    pname = dyn.parseAttrName(maxvalue_attr2);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 && pname.database == GraphIfc.eDatabase_Gdh) {
		
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		if ( ret != null && ret.oddSts()) {
		    max_value2_p = ret.id;
		    max_value2_subid = ret.refid;
		}
	    }

	    hold_p = 0;
	    pname = dyn.parseAttrName(hold_attr);
	    if ( pname != null && !pname.name.equals("")) {
		ret = null;

		switch( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		    break;
		case GraphIfc.eDatabase_Local:
		    ret = dyn.graph.getLdb().refObjectInfo( graph, pname.name);
		    System.out.println("Hold: " + ret + " pname " + pname.name);
		    break;
		default:
		    ret = null;
		}

		if ( ret == null || ret.evenSts()) {
		    System.out.println("Trend: " + hold_attr);
		    return 1;
		}
		else {
		    hold_p = ret.id;
		    hold_subid = ret.refid;
		    hold_database = pname.database;
		}
	    }

	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database1 == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid1);
	    if ( p2 != -1 && database2 == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid2);
	    if ( min_value1_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(min_value1_subid);
	    if ( max_value1_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(max_value1_subid);
	    if ( min_value2_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(min_value2_subid);
	    if ( max_value2_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(max_value2_subid);
	    if ( hold_p != 0 && hold_database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(hold_subid);
	}

	public void scan( GlowArrayElem o) {
	    GrowTrend object = (GrowTrend)o;

	    if ( !attrFound)
		return;
  
	    if ( hold_p != 0) {
		boolean holdval = false;
		switch ( hold_database) {
		case GraphIfc.eDatabase_Gdh:
		    holdval = dyn.graph.getGdh().getObjectRefInfoBoolean(hold_p);
		    break;
		case GraphIfc.eDatabase_Local:
		    holdval = dyn.graph.getLdb().getObjectRefInfoBoolean(hold_p);
		    break;
		}
		if ( holdval)
		    return;
	    }

	    float minval, maxval;
	    if ( max_value1_p != 0 && min_value1_p != 0) {
		minval = dyn.graph.getGdh().getObjectRefInfoFloat( min_value1_p);
		maxval = dyn.graph.getGdh().getObjectRefInfoFloat( max_value1_p);
		if ( minval != old_min_value1 ||
		     maxval != old_max_value1) {
 		    object.set_range_y(0, minval, maxval);
		    old_min_value1 = minval;
		    old_max_value1 = maxval;
		}
	    }

	    if ( firstScan)
		firstScan = false;

	    acc_time += dyn.graph.getScanTime();
	    if ( acc_time + Double.MIN_VALUE >= scan_time) {
		if ( p1 != -1) {
		    switch ( a_typeid1) {
		    case Pwr.eType_Boolean: {
			boolean value = dyn.graph.getGdh().getObjectRefInfoBoolean( p1);
			if ( value)
			    object.add_value(1, 0);
			else
			    object.add_value(0, 0);
			System.out.println("DynTrend add : " + value);
			break;
		    }
		    case Pwr.eType_Float32: {
			float value = dyn.graph.getGdh().getObjectRefInfoFloat( p1);
			object.add_value((double)value, 0);
			break;
		    }
		    case Pwr.eType_Int32:
		    case Pwr.eType_UInt32: {
			int value = dyn.graph.getGdh().getObjectRefInfoInt( p1);
			object.add_value((double)value, 0);
			break;
		    }
		    default: ;
		    }
		}
		if ( p2 != -1) {
		    switch ( a_typeid2) {
		    case Pwr.eType_Boolean: {
			boolean value = dyn.graph.getGdh().getObjectRefInfoBoolean( p2);
			if ( value)
			    object.add_value(1, 1);
			else
			    object.add_value(0, 1);
			break;
		    }
		    case Pwr.eType_Float32: {
			float value = dyn.graph.getGdh().getObjectRefInfoFloat( p2);
			object.add_value((double)value, 1);
			break;
		    }
		    case Pwr.eType_Int32:
		    case Pwr.eType_UInt32: {
			int value = dyn.graph.getGdh().getObjectRefInfoInt( p2);
			object.add_value((double)value, 1);
			break;
		    }
		    default: ;
		    }
		}

	    }
	    acc_time = 0;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynTrend : " + line);

		    switch ( key) {
		    case Dyn.eSave_Trend: 
			break;
		    case Dyn.eSave_Trend_attribute1: 
			if ( token.hasMoreTokens())
			    attribute1 = token.nextToken();
			break;
		    case Dyn.eSave_Trend_attribute2: 
			if ( token.hasMoreTokens())
			    attribute2 = token.nextToken();
			break;
		    case Dyn.eSave_Trend_minvalue_attr1: 
			if ( token.hasMoreTokens())
			    minvalue_attr1 = token.nextToken();
			break;
		    case Dyn.eSave_Trend_maxvalue_attr1: 
			if ( token.hasMoreTokens())
			    maxvalue_attr1 = token.nextToken();
			break;
		    case Dyn.eSave_Trend_minvalue_attr2: 
			if ( token.hasMoreTokens())
			    minvalue_attr2 = token.nextToken();
			break;
		    case Dyn.eSave_Trend_maxvalue_attr2: 
			if ( token.hasMoreTokens())
			    maxvalue_attr2 = token.nextToken();
			break;
		    case Dyn.eSave_Trend_hold_attr: 
			if ( token.hasMoreTokens())
			    hold_attr = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynTrend");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynTrend");
	    }
	}

    }

    public class DynXY_Curve extends DynElem {
	String x_attr;
	String y_attr;
	String y_minvalue_attr;
	String y_maxvalue_attr;
	String x_minvalue_attr;
	String x_maxvalue_attr;
	String noofpoints_attr;
	String update_attr;
	double y_min_value;
	double y_max_value;
	double x_min_value;
	double x_max_value;
	int datatype;
	int curve_color;
	int fill_color;

	public DynXY_Curve( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_XY_Curve, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynXY_Curve : " + line);

		    switch ( key) {
		    case Dyn.eSave_XY_Curve: 
			break;
		    case Dyn.eSave_XY_Curve_x_attr: 
			if ( token.hasMoreTokens())
			    x_attr = token.nextToken();
			break;
		    case Dyn.eSave_XY_Curve_y_attr: 
			if ( token.hasMoreTokens())
			    y_attr = token.nextToken();
			break;
		    case Dyn.eSave_XY_Curve_y_minvalue_attr: 
			if ( token.hasMoreTokens())
			    y_minvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_XY_Curve_y_maxvalue_attr: 
			if ( token.hasMoreTokens())
			    y_maxvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_XY_Curve_x_minvalue_attr: 
			if ( token.hasMoreTokens())
			    x_minvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_XY_Curve_x_maxvalue_attr: 
			if ( token.hasMoreTokens())
			    x_maxvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_XY_Curve_noofpoints_attr: 
			if ( token.hasMoreTokens())
			    noofpoints_attr = token.nextToken();
			break;
		    case Dyn.eSave_XY_Curve_update_attr: 
			if ( token.hasMoreTokens())
			    update_attr = token.nextToken();
			break;
		    case Dyn.eSave_XY_Curve_y_min_value: 
			y_min_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_XY_Curve_y_max_value: 
			y_max_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_XY_Curve_x_min_value: 
			x_min_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_XY_Curve_x_max_value: 
			x_max_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_XY_Curve_datatype: 
			datatype = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_XY_Curve_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_XY_Curve_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_XY_Curve_curve_color: 
			curve_color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_XY_Curve_fill_color: 
			fill_color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynXY_Curve");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynXY_Curve");
	    }
	}

    }

    public class DynTable extends DynElem {
	String[] attribute = new String[12];
	String[] format = new String[12];
	String[] sel_attribute = new String[12];
	public GlowCFormat[] cFormat;
	boolean firstScan = true;
	public boolean[][] oldValueB;
	public float[][] oldValueF;
	public int[][] oldValueI;
	public String[][] oldValueS;
	int[] p;
	int[][] hp;
	int[] db;
	int[] elements;
	int[] type_id;
	int[] size;
	boolean[] headerRef;
	PwrtRefId[] subid;
	PwrtRefId[][] hsubid;
	int columns;
	int rows;
	StringBuffer sb = new StringBuffer();

	public DynTable( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Table, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynTable : " + line);

		    switch ( key) {
		    case Dyn.eSave_Table: 
			break;
		    case Dyn.eSave_Table_attribute1: 
			if ( token.hasMoreTokens())
			    attribute[0] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format1: 
			if ( token.hasMoreTokens())
			    format[0] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute1: 
			if ( token.hasMoreTokens())
			    sel_attribute[0] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute2: 
			if ( token.hasMoreTokens())
			    attribute[1] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format2: 
			if ( token.hasMoreTokens())
			    format[1] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute2: 
			if ( token.hasMoreTokens())
			    sel_attribute[1] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute3: 
			if ( token.hasMoreTokens())
			    attribute[2] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format3: 
			if ( token.hasMoreTokens())
			    format[2] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute3: 
			if ( token.hasMoreTokens())
			    sel_attribute[2] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute4: 
			if ( token.hasMoreTokens())
			    attribute[3] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format4: 
			if ( token.hasMoreTokens())
			    format[3] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute4: 
			if ( token.hasMoreTokens())
			    sel_attribute[3] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute5: 
			if ( token.hasMoreTokens())
			    attribute[4] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format5: 
			if ( token.hasMoreTokens())
			    format[4] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute5: 
			if ( token.hasMoreTokens())
			    sel_attribute[4] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute6: 
			if ( token.hasMoreTokens())
			    attribute[5] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format6: 
			if ( token.hasMoreTokens())
			    format[5] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute6: 
			if ( token.hasMoreTokens())
			    sel_attribute[5] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute7: 
			if ( token.hasMoreTokens())
			    attribute[6] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format7: 
			if ( token.hasMoreTokens())
			    format[6] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute7: 
			if ( token.hasMoreTokens())
			    sel_attribute[6] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute8: 
			if ( token.hasMoreTokens())
			    attribute[7] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format8: 
			if ( token.hasMoreTokens())
			    format[7] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute8: 
			if ( token.hasMoreTokens())
			    sel_attribute[7] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute9: 
			if ( token.hasMoreTokens())
			    attribute[8] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format9: 
			if ( token.hasMoreTokens())
			    format[8] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute9: 
			if ( token.hasMoreTokens())
			    sel_attribute[8] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute10: 
			if ( token.hasMoreTokens())
			    attribute[9] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format10: 
			if ( token.hasMoreTokens())
			    format[9] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute10: 
			if ( token.hasMoreTokens())
			    sel_attribute[9] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute11: 
			if ( token.hasMoreTokens())
			    attribute[10] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format11: 
			if ( token.hasMoreTokens())
			    format[10] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute11: 
			if ( token.hasMoreTokens())
			    sel_attribute[10] = token.nextToken();
			break;
		    case Dyn.eSave_Table_attribute12: 
			if ( token.hasMoreTokens())
			    attribute[11] = token.nextToken();
			break;
		    case Dyn.eSave_Table_format12: 
			if ( token.hasMoreTokens())
			    format[11] = token.nextToken();
			break;
		    case Dyn.eSave_Table_sel_attribute12: 
			if ( token.hasMoreTokens())
			    sel_attribute[11] = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynTable");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynTable");
	    }
	}

	public int connect(GlowArrayElem o) {
	    GrowTable object = (GrowTable)o;
	    int		sts;
	    String	aname0 = null;

	    GlowTableInfo info = object.getTableInfo();
	    columns = info.columns;
	    rows = info.rows;

	    db = new int[columns];
	    size = new int[columns];
	    elements = new int[columns];
	    type_id = new int[columns];
	    subid = new PwrtRefId[columns];
	    headerRef = new boolean[columns];
	    p = new int[columns];
	    for ( int i = 0; i < columns; i++)
		p[i] = -1;
	    oldValueB = new boolean[columns][];
	    oldValueF = new float[columns][];
	    oldValueI = new int[columns][];
	    oldValueS = new String[columns][];
	    cFormat = new GlowCFormat[columns];
	    for ( int i = 0; i < columns; i++)
		cFormat[i] = new GlowCFormat( format[i]);

	    for ( int i = 0; i < columns; i++) {
		DynParsedAttrName pname = dyn.parseAttrName(attribute[i]);
		if ( pname == null || pname.name.equals("")) 
		    continue;

		if ( pname.elements == 0)
		    continue;

		db[i] = pname.database;

		GdhrRefObjectInfo ret = null;

		if ( !pname.tname.startsWith("$header")) { 
		    switch ( db[i]) {
		    case GraphIfc.eDatabase_Gdh:
			ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
			System.out.println("Table ret.sts " + ret.getSts());
			if ( i == 0)
			    aname0 = pname.name;
			break;
		    default:
			;
		    }
		    if ( ret == null || ret.evenSts())
			continue;

		    p[i] = ret.id;
		    size[i] = ret.size;
		    type_id[i] = pname.type;
		    subid[i] = ret.refid;
		    elements[i] = Math.min(ret.getElements(), rows);
		    System.out.println("Table ret p: " + p[i] + " type_id: " + type_id[i]);
		}
		else {
		    headerRef[i] = true;

		    if ( aname0 == null)
			continue;
		    
		    for ( int j = 0; j < elements[0]; j++) {
			String hname = aname0 + "[" + j + "]";
			CdhrString sret = dyn.graph.getGdh().getObjectInfoString(hname);
			if ( sret.evenSts() || sret.str.equals(""))
			    continue;

			String aname = sret.str + pname.tname.substring(7);

			ret = dyn.graph.getGdh().refObjectInfo( aname);
			System.out.println("Table $header " + i + " ret.sts " + ret.getSts());

			if ( ret.evenSts())
			    continue;

			if ( hp == null) {
			    hp = new int[columns][];
			    hsubid = new PwrtRefId[columns][];
			}
			if ( hp[i] == null) {
			    hp[i] = new int[elements[0]];
			    hsubid[i] = new PwrtRefId[elements[0]];
			    for ( int k = 0; k < elements[0]; k++) 
				hp[i][k] = -1;
			}

			hp[i][j] = ret.id;
			hsubid[i][j] = ret.refid;
			if ( j == 0) {
			    size[i] = ret.size;
			    type_id[i] = pname.type;
			    elements[i] = elements[0];
			}
		    }
		}

		switch ( type_id[i]) {
		case Pwr.eType_Float32:
		    oldValueF[i] = new float[rows];
		    break;
		case Pwr.eType_Boolean:
		    oldValueB[i] = new boolean[rows];
		    break;
		case Pwr.eType_Int32:
		case Pwr.eType_Int16:
		case Pwr.eType_Int8:
		case Pwr.eType_UInt32:
		case Pwr.eType_UInt16:
		case Pwr.eType_UInt8:
		    oldValueI[i] = new int[rows];
		    break;
		case Pwr.eType_String:
		case Pwr.eType_Objid:
		case Pwr.eType_AttrRef:
		case Pwr.eType_Time:
		case Pwr.eType_DeltaTime:
		    oldValueS[i] = new String[rows];
		    break;
		}

    
	    }
	    object.setTableInfo(info);

	    return 1;
	}

	public void disconnect() {
	    for ( int i = 0; i < columns; i++) {
		if ( !headerRef[i]) {
		    if ( p[i] != -1 && db[i] == GraphIfc.eDatabase_Gdh)
			dyn.graph.getGdh().unrefObjectInfo(subid[i]);
		    p[i] = -1;
		}
		else {
		    for ( int j = 0; j < elements[i]; j++) {
			if ( hp[i][j] != -1)
			    dyn.graph.getGdh().unrefObjectInfo(hsubid[i][j]);
		    }
		}
		switch (type_id[i]) {
		case Pwr.eType_Float32:
		    if ( oldValueF[i] != null)
			oldValueF[i] = null;
		    break;
		case Pwr.eType_Boolean:
		    if ( oldValueB[i] != null)
			oldValueB[i] = null;
		    break;
		case Pwr.eType_Int32:
		case Pwr.eType_Int16:
		case Pwr.eType_Int8:
		case Pwr.eType_UInt32:
		case Pwr.eType_UInt16:
		case Pwr.eType_UInt8:
		    if ( oldValueI[i] != null)
			oldValueI[i] = null;
		    break;
		case Pwr.eType_String:
		case Pwr.eType_Objid:
		case Pwr.eType_AttrRef:
		case Pwr.eType_Time:
		case Pwr.eType_DeltaTime:
		    if ( oldValueS[i] != null)
			oldValueS[i] = null;
		    break;
		}
	    }
	}

	public void scan( GlowArrayElem o) {
	    GrowTable object = (GrowTable)o;

	    if ( p[0] == -1)
		return;

	    for ( int i = 0; i < columns; i++) {
		if ( !headerRef[i]) {
		    if ( p[i] == -1)
			continue;
		
		    switch ( type_id[i]) {
		    case Pwr.eType_Float32: {
			float[] val = dyn.graph.getGdh().getObjectRefInfoFloatArray(p[i], elements[i]);
			for ( int j = 0; j < Math.min(elements[i], val.length); j++) {
			    if ( oldValueF[i][j] != val[j] || firstScan) {
				sb = cFormat[i].format( val[j], sb);
				object.setValue(new String(sb), i, j);
				oldValueF[i][j] = val[j];
			    }
			}
			break;
		    }
		    case Pwr.eType_Boolean: {
			boolean[] val = dyn.graph.getGdh().getObjectRefInfoBooleanArray(p[i], elements[i]);
			for ( int j = 0; j < Math.min(elements[i], val.length); j++) {
			    if ( firstScan || oldValueB[i][j] != val[j]) {
				if ( val[j])
				    object.setValue(new String("1"), i, j);
				else
				    object.setValue(new String("0"), i, j);
				object.setValue(new String(sb), i, j);
				oldValueB[i][j] = val[j];
			    }
			}
			break;
		    }
		    case Pwr.eType_Int32:
		    case Pwr.eType_Int16:
		    case Pwr.eType_Int8:
		    case Pwr.eType_UInt32:
		    case Pwr.eType_UInt16:
		    case Pwr.eType_UInt8: {
			int[] val = dyn.graph.getGdh().getObjectRefInfoIntArray(p[i], elements[i]);
			for ( int j = 0; j < Math.min(elements[i], val.length); j++) {
			    if ( oldValueI[i][j] != val[j] || firstScan) {
				sb = cFormat[i].format( val[j], sb);
				object.setValue(new String(sb), i, j);
				oldValueI[i][j] = val[j];
			    }
			}
			break;
		    }
		    case Pwr.eType_String:
		    case Pwr.eType_Objid:
		    case Pwr.eType_AttrRef:
		    case Pwr.eType_Time:
		    case Pwr.eType_DeltaTime: {
			String[] val = dyn.graph.getGdh().getObjectRefInfoStringArray(p[i], type_id[i],
										      size[i], elements[i]);
			for ( int j = 0; j < Math.min(elements[i], val.length); j++) {
			    if ( firstScan || !oldValueS[i][j].equals(val[j])) {
				switch ( type_id[i]) {
				case Pwr.eType_AttrRef:
				case Pwr.eType_Objid: {
				    if ( format[i].equals("%1o"))
					object.setValue(val[j], i, j);
				    else {
					int idx = val[j].lastIndexOf('-');
					if ( idx == -1)
					    object.setValue(val[j], i, j);
					else
					    object.setValue(val[j].substring(idx+1), i, j);
				    }
					
				    break;
				}
				default:
				    object.setValue(val[j], i, j);
				}
				oldValueS[i][j] = val[j];
			    }
			}
			break;
		    }
		    }
		}
		else {
		    // $header reference
		    for ( int j = 0; j < elements[i]; j++) {
			if ( hp[i][j] == -1)
			    continue;

			switch ( type_id[i]) {
			case Pwr.eType_Float32: {
			    float val = dyn.graph.getGdh().getObjectRefInfoFloat(hp[i][j]);
			    if ( oldValueF[i][j] != val || firstScan) {
				sb = cFormat[i].format( val, sb);
				object.setValue(new String(sb), i, j);
				oldValueF[i][j] = val;
			    }
			    break;
			}
			case Pwr.eType_Boolean: {
			    boolean val = dyn.graph.getGdh().getObjectRefInfoBoolean(hp[i][j]);
			    if ( firstScan || oldValueB[i][j] != val) {
				if ( val)
				    object.setValue(new String("1"), i, j);
				else
				    object.setValue(new String("0"), i, j);
				object.setValue(new String(sb), i, j);
				oldValueB[i][j] = val;
			    }
			    break;
			}
			case Pwr.eType_Int32:
			case Pwr.eType_Int16:
			case Pwr.eType_Int8:
			case Pwr.eType_UInt32:
			case Pwr.eType_UInt16:
			case Pwr.eType_UInt8: {
			    int val = dyn.graph.getGdh().getObjectRefInfoInt(hp[i][j]);
			    if ( oldValueI[i][j] != val || firstScan) {
				sb = cFormat[i].format( val, sb);
				object.setValue(new String(sb), i, j);
				oldValueI[i][j] = val;
			    }
			    break;
			}
			case Pwr.eType_String:
			case Pwr.eType_Objid:
			case Pwr.eType_AttrRef:
			case Pwr.eType_Time:
			case Pwr.eType_DeltaTime: {
			    String val = dyn.graph.getGdh().getObjectRefInfoString(hp[i][j], type_id[i]);
			    if ( firstScan || !oldValueS[i][j].equals(val)) {
				object.setValue(val, i, j);
				oldValueS[i][j] = val;
			    }
			    break;
			}
			}			
		    }
		}
	    }

	    if ( firstScan)
		firstScan = false;
	}
    }

    public class DynStatusColor extends DynElem {
	String attribute;
	int nostatus_color;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	int oldValue;
	boolean firstScan = true;
	int a_typeid;
	int oldStatus;
	boolean on;


	public DynStatusColor( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_StatusColor, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("StatusColor: " + attribute);
		return 1;
	    }

	    attrFound = true;
	    p = ret.id;
	    subid = ret.refid;
	    a_typeid = pname.type;
	    database = pname.database;

	    return 1;
	}


	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}
	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound || dyn.ignoreColor)
		return;

	    if ( database == GraphIfc.eDatabase_Gdh && a_typeid == Pwr.eType_NetStatus) {
		// TODO get subscription oldness
	    }

	    int value = dyn.graph.getGdh().getObjectRefInfoInt( p);

	    if ( !firstScan && oldStatus != Dyn.ePwrStatus_Fatal) {
		if ( oldValue == value && dyn.resetColor)
		    // No change since last time
		    return;
	    }

	    oldValue = value;

	    if ( value == 0)
		value = Dyn.ePwrStatus_No;
	    else {
		switch ( value & 7) {
		case 3:
		case 1:
		    value = Dyn.ePwrStatus_Success;
		    break;
		case 0:
		    value = Dyn.ePwrStatus_Warning;
		    break;
		case 2:
		    value = Dyn.ePwrStatus_Error;
		    break;
		case 4:
		    value = Dyn.ePwrStatus_Fatal;
		    break;
		default:
		    value = Dyn.ePwrStatus_No;
		}
	    }
	    if ( !firstScan && oldStatus == value && oldStatus != Dyn.ePwrStatus_Fatal)
		return;
	    else
		firstScan = false;

	    if ( (dyn.total_dyn_type1 & Dyn.mDynType1_Tone) != 0) {
		switch ( value) {
		case Dyn.ePwrStatus_No:
		    if ( nostatus_color >= Glow.eDrawTone__)
			object.setFillColor( nostatus_color);
		    else
			object.setColorTone( nostatus_color);
		    break;
		case Dyn.ePwrStatus_Success:
		    if ( nostatus_color >= Glow.eDrawTone__)
			object.resetFillColor();
		    object.resetColorTone();
		    break;
		case Dyn.ePwrStatus_Warning:
		    object.setColorTone( Glow.eDrawTone_Yellow);
		    break;
		case Dyn.ePwrStatus_Error:
		    object.setColorTone( Glow.eDrawTone_Red);
		    break;
		case Dyn.ePwrStatus_Fatal:
		    on = !on;
		    if ( on)
			object.setColorTone( Glow.eDrawTone_Red);
		    else {
			if ( nostatus_color >= Glow.eDrawTone__)
			    object.setFillColor( nostatus_color);
			else
			    object.setColorTone( nostatus_color);
		    }
		    break;
		}
		dyn.repaintNow = true;
	    }
	    else {
		switch ( value) {
		case Dyn.ePwrStatus_No:
		    object.setFillColor( nostatus_color);
		    break;
		case Dyn.ePwrStatus_Success:
		    object.resetFillColor();
		    break;
		case Dyn.ePwrStatus_Warning:
		    object.setFillColor( Glow.eDrawType_ColorYellow);
		    break;
		case Dyn.ePwrStatus_Error:
		    object.setFillColor( Glow.eDrawType_ColorRed);
		    break;
		case Dyn.ePwrStatus_Fatal:
		    on = !on;
		    if ( on)
			object.setFillColor( Glow.eDrawType_ColorRed);
		    else
			object.setFillColor( nostatus_color);
		    break;
		}
		dyn.repaintNow = true;
	    }
	    oldStatus = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynStatusColor : " + line);

		    switch ( key) {
		    case Dyn.eSave_StatusColor: 
			break;
		    case Dyn.eSave_StatusColor_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_StatusColor_nostatus_color: 
			nostatus_color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynStatusColor");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynStatusColor");
	    }
	}

    }

    public class DynPie extends DynElem {
	String[] attribute = new String[12];

	public DynPie( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_Pie, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynPie : " + line);

		    switch ( key) {
		    case Dyn.eSave_Pie: 
			break;
		    case Dyn.eSave_Pie_attribute1: 
			if ( token.hasMoreTokens())
			    attribute[0] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute2: 
			if ( token.hasMoreTokens())
			    attribute[1] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute3: 
			if ( token.hasMoreTokens())
			    attribute[2] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute4: 
			if ( token.hasMoreTokens())
			    attribute[3] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute5: 
			if ( token.hasMoreTokens())
			    attribute[4] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute6: 
			if ( token.hasMoreTokens())
			    attribute[5] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute7: 
			if ( token.hasMoreTokens())
			    attribute[6] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute8: 
			if ( token.hasMoreTokens())
			    attribute[7] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute9: 
			if ( token.hasMoreTokens())
			    attribute[8] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute10: 
			if ( token.hasMoreTokens())
			    attribute[9] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute11: 
			if ( token.hasMoreTokens())
			    attribute[10] = token.nextToken();
			break;
		    case Dyn.eSave_Pie_attribute12: 
			if ( token.hasMoreTokens())
			    attribute[11] = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynPie");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynPie");
	    }
	}

    }

    public class DynBarChart extends DynElem {
	String[] attribute = new String[12];

	public DynBarChart( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_BarChart, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynBarChart : " + line);

		    switch ( key) {
		    case Dyn.eSave_BarChart: 
			break;
		    case Dyn.eSave_BarChart_attribute1: 
			if ( token.hasMoreTokens())
			    attribute[0] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute2: 
			if ( token.hasMoreTokens())
			    attribute[1] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute3: 
			if ( token.hasMoreTokens())
			    attribute[2] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute4: 
			if ( token.hasMoreTokens())
			    attribute[3] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute5: 
			if ( token.hasMoreTokens())
			    attribute[4] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute6: 
			if ( token.hasMoreTokens())
			    attribute[5] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute7: 
			if ( token.hasMoreTokens())
			    attribute[6] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute8: 
			if ( token.hasMoreTokens())
			    attribute[7] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute9: 
			if ( token.hasMoreTokens())
			    attribute[8] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute10: 
			if ( token.hasMoreTokens())
			    attribute[9] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute11: 
			if ( token.hasMoreTokens())
			    attribute[10] = token.nextToken();
			break;
		    case Dyn.eSave_BarChart_attribute12: 
			if ( token.hasMoreTokens())
			    attribute[11] = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynBarChart");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynBarChart");
	    }
	}

    }

    public class DynAxis extends DynElem {
	String minvalue_attr;
	String maxvalue_attr;

	public DynAxis( Dyn dyn) {
	    super(dyn, 0, Dyn.mDynType2_Axis, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynAxis : " + line);

		    switch ( key) {
		    case Dyn.eSave_Axis: 
			break;
		    case Dyn.eSave_Axis_minvalue_attr: 
			if ( token.hasMoreTokens())
			    minvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_Axis_maxvalue_attr: 
			if ( token.hasMoreTokens())
			    maxvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynAxis");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynAxis");
	    }
	}

    }

    public class DynHostObject extends DynElem {
	String hostobject;

	public DynHostObject( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_HostObject, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynHostObject : " + line);

		    switch ( key) {
		    case Dyn.eSave_HostObject: 
			break;
		    case Dyn.eSave_HostObject_object: 
			if ( token.hasMoreTokens())
			    hostobject = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynHostObject");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynHostObject");
	    }
	}

    }

    public class DynDigSound extends DynElem {
	String attribute;
	String soundobject;
	int level;
	int interval;

	public DynDigSound( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigSound, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynDigSound : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigSound: 
			break;
		    case Dyn.eSave_DigSound_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_DigSound_soundobject: 
			if ( token.hasMoreTokens())
			    soundobject = token.nextToken();
			break;
		    case Dyn.eSave_DigSound_level: 
			level = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_DigSound_interval: 
			interval = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_DigSound_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_DigSound_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigSound");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigSound");
	    }
	}

    }

    public class DynFillLevel extends DynElem {
	String attribute;
	int color;
	int direction;
	double max_value;
	double min_value;
	String minvalue_attr;
	String maxvalue_attr;
 	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean firstScan = true;
	int a_typeid;
        float oldValue;
	boolean limits_found = false;
	double limit_min;
	double limit_max;
	int max_value_p;
	int min_value_p;
	PwrtRefId max_value_subid;
	PwrtRefId min_value_subid;

	public DynFillLevel( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_FillLevel, 0, 0, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    color = dyn.getColor2(object, color);
	    if ( color < 0 || color >= Glow.eDrawType__)
		return 0;

	    if ( attribute == null)
		return 0;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("FillLevel: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    attrFound = true;

	    if ( (dyn.total_dyn_type1 & Dyn.mDynType1_Tone) != 0) {
		if ( color >= Glow.eDrawTone__)
		    object.setLevelFillColor(color);
		else
		    object.setLevelColorTone(color);
	    }
	    else
		object.setLevelFillColor(color);

	    GlowFillLevelLimits limits = object.getLimits();
	    if ( (limits.status & 1) != 0) {
		limits_found = true;
		limit_min = limits.min;
		limit_max = limits.max;
		direction = limits.direction;
	    }
	    object.setLevelDirection( direction);

	    min_value_p = 0;
	    pname = dyn.parseAttrName(minvalue_attr);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 && database == GraphIfc.eDatabase_Gdh) {
		
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		if ( ret != null && ret.oddSts()) {
		    min_value_p = ret.id;
		    min_value_subid = ret.refid;
		}
	    }

	    max_value_p = 0;
	    pname = dyn.parseAttrName(maxvalue_attr);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 && database == GraphIfc.eDatabase_Gdh) {
		
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		if ( ret != null && ret.oddSts()) {
		    max_value_p = ret.id;
		    max_value_subid = ret.refid;
		}
	    }

	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	    if ( min_value_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(min_value_subid);
	    if ( max_value_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(max_value_subid);
	}

	public void scan(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;
  
	    float minval, maxval;
	    float pvalue = dyn.graph.getGdh().getObjectRefInfoFloat( p);
	    if ( max_value_p != 0 && min_value_p != 0) {
		minval = dyn.graph.getGdh().getObjectRefInfoFloat( min_value_p);
		maxval = dyn.graph.getGdh().getObjectRefInfoFloat( max_value_p);
		if ( minval != min_value ||
		     maxval != max_value) {
		    min_value = minval;
		    max_value = maxval;
		    firstScan = true;
		}
	    }

	    if ( !firstScan) {
		if ( Math.abs( oldValue - pvalue) < Float.MIN_VALUE)
		    // No change since last time
		    return;
	    }
	    else
		firstScan = false;

	    if ( max_value == min_value)
		return;

	    double value = 0;
	    if ( !limits_found)
		value = (pvalue - min_value) / (max_value - min_value);
	    else {
		GlowGeometry geom = object.measure();
    
		switch ( direction) {
		case Glow.eDirection_Right:
		    value = ((pvalue - min_value) / (max_value - min_value) * ( limit_max - limit_min) 
			     + (limit_min - geom.ll_x)) / (geom.ur_x - geom.ll_x);
		    break;
		case Glow.eDirection_Left:
		    value = ((pvalue - min_value) / (max_value - min_value) * ( limit_max - limit_min) 
			     + (geom.ur_x - limit_max)) / (geom.ur_x - geom.ll_x);
		    break;
		case Glow.eDirection_Up:
		    value = ((pvalue - min_value) / (max_value - min_value) * ( limit_max - limit_min) 
			     + (limit_min - geom.ll_y)) / (geom.ur_y - geom.ll_y);
		    break;
		case Glow.eDirection_Down:
		    value = ((pvalue - min_value) / (max_value - min_value) * ( limit_max - limit_min) 
			     + (geom.ur_y - limit_max)) / (geom.ur_y - geom.ll_y);
		    break;
		default: ;
		}
	    }
	    System.out.println("FillLevel: " + value);
	    object.setFillLevel( value);
	    oldValue = pvalue;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynFillLevel : " + line);

		    switch ( key) {
		    case Dyn.eSave_FillLevel: 
			break;
		    case Dyn.eSave_FillLevel_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_FillLevel_color: 
			color = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_FillLevel_direction: 
			direction = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_FillLevel_min_value: 
			min_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_FillLevel_max_value: 
			max_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_FillLevel_minvalue_attr: 
			if ( token.hasMoreTokens())
			    minvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_FillLevel_maxvalue_attr: 
			if ( token.hasMoreTokens())
			    maxvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynFillLevel");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynFillLevel");
	    }
	}

    }

    public class DynDigCommand extends DynElem {
	String attribute;
	String command;
  	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	boolean oldValue;

	public DynDigCommand( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_DigCommand, 0, 0, 0);
	}

 	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    case GraphIfc.eDatabase_Ccm:
		// TODO
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigLowColor: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;

	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);

	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value)
		    return;
	    }
	    else
		firstScan = false;
	    System.out.println("DigCommand: value " + value);	
	    if ( value && !oldValue) {
		String cmd = graph.getCommand(command);

		dyn.graph.command(cmd);
	    }
	    oldValue = value;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynDigCommand : " + line);

		    switch ( key) {
		    case Dyn.eSave_DigCommand: 
			break;
		    case Dyn.eSave_DigCommand_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_DigCommand_command: 
			if ( token.hasMoreTokens())
			    command = line.substring(5);
			break;
		    case Dyn.eSave_DigCommand_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_DigCommand_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynDigCommand");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynDigCommand");
	    }
	}

    }

    public class DynPopupMenu extends DynElem {
	String ref_object;

	public DynPopupMenu( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_PopupMenu, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynPopupMenu : " + line);

		    switch ( key) {
		    case Dyn.eSave_PopupMenu: 
			break;
		    case Dyn.eSave_PopupMenu_ref_object: 
			if ( token.hasMoreTokens())
			    ref_object = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynPopupMenu");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynPopupMenu");
	    }
	}

    }

    public class DynSetDig extends DynElem {
	String attribute;

	public DynSetDig( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_SetDig, 0);
	}

	public int action( GlowArrayElem object, GlowEvent e) {
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		DynParsedAttrName pname = dyn.parseAttrName(attribute);
		PwrtStatus sts = null;
		switch (pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = dyn.graph.getGdh().setObjectInfo( pname.name, true);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = dyn.graph.getLdb().setObjectInfo( graph, pname.name, true);
		    break;
		}
		if ( sts.evenSts())
		    System.out.println( "SetDig: " + pname.name);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynSetDig : " + line);

		    switch ( key) {
		    case Dyn.eSave_SetDig: 
			break;
		    case Dyn.eSave_SetDig_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_SetDig_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_SetDig_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynSetDig");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynSetDig");
	    }
	}

    }

    public class DynResetDig extends DynElem {
	String attribute;

	public DynResetDig( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_ResetDig, 0);
	}

	public int action( GlowArrayElem object, GlowEvent e) {
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		DynParsedAttrName pname = dyn.parseAttrName(attribute);
		PwrtStatus sts = null;
		switch (pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = dyn.graph.getGdh().setObjectInfo( pname.name, false);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = dyn.graph.getLdb().setObjectInfo( graph, pname.name, false);
		    break;
		}
		if ( sts.evenSts())
		    System.out.println( "ResetDig: " + pname.name);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynResetDig : " + line);

		    switch ( key) {
		    case Dyn.eSave_ResetDig: 
			break;
		    case Dyn.eSave_ResetDig_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_ResetDig_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_ResetDig_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynResetDig");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynResetDig");
	    }
	}

    }

    public class DynToggleDig extends DynElem {
	String attribute;

	public DynToggleDig( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_ToggleDig, 0);
	}

	public int action( GlowArrayElem object, GlowEvent e) {
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		DynParsedAttrName pname = dyn.parseAttrName(attribute);
		PwrtStatus sts = null;
		switch (pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = dyn.graph.getGdh().toggleObjectInfo( pname.name);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = dyn.graph.getLdb().toggleObjectInfo( graph, pname.name);
		    break;
		}
		if ( sts.evenSts())
		    System.out.println( "ToggleDig: " + pname.name);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynToggleDig : " + line);

		    switch ( key) {
		    case Dyn.eSave_ToggleDig: 
			break;
		    case Dyn.eSave_ToggleDig_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynToggleDig");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynToggleDig");
	    }
	}

    }

    public class DynStoDig extends DynElem {
	String attribute;

	public DynStoDig( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_StoDig, 0);
	}

	public int action( GlowArrayElem object, GlowEvent e) {
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down: {
		object.setColorInverse( 1);
		dyn.repaintNow = true;

		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		DynParsedAttrName pname = dyn.parseAttrName(attribute);
		PwrtStatus sts = null;
		switch (pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = dyn.graph.getGdh().setObjectInfo( pname.name, true);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = dyn.graph.getLdb().setObjectInfo( graph, pname.name, true);
		    break;
		}
		if ( sts.evenSts())
		    System.out.println( "SetDig: " + pname.name);
		break;
	    }
	    case Glow.eEvent_MB1Up: {
		object.setColorInverse( 0);
		dyn.repaintNow = true;

		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		DynParsedAttrName pname = dyn.parseAttrName(attribute);
		PwrtStatus sts = null;
		switch (pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    sts = dyn.graph.getGdh().setObjectInfo( pname.name, false);
		    break;
		case GraphIfc.eDatabase_Local:
		    sts = dyn.graph.getLdb().setObjectInfo( graph, pname.name, false);
		    break;
		}
		if ( sts.evenSts())
		    System.out.println( "StoDig: " + pname.name);
		break;
	    }
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynStoDig : " + line);

		    switch ( key) {
		    case Dyn.eSave_StoDig: 
			break;
		    case Dyn.eSave_StoDig_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynStoDig");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynStoDig");
	    }
	}

    }

    public class DynCommand extends DynElem {
	String command;

	public DynCommand( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_Command, 0);
	}

	public int action( GlowArrayElem object, GlowEvent e) {
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		String cmd = graph.getCommand(command);

		dyn.graph.command(cmd);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynCommand : " + line);

		    switch ( key) {
		    case Dyn.eSave_Command: 
			break;
		    case Dyn.eSave_Command_command: 
			if ( token.hasMoreTokens())
			    command = line.substring(5);
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynCommand");
			break;
		    }

		    if ( end_found)
			break;
		}		
	    } catch ( Exception e) {
		System.out.println( "IOException DynCommand");
	    }
	}

    }

    public class DynCommandDoubleClick extends DynElem {
	String command;

	public DynCommandDoubleClick( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_CommandDoubleClick, 0);
	}

	public int action( GlowArrayElem object, GlowEvent e) {
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1DoubleClick:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		String cmd = graph.getCommand(command);

		dyn.graph.command(cmd);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynCommandDoubleClick : " + line);

		    switch ( key) {
		    case Dyn.eSave_CommandDC: 
			break;
		    case Dyn.eSave_CommandDC_command: 
			if ( token.hasMoreTokens())
			    command = line.substring(5);
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynCommandDoubleClick");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynCommandDoubleClick");
	    }
	}

    }

    public class DynConfirm extends DynElem {
	String text;

	public DynConfirm( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_Confirm, 0);
	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    GrowNode object = (GrowNode)o;
	    if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) == 0)
		return 1;

	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		break;
	    case Glow.eEvent_MB1Click:
	    case Glow.eEvent_ValueChanged:
		dyn.graph.openConfirmDialog( dyn, text, object);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynConfirm : " + line);

		    switch ( key) {
		    case Dyn.eSave_Confirm: 
			break;
		    case Dyn.eSave_Confirm_text: 
			if ( token.hasMoreTokens())
			    text = line.substring(5);
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynConfirm");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynConfirm");
	    }
	}

    }

    public class DynIncrAnalog extends DynElem {
	String attribute;
	double increment;
	double min_value;
	double max_value;

	public DynIncrAnalog( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_IncrAnalog, 0);
	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    GrowNode object = (GrowNode)o;
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;

		DynParsedAttrName pname = dyn.parseAttrName(attribute);
		int typeId = pname.type;
		if ( pname.type < 0)
		    typeId = Pwr.eType_Float32;
		switch ( typeId) {
		case Pwr.eType_Int32: {
		    CdhrInt ret = dyn.graph.getGdh().getObjectInfoInt( pname.name);
		    if ( ret.evenSts()) {
			System.out.println( "IncrAnalog " + pname.name);
			break;
		    }
		    ret.value += (int)increment;
		    if ( !( min_value == 0 && max_value == 0)) {
			if ( ret.value < (int)min_value)
			    ret.value = (int) min_value;
			if ( ret.value > (int)max_value)
			    ret.value = (int) max_value;
		    }
		    PwrtStatus sts = dyn.graph.getGdh().setObjectInfo( pname.name, ret.value);
		    if ( sts.evenSts())
			System.out.println( "IncrAnalog " + pname.name);
		    break;
		}
		default: {
		    CdhrFloat ret = dyn.graph.getGdh().getObjectInfoFloat( pname.name);
		    if ( ret.evenSts()) {
			System.out.println( "IncrAnalog " + pname.name);
			break;
		    }
		    ret.value += increment;
		    if ( !( min_value == 0 && max_value == 0)) {
			if ( ret.value < min_value)
			    ret.value = (float) min_value;
			if ( ret.value > max_value)
			    ret.value = (float) max_value;
		    }
		    PwrtStatus sts = dyn.graph.getGdh().setObjectInfo( pname.name, ret.value);
		    if ( sts.evenSts())
			System.out.println( "IncrAnalog " + pname.name);
		}
		}
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynIncrAnalog : " + line);

		    switch ( key) {
		    case Dyn.eSave_IncrAnalog: 
			break;
		    case Dyn.eSave_IncrAnalog_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_IncrAnalog_increment: 
			increment = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_IncrAnalog_min_value: 
			min_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_IncrAnalog_max_value: 
			max_value = new Double(token.nextToken()).doubleValue();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynIncrAnalog");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynIncrAnalog");
	    }
	}

    }

    public class DynRadioButton extends DynElem {
	String attribute;
  	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	boolean oldValue;

	public DynRadioButton( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_RadioButton, 0);
	}

 	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    case GraphIfc.eDatabase_Ccm:
		// TODO
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("DigLowColor: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;
	    boolean value = dyn.getDig(p, a_typeid, bitmask, database);
	    if ( inverted)
		value = !value;

	    if ( !firstScan) {
		if ( oldValue == value)
		    return;
	    }
	    else
		firstScan = false;
	
	    if ( value) {
		object.set_last_nodeclass();
	    }
	    else {
		object.set_root_nodeclass();
	    }
	    oldValue = value;
	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    GrowNode object = (GrowNode)o;
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click: {
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;

		boolean value;
		GrowGroup group = (GrowGroup)dyn.graph.getCtx().get_object_group(object);
		if ( group == null) break;

		Vector<GlowArrayElem> list = group.get_object_list();

		for ( int i = 0; i < list.size(); i++) {
		    GlowArrayElem oe = list.get(i);
		    if ( oe != e.object &&
			 oe.type() == Glow.eObjectType_GrowNode) {
			value = false;

			Dyn gm_dyn = (Dyn)((GrowNode)o).getUserData();

			if ( (gm_dyn.total_action_type1 & Dyn.mActionType1_RadioButton) != 0) {
 			    for ( int j = 0; j < gm_dyn.elements.size(); j++) {
				if ( gm_dyn.elements.get(j).action_type1 == Dyn.mActionType1_RadioButton) {
				    DynParsedAttrName pname = dyn.parseAttrName(((DynRadioButton)gm_dyn.elements.get(j)).attribute);
				    if ( pname.name.startsWith("&"))
					pname.name = dyn.graph.get_reference_name( pname.name);

				    switch ( pname.database) {
				    case GraphIfc.eDatabase_Gdh:
					PwrtStatus sts = dyn.graph.getGdh().setObjectInfo( pname.name, value);
					break;
				    case GraphIfc.eDatabase_Ccm:
					// TODO
					break;
				    default: ;
				    }
				}
			    }
			}
		    }
		}
		
		DynParsedAttrName pname = dyn.parseAttrName(attribute);
		if ( pname.name.startsWith("&"))
		    pname.name = dyn.graph.get_reference_name( pname.name);

		value = true;
		switch ( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    PwrtStatus sts = dyn.graph.getGdh().setObjectInfo( pname.name, value);
		    break;
		case GraphIfc.eDatabase_Ccm:
		    // TODO
		    break;
		default: ;
		}
		break;
	    }
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynRadioButton : " + line);

		    switch ( key) {
		    case Dyn.eSave_RadioButton: 
			break;
		    case Dyn.eSave_RadioButton_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynRadioButton");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynRadioButton");
	    }
	}

    }

    public class DynTipText extends DynElem {
	String text;

	public DynTipText( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_TipText, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynTipText : " + line);

		    switch ( key) {
		    case Dyn.eSave_TipText: 
			break;
		    case Dyn.eSave_TipText_text: 
			if ( token.hasMoreTokens())
			    text = line.substring(5);
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynTipText");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynTipText");
	    }
	}

    }

    public class DynHelp extends DynElem {
	String topic;
	String bookmark;

	public DynHelp( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_Help, 0);
	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    if ( topic == null)
		return 1;

	    GrowNode object = (GrowNode)o;
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		String command;
		if ( bookmark != null && !bookmark.equals(""))
		    command = new String("help " + topic + " /bookmark=" + bookmark);
		else
		    command = new String("help " + topic);

		dyn.graph.command(command);
		break;
	    }
	    return 1;
	}


	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynHelp : " + line);

		    switch ( key) {
		    case Dyn.eSave_Help: 
			break;
		    case Dyn.eSave_Help_topic: 
			if ( token.hasMoreTokens())
			    topic = token.nextToken();
			break;
		    case Dyn.eSave_Help_bookmark: 
			if ( token.hasMoreTokens())
			    bookmark = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynHelp");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynHelp");
	    }
	}

    }

    public class DynOpenGraph extends DynElem {
	String graph_object;

	public DynOpenGraph( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_OpenGraph, 0);
	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    GrowNode object = (GrowNode)o;
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		String command = null;
		if ( !graph_object.equals(""))
		    command = new String("open graph/object=" + graph_object);
		else {
		    // Open classgraph for popup menu object
		    if ( (dyn.total_action_type1 & Dyn.mActionType1_PopupMenu) != 0) {
			for ( int i = 0; i < dyn.elements.size(); i++) {
			    if ( dyn.elements.get(i).action_type1 == Dyn.mActionType1_PopupMenu) {
				command = new String("open graph/class/instance=" + ((DynPopupMenu)dyn.elements.get(i)).ref_object);
				break;
			    }
			}
		    }
		    else if ( (dyn.total_dyn_type1 & Dyn.mDynType1_HostObject) != 0) {
			for ( int i = 0; i < dyn.elements.size(); i++) {
			    if ( dyn.elements.get(i).dyn_type1 == Dyn.mDynType1_HostObject) {
				command = new String("open graph/class/instance=" + ((DynHostObject)dyn.elements.get(i)).hostobject);
				break;
			    }
			}
		    }
		}

		dyn.graph.command(command);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynOpenGraph : " + line);

		    switch ( key) {
		    case Dyn.eSave_OpenGraph: 
			break;
		    case Dyn.eSave_OpenGraph_graph_object: 
			if ( token.hasMoreTokens())
			    graph_object = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynOpenGraph");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynOpenGraph");
	    }
	}

    }

    public class DynOpenURL extends DynElem {
	String url;

	public DynOpenURL( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_OpenURL, 0);
	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    GrowNode object = (GrowNode)o;
	    switch ( e.event) {
	    case Glow.eEvent_MB1Down:
		object.setColorInverse( 1);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Up:
		object.setColorInverse( 0);
		dyn.repaintNow = true;
		break;
	    case Glow.eEvent_MB1Click:
		if ( (dyn.action_type1 & Dyn.mActionType1_Confirm) != 0)
		    break;
		
		String command = new String("open url \"" + url + "\"");

		dyn.graph.command(command);
		break;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynOpenURL : " + line);

		    switch ( key) {
		    case Dyn.eSave_OpenURL: 
			break;
		    case Dyn.eSave_OpenURL_url: 
			if ( token.hasMoreTokens())
			    url = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynOpenURL");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynOpenURL");
	    }
	}

    }

    public class DynInputFocus extends DynElem {
	int initial_focus;
	String next_horizontal;
	String next_vertical;
	String next_tab;

	public DynInputFocus( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_InputFocus, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynInputFocus : " + line);

		    switch ( key) {
		    case Dyn.eSave_InputFocus: 
			break;
		    case Dyn.eSave_InputFocus_initial_focus: 
			initial_focus = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_InputFocus_next_horizontal: 
			if ( token.hasMoreTokens())
			    next_horizontal = token.nextToken();
			break;
		    case Dyn.eSave_InputFocus_next_vertical: 
			if ( token.hasMoreTokens())
			    next_vertical = token.nextToken();
			break;
		    case Dyn.eSave_InputFocus_next_tab: 
			if ( token.hasMoreTokens())
			    next_tab = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynInputFocus");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynInputFocus");
	    }
	}

    }

    public class DynCloseGraph extends DynElem {

	public DynCloseGraph( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_CloseGraph, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynCloseGraph : " + line);

		    switch ( key) {
		    case Dyn.eSave_CloseGraph: 
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynCloseGraph");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynCloseGraph");
	    }
	}

    }


    public class DynSlider extends DynElem {
	String attribute;
	String minvalue_attr;
	String maxvalue_attr;
	String insensitive_attr;
	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	float old_value;
	int old_ivalue;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
	int max_value_p;
	PwrtRefId max_value_subid;
	int min_value_p;
	PwrtRefId min_value_subid;
	int insensitive_p;
	PwrtRefId insensitive_subid;
	int insensitive_db;
	boolean insensitive_inverted;
	float min_value;
	float max_value;
	float old_min_value;
	float old_max_value;
	boolean slider_disabled = true;
	int direction;

	public DynSlider( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_Slider, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowSlider object = (GrowSlider)o;
	    System.out.println("Slider connect");
	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("Slider: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;

	    // Get min and max position from slider background
	    double max_value, min_value, max_pos, min_pos;
	    Object background;
	    double origo;

	    if ( !object.transformIsStored()) {
		object.storeTransform();
		GlowGeometry g = object.measure();
		System.out.println("Slider measure: (" + g.ll_x + "," + g.ll_y + ") (" +  g.ur_x + "," + g.ur_y + ")");
		GlowSliderInfo info = ((GrowSlider)object).get_info();
		GlowBackgroundObject b = dyn.graph.getCtx().getBackgroundObjectLimits(Dyn.mDynType1_SliderBackground,
								 (g.ll_x + g.ur_x) / 2, (g.ll_y + g.ur_y) / 2);
		System.out.println("Slider background sts: " + b.sts + " direction " + b.direction);
		if ( (b.sts & 1) != 0) {
		    direction = b.direction;
		    origo = ((GrowSlider)object).get_origo(info.direction);

		    switch( direction) {
		    case Glow.eDirection_Down:
			info.max_position = b.max - origo;
			info.min_position = b.min - origo;
			((GrowSlider)object).set_info(info);

			object.move_to(g.ll_x, info.min_position);
			break;
		    case Glow.eDirection_Up:
			info.max_position = b.max - (g.ur_y - g.ll_y - origo);
			info.min_position = b.min - (g.ur_y - g.ll_y - origo);
			((GrowSlider)object).set_info(info);
			object.move_to(g.ll_x, info.min_position);
			break;
		    case Glow.eDirection_Left:
			info.max_position = b.max - (g.ur_x - g.ll_x - origo);
			info.min_position = b.min - (g.ur_x - g.ll_x - origo);
			((GrowSlider)object).set_info(info);
			object.move_to(info.min_position, g.ll_y);
			break;
		    case Glow.eDirection_Right:
			info.max_position = b.max - origo;
			info.min_position = b.min - origo;
			((GrowSlider)object).set_info(info);
			object.move_to(info.min_position, g.ll_y);
			break;
		    default:
			;
		    }
		}
		else
		    direction = info.direction;

		object.storeTransform();
	    }
	    
	    max_value_p = 0;
	    pname = dyn.parseAttrName(maxvalue_attr);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 ) {
		ret = null;
		
		switch( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		    break;
		default:
		    ret = null;
		}
		if ( ret != null) {
		    max_value_p = ret.id;
		    max_value_subid = ret.refid;		    
		}
	    }

	    min_value_p = 0;
	    pname = dyn.parseAttrName(minvalue_attr);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Float32 ) {
		ret = null;

		switch( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		    break;
		default:
		    ret = null;
		}
		if ( ret != null) {
		    min_value_p = ret.id;
		    min_value_subid = ret.refid;
		}
	    }

	    insensitive_p = 0;
	    pname = dyn.parseAttrName(insensitive_attr);
	    if ( pname != null && !pname.name.equals("") && pname.type == Pwr.eType_Boolean) {
		System.out.println("Slider insensitive " + pname.name + " type : " + pname.type);
		ret = null;
		
		switch( pname.database) {
		case GraphIfc.eDatabase_Gdh:
		    ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		    break;
		case GraphIfc.eDatabase_Local:
		    ret = dyn.graph.getLdb().refObjectInfo( graph, pname.name);
		    System.out.println("Slider insensitive " + pname.name + " ret : " + ret);
		    break;
		default:
		    ret = null;
		}
		if ( ret != null) {
		    insensitive_p = ret.id;
		    insensitive_subid = ret.refid;
		    insensitive_inverted = pname.inverted;
		    insensitive_db = pname.database;
		}
	    }
	    System.out.println("Slider connect end");
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	    if ( min_value_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(min_value_subid);
	    if ( max_value_p != 0)
		dyn.graph.getGdh().unrefObjectInfo(max_value_subid);
	    if ( insensitive_p != 0 && insensitive_db == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(insensitive_subid);
	}
	
	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;
	    
	    float value = 0;
	    int ivalue = 0;

	    switch ( a_typeid) {
	    case Pwr.eType_Float32:
		value = dyn.graph.getGdh().getObjectRefInfoFloat( p);
		break;
	    case Pwr.eType_Int32:
		ivalue = dyn.graph.getGdh().getObjectRefInfoInt( p);
		break;
	    case Pwr.eType_Boolean: {
		boolean b;
		b = dyn.graph.getGdh().getObjectRefInfoBoolean( p);
		ivalue = b ? 1 : 0;
		break;
	    }
	    }

	    if ( insensitive_p != 0) {
		switch ( insensitive_db) {
		case GraphIfc.eDatabase_Gdh:
		    slider_disabled = dyn.graph.getGdh().getObjectRefInfoBoolean( insensitive_p);
		    break;
		case GraphIfc.eDatabase_Local:
		    slider_disabled = dyn.graph.getLdb().getObjectRefInfoBoolean( insensitive_p);
		    break;
		}
		if ( insensitive_inverted)
		    slider_disabled = !slider_disabled;
	    }
	    else
		slider_disabled = false;
	    
	    if ( max_value_p != 0 && min_value_p != 0) {
		max_value = dyn.graph.getGdh().getObjectRefInfoFloat( max_value_p);
		min_value = dyn.graph.getGdh().getObjectRefInfoFloat( min_value_p);
		if ( max_value != old_max_value ||
		     min_value != old_min_value) {
		    if ( Math.abs( max_value - min_value) > Double.MIN_VALUE)
			firstScan = true;
		}
		old_min_value = min_value;
		old_max_value = max_value;
	    }      
	    
	    if ( !firstScan) {
		switch ( a_typeid) {
		case Pwr.eType_Float32:
		    if ( Math.abs( old_value - value) < Double.MIN_VALUE)
			// No change since last time
			return;
		    break;
		case Pwr.eType_Int32:
		case Pwr.eType_Boolean:
		    if ( ivalue == old_ivalue)
			return;
		    break;
		default: ;
		}
	    }
	    else
		firstScan = false;

	    switch ( a_typeid) {
	    case Pwr.eType_Float32:
		old_value = value;
		break;
	    case Pwr.eType_Int32:
	    case Pwr.eType_Boolean:
		old_ivalue = ivalue;
		break;
	    default: ;
	    }

	    GlowSliderInfo info = ((GrowSlider)object).get_info();

	    if ( !(max_value_p != 0 && min_value_p != 0 && max_value != min_value)) {
		max_value = (float)info.max_value;
		min_value = (float)info.min_value;
	    }
	    if ( info.min_position != info.max_position) {
		if ( dyn.graph.getCurrentSlider() != object &&
		     max_value != min_value) {
		    double pos_x, pos_y;

		    switch ( a_typeid) {
		    case Pwr.eType_Float32:
			break;
		    default:
			value = (float) (ivalue);
			break;
		    }
          
		    switch ( direction) {
		    case Glow.eDirection_Down:
			pos_y = (max_value - value) / (max_value - min_value) *
			    (info.max_position - info.min_position);
			if ( pos_y < 0)
			    pos_y = 0;
			else if ( pos_y > info.max_position - info.min_position)
			    pos_y = info.max_position - info.min_position;
			pos_x = 0;
			break;
		    case Glow.eDirection_Right:
			pos_x = info.max_position - info.min_position - 
			    (value - min_value) / (max_value - min_value) *
			    (info.max_position - info.min_position);
			if ( pos_x < 0)
			    pos_x = 0;
			else if ( pos_x > info.max_position - info.min_position)
			    pos_x = info.max_position - info.min_position;
			pos_y = 0;
			break;
		    case Glow.eDirection_Left:
			pos_x = info.max_position - info.min_position - 
			    (max_value - value) / (max_value - min_value) *
			    (info.max_position - info.min_position);
			if ( pos_x < 0)
			    pos_x = 0;
			else if ( pos_x > info.max_position - info.min_position)
			    pos_x = info.max_position - info.min_position;
			pos_y = 0;
			break;
		    default:   // Up
			pos_y = (value - min_value) / (max_value - min_value) *
			    (info.max_position - info.min_position);
			if ( pos_y < 0)
			    pos_y = 0;
			else if ( pos_y > info.max_position - info.min_position)
			    pos_y = info.max_position - info.min_position;
			pos_x = 0;
		    }
		    object.set_position(pos_x, pos_y);
		}
	    }

	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    GrowNode object = (GrowNode)o;
	    if ( slider_disabled)
		return 1;

	    switch ( e.event) {
	    case Glow.eEvent_SliderMoveStart: {
		if ( !dyn.graph.isAuthorized( dyn.access) ||
		     slider_disabled) {
		    dyn.graph.getCtx().setMoveRestrictions(Glow.eMoveRestriction_Disable, 0, 0, null);
		    dyn.graph.setCurrentSlider(null);
		    break;
		}
		GlowSliderInfo info = ((GrowSlider)object).get_info();
		System.out.println("Slider start direction " + info.direction);
		if ( direction == Glow.eDirection_Right || 
		     direction == Glow.eDirection_Left)
		    dyn.graph.getCtx().setMoveRestrictions( Glow.eMoveRestriction_HorizontalSlider,
							    info.max_position, info.min_position, (GlowArrayElem)e.object);
		else
		    dyn.graph.getCtx().setMoveRestrictions( Glow.eMoveRestriction_VerticalSlider,
							    info.max_position, info.min_position, (GlowArrayElem)e.object);

		dyn.graph.setCurrentSlider((GrowSlider)object);
		break;
	    }
	    case Glow.eEvent_SliderMoveEnd: {
		if ( dyn.graph.getCurrentSlider() == object)
		    dyn.graph.setCurrentSlider(null);
		break;
	    }
	    case Glow.eEvent_SliderMoved: {
		float 		value;
    
		GlowSliderInfo info = ((GrowSlider)object).get_info();
		if ( info.min_position != info.max_position) {
		    if ( !(max_value_p != 0 && min_value_p != 0 && max_value != min_value)) {
			max_value = (float)info.max_value;
			min_value = (float)info.min_value;
		    }
		    GlowGeometry g = object.measure();
        
		    switch ( direction) {
		    case Glow.eDirection_Down:
			value = (float)( (info.max_position - g.ll_y) / (info.max_position - info.min_position) *
				       (max_value - min_value) + min_value);
			break;
		    case Glow.eDirection_Right:
			value = (float)( (info.max_position - g.ll_x) / (info.max_position - info.min_position) *
				       (max_value - min_value) + min_value);
			break;
		    case Glow.eDirection_Left:
			value = (float)( (g.ll_x - info.min_position) / (info.max_position - info.min_position) *
				       (max_value - min_value) + min_value);
			break;
		    default:
			value = (float)( (g.ll_y - info.min_position) / (info.max_position - info.min_position) *
				       (max_value - min_value) + min_value);
		    }
		    System.out.println("Slider value " + value + "  minpos " + info.min_position + " maxpos " + info.max_position);
		    if ( value > max_value)
			value = max_value;
		    if ( value < min_value)
			value = min_value;
      
		    DynParsedAttrName pname = dyn.parseAttrName(attribute);
		    if ( pname == null || pname.name.equals("")) 
			return 1;

		    PwrtStatus sts;

		    switch ( pname.type) {
		    case Pwr.eType_Float32:
			sts = dyn.graph.getGdh().setObjectInfo( pname.name, value);
			break;
		    case Pwr.eType_Boolean: {
			boolean bvalue = (value > 0.5 ? true : false);
			sts = dyn.graph.getGdh().setObjectInfo( pname.name, bvalue);
			break;
		    }
		    default: {
			int ivalue = (int) (value > 0 ? value + 0.5 : value - 0.5);
			sts = dyn.graph.getGdh().setObjectInfo( pname.name, ivalue);
		    }
		    }
		    if ( sts.evenSts()) System.out.println("Slider error: " + attribute);
		}
		break;
	    }
	    default: ;    
	    }
	    return 1;
	}


	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynSlider : " + line);

		    switch ( key) {
		    case Dyn.eSave_Slider: 
			break;
		    case Dyn.eSave_Slider_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_Slider_minvalue_attr: 
			if ( token.hasMoreTokens())
			    minvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_Slider_maxvalue_attr: 
			if ( token.hasMoreTokens())
			    maxvalue_attr = token.nextToken();
			break;
		    case Dyn.eSave_Slider_insensitive_attr: 
			if ( token.hasMoreTokens())
			    insensitive_attr = token.nextToken();
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynSlider");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynSlider");
	    }
	}

    }

    public class DynFastCurve extends DynElem {
	String fast_object;
	int curve_index1;
	int curve_index2;

	public DynFastCurve( Dyn dyn) {
	    super(dyn, Dyn.mDynType1_FastCurve, 0, 0, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynFastCurve : " + line);

		    switch ( key) {
		    case Dyn.eSave_FastCurve: 
			break;
		    case Dyn.eSave_FastCurve_fast_object: 
			if ( token.hasMoreTokens())
			    fast_object = token.nextToken();
			break;
		    case Dyn.eSave_FastCurve_curve_index1: 
			curve_index1 = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_FastCurve_curve_index2: 
			curve_index2 = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynFastCurve");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynFastCurve");
	    }
	}

    }

    public class DynPulldownMenu extends DynElem {
	int button_mask;
	String[] items_text = new String[32];
	Dyn[] items_dyn = new Dyn[32];
	GrowMenu menu_object;
	int text_size;

	public DynPulldownMenu( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_PulldownMenu, 0);
	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    GrowNode object = (GrowNode)o;
	    switch ( e.event) {
	    case Glow.eEvent_MB1Click:
		if ( menu_object != null) {
		    // Close, delete this menu and all childmenues
		    for ( int j = 0; j < 32; j++) {
			if ( items_dyn[j]  != null &&
			     (items_dyn[j].action_type1 & Dyn.mActionType1_PulldownMenu) != 0)
			    items_dyn[j].action( null, e);
		    }
		    dyn.graph.getCtx().remove(menu_object);
		    menu_object = null;
		}
		else if ( object != null) {
		    double	ll_x, ll_y, ur_x, ur_y;
		    GlowMenuInfo info = new GlowMenuInfo();

		    int b_mask = 1;
		    for ( int i = 0; i < 32; i++) {
			if ( (b_mask & button_mask) != 0) {
			    info.item[i].occupied = true;
			    info.item[i].text = new String(items_text[i]);
			    
			    // Check access
			    if ( (items_dyn[i].action_type1 & Dyn.mActionType1_PulldownMenu) != 0)
				info.item[i].type = Glow.eMenuItem_PulldownMenu;
			    else {
				// Check access
				if ( dyn.graph.isAuthorized( items_dyn[i].access)) {
				    info.item[i].type = Glow.eMenuItem_Button;
				    if ( (items_dyn[i].dyn_type1 & Dyn.mDynType1_Invisible) != 0) {
					int		sts;
					DynInvisible 	invis_element = null;
					String 		command;

					for ( int j = 0; j < dyn.elements.size(); j++) {
					    if ( dyn.elements.get(j).dyn_type1 == Dyn.mDynType1_Invisible) {
						invis_element = (DynInvisible)dyn.elements.get(j);
					    }
					}
					if ( invis_element != null) {
					    DynParsedAttrName pname = dyn.parseAttrName(invis_element.attribute);
					    if ( (pname != null) && !pname.name.equals("")) {
						if ( pname.name.startsWith("$cmd(")) {
						    int idx = pname.name.lastIndexOf(")");
						    if ( idx != -1) {
							command = pname.name.substring(5, idx);
							command = dyn.graph.getCommand(command);
							sts = dyn.graph.command(command);
							if ( (sts & 1) == 0)
							    info.item[i].type = Glow.eMenuItem_ButtonDisabled;
						    }
						}
					    }
					    else {
						CdhrBoolean ret = dyn.graph.getGdh().getObjectInfoBoolean( pname.name);
						if (ret.oddSts()) {
						    if ( (!pname.inverted && ret.value) || (pname.inverted && !ret.value)) {
							if ( invis_element.dimmed != 0) 
							    info.item[i].type = Glow.eMenuItem_ButtonDisabled;
							else
							    info.item[i].occupied = false;
						    }		      
						}
					    }
					}
				    }
				}
				else
				    info.item[i].type = Glow.eMenuItem_ButtonDisabled;
			    }
			}
			else
			    info.item[i].occupied = false;
			b_mask = b_mask << 1;
		    }

		    // Get fillcolor, and textattributes from object
		    int text_drawtype = 0, text_color = 0, bg_color = 0;
		    int text_size = 0;
		    int sts;
		    double scale = 1;
		    int text_font = 0;
		    
		    sts = 0; // TODO sts = grow_GetObjectAnnotInfo( object, 1, &text_size, &text_drawtype, &text_color, &bg_color, &scale, &text_font);
		    if ( (sts & 1) == 0) {
			text_size = 2;
			text_drawtype = Glow.eDrawType_TextHelveticaBold;
			text_font = Glow.eFont_Helvetica;
			text_color = Glow.eDrawType_Line;
			bg_color = Glow.eDrawType_LightGray;
		    }
		    else if ( bg_color == Glow.eDrawType_No || bg_color == Glow.eDrawType_Inherit)
			bg_color = Glow.eDrawType_LightGray;
		    
		    GlowGeometry g = object.measure();
		    menu_object = new GrowMenu( dyn.graph.getCtx().cmn, "__Menu", info, g.ll_x, g.ur_y, g.ur_x - g.ll_x,
						Glow.eDrawType_Line, 0, 1, 1, bg_color, text_size,
						text_drawtype, text_color,
						Glow.eDrawType_MediumGray, text_font);
		    menu_object.set_scale( scale, scale, 0, 0, Glow.eScaleType_LowerLeft);
		    System.out.println("Insert menu" + menu_object);
		    dyn.graph.getCtx().insert(menu_object);

		    // grow_SetMenuInputFocus( menu_object, 1);
		}

		break;
	    case Glow.eEvent_MenuActivated:
		if ( menu_object == null)
		    break;
		if ( e.object == menu_object) {
		    if ( items_dyn[((GlowEventMenu)e).item] != null) {
			GlowEvent event = new GlowEvent();
			event.event = Glow.eEvent_MB1Click;
			return items_dyn[((GlowEventMenu)e).item].action( (GlowArrayElem)e.object, event);
		    }
		}
		else {
		    for ( int j = 0; j < 32; j++) {
			if ( items_dyn[j] != null && 
			     (items_dyn[j].action_type1 & Dyn.mActionType1_PulldownMenu) != 0)
			    items_dyn[j].action( null, e);
		    }
		}
		break;
	    case Glow.eEvent_MenuDelete:
		if ( menu_object == null)
		    break;
		if ( e.object == null || e.object == menu_object) {
		    // Delete this menu
		    dyn.graph.getCtx().remove(menu_object);
		    menu_object = null;
		}
		break;

	    default: ;
	    }
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynPulldownMenu : " + line);

		    switch ( key) {
		    case Dyn.eSave_PulldownMenu: 
			break;
		    case Dyn.eSave_PulldownMenu_button_mask: 
			button_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_PulldownMenu_items_text0: 
			if ( token.hasMoreTokens())
			    items_text[0] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text1: 
			if ( token.hasMoreTokens())
			    items_text[1] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text2: 
			if ( token.hasMoreTokens())
			    items_text[2] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text3: 
			if ( token.hasMoreTokens())
			    items_text[3] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text4: 
			if ( token.hasMoreTokens())
			    items_text[4] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text5: 
			if ( token.hasMoreTokens())
			    items_text[5] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text6: 
			if ( token.hasMoreTokens())
			    items_text[6] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text7: 
			if ( token.hasMoreTokens())
			    items_text[7] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text8: 
			if ( token.hasMoreTokens())
			    items_text[8] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text9: 
			if ( token.hasMoreTokens())
			    items_text[9] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text10: 
			if ( token.hasMoreTokens())
			    items_text[10] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text11: 
			if ( token.hasMoreTokens())
			    items_text[11] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text12: 
			if ( token.hasMoreTokens())
			    items_text[12] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text13: 
			if ( token.hasMoreTokens())
			    items_text[13] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text14: 
			if ( token.hasMoreTokens())
			    items_text[14] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text15: 
			if ( token.hasMoreTokens())
			    items_text[15] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text16: 
			if ( token.hasMoreTokens())
			    items_text[16] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text17: 
			if ( token.hasMoreTokens())
			    items_text[17] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text18: 
			if ( token.hasMoreTokens())
			    items_text[18] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text19: 
			if ( token.hasMoreTokens())
			    items_text[19] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text20: 
			if ( token.hasMoreTokens())
			    items_text[20] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text21: 
			if ( token.hasMoreTokens())
			    items_text[21] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text22: 
			if ( token.hasMoreTokens())
			    items_text[22] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text23: 
			if ( token.hasMoreTokens())
			    items_text[23] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text24: 
			if ( token.hasMoreTokens())
			    items_text[24] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text25: 
			if ( token.hasMoreTokens())
			    items_text[25] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text26: 
			if ( token.hasMoreTokens())
			    items_text[26] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text27: 
			if ( token.hasMoreTokens())
			    items_text[27] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text28: 
			if ( token.hasMoreTokens())
			    items_text[28] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text29: 
			if ( token.hasMoreTokens())
			    items_text[29] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text30: 
			if ( token.hasMoreTokens())
			    items_text[30] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_text31: 
			if ( token.hasMoreTokens())
			    items_text[31] = token.nextToken();
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn0: 
			items_dyn[0] = new Dyn(dyn.graph);
			items_dyn[0].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn1: 
			items_dyn[1] = new Dyn(dyn.graph);
			items_dyn[1].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn2:
			items_dyn[2] = new Dyn(dyn.graph);
			items_dyn[2].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn3: 
			items_dyn[3] = new Dyn(dyn.graph);
			items_dyn[3].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn4: 
			items_dyn[4] = new Dyn(dyn.graph);
			items_dyn[4].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn5: 
			items_dyn[5] = new Dyn(dyn.graph);
			items_dyn[5].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn6: 
			items_dyn[6] = new Dyn(dyn.graph);
			items_dyn[6].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn7: 
			items_dyn[7] = new Dyn(dyn.graph);
			items_dyn[7].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn8: 
			items_dyn[8] = new Dyn(dyn.graph);
			items_dyn[8].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn9: 
			items_dyn[9] = new Dyn(dyn.graph);
			items_dyn[9].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn10: 
			items_dyn[10] = new Dyn(dyn.graph);
			items_dyn[10].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn11: 
			items_dyn[11] = new Dyn(dyn.graph);
			items_dyn[11].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn12: 
			items_dyn[12] = new Dyn(dyn.graph);
			items_dyn[12].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn13: 
			items_dyn[13] = new Dyn(dyn.graph);
			items_dyn[13].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn14: 
			items_dyn[14] = new Dyn(dyn.graph);
			items_dyn[14].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn15: 
			items_dyn[15] = new Dyn(dyn.graph);
			items_dyn[15].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn16: 
			items_dyn[16] = new Dyn(dyn.graph);
			items_dyn[16].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn17: 
			items_dyn[17] = new Dyn(dyn.graph);
			items_dyn[17].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn18: 
			items_dyn[18] = new Dyn(dyn.graph);
			items_dyn[18].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn19: 
			items_dyn[19] = new Dyn(dyn.graph);
			items_dyn[19].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn20: 
			items_dyn[20] = new Dyn(dyn.graph);
			items_dyn[20].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn21: 
			items_dyn[21] = new Dyn(dyn.graph);
			items_dyn[21].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn22: 
			items_dyn[22] = new Dyn(dyn.graph);
			items_dyn[22].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn23: 
			items_dyn[23] = new Dyn(dyn.graph);
			items_dyn[23].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn24: 
			items_dyn[24] = new Dyn(dyn.graph);
			items_dyn[24].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn25: 
			items_dyn[25] = new Dyn(dyn.graph);
			items_dyn[25].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn26: 
			items_dyn[26] = new Dyn(dyn.graph);
			items_dyn[26].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn27: 
			items_dyn[27] = new Dyn(dyn.graph);
			items_dyn[27].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn28: 
			items_dyn[28] = new Dyn(dyn.graph);
			items_dyn[28].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn29: 
			items_dyn[29] = new Dyn(dyn.graph);
			items_dyn[29].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn30: 
			items_dyn[30] = new Dyn(dyn.graph);
			items_dyn[30].open(reader);
			break;
		    case Dyn.eSave_PulldownMenu_items_dyn31: 
			items_dyn[31] = new Dyn(dyn.graph);
			items_dyn[31].open(reader);
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynPulldownMenu");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynPulldownMenu");
	    }
	}

    }

    public class DynOptionMenu extends DynElem {
	String attribute;
	String text_attribute;
	String size_attribute;
	String update_attribute;
	int optionmenu_type;
	int button_mask;
	String[] items_text = new String[32];
	int[] items_enum = new int[32];
 	PwrtRefId subid;
	int p;
	int database;
	boolean inverted;
	boolean attrFound = false;
	boolean firstScan = true;
	int bitmask;
	int a_typeid;
        float oldValueF;
	int oldValueI;
 	PwrtRefId update_subid;
	int update_p;
	int update_database;
	boolean update_inverted;
	boolean update_attrFound = false;
	int update_bitmask;
	int update_a_typeid;
        boolean update_oldValue;
	GrowMenu menu_object;
	int text_size;

	public DynOptionMenu( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_OptionMenu, 0);
	}

	public int connect(GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;

	    DynParsedAttrName pname = dyn.parseAttrName(attribute);
	    if ( pname == null || pname.name.equals("")) 
		return 1;

	    GdhrRefObjectInfo ret = null;

	    switch( pname.database) {
	    case GraphIfc.eDatabase_Gdh:
		ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
		break;
	    case GraphIfc.eDatabase_Local:
		ret = dyn.graph.getLdb().refObjectInfo( graph, pname.name);
		break;
	    default:
		ret = null;
	    }

	    if ( ret == null || ret.evenSts()) {
		System.out.println("OptionMenu: " + attribute);
		return 1;
	    }

	    p = ret.id;
	    subid = ret.refid;
	    inverted = pname.inverted;
	    a_typeid = pname.type;
	    bitmask = pname.bitmask;
	    database = pname.database;
	    attrFound = true;

	    if ( text_attribute != null && !text_attribute.equals("") && 
		 update_attribute != null && !update_attribute.equals("")) {

		pname = dyn.parseAttrName(update_attribute);
		if ( pname != null && !pname.name.equals("")) {
		    ret = null;

		    switch( pname.database) {
		    case GraphIfc.eDatabase_Gdh:
			ret = dyn.graph.getGdh().refObjectInfo( pname.tname);
			break;
		    default:
			ret = null;
		    }

		    if ( ret == null || ret.evenSts()) {
			System.out.println("OptionsMenu: " + update_attribute);
			return 1;
		    }

		    update_p = ret.id;
		    update_subid = ret.refid;
		    update_inverted = pname.inverted;
		    update_a_typeid = pname.type;
		    update_bitmask = pname.bitmask;
		    update_database = pname.database;
		}
	    }
	    return 1;
	}

	public void disconnect() {
	    if ( attrFound && database == GraphIfc.eDatabase_Gdh)
		dyn.graph.getGdh().unrefObjectInfo(subid);
	}

	public void scan( GlowArrayElem o) {
	    GrowNode object = (GrowNode)o;
	    if ( !attrFound)
		return;

	    boolean update_texts = false;
	    if ( update_p != 0) {

		boolean value = dyn.getDig(p, update_a_typeid, update_bitmask, update_database);

		if (update_inverted)
		    value = !value;

		if ( !firstScan) {
		    if ( update_oldValue != value)
			update_texts = true;
		}
		else {
		    firstScan = false;
		    update_texts = false;
		}
		update_oldValue = value;
	    }


	    if ( update_texts) {
	    }

	    int enum_value = 0;
	    switch ( a_typeid) {
	    case Pwr.eType_Float32: {
		float value = dyn.graph.getGdh().getObjectRefInfoFloat( p);
		int i;

		if ( !firstScan) {
		    if ( value == oldValueF) {
			return;
		    }
		}
		else
		    firstScan = false;

		enum_value = (int)( value + 0.5);
		oldValueF = value;

		break;
	    }
	    case Pwr.eType_UInt32:
	    case Pwr.eType_Int32: {
		int value = dyn.graph.getGdh().getObjectRefInfoInt( p);
		int i;

		if ( !firstScan) {
		    if ( value == oldValueI) {
			return;
		    }
		}
		else
		    firstScan = false;

		enum_value = value;
		oldValueI = value;

		break;
	    }
	    default:
		return;
	    }
	    
	    if ( update_p == 0) {
		    boolean found = false;
		    for ( int i = 0; i < 32; i++) {
			if ( items_enum[i] == enum_value) {
			    object.setAnnotation(1, items_text[i]);
			    found = true;
			    break;
			}
		    }
		    if ( !found)
			object.setAnnotation(1, "");
	    }
	    else {
	    }

	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    GrowNode object = (GrowNode)o;
	    switch ( e.event) {
	    case Glow.eEvent_MB1Click:
		if ( menu_object != null) {
		    // Close, delete this menu
		    System.out.println("Remove menu" + menu_object);
		    dyn.graph.getCtx().remove(menu_object);
		    menu_object = null;
		}
		else {
		    double	ll_x, ll_y, ur_x, ur_y;
		    GlowMenuInfo info = new GlowMenuInfo();

		    if ( update_p == 0) {
			int b_mask = 1;
			for ( int i = 0; i < 32; i++) {
			    if ( (b_mask & button_mask) != 0) {
				info.item[i].occupied = true;
				info.item[i].text = new String(items_text[i]);
	    
				// Check access
				info.item[i].type = Glow.eMenuItem_Button;
			    }
			    else
				info.item[i].occupied = false;
			    b_mask = b_mask << 1;
			}
		    }
		    else {
			for ( int i = 0; i < 32; i++) {
			    if ( i < text_size) {
			        info.item[i].text = new String(items_text[i]);
				info.item[i].type = Glow.eMenuItem_Button;
				info.item[i].occupied = true;
			    }
			    else
				info.item[i].occupied = false;
			}
		    }

		    // Get fillcolor, and textattributes from object
		    int text_drawtype = 4, text_color = Glow.eDrawType_Line, bg_color = Glow.eDrawType_Color32;
		    int tsize = 2;
		    int sts;
		    double scale = 1;
		    int text_font = Glow.eFont_Helvetica;

		    sts = 0; //grow_GetObjectAnnotInfo( object, 1, &tsize, &text_drawtype, &text_color, &bg_color, &scale, &text_font);
		    if ( (sts & 1) == 0) {
			tsize = 2;
			text_drawtype = Glow.eDrawType_TextHelveticaBold;
			text_color = Glow.eDrawType_Line;
			bg_color = Glow.eDrawType_LightGray;
		    }
		    else if ( bg_color == Glow.eDrawType_No || bg_color == Glow.eDrawType_Inherit)
			bg_color = Glow.eDrawType_LightGray;
	
		    GlowGeometry g = object.measure();
		    menu_object = new GrowMenu( dyn.graph.getCtx().cmn, "__Menu", info, g.ll_x, g.ur_y, g.ur_x - g.ll_x,
						Glow.eDrawType_Line, 0, 1, 1, bg_color, tsize,
						text_drawtype, text_color,
						Glow.eDrawType_MediumGray, text_font);
		    menu_object.set_scale( scale, scale, 0, 0, Glow.eScaleType_LowerLeft);
		    System.out.println("Insert menu" + menu_object);
		    dyn.graph.getCtx().insert(menu_object);
		}
		break;
	    case Glow.eEvent_MenuActivated:
		if ( menu_object == null)
		    break;
		if ( e.object == menu_object) {
		    // Set enum value to attribute
      
		    DynParsedAttrName pname = dyn.parseAttrName(attribute);
		    if ( pname == null || pname.name.equals("")) 
			return 1;

		    PwrtStatus sts = null;

		    switch ( pname.database) {
		    case GraphIfc.eDatabase_Gdh:
			switch ( pname.type) {
			case Pwr.eType_Float32: {
			    float value = items_enum[((GlowEventMenu)e).item];
			    sts = dyn.graph.getGdh().setObjectInfo( pname.name, value);
			    break;
			}
			case Pwr.eType_Int32:
			case Pwr.eType_UInt32:
			case Pwr.eType_Int16:
			case Pwr.eType_UInt16:
			case Pwr.eType_Int8:
			case Pwr.eType_UInt8: {
			    int value = items_enum[((GlowEventMenu)e).item];
			    sts = dyn.graph.getGdh().setObjectInfo( pname.name, value);
			    break;
			}
			default: ;
			}
			break;
		    case GraphIfc.eDatabase_Ccm: {
			/* TODO
			pwr_tInt32 value = items_enum[event->menu.item];
			sts = dyn->graph->ccm_set_variable( parsed_name, type_id, &value);
			*/
			break;
		    }
		    default : ;
		    }

		    if ( sts == null || sts.evenSts()) System.out.println("Option menu error: " + pname.name);
		}
		break;
	    case Glow.eEvent_MenuDelete:
		if ( menu_object == null)
		    break;
		if ( e.object == null || e.object == menu_object) {
		    // Delete this menu
		    dyn.graph.getCtx().remove(menu_object);
		    menu_object = null;
		}
		break;
	    default: ;
	    }

	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynOptionMenu : " + line);

		    switch ( key) {
		    case Dyn.eSave_OptionMenu: 
			break;
		    case Dyn.eSave_OptionMenu_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_OptionMenu_text_attribute: 
			if ( token.hasMoreTokens())
			    text_attribute = token.nextToken();
			break;
		    case Dyn.eSave_OptionMenu_size_attribute: 
			if ( token.hasMoreTokens())
			    size_attribute = token.nextToken();
			break;
		    case Dyn.eSave_OptionMenu_update_attribute: 
			if ( token.hasMoreTokens())
			    update_attribute = token.nextToken();
			break;
		    case Dyn.eSave_OptionMenu_optionmenu_type: 
			optionmenu_type = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_button_mask: 
			button_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_text0: 
			if ( token.hasMoreTokens())
			    items_text[0] = token.nextToken();
			break;
		    case Dyn.eSave_OptionMenu_items_text1: 
			if ( token.hasMoreTokens())
			    items_text[1] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text2: 
			if ( token.hasMoreTokens())
			    items_text[2] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text3: 
			if ( token.hasMoreTokens())
			    items_text[3] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text4: 
			if ( token.hasMoreTokens())
			    items_text[4] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text5: 
			if ( token.hasMoreTokens())
			    items_text[5] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text6: 
			if ( token.hasMoreTokens())
			    items_text[6] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text7: 
			if ( token.hasMoreTokens())
			    items_text[7] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text8: 
			if ( token.hasMoreTokens())
			    items_text[8] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text9: 
			if ( token.hasMoreTokens())
			    items_text[9] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text10: 
			if ( token.hasMoreTokens())
			    items_text[10] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text11: 
			if ( token.hasMoreTokens())
			    items_text[11] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text12: 
			if ( token.hasMoreTokens())
			    items_text[12] = token.nextToken();
			break;
		    case Dyn.eSave_OptionMenu_items_text13: 
			if ( token.hasMoreTokens())
			    items_text[13] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text14: 
			if ( token.hasMoreTokens())
			    items_text[14] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text15: 
			if ( token.hasMoreTokens())
			    items_text[15] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text16: 
			if ( token.hasMoreTokens())
			    items_text[16] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text17: 
			if ( token.hasMoreTokens())
			    items_text[17] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text18: 
			if ( token.hasMoreTokens())
			    items_text[18] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text19: 
			if ( token.hasMoreTokens())
			    items_text[19] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text20: 
			if ( token.hasMoreTokens())
			    items_text[20] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text21: 
			if ( token.hasMoreTokens())
			    items_text[21] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text22: 
			if ( token.hasMoreTokens())
			    items_text[22] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text23: 
			if ( token.hasMoreTokens())
			    items_text[23] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text24: 
			if ( token.hasMoreTokens())
			    items_text[24] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text25: 
			if ( token.hasMoreTokens())
			    items_text[25] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text26: 
			if ( token.hasMoreTokens())
			    items_text[26] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text27: 
			if ( token.hasMoreTokens())
			    items_text[27] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text28: 
			if ( token.hasMoreTokens())
			    items_text[28] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text29: 
			if ( token.hasMoreTokens())
			    items_text[29] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text30: 
			if ( token.hasMoreTokens())
			    items_text[30] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_text31: 
			if ( token.hasMoreTokens())
			    items_text[31] = line.substring(5);
			break;
		    case Dyn.eSave_OptionMenu_items_enum0: 
			items_enum[0] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum1: 
			items_enum[1] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum2: 
			items_enum[2] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum3: 
			items_enum[3] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum4: 
			items_enum[4] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum5: 
			items_enum[5] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum6: 
			items_enum[6] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum7: 
			items_enum[7] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum8: 
			items_enum[8] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum9: 
			items_enum[9] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum10: 
			items_enum[10] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum11: 
			items_enum[11] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum12: 
			items_enum[12] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum13: 
			items_enum[13] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum14: 
			items_enum[14] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum15: 
			items_enum[15] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum16: 
			items_enum[16] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum17: 
			items_enum[17] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum18: 
			items_enum[18] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum19: 
			items_enum[19] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum20: 
			items_enum[20] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum21: 
			items_enum[21] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum22: 
			items_enum[22] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum23: 
			items_enum[23] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum24: 
			items_enum[24] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum25: 
			items_enum[25] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum26: 
			items_enum[26] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum27: 
			items_enum[27] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum28: 
			items_enum[28] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum29: 
			items_enum[29] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum30: 
			items_enum[30] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_OptionMenu_items_enum31: 
			items_enum[31] = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynOptionMenu");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynOptionMenu");
	    }
	}

    }

    public class DynAnalogText extends DynOptionMenu {

	public DynAnalogText( Dyn dyn) {
	    super(dyn);
	    dyn_type1 = Dyn.mDynType1_AnalogText; 
	}

	public int action( GlowArrayElem o, GlowEvent e) {
	    return 1;
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynAnalogText : " + line);

		    switch ( key) {
		    case Dyn.eSave_AnalogText: 
			break;
		    case Dyn.eSave_AnalogText_super: 
			super.open(reader);
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynAnalogText");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynAnalogText");
	    }
	}

    }

    public class DynSetValue extends DynElem {
	String attribute;
	String value;

	public DynSetValue( Dyn dyn) {
	    super(dyn, 0, 0, Dyn.mActionType1_SetValue, 0);
	}

	public void open( BufferedReader reader) {
	    String line;
	    StringTokenizer token;
	    boolean end_found = false;

	    try {
		while( (line = reader.readLine()) != null) {
		    token = new StringTokenizer(line);
		    int key = Integer.valueOf(token.nextToken());
		    if ( Dyn.debug) System.out.println( "DynSetValue : " + line);

		    switch ( key) {
		    case Dyn.eSave_SetValue: 
			break;
		    case Dyn.eSave_SetValue_attribute: 
			if ( token.hasMoreTokens())
			    attribute = token.nextToken();
			break;
		    case Dyn.eSave_SetValue_value: 
			if ( token.hasMoreTokens())
			    value = token.nextToken();
			break;
		    case Dyn.eSave_SetValue_instance: 
			instance = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_SetValue_instance_mask: 
			instance_mask = Integer.valueOf(token.nextToken());
			break;
		    case Dyn.eSave_End:
			end_found = true;
			break;
		    default:
			System.out.println( "Syntax error in DynSetValue");
			break;
		    }

		    if ( end_found)
			break;
		}
		
	    } catch ( Exception e) {
		System.out.println( "IOException DynSetValue");
	    }
	}

    }


}