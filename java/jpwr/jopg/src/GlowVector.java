/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2014 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jopg;
import java.io.*;
import java.util.*;


public class GlowVector {
  public GlowVector() {
  }

  //public static void open( BufferedReader reader, GrowCmn cmn, Vector<Object> a) {
  public static void open( BufferedReader reader, GrowCmn cmn, Vector a) {
    String line;
    StringTokenizer token;
    boolean end = false;

    try {
      while( (line = reader.readLine()) != null) {
	token = new StringTokenizer(line);
	int key = Integer.valueOf(token.nextToken());
	if ( cmn.debug) System.out.println( "GlowVector : " + line);

	switch ( key) {
	case Glow.eSave_Array:
	  break;
	case Glow.eSave_NodeClass: {
	  System.out.println("GlowVector: GlowNodeClass");
	  GlowNodeClass nc = new GlowNodeClass( cmn);
	  nc.open( reader);
	  a.add( (Object) nc);
	  break;
	}
	case Glow.eSave_NodeGroup: {
	  System.out.println("GlowVector: GlowNodeGroup");
	  GlowNodeGroup nc = new GlowNodeGroup( cmn);
	  nc.open( reader);
	  a.add( (Object) nc);
	  break;
	}
	case Glow.eSave_ConClass:
	  GlowConClass cc = new GlowConClass( cmn);
	  cc.open( reader);
	  a.add( (Object) cc);
	  break;
	case Glow.eSave_Con: {
	  GlowCon c = new GlowCon( cmn);
	  c.open( reader);
	  a.add( (Object) c);
	  break;
	}
	case Glow.eSave_GrowNode: {
	  GrowNode n = new GrowNode( cmn);
	  n.open( reader);
	  if ( n.nc == null)
	      break;

	  a.add( n);
	  break;
	}
	case Glow.eSave_GrowSlider: {
	  GrowSlider n = new GrowSlider( cmn);
	  n.open( reader);
	  a.add( n);
	  break;
	}
	case Glow.eSave_GrowGroup: {
	  GrowGroup n = new GrowGroup( cmn);
	  n.open( reader);
	  a.add( n);
	  break;
	}
	case Glow.eSave_GrowConGlue: {
	  GrowConGlue n = new GrowConGlue( cmn);
	  n.open( reader);
	  a.add( n);
	  break;
	}
	case Glow.eSave_GrowRect: {
	  GrowRect c = new GrowRect( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowRectRounded: {
	  GrowRectRounded c = new GrowRectRounded( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_Line: {
	  GlowLine c = new GlowLine( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_Arc: {
	  GlowArc c = new GlowArc( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_Rect: {
	  GlowRect c = new GlowRect( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_Text: {
	  GlowText c = new GlowText( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_Arrow: {
	  GlowArrow c = new GlowArrow( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowArc: {
	  GrowArc c = new GrowArc( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowLine: {
	  GrowLine c = new GrowLine( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowPolyLine: {
	  GrowPolyline c = new GrowPolyline( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowText: {
	  GrowText c = new GrowText( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_ConPoint: {
	  GlowConPoint c = new GlowConPoint( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowAnnot: {
	  GrowAnnot c = new GrowAnnot( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowBar: {
	  GrowBar c = new GrowBar( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowTrend: {
	  GrowTrend c = new GrowTrend( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowTable: {
	  GrowTable c = new GrowTable( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowAxis: {
	  GrowAxis c = new GrowAxis( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowImage: {
	  GrowImage c = new GrowImage( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowWindow: {
	  GrowWindow c = new GrowWindow( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_GrowFolder: {
	  GrowFolder c = new GrowFolder( cmn);
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_Point: {
	  GlowPoint c = new GlowPoint();
	  c.open( reader);
	  a.add( c);
	  break;
	}
	case Glow.eSave_End:
	  end = true;
	  break;
	default:	  
	  System.out.println( "Syntax error in GlowVector");
	  break;
	}
	if ( end)
	  break;
      }
    } catch ( Exception e) {
      System.out.println( "IOException GlowVector");
    }
  }

}





