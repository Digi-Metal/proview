/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2012 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;

public class Graph implements GraphIfc, GrowApplIfc {
    public static final int eType_Bit = (1 << 15) + 1;


    public GrowCmn cmn;
    public GrowCtx ctx;
    public GlowDraw gdraw;
    public GraphApplIfc appl;
    public Gdh gdh;
    public GraphLocalDb ldb;

    public Graph(GraphApplIfc appl, Gdh gdh) {
	this.appl = appl;
	this.gdh = gdh;

	ldb = new GraphLocalDb();
	ctx = new GrowCtx(this);
	gdraw = new GlowDraw();
	cmn = ctx.getCmn();
	cmn.setGdraw(gdraw);
    }

    public Gdh getGdh() {
	return gdh;
    }
    public GraphLocalDb getLdb() {
	return ldb;
    }
    public GrowCtx getCtx() {
	return ctx;
    }

    void open(BufferedReader reader) {
	ctx.open( reader);
	ctx.traceConnect();
    }

    public void traceConnect(GrowNode object) {
	Dyn dyn = (Dyn)object.getUserData();
	dyn.connect(object);
    }

    public void traceDisconnect(GrowNode object) {
	Dyn dyn = (Dyn)object.getUserData();
	dyn.disconnect();
    }

    public void traceScan(GrowNode object) {
	Dyn dyn = (Dyn)object.getUserData();
	dyn.scan(object);
    }

    int stringToType( String str) {
	if ( str.equalsIgnoreCase("boolean"))
	    return Pwr.eType_Boolean;
	if ( str.equalsIgnoreCase("float32"))
	    return Pwr.eType_Float32;
	if ( str.equalsIgnoreCase("float64"))
	    return Pwr.eType_Float64;
	if ( str.equalsIgnoreCase("char"))
	    return Pwr.eType_Char;
	if ( str.equalsIgnoreCase("int8"))
	    return Pwr.eType_Int8;
	if ( str.equalsIgnoreCase("int16"))
	    return Pwr.eType_Int16;
	if ( str.equalsIgnoreCase("int32"))
	    return Pwr.eType_Int32;
	if ( str.equalsIgnoreCase("int64"))
	    return Pwr.eType_Int64;
	if ( str.equalsIgnoreCase("uint8"))
	    return Pwr.eType_UInt8;
	if ( str.equalsIgnoreCase("uint16"))
	    return Pwr.eType_UInt16;
	if ( str.equalsIgnoreCase("uint32"))
	    return Pwr.eType_UInt32;
	if ( str.equalsIgnoreCase("uint64"))
	    return Pwr.eType_UInt64;
	if ( str.equalsIgnoreCase("objid"))
	    return Pwr.eType_Objid;
	if ( str.equalsIgnoreCase("time"))
	    return Pwr.eType_Time;
	if ( str.equalsIgnoreCase("deltatime"))
	    return Pwr.eType_DeltaTime;
	if ( str.equalsIgnoreCase("attrref"))
	    return Pwr.eType_AttrRef;
	if ( str.equalsIgnoreCase("status"))
	    return Pwr.eType_Status;
	if ( str.equalsIgnoreCase("netstatus"))
	    return Pwr.eType_NetStatus;
	if ( str.equalsIgnoreCase("enum"))
	    return Pwr.eType_Enum;
	if ( str.equalsIgnoreCase("mask"))
	    return Pwr.eType_Mask;
	if ( str.equalsIgnoreCase("bit"))
	    return Graph.eType_Bit;
	return 0;
    }

    int stringToElements( String str) {
	int idx1, idx2;
	int elements;

	if ( (idx1 = str.indexOf('[')) != -1 &&
	     (idx2 = str.indexOf(']')) != -1 &&
	     idx2 > idx1) {
	    try {
		System.out.println("Elements: " + str.substring(idx1+1, idx2));
		elements = new Integer(str.substring(idx1+1, idx2)).intValue();
	    }
	    catch( NumberFormatException e) {
		System.out.println("Element syntax error, " + str);
		return 1;
	    }
	    return elements;
	}
	return 1;
    }

    public DynParsedAttrName parseAttrName( String name) {
	int idx, tidx, eidx;
	DynParsedAttrName pname = new DynParsedAttrName();

	String str = name.trim();
  
	if ( (idx = str.indexOf('[')) != -1 &&
	     (eidx = str.lastIndexOf('#')) != -1 &&
	     str.charAt(eidx-1) != '#') {
	    pname.elements = stringToElements(str);
	    str = str.substring(0, idx-1);
	}
	else
	    pname.elements = 1;

	if ( (tidx = str.indexOf("##")) != -1) {
	    if ( str.toLowerCase().startsWith("bit", tidx+2)) {
		String typestr = str.substring(tidx+2);
		int bit = stringToElements(str);
		pname.bitmask = 1 << bit;
		str =  str.substring(0, tidx+5);
	    }

	    pname.type = stringToType( str.substring(tidx+2));
	    str = str.substring(0, tidx);
	}
	else
	    pname.type = 0;

	if ( str.startsWith("!")) {
	    str = str.substring(1);
	    str = str.trim();
	    pname.inverted = true;
	}
	else
	    pname.inverted = false;

	pname.database = Graph.eDatabase_Gdh;
	pname.name = str;

	System.out.println( "ParsedName: " + name + "    " + pname.name + " type: " + pname.type + " elements: " + pname.elements + " bitm: " + pname.bitmask);

	return pname;
    }


    public Object growUserdataOpen( BufferedReader reader, Object object, int type) {
	switch ( type) {
	case Glow.eUserdataCbType_Ctx:
	    break;
	case Glow.eUserdataCbType_Node: {
	    Dyn dyn = new Dyn(this);
	    dyn.open(reader);
	    return dyn;
	}
	case Glow.eUserdataCbType_NodeClass: {
	    Dyn dyn = new Dyn(this);
	    dyn.open(reader);
	    return dyn;
	}	    
	}
	return null;
    }

    public void eventHandler(GlowEvent e) {
	if ( e.object != null) {
	    int sts;
	    Dyn dyn = (Dyn)((GrowNode)e.object).getUserData();
	    sts = dyn.action((GrowNode)e.object, e);	    	    
	}
    }

    public int command(String cmd) {
	if ( appl != null)
	    return appl.command(cmd);
	return 0;
    }
    public void openConfirmDialog(Object dyn, String text, Object object) {
	if ( appl != null)
	    appl.openConfirmDialog(dyn, text, object);
    }

    public String get_reference_name(String name) {
	// TODO
	return null;
    }
}
