/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2012 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jopg;
import java.io.*;
import java.util.*;
import jpwr.rt.*;


public class GrowCtx implements GrowCtxIfc {
    GrowCmn cmn;
    String name;

    public GrowCtx(GrowApplIfc appl) {
	cmn = new GrowCmn( this, appl);
    }
    public GrowCmn getCmn() {
	return cmn;
    }
    public void open( BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;
	boolean zoom_y_found = false;
	boolean grow_loaded = false;

	try {
	    while( (line = reader.readLine()) != null) {
		if ( line.length() > 2 && line.substring(0,2).equals("0!"))
		     continue;

		token = new StringTokenizer(line);
		int key = new Integer(token.nextToken()).intValue();
		if ( cmn.debug) System.out.println( "GlowCtx : " + line);

		System.out.println("GrowCtx key: " + key);
		switch ( key) {
		case Glow.eSave_Ctx: 
		    break;
		case Glow.eSave_Ctx_zoom_factor_x: 
		    cmn.mw.zoom_factor_x = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_Ctx_zoom_factor_y: 
		    cmn.mw.zoom_factor_y = new Double(token.nextToken()).doubleValue();
		    zoom_y_found = true; 
		    break;
		case Glow.eSave_Ctx_base_zoom_factor: 
		    cmn.mw.base_zoom_factor = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_Ctx_offset_x: 
		    cmn.mw.offset_x = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_Ctx_offset_y: 
		    cmn.mw.offset_y = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_Ctx_nav_zoom_factor_x: 
		case Glow.eSave_Ctx_nav_zoom_factor_y: 
		case Glow.eSave_Ctx_print_zoom_factor: 
		case Glow.eSave_Ctx_nav_offset_x: 
		case Glow.eSave_Ctx_nav_offset_y: 
		    break;
		case Glow.eSave_Ctx_x_right: 
		    cmn.x_right = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_Ctx_x_left: 
		    cmn.x_left = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_Ctx_y_high: 
		    cmn.y_high = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_Ctx_y_low: 
		    cmn.y_low = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_Ctx_nav_rect_ll_x: 
		case Glow.eSave_Ctx_nav_rect_ll_y:
		case Glow.eSave_Ctx_nav_rect_ur_x: 
		case Glow.eSave_Ctx_nav_rect_ur_y: 
		case Glow.eSave_Ctx_nav_rect_hot: 
		    break;
		case Glow.eSave_Ctx_name: 
		    cmn.name = token.nextToken();
		    break;
		case Glow.eSave_Ctx_user_highlight: 
		case Glow.eSave_Ctx_grid_size_x: 
		case Glow.eSave_Ctx_grid_size_y: 
		case Glow.eSave_Ctx_grid_on:
		case Glow.eSave_Ctx_draw_delta: 
		case Glow.eSave_Ctx_refcon_width: 
		case Glow.eSave_Ctx_refcon_height: 
		case Glow.eSave_Ctx_refcon_textsize: 
		case Glow.eSave_Ctx_refcon_linewidth: 
		    break;
		case Glow.eSave_Ctx_version: 
		    cmn.version = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_Ctx_hot_indication: 
		    cmn.hot_indication = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_Ctx_tiptext_size: 
		    break;
		case Glow.eSave_Ctx_grow:
		    open_grow( reader);
		    grow_loaded = true;
		    break;
		case Glow.eSave_Ctx_a_nc: 
		    GlowVector.open( reader, cmn, cmn.a_nc); 
		    break;
		case Glow.eSave_Ctx_a_cc: 
		    GlowVector.open( reader, cmn, cmn.a_cc); 
		    break;
		case Glow.eSave_Ctx_a: 
		    GlowVector.open( reader, cmn, cmn.a); 
		    break;
		case Glow.eSave_Ctx_comment: 
		    open_comment( reader);
		    break;
		case Glow.eSave_End: 
		    end_found = true; 
		    break;
		case Glow.eSave_Comment:
		    break;
		default:
		    System.out.println( "Syntax error in GlowCtx");
		    break;
		}
		if ( end_found)
		    break;
	    }
	    if ( !zoom_y_found)
		cmn.mw.zoom_factor_y = cmn.mw.zoom_factor_x;
	} catch ( Exception e) {
	    System.out.println( "IOException GlowCtx");
	}
    }

    public void open_comment( BufferedReader reader) {
    }

    public void open_grow( BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = new Integer(token.nextToken()).intValue();
		if ( cmn.debug) System.out.println( "GrowCtx : " + line);

		switch ( key) {
		case Glow.eSave_GrowCtx: 
		    break;
		case Glow.eSave_GrowCtx_conpoint_num_cnt:
		case Glow.eSave_GrowCtx_objectname_cnt: 
		case Glow.eSave_GrowCtx_name:
		    cmn.name = token.nextToken();
		    break;
		case Glow.eSave_GrowCtx_background_color: 
		    cmn.background_color = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dynamicsize: 
		    cmn.dynamicsize = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dynamic:
		    if ( cmn.dynamicsize > 0) {
			for ( int j = 0; j < cmn.dynamicsize; j++) 
			    line = reader.readLine();
		    }
		    break;
		case Glow.eSave_GrowCtx_arg_cnt: 
		    cmn.arg_cnt = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_argname:
		    for ( int i = 0; i < cmn.arg_cnt; i++)
			cmn.argname[i] = reader.readLine();
		    break;
		case Glow.eSave_GrowCtx_argtype:
		    for ( int i = 0; i < cmn.arg_cnt; i++)
			cmn.argtype[i] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_x0: 
		    cmn.x0 = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_GrowCtx_y0: 
		    cmn.y0 = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_GrowCtx_x1: 
		    cmn.x1 = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_GrowCtx_y1: 
		    cmn.y1 = new Double(token.nextToken()).doubleValue();
		    break;
		case Glow.eSave_End: 
		    end_found = true; 
		    break;
		case Glow.eSave_GrowCtx_path_cnt: 
		    cmn.path_cnt = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_path:
		    for ( int i = 0; i < cmn.path_cnt; i++)
			cmn.path[i] = reader.readLine();
		    break;
		case Glow.eSave_GrowCtx_dyn_type1: 
		    cmn.dyn_type1 = new Integer(token.nextToken()).intValue();
		    break; 
		case Glow.eSave_GrowCtx_dyn_type2: 
		    cmn.dyn_type2 = new Integer(token.nextToken()).intValue();
		    break; 
		case Glow.eSave_GrowCtx_dyn_action_type1: 
		    cmn.dyn_action_type1 = new Integer(token.nextToken()).intValue();
		    break; 
		case Glow.eSave_GrowCtx_dyn_action_type2: 
		    cmn.dyn_action_type2 = new Integer(token.nextToken()).intValue();
		    break; 
		case Glow.eSave_GrowCtx_dyn_color1:
		    cmn.dyn_color[0] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dyn_color2:
		    cmn.dyn_color[1] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dyn_color3:
		    cmn.dyn_color[2] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dyn_color4:
		    cmn.dyn_color[3] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dyn_attr1: 
		    cmn.dyn_attr[0] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dyn_attr2: 
		    cmn.dyn_attr[1] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dyn_attr3: 
		    cmn.dyn_attr[2] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_dyn_attr4: 
		    cmn.dyn_attr[3] = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_no_con_obstacle: 
		    break;
		case Glow.eSave_GrowCtx_slider: 
		    cmn.slider = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowCtx_subgraph: 
		    cmn.subgraph = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowCtx_java_name:
		case Glow.eSave_GrowCtx_is_javaapplet: 
		case Glow.eSave_GrowCtx_is_javaapplication: 
		case Glow.eSave_GrowCtx_next_subgraph:
		case Glow.eSave_GrowCtx_animation_count: 
		    break;
		case Glow.eSave_GrowCtx_scantime: 
		    cmn.scantime = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowCtx_fast_scantime: 
		    cmn.fast_scantime = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowCtx_animation_scantime: 
		    cmn.animation_scantime = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowCtx_java_width: 
		    cmn.java_width = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowCtx_background_image:
		    if ( token.hasMoreTokens())
			cmn.background_image = token.nextToken();
		    break;
		case Glow.eSave_GrowCtx_background_tiled: 
		    cmn.background_tiled = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowCtx_double_buffered: 
		    cmn.double_buffered = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowCtx_cycle:
		    cmn.cycle = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_mb3_action: 
		    cmn.mb3_action = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_translate_on: 
		    cmn.translate_on = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_input_focus_mark: 
		    cmn.input_focus_mark = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowCtx_userdata_cb:
		    if ( cmn.appl != null)
			cmn.userdata = cmn.appl.growUserdataOpen(reader, cmn, Glow.eUserdataCbType_Ctx);
		    break;
		case Glow.eSave_GrowCtx_bitmap_fonts:
		    break;
		default:
		    System.out.println( "Syntax error in GrowCtx");
		    break;
		}
		if ( end_found)
		    break;
	    }
	} catch ( Exception e) {
	    System.out.println( "IOException GrowCtx");
	}
    }

    public void draw() {
	for ( int i = 0; i < cmn.a.size(); i++) {
	    ((GlowArrayElem)cmn.a.get(i)).draw();
	}
    }

    public void draw( double ll_x, double ll_y, double ur_x, double ur_y) {
	// TODO
	for ( int i = 0; i < cmn.a.size(); i++) {
	    ((GlowArrayElem)cmn.a.get(i)).draw();
	}
    }

    public void register_callback_object(GlowArrayElem o) {
	cmn.callback_object = o;
    }
    public void eventHandler(GlowEvent e) {
	int sts = 0;
	cmn.callback_object = null;
	for ( int i = cmn.a.size() - 1; i >= 0; i--) {
	    sts = ((GlowArrayElem)cmn.a.get(i)).eventHandler(e, e.x, e.y);
	    if ( sts == 1) {
		break;
	    }
	}	

	if ( sts == 1 && cmn.appl != null) {
	    e.object = cmn.callback_object;
	    cmn.appl.eventHandler(e);
	}
    }

    public void traceConnect() {
	int sts;
	for ( int i = 0; i < cmn.a.size(); i++) {
	    if ( cmn.a.get(i).type() == Glow.eObjectType_GrowNode ||
		 cmn.a.get(i).type() == Glow.eObjectType_GrowGroup) {
		cmn.appl.traceConnect((GrowNode)cmn.a.get(i));
		if ( cmn.a.get(i).type() == Glow.eObjectType_GrowGroup) {
		    for ( int j = 0; j < ((GrowNode)cmn.a.get(i)).nc.a.size(); j++) {
			if ( ((GrowNode)cmn.a.get(i)).nc.a.get(j).type() == Glow.eObjectType_GrowNode ||
			     ((GrowNode)cmn.a.get(i)).nc.a.get(j).type() == Glow.eObjectType_GrowGroup) {
			    cmn.appl.traceConnect((GrowNode)((GrowNode)cmn.a.get(i)).nc.a.get(j));
			}
		    }		
		    
		}
	    }
	}		
    }

    public void traceDisconnect() {
	int sts;
	for ( int i = 0; i < cmn.a.size(); i++) {
	    if ( cmn.a.get(i).type() == Glow.eObjectType_GrowNode ||
		 cmn.a.get(i).type() == Glow.eObjectType_GrowGroup) {
		cmn.appl.traceDisconnect((GrowNode)cmn.a.get(i));
		if ( cmn.a.get(i).type() == Glow.eObjectType_GrowGroup) {
		    for ( int j = 0; j < ((GrowNode)cmn.a.get(i)).nc.a.size(); j++) {
			if ( ((GrowNode)cmn.a.get(i)).nc.a.get(j).type() == Glow.eObjectType_GrowNode ||
			     ((GrowNode)cmn.a.get(i)).nc.a.get(j).type() == Glow.eObjectType_GrowGroup) {
			    cmn.appl.traceDisconnect((GrowNode)((GrowNode)cmn.a.get(i)).nc.a.get(j));
			}
		    }		
		    
		}
	    }
	}		
    }
    public void traceScan() {
	int sts;
	for ( int i = 0; i < cmn.a.size(); i++) {
	    if ( cmn.a.get(i).type() == Glow.eObjectType_GrowNode ||
		 cmn.a.get(i).type() == Glow.eObjectType_GrowGroup) {
		cmn.appl.traceScan((GrowNode)cmn.a.get(i));
		if ( cmn.a.get(i).type() == Glow.eObjectType_GrowGroup) {
		    for ( int j = 0; j < ((GrowNode)cmn.a.get(i)).nc.a.size(); j++) {
			if ( ((GrowNode)cmn.a.get(i)).nc.a.get(j).type() == Glow.eObjectType_GrowNode ||
			     ((GrowNode)cmn.a.get(i)).nc.a.get(j).type() == Glow.eObjectType_GrowGroup) {
			    cmn.appl.traceScan((GrowNode)((GrowNode)cmn.a.get(i)).nc.a.get(j));
			}
		    }		
		    
		}
	    }
	}		
    }

    public GlowArrayElem get_nodeclass_from_name(String name) {
	for ( int i = 0; i < cmn.a_nc.size(); i++) {
	    if ( name.equals(((GlowNodeClass)cmn.a_nc.get(i)).nc_name))
		return (GlowNodeClass)cmn.a_nc.get(i);
	}   
	return null;
    }

    public GlowArrayElem get_object_group( GlowArrayElem object) {
	int sts;
	GlowArrayElem group;

	for ( int i = 0; i < cmn.a.size(); i++) {
	    if ( cmn.a.get(i).type() == Glow.eObjectType_GrowGroup) {
		group = ((GrowGroup)cmn.a.get(i)).get_object_group( object);
		if (group != null)
		    return group;
	    }
	}
	return null;
    }

}







