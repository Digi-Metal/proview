/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2012 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */


package jpwr.jopg;
import jpwr.jop.*;
import jpwr.rt.*;
import java.io.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.awt.font.*;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.event.*;
import java.net.*;
import java.applet.*;

public class GrowFrame extends JFrame implements GraphApplIfc, ActionListener {
    JScrollPane scrollPane;
    JPanel contentPane;
    LocalPanel localPanel = new LocalPanel();
    BorderLayout borderLayout1 = new BorderLayout();
    Dimension size;
    Object root;
    Graph graph;
    Timer timer;
    int scanTime = 1000;
    int scanCount = 0;
    JDialog confirmDia = null;
    JLabel confirmLabel;
    Object confirmDyn;
    Object confirmObject;

    public GrowFrame( String file) {
	root = (Object) this;
	init( file);
    }

    private void init( String file) {
	contentPane = (JPanel) this.getContentPane();
	contentPane.setLayout(borderLayout1);
	contentPane.add(localPanel, BorderLayout.CENTER);
	contentPane.setOpaque(true);
	localPanel.setLayout(null);
	localPanel.setOpaque(true);
	localPanel.setBackground( Color.white);
	this.setTitle("GrowFrame");
	size = new Dimension( 1100, 900);
	setSize( size);

	String filename;
	BufferedReader reader = null;
	String fname = file;

	if ( root != null && root instanceof JopApplet) {
	    try {
		URL current = ((JApplet) root).getCodeBase();
		String current_str = current.toString();
		int idx1 = current_str.lastIndexOf('/');
		int idx2 = current_str.lastIndexOf(':');
		int idx = idx1;
		if ( idx2 > idx)
		    idx = idx2;
		String path = current_str.substring(0,idx + 1);
		filename = path + fname;
		System.out.println( "Opening file " + filename);
		URL fileURL = new URL( filename);
		InputStream in = fileURL.openStream();
		// in = new BufferedInputStream(in);
		InputStreamReader r2 = new InputStreamReader(in);
		reader = new BufferedReader( r2);
	    }
	    catch ( Exception e) {
		System.out.println( "Unable to open file");
	    }
	}
	else {
	    filename = "$pwrp_exe/" + fname;
	    filename = Gdh.translateFilename( filename);

	    System.out.println( "Fname: " + filename);
	    try {
		reader = new BufferedReader(new FileReader(filename));
	    }
	    catch ( Exception e) {
		System.out.println( "Unable to open file " + filename);
		return;
	    }
	}

	Gdh gdh = new Gdh(this);
	graph = new Graph(this, gdh);
	graph.open(reader);

	setSize();
	enableEvents(AWTEvent.WINDOW_EVENT_MASK);
	setDefaultCloseOperation( DISPOSE_ON_CLOSE);
	
	MouseAdapter adapter = new MouseAdapter() {
		public void mouseClicked(MouseEvent e) {
		    System.out.println("MouseListener");
		    GlowEvent event = new GlowEvent();
		    event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
		    event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
		    event.event = Glow.eEvent_MB1Click;
		    graph.ctx.eventHandler( event);
		}
		public void mousePressed(MouseEvent e) {
		    System.out.println("MouseListener");
		    GlowEvent event = new GlowEvent();
		    event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
		    event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
		    event.event = Glow.eEvent_MB1Down;
		    graph.ctx.eventHandler( event);
		}
		public void mouseReleased(MouseEvent e) {
		    System.out.println("MouseListener");
		    GlowEvent event = new GlowEvent();
		    event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
		    event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
		    event.event = Glow.eEvent_MB1Up;
		    graph.ctx.eventHandler( event);
		}
		public void mouseMoved(MouseEvent e) {
		    GlowEvent event = new GlowEvent();
		    event.x = (e.getX() + graph.ctx.cmn.mw.offset_x) / graph.ctx.cmn.mw.zoom_factor_x;
		    event.y = (e.getY() + graph.ctx.cmn.mw.offset_y) / graph.ctx.cmn.mw.zoom_factor_y;
		    event.event = Glow.eEvent_CursorMotion;
		    graph.ctx.eventHandler( event);
		}
	    };

        localPanel.addMouseListener(adapter);
        localPanel.addMouseMotionListener(adapter);

	timer = new Timer( scanTime, this); 
	timer.start();
    }


    public int getWidth() {
	return localPanel.getWidth();
    }
    public int getHeight() {
	return localPanel.getHeight();
    }

    public void actionPerformed( ActionEvent e) {
	scanCount++;
	if ( scanCount == 1)
	    graph.gdh.getObjectRefInfoAll();

	graph.ctx.traceScan();
	localPanel.repaint();
    }

    void setSize() {
	size = new Dimension( (int)((graph.ctx.cmn.x_right - graph.ctx.cmn.x_left) * graph.ctx.cmn.mw.zoom_factor_x) + Flow.DRAWOFFSET * 2,
			      (int)((graph.ctx.cmn.y_high - graph.ctx.cmn.y_low) * graph.ctx.cmn.mw.zoom_factor_y) + Flow.DRAWOFFSET * 2);
	localPanel.setPreferredSize( size);
	localPanel.revalidate();
    }

    class LocalPanel extends JPanel {
	public LocalPanel() {}
	public Dimension getPreferredSize() { return size;}
	public Dimension getMinimumSize() { return size;}
	public void paint(Graphics g) {
	    Graphics2D g2 = (Graphics2D)g;

	    g2.setPaint(graph.ctx.cmn.gdraw.getColor(graph.ctx.cmn.background_color));
	    g2.fill(new Rectangle2D.Double(0,0,getWidth(),getHeight()));

	    graph.gdraw.setGraphics(g2);
	    graph.ctx.draw();

	}
    }

    public void closeGrow() {
    }

    // Exit when window is closed
    protected void processWindowEvent(WindowEvent e) {
	super.processWindowEvent(e);
	if (e.getID() == WindowEvent.WINDOW_CLOSING) {
	    closeGrow();
	}
    }

    public int command(String cmd) {
	System.out.println("Ge command : " + cmd);
	return 1;
    }

    public void confirmNo() {}
    public void confirmYes() {
	((Dyn)confirmDyn).confirmedAction( Glow.eEvent_MB1Click, confirmObject);
    }
    public void openConfirmDialog( Object dyn, String text, Object object) {
	JLabel label = null;

	confirmDyn = dyn;
	confirmObject = object;
	if ( confirmDia == null) {
	    confirmDia = new JDialog();
	    confirmDia.setTitle("Confirm");
	    confirmDia.setResizable(false);
	    confirmDia.setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE);
	    confirmDia.setSize( 400, 150);
	    confirmLabel = new JLabel( text, JLabel.CENTER);
	    confirmDia.getContentPane().setLayout( new BorderLayout());
	    confirmDia.getContentPane().add( confirmLabel, BorderLayout.CENTER);
	    JButton buttonYes = new JButton("Yes");
	    buttonYes.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			confirmYes();
			confirmDia.dispose();
		    }
		});
	    JButton buttonNo = new JButton("No");
	    buttonNo.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			confirmNo();
			confirmDia.dispose();
		    }
		});
	    JButton buttonCancel = new JButton("Cancel");
	    buttonCancel.addActionListener( new ActionListener() {
		    public void actionPerformed( ActionEvent ev) {
			confirmNo();
			confirmDia.dispose();
		    }
		});
	    JPanel panel = new JPanel();
	    panel.add( buttonYes);
	    panel.add( buttonNo);
	    panel.add( buttonCancel);
	    confirmDia.getContentPane().add( panel, BorderLayout.SOUTH);
	    // confirmDia.setLocationRelativeTo( par);
	    confirmDia.setVisible( true);
	}
	else {
	    // confirmDia.setLocationRelativeTo( par);
	    confirmLabel.setText( text);
	    confirmDia.setVisible( true);
	}
    }


}





