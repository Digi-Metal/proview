/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2012 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowNode extends GlowArrayElem {
    public static final int MAX_CONPOINTS = 32;
    
    public int original_border_drawtype;
    public int border_drawtype;
    public int original_fill_drawtype;
    public int fill_drawtype;
    public int text_drawtype;
    public int original_text_drawtype;
    public int draw_type;
    public int original_color_tone;
    public int color_tone;
    public int original_color_lightness;
    public int color_lightness;
    public int original_color_intensity;
    public int color_intensity;
    public int original_color_shift;
    public int color_shift;
    public int invisible;
    int flip_horizontal;
    int flip_vertical;
    int dynamicsize;
    GlowTransform trf = new GlowTransform();
    int arg_cnt;
    public int line_width;
    public int shadow;
    public int gradient;
    public int text_type;
    public int text_font;

    String nc_name;
    GlowNodeClass nc;
    GlowNodeClass nc_root;
    String n_name;
    double x_right;
    double x_left;
    double y_high;
    double y_low;
    int annotsize[] = new int[10];
    public String annotv[] = new String[10];
    GlowPoint pos;
    public int access;
    public int cycle;
    String ref_object;
    Object userdata;

    public int dimmed;
    public int visible;
    public int highlight;
    public int hot;
    public int color_inverse;
    public int input_selected;
    public int annotv_inputmode[] = new int[10];
    public double fill_level = 1;
    public int level_fill_drawtype;
    public int level_color_tone;
    public int level_direction;

    GrowCmn cmn;

    public GrowNode(GrowCmn cmn) {
	this.cmn = cmn;
	pos = new GlowPoint(cmn);
	visible = 1;
    }

    public int type() {
	return Glow.eObjectType_GrowNode;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = new Integer(token.nextToken()).intValue();
		if ( cmn.debug) System.out.println( "GrowNode : " + line);

		switch ( key) {
		case Glow.eSave_GrowNode: 
		    break;
		case Glow.eSave_GrowNode_original_border_drawtype: 
		    original_border_drawtype = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_original_fill_drawtype: 
		    original_fill_drawtype = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_fill_drawtype: 
		    fill_drawtype = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_text_drawtype: 
		    text_drawtype = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_original_text_drawtype: 
		    original_text_drawtype = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_draw_type: 
		    draw_type = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_original_color_tone: 
		    original_color_tone = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_color_tone: 
		    color_tone = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_original_color_lightness: 
		    original_color_lightness = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_color_lightness: 
		    color_lightness = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_original_color_intensity: 
		    original_color_intensity = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_color_intensity: 
		    color_intensity = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_original_color_shift: 
		    original_color_shift = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_color_shift: 
		    color_shift = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_invisible: 
		    invisible = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_flip_horizontal: 
		    flip_horizontal = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_flip_vertical: 
		    flip_vertical = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_dynamicsize:
		    dynamicsize = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowNode_dynamic:
		    if ( dynamicsize > 0) {
			for ( int j = 0; j < cmn.dynamicsize; j++) 
			    reader.readLine();  // TODO handle backslash and citationmarks
		    }
		    break;
		case Glow.eSave_GrowNode_node_part: 
		    glownode_open( reader);
		    break;
		case Glow.eSave_GrowNode_trf: 
		    trf.open( reader);
		    break;
		case Glow.eSave_GrowNode_arg_cnt:
		    arg_cnt = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowNode_argsize:
		    for ( int j = 0; j < arg_cnt; j++) 
			reader.readLine();
		    break;
		case Glow.eSave_GrowNode_argv:
		    for ( int j = 0; j < arg_cnt; j++) 
			reader.readLine();
		    break;
		case Glow.eSave_GrowNode_line_width: 
		    line_width = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_shadow: 
		    shadow = new Integer(token.nextToken()).intValue(); 
		    break;
		case Glow.eSave_GrowNode_gradient:
		    gradient = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowNode_text_type:
		    text_type = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowNode_text_font:
		    text_font = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_GrowNode_userdata_cb:
		    if ( cmn.appl != null)
			userdata = cmn.appl.growUserdataOpen( reader, this, Glow.eUserdataCbType_Node);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowNode");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowNode");
	}
    }

    public void glownode_open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = new Integer(token.nextToken()).intValue();
		if ( cmn.debug) System.out.println( "GlowNode : " + line);

		switch ( key) {

		case Glow.eSave_Node: 
		    break;
		case Glow.eSave_Node_nc:
		    nc_name = token.nextToken();
		    nc = (GlowNodeClass)cmn.ctx.get_nodeclass_from_name( nc_name);
		    nc_root = nc;
		    break;
		case Glow.eSave_Node_n_name:
		    n_name = token.nextToken();
		    break;
		case Glow.eSave_Node_refcon_cnt: 
		    for ( int i = 0; i < MAX_CONPOINTS; i++)
			reader.readLine();
		    break;
		case Glow.eSave_Node_x_right: 
		    x_right = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_Node_x_left: 
		    x_left = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_Node_y_high: 
		    y_high = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_Node_y_low: 
		    y_low = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_Node_obst_x_right: 
		case Glow.eSave_Node_obst_x_left: 
		case Glow.eSave_Node_obst_y_high: 
		case Glow.eSave_Node_obst_y_low:
		    break;
		case Glow.eSave_Node_annotsize: 
		    for ( int i = 0; i < 10; i++) {
			line = reader.readLine();
			token = new StringTokenizer(line);
			annotsize[i] = new Integer(token.nextToken()).intValue();
			if (cmn.debug)
			    System.out.println("GlowNode  annotsize: " + annotsize[i]);
		    }
		    break;
		case Glow.eSave_Node_annotv: 
		    for ( int i = 0; i < 10; i++) {
			if ( annotsize[i] != 0) {
			    line = reader.readLine();			
			    annotv[i] = line.substring(1, line.length()-1);
			    if ( cmn.debug)
				System.out.println("GrowNode  annotv: " + annotv[i]);
			}
		    }
		    break;
		case Glow.eSave_Node_pos: 
		    pos.open( reader);
		    break;
		case Glow.eSave_Node_trace_data1: 
		case Glow.eSave_Node_trace_data2: 
		case Glow.eSave_Node_trace_data3: 
		case Glow.eSave_Node_trace_data4: 
		case Glow.eSave_Node_trace_data5: 
		case Glow.eSave_Node_trace_data6: 
		case Glow.eSave_Node_trace_data7: 
		case Glow.eSave_Node_trace_data8: 
		case Glow.eSave_Node_trace_data9: 
		case Glow.eSave_Node_trace_data10: 
		case Glow.eSave_Node_trace_attr_type: 
		case Glow.eSave_Node_trace_color: 
		case Glow.eSave_Node_trace_color2: 
		    break;
		case Glow.eSave_Node_access:
		    access = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_Node_cycle:
		    cycle = new Integer(token.nextToken()).intValue();
		    break;
		case Glow.eSave_Node_ref_object:
		    if ( token.hasMoreTokens())
			ref_object = token.nextToken();
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GlowNode");
		    break;
		}
		if ( end_found)
		    break;

	    }

	} catch ( Exception e) {
	    System.out.println( "IOException GlowNode");
	}
    }

    public int eventHandler( GlowEvent event, double fx, double fy) {
	GlowPoint rp;
	int sts;

	switch ( event.event) {
	case Glow.eEvent_CursorMotion:		
	    return 0;
	default: ;
	}

	rp = trf.reverse( fx, fy);
	sts = nc.eventHandler(event, rp.x, rp.y);
	if ( sts != 0) {
	    System.out.println( "Hit in node " + sts);
	    if ( type() != Glow.eObjectType_GrowGroup)
		cmn.ctx.register_callback_object(Glow.eObjectType_Node, this);
	    return sts;
	}
	/*
	if ( ll.x <= rp.x && rp.x <= ur.x &&
	     ll.y <= rp.y && rp.y <= ur.y) {
	    System.out.println( "Event handler: Hit in rect");
	    return 1;
	}  
	else
	*/
	return 0;
    }

    public void draw() {
	if ( visible != 0)
	    //nc.draw( trf, highlight, hot, this, this);
	    draw(null, highlight, hot, null, null);
    }
    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {

	if ( node == null)
	    node = this;
	if ( colornode == null)
	    colornode = this;
	else if ( ((GrowNode)colornode).fill_drawtype == Glow.eDrawType_No && 
		  ((GrowNode)colornode).color_tone == Glow.eDrawTone_No)
	    colornode = this;

	if ( ((GrowNode)node).invisible != 0 || invisible != 0)
	    return;

	if ( fill_level == 1) {
	    if ( t != null) {
		GlowTransform trf_tot = t.multiply(trf);

		nc.draw( trf_tot, highlight, hot, this, this);
	    }
	    else
		nc.draw( trf, highlight, hot, node, node);
	}
	else {
	    int x1, x2, y1, y2;
	    int x_level = 0;
	    int y_level = 0;
	    int clip_sts = 0;
	    int old_color_tone = 0;
	    int old_fill_drawtype = 0;
	    
	    if (t == null) {
		x1 = (int)( x_left * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
		y1 = (int)( y_low * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
		x2 = (int)( x_right * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
		y2 = (int)( y_high * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    }
	    else {
		x1 = (int)( t.x( x_left, y_low) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
		y1 = (int)( t.y( x_left, y_low) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
		x2 = (int)( t.x( x_right, y_high) * cmn.mw.zoom_factor_x + 0.5) - cmn.mw.offset_x;
		y2 = (int)( t.y( x_right, y_high) * cmn.mw.zoom_factor_y + 0.5) - cmn.mw.offset_y;
	    }
	    switch ( level_direction) {
	    case Glow.eDirection_Right:
		x_level = (int)( fill_level * (x2 - x1) + 0.5);
		clip_sts = cmn.gdraw.set_clip_rectangle( x1 - 1, y1 - 1, x1 + x_level, y2 + 1);
		break;
	    case Glow.eDirection_Left:
		x_level = (int)( (1 - fill_level) * ( x2 - x1) + 0.5);
		clip_sts = cmn.gdraw.set_clip_rectangle( x1 - 1, y1 - 1, x1 + x_level, y2 + 1);
		if ( level_color_tone != Glow.eDrawTone_No) {
		    old_color_tone = color_tone;
		    color_tone = level_color_tone;
		}
		else if ( level_fill_drawtype != Glow.eDrawType_No) {
		    old_fill_drawtype = fill_drawtype;
		    fill_drawtype = level_fill_drawtype;
		}
		break;
	    case Glow.eDirection_Up:
		y_level = (int)( fill_level * (y2 - y1) + 0.5);
		clip_sts = cmn.gdraw.set_clip_rectangle( x1 - 1, y1 - 1, x2 + 1, y1 + y_level);
		break;
	    case Glow.eDirection_Down:
		y_level = (int)( (1 - fill_level) * ( y2 - y1) + 0.5);
		clip_sts = cmn.gdraw.set_clip_rectangle( x1 - 1, y1 - 1, x2 + 1, y1 + y_level);
		if ( level_color_tone != Glow.eDrawTone_No) {
		    old_color_tone = color_tone;
		    color_tone = level_color_tone;
		}
		else if ( level_fill_drawtype != Glow.eDrawType_No) {
		    old_fill_drawtype = fill_drawtype;
		    fill_drawtype = level_fill_drawtype;
		}
		break;
	    default: ;
	    }
	    
	    if ( t != null) {
		GlowTransform trf_tot = t.multiply( trf);

		// If this node has a trace pointer, use colors for this node
		nc.draw( trf_tot, highlight, hot, this, this);
	    }
	    else
		nc.draw( trf, highlight, hot, node, node);
	    if ( (clip_sts & 1) != 0)
		cmn.gdraw.reset_clip_rectangle();
	    
	    switch ( level_direction) {
	    case Glow.eDirection_Right:
		if ( level_color_tone != Glow.eDrawTone_No) {
		    old_color_tone = color_tone;
		    color_tone = level_color_tone;
		}
		else if ( level_fill_drawtype != Glow.eDrawType_No) {
		    old_fill_drawtype = fill_drawtype;
		    fill_drawtype = level_fill_drawtype;
		}
		clip_sts = cmn.gdraw.set_clip_rectangle( x1 + x_level, y1 - 1, x2 + 1, y2 + 1);
		break;
	    case Glow.eDirection_Left:
		if ( level_color_tone != Glow.eDrawTone_No)
		    color_tone = old_color_tone;
		else if ( level_fill_drawtype != Glow.eDrawType_No)
		    fill_drawtype = old_fill_drawtype;
		clip_sts = cmn.gdraw.set_clip_rectangle( x1 + x_level, y1 - 1, x2 + 1, y2 + 1);
		break;
	    case Glow.eDirection_Up:
		if ( level_color_tone != Glow.eDrawTone_No) {
		    old_color_tone = color_tone;
		    color_tone = level_color_tone;
		}
		else if ( level_fill_drawtype != Glow.eDrawType_No) {
		    old_fill_drawtype = fill_drawtype;
		    fill_drawtype = level_fill_drawtype;
		}
		clip_sts = cmn.gdraw.set_clip_rectangle( x1 - 1, y1 + y_level, x2 + 1, y2 + 1);
		break;
	    case Glow.eDirection_Down:
		if ( level_color_tone != Glow.eDrawTone_No)
		    color_tone = old_color_tone;
		else if ( level_fill_drawtype != Glow.eDrawType_No)
		    fill_drawtype = old_fill_drawtype;
		clip_sts = cmn.gdraw.set_clip_rectangle( x1 - 1, y1 + y_level, x2 + 1, y2 + 1);
		break;
	    default: ;
	    }

	    if ( t != null) {
		GlowTransform trf_tot = t.multiply( trf);

		// If this node has a trace pointer, use colors for this node
		nc.draw( trf_tot, highlight, hot, this, this);
	    }
	    else
		nc.draw( trf, highlight, hot, node, node);
	    if ( (clip_sts & 1) != 0)
		cmn.gdraw.reset_clip_rectangle();

	    switch ( level_direction) {
	    case Glow.eDirection_Right:
		if ( level_color_tone != Glow.eDrawTone_No)
		    color_tone = old_color_tone;
		else if ( level_fill_drawtype != Glow.eDrawType_No)
		    fill_drawtype = old_fill_drawtype;
		break;
	    case Glow.eDirection_Left:
		break;
	    case Glow.eDirection_Up:
		if ( level_color_tone != Glow.eDrawTone_No)
		    color_tone = old_color_tone;
		else if ( level_fill_drawtype != Glow.eDrawType_No)
		    fill_drawtype = old_fill_drawtype;
		break;
	    case Glow.eDirection_Down:
		break;
	    default: ;
	    }
	}

    }

    public int getClassTraceColor1() {
	return nc.dyn_color[0];
    }
    public int getClassTraceColor2() {
	return nc.dyn_color[1];
    }
    public int getClassDynType1() {
	return nc.dyn_type1;
    }
    public int getClassDynType2() {
	return nc.dyn_type2;
    }
    public int getClassActionType1() {
	return nc.action_type1;
    }
    public int getClassActionType2() {
	return nc.action_type2;
    }
    public int getClassCycle() {
	return nc.cycle;
    }
    public Object getUserData() {
	return userdata;
    }
    public void setColorTone(int color_tone) {
	this.color_tone = color_tone;
    }
    public void resetColorTone() {
	color_tone = original_color_tone;
    }
    public void setFillColor(int fill_drawtype) {
	this.fill_drawtype = fill_drawtype;
    }
    public void resetFillColor() {
	fill_drawtype = original_fill_drawtype;
    }
    public void setBorderColor(int draw_type) {
	this.draw_type = draw_type;
    }
    public void resetBorderColor() {
	draw_type = original_border_drawtype;
    }
    public void setColorInverse(int color_inverse) {
	this.color_inverse = color_inverse;
    }
    public void setLevelFillColor(int color) {
	level_fill_drawtype = color;
    }
    public void setLevelColorTone(int tone) {
	level_color_tone = tone;
    }
    public void setLevelDirection( int level_direction) {
	this.level_direction = level_direction;
    }
    public void setFillLevel(double fill_level) {
	this.fill_level = fill_level;
    }
    public String getAnnotation(int number) {
	return annotv[number];
    }
    public void setAnnotation(int number, String annot) {
	annotv[number] = annot;
    }
    public void setVisibility( int visibility) {
	switch ( visibility) {
	case Glow.eVis_Visible:
	    visible = 1;
	    dimmed = 0;
	    break;
	case Glow.eVis_Invisible:
	    visible = 0;
	    dimmed = 0;
	    draw();
	    break;
	case Glow.eVis_Dimmed:
	    visible = 1;
	    dimmed = 1;
	    draw();
	    break;
	}
    }

    void setRotation( double angel, double x0, double y0, int type) {
	double old_x_left, old_x_right, old_y_low, old_y_high;
	GlowTransform t = new GlowTransform();

	if ( Math.abs( angel - trf.rotation + trf.s_rotation) < Float.MIN_VALUE)
	    return;

	switch( type) {
	case Glow.eRotationPoint_LowerLeft:
	    x0 = x_left;
	    y0 = y_low;
	    break;
	case Glow.eRotationPoint_LowerRight:
	    x0 = x_right;
	    y0 = y_low;
	    break;
	case Glow.eRotationPoint_UpperRight:
	    x0 = x_right;
	    y0 = y_high;
	    break;
	case Glow.eRotationPoint_UpperLeft:
	    x0 = x_left;
	    y0 = y_high;
	    break;
	case Glow.eRotationPoint_Center:
	    x0 = (x_left + x_right) / 2;
	    y0 = (y_high + y_low) / 2;
	    break;
	case Glow.eRotationPoint_Zero:
	    x0 = trf.s_a13;
	    y0 = trf.s_a23;
	    break;
	default:
	    ;
	}

	old_x_left = x_left;
	old_x_right = x_right;
	old_y_low = y_low;
	old_y_high = y_high;

	System.out.println("Trf rotate " + angel + " x0 " + x0 + " y0 " + y0);
	t.rotate( angel, x0, y0);
	trf.set_from_stored( t);
	get_node_borders();
    }
    
    void storeTransform() {
	trf.store();
    }
    void get_node_borders() {
    }

    int set_next_nodeclass() {
	if ( nc.next_nc != null) {
	    set_nodeclass( (GlowNodeClass)nc.next_nc);
	    return 1;    
	}
	return 0;
    }

    void set_last_nodeclass() {
	GlowArrayElem next;
	for ( next = nc_root; 
	      ((GlowNodeClass)next).next_nc != null; 
	      next = ((GlowNodeClass)next).next_nc)
	    ;
	if ( next != nc)
	    set_nodeclass( (GlowNodeClass)next);
    }

    int set_nodeclass_by_index( int idx) {
	GlowArrayElem next;
	int i;

	next = nc_root;
	for ( i = 0; i < idx; i++) {
	    if ( ((GlowNodeClass)next).next_nc == null)
		return 0;
	    next = ((GlowNodeClass)next).next_nc;
	}
	if ( next != nc)
	    set_nodeclass( (GlowNodeClass)next);
	return 1;
    }

    int set_previous_nodeclass() {
	if ( nc.prev_nc != null) {
	    set_nodeclass( (GlowNodeClass)nc.prev_nc);
	    return 1;    
	}
	return 0;
    }

    void set_root_nodeclass() {
	if ( nc_root != nc)
	    set_nodeclass( nc_root);
    }

    void set_nodeclass( GlowNodeClass new_nc) {
	double old_x_left, old_x_right, old_y_low, old_y_high;

	old_x_left = x_left;
	old_x_right = x_right;
	old_y_low = y_low;
	old_y_high = y_high;

	nc = new_nc;

	get_node_borders();
	old_x_left = Math.min( old_x_left, x_left);
	old_x_right = Math.max( old_x_right, x_right);
	old_y_low = Math.min( old_y_low, y_low);
	old_y_high = Math.max( old_y_high, y_high);	
	cmn.ctx.draw( old_x_left * cmn.mw.zoom_factor_x - cmn.mw.offset_x - Glow.DRAW_MP,
		      old_y_low * cmn.mw.zoom_factor_y - cmn.mw.offset_y - Glow.DRAW_MP,
		      old_x_right * cmn.mw.zoom_factor_x - cmn.mw.offset_x + Glow.DRAW_MP,
		      old_y_high * cmn.mw.zoom_factor_y - cmn.mw.offset_y + Glow.DRAW_MP);
    }

    public GlowFillLevelLimits getLimits()
    {
	GlowFillLevelLimits limits = new GlowFillLevelLimits();

	if ( nc.y0 == 0 && nc.y1 == 0) {
	    limits.status = 0;
	    return limits;
	}
	if ( !(nc.x0 == 0 && nc.x1 == 0)) {
	    limits.status = 0;
	    return limits;
	}

	double x1, x2, y1, y2;
	double rotation;

	// Calculate max and min koordinates

	x1 = trf.x( 0, nc.y0);
	y1 = trf.y( 0, nc.y0);
	x2 = trf.x( 0, nc.y1);
	y2 = trf.y( 0, nc.y1);

	rotation = (trf.rot() / 360 - Math.floor( trf.rot() / 360)) * 360;

	if ( 45 >= rotation || rotation > 315) {
	    limits.direction = Glow.eDirection_Down;
	    limits.min = y1;
	    limits.max = y2;
	}
	else if ( 45 < rotation && rotation <= 135) {
	    limits.direction = Glow.eDirection_Right;
	    limits.min = x2;
	    limits.max = x1;
	}
	else if ( 135 < rotation && rotation <= 225) {
	    limits.direction = Glow.eDirection_Up;
	    limits.min = y2;
	    limits.max = y1;
	}
	else if ( 225 < rotation && rotation <= 315) {
	    limits.direction = Glow.eDirection_Left;
	    limits.min = x1;
	    limits.max = x2;
	}
	limits.status = 1;
	return limits;
    }

    public GlowGeometry measure() {
	GlowGeometry geom = new GlowGeometry();
	geom.ll_x = x_left;
	geom.ll_y = y_low;
	geom.ur_x = x_right;
	geom.ur_y = y_high;

	return geom;
    }
}
