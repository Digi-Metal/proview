/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2013 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

package jpwr.jopg;
import jpwr.rt.*;
import java.io.*;
import java.util.*;

public class GrowWindow extends GrowRect {

    String file_name;
    double scrollbar_width;
    int scrollbar_color;
    int scrollbar_bg_color;
    int vertical_scrollbar;
    int horizontal_scrollbar;
    double window_scale;
    String owner;
    Object userdata;

    public GrowWindow(GrowCmn cmn) {
	super(cmn);
    }

    public GrowWindow( GrowCmn cmn, String n_name, double x, double y, 
		    double w, double h, int draw_type, int line_width, 
		    int fill, int border, int shadow,
		    int fill_drawtype) {
	super(cmn, n_name, x, y, w, h, draw_type, line_width, fill, border, shadow, fill_drawtype);
    }

    public int type() {
	return Glow.eObjectType_GrowWindow;
    }

    public void open(BufferedReader reader) {
	String line;
	StringTokenizer token;
	boolean end_found = false;

	try {
	    while( (line = reader.readLine()) != null) {
		token = new StringTokenizer(line);
		int key = Integer.valueOf(token.nextToken());
		if ( cmn.debug) System.out.println( "GrowWindow : " + line);

		switch ( key) {

		case Glow.eSave_GrowWindow: 
		    break;
		case Glow.eSave_GrowWindow_file_name:
		    if ( token.hasMoreTokens())
			file_name = token.nextToken();			 
		    break;
		case Glow.eSave_GrowWindow_scrollbar_width: 
		    scrollbar_width = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowWindow_scrollbar_color: 
		    scrollbar_color = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowWindow_scrollbar_bg_color: 
		    scrollbar_bg_color = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowWindow_vertical_scrollbar: 
		    vertical_scrollbar = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowWindow_horizontal_scrollbar: 
		    horizontal_scrollbar = Integer.valueOf(token.nextToken()); 
		    break;
		case Glow.eSave_GrowWindow_window_scale: 
		    window_scale = new Double(token.nextToken()).doubleValue(); 
		    break;
		case Glow.eSave_GrowWindow_owner:
		    if ( token.hasMoreTokens())
			owner = token.nextToken();			 
		    break;
		case Glow.eSave_GrowWindow_rect_part: 
		    super.open( reader);
		    break;
		case Glow.eSave_GrowWindow_userdata_cb:
		    if ( cmn.appl != null)
			userdata = cmn.appl.growUserdataOpen( reader, this, Glow.eUserdataCbType_Node);
		    break;
		case Glow.eSave_End:
		    end_found = true;
		    break;
		default:
		    System.out.println( "Syntax error in GrowWindow");
		    break;
		}
		if ( end_found)
		    break;
	    }
		
	} catch ( Exception e) {
	    System.out.println( "IOException GrowWindow");
	}
    }    

    public void draw(GlowTransform t, int highlight, int hot, Object node, Object colornode) {
	if ( cmn.nodraw != 0)
	    return;

    }

}
