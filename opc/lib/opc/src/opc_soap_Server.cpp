/* opc_soap_Server.cpp
   Generated by gSOAP 2.7.9d from opc_msg.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "opc_soap_H.h"

SOAP_SOURCE_STAMP("@(#) opc_soap_Server.cpp ver 2.7.9d 2007-02-26 14:18:39 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetStatus"))
		return soap_serve___ns1__GetStatus(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:Read"))
		return soap_serve___ns1__Read(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:Write"))
		return soap_serve___ns1__Write(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:Subscribe"))
		return soap_serve___ns1__Subscribe(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:SubscriptionPolledRefresh"))
		return soap_serve___ns1__SubscriptionPolledRefresh(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:SubscriptionCancel"))
		return soap_serve___ns1__SubscriptionCancel(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:Browse"))
		return soap_serve___ns1__Browse(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetProperties"))
		return soap_serve___ns1__GetProperties(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetStatus(struct soap *soap)
{	struct __ns1__GetStatus soap_tmp___ns1__GetStatus;
	_ns1__GetStatusResponse ns1__GetStatusResponse;
	ns1__GetStatusResponse.soap_default(soap);
	soap_default___ns1__GetStatus(soap, &soap_tmp___ns1__GetStatus);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetStatus(soap, &soap_tmp___ns1__GetStatus, "-ns1:GetStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__GetStatus(soap, soap_tmp___ns1__GetStatus.ns1__GetStatus, &ns1__GetStatusResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetStatusResponse.soap_put(soap, "ns1:GetStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetStatusResponse.soap_put(soap, "ns1:GetStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Read(struct soap *soap)
{	struct __ns1__Read soap_tmp___ns1__Read;
	_ns1__ReadResponse ns1__ReadResponse;
	ns1__ReadResponse.soap_default(soap);
	soap_default___ns1__Read(soap, &soap_tmp___ns1__Read);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Read(soap, &soap_tmp___ns1__Read, "-ns1:Read", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__Read(soap, soap_tmp___ns1__Read.ns1__Read, &ns1__ReadResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__ReadResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__ReadResponse.soap_put(soap, "ns1:ReadResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__ReadResponse.soap_put(soap, "ns1:ReadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Write(struct soap *soap)
{	struct __ns1__Write soap_tmp___ns1__Write;
	_ns1__WriteResponse ns1__WriteResponse;
	ns1__WriteResponse.soap_default(soap);
	soap_default___ns1__Write(soap, &soap_tmp___ns1__Write);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Write(soap, &soap_tmp___ns1__Write, "-ns1:Write", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__Write(soap, soap_tmp___ns1__Write.ns1__Write, &ns1__WriteResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__WriteResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__WriteResponse.soap_put(soap, "ns1:WriteResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__WriteResponse.soap_put(soap, "ns1:WriteResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Subscribe(struct soap *soap)
{	struct __ns1__Subscribe soap_tmp___ns1__Subscribe;
	_ns1__SubscribeResponse ns1__SubscribeResponse;
	ns1__SubscribeResponse.soap_default(soap);
	soap_default___ns1__Subscribe(soap, &soap_tmp___ns1__Subscribe);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Subscribe(soap, &soap_tmp___ns1__Subscribe, "-ns1:Subscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__Subscribe(soap, soap_tmp___ns1__Subscribe.ns1__Subscribe, &ns1__SubscribeResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__SubscribeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SubscribeResponse.soap_put(soap, "ns1:SubscribeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SubscribeResponse.soap_put(soap, "ns1:SubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SubscriptionPolledRefresh(struct soap *soap)
{	struct __ns1__SubscriptionPolledRefresh soap_tmp___ns1__SubscriptionPolledRefresh;
	_ns1__SubscriptionPolledRefreshResponse ns1__SubscriptionPolledRefreshResponse;
	ns1__SubscriptionPolledRefreshResponse.soap_default(soap);
	soap_default___ns1__SubscriptionPolledRefresh(soap, &soap_tmp___ns1__SubscriptionPolledRefresh);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__SubscriptionPolledRefresh(soap, &soap_tmp___ns1__SubscriptionPolledRefresh, "-ns1:SubscriptionPolledRefresh", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__SubscriptionPolledRefresh(soap, soap_tmp___ns1__SubscriptionPolledRefresh.ns1__SubscriptionPolledRefresh, &ns1__SubscriptionPolledRefreshResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__SubscriptionPolledRefreshResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SubscriptionPolledRefreshResponse.soap_put(soap, "ns1:SubscriptionPolledRefreshResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SubscriptionPolledRefreshResponse.soap_put(soap, "ns1:SubscriptionPolledRefreshResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SubscriptionCancel(struct soap *soap)
{	struct __ns1__SubscriptionCancel soap_tmp___ns1__SubscriptionCancel;
	_ns1__SubscriptionCancelResponse ns1__SubscriptionCancelResponse;
	ns1__SubscriptionCancelResponse.soap_default(soap);
	soap_default___ns1__SubscriptionCancel(soap, &soap_tmp___ns1__SubscriptionCancel);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__SubscriptionCancel(soap, &soap_tmp___ns1__SubscriptionCancel, "-ns1:SubscriptionCancel", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__SubscriptionCancel(soap, soap_tmp___ns1__SubscriptionCancel.ns1__SubscriptionCancel, &ns1__SubscriptionCancelResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__SubscriptionCancelResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SubscriptionCancelResponse.soap_put(soap, "ns1:SubscriptionCancelResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SubscriptionCancelResponse.soap_put(soap, "ns1:SubscriptionCancelResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Browse(struct soap *soap)
{	struct __ns1__Browse soap_tmp___ns1__Browse;
	_ns1__BrowseResponse ns1__BrowseResponse;
	ns1__BrowseResponse.soap_default(soap);
	soap_default___ns1__Browse(soap, &soap_tmp___ns1__Browse);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Browse(soap, &soap_tmp___ns1__Browse, "-ns1:Browse", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__Browse(soap, soap_tmp___ns1__Browse.ns1__Browse, &ns1__BrowseResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__BrowseResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__BrowseResponse.soap_put(soap, "ns1:BrowseResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__BrowseResponse.soap_put(soap, "ns1:BrowseResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetProperties(struct soap *soap)
{	struct __ns1__GetProperties soap_tmp___ns1__GetProperties;
	_ns1__GetPropertiesResponse ns1__GetPropertiesResponse;
	ns1__GetPropertiesResponse.soap_default(soap);
	soap_default___ns1__GetProperties(soap, &soap_tmp___ns1__GetProperties);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetProperties(soap, &soap_tmp___ns1__GetProperties, "-ns1:GetProperties", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__GetProperties(soap, soap_tmp___ns1__GetProperties.ns1__GetProperties, &ns1__GetPropertiesResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetPropertiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetPropertiesResponse.soap_put(soap, "ns1:GetPropertiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetPropertiesResponse.soap_put(soap, "ns1:GetPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

/* End of opc_soap_Server.cpp */
