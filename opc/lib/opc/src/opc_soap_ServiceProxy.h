/* opc_soap_ServiceProxy.h
   Generated by gSOAP 2.7.9d from opc_msg.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef opc_soap_Service_H
#define opc_soap_Service_H
#include "opc_soap_H.h"
class Service {
public:
  struct soap* soap;
  const char* endpoint;
  Service()
  {
    soap = soap_new();
    endpoint = "http://localhost:80";
    if (soap && !soap->namespaces) {
      static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/",
            "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/",
            "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance",
            "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema",
            "http://www.w3.org/*/XMLSchema", NULL },
        { "s0", "http://opcfoundation.org/webservices/XMLDA/1.0/", NULL, NULL },
        { NULL, NULL, NULL, NULL }
      };
      soap->namespaces = namespaces;
    }
  }
  virtual ~Service()
  {
    if (soap) {
      soap_destroy(soap);
      soap_end(soap);
      soap_free(soap);
    }
  }
  virtual int __s0__GetStatus(_s0__GetStatus* s0__GetStatus,
      _s0__GetStatusResponse* s0__GetStatusResponse)
  {
    return soap ? soap_call___s0__GetStatus(soap, endpoint, NULL, s0__GetStatus,
                      s0__GetStatusResponse)
                : SOAP_EOM;
  }
  virtual int __s0__Read(
      _s0__Read* s0__Read, _s0__ReadResponse* s0__ReadResponse)
  {
    return soap
        ? soap_call___s0__Read(soap, endpoint, NULL, s0__Read, s0__ReadResponse)
        : SOAP_EOM;
  }
  virtual int __s0__Write(
      _s0__Write* s0__Write, _s0__WriteResponse* s0__WriteResponse)
  {
    return soap ? soap_call___s0__Write(
                      soap, endpoint, NULL, s0__Write, s0__WriteResponse)
                : SOAP_EOM;
  }
  virtual int __s0__Subscribe(_s0__Subscribe* s0__Subscribe,
      _s0__SubscribeResponse* s0__SubscribeResponse)
  {
    return soap ? soap_call___s0__Subscribe(soap, endpoint, NULL, s0__Subscribe,
                      s0__SubscribeResponse)
                : SOAP_EOM;
  }
  virtual int __s0__SubscriptionPolledRefresh(
      _s0__SubscriptionPolledRefresh* s0__SubscriptionPolledRefresh,
      _s0__SubscriptionPolledRefreshResponse*
          s0__SubscriptionPolledRefreshResponse)
  {
    return soap ? soap_call___s0__SubscriptionPolledRefresh(soap, endpoint,
                      NULL, s0__SubscriptionPolledRefresh,
                      s0__SubscriptionPolledRefreshResponse)
                : SOAP_EOM;
  }
  virtual int __s0__SubscriptionCancel(
      _s0__SubscriptionCancel* s0__SubscriptionCancel,
      _s0__SubscriptionCancelResponse* s0__SubscriptionCancelResponse)
  {
    return soap ? soap_call___s0__SubscriptionCancel(soap, endpoint, NULL,
                      s0__SubscriptionCancel, s0__SubscriptionCancelResponse)
                : SOAP_EOM;
  }
  virtual int __s0__Browse(
      _s0__Browse* s0__Browse, _s0__BrowseResponse* s0__BrowseResponse)
  {
    return soap ? soap_call___s0__Browse(
                      soap, endpoint, NULL, s0__Browse, s0__BrowseResponse)
                : SOAP_EOM;
  }
  virtual int __s0__GetProperties(_s0__GetProperties* s0__GetProperties,
      _s0__GetPropertiesResponse* s0__GetPropertiesResponse)
  {
    return soap ? soap_call___s0__GetProperties(soap, endpoint, NULL,
                      s0__GetProperties, s0__GetPropertiesResponse)
                : SOAP_EOM;
  }
};
#endif
