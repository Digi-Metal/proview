/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* pn_viewer_qt.cpp -- Profinet viewer */
#ifdef PWRE_CONF_PNAK

#include "co_string.h"

#include "cow_qt_helpers.h"

#include "rt_pb_msg.h"

#include "pn_viewer_qt.h"
#include "pn_viewernav_qt.h"

#include <QMenuBar>
#include <QVBoxLayout>

void PnViewerQtWidget::closeEvent(QCloseEvent* event)
{
  viewer->activate_close();
  QWidget::closeEvent(event);
}

PnViewerQt::PnViewerQt(
    const char* v_name, const char* v_device, pwr_tStatus* status)
    : PnViewer(NULL, v_name, v_device, status)
{
  toplevel = new PnViewerQtWidget(this);
  toplevel->setMinimumSize(800, 600);
  toplevel->setWindowTitle(fl(v_name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QMenuBar* menu_bar = new QMenuBar();

  // File Entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions Entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("F&unctions"));
  addMenuItem(toplevel, functions, "&Update", SLOT(activate_update()));
  addMenuItem(toplevel, functions, "&Filter", SLOT(activate_filter()));
  addMenuItem(toplevel, functions, "&Set Device Properties",
      SLOT(activate_setdevice()));
  addMenuItem(toplevel, functions, "&Change Value",
      SLOT(activate_changevalue()), "CTRL+Q");

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "zoom-original");

  // Help menu
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  // Statusbar and cmd input
  QStatusBar* statusbar = new QStatusBar();
  statusbar->setFixedHeight(25);
  msg_label = new QLabel("");
  cmd_prompt = new QLabel("value > ");

  value_recall = new CoWowRecall();
  cmd_entry = new CoWowEntryQt(value_recall);
  QObject::connect(cmd_entry, SIGNAL(returnPressed()), toplevel,
      SLOT(valchanged_cmd_entry()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);

  // Create viewernav
  QSplitter* nav_paned = new QSplitter(Qt::Horizontal);
  QVBoxLayout* nav_left_layout = new QVBoxLayout();
  QWidget* nav_left = layout_to_widget(nav_left_layout);
  QVBoxLayout* nav_right_layout = new QVBoxLayout();
  QWidget* nav_right = layout_to_widget(nav_right_layout);
  QLabel* header_left = new QLabel("Devices on Network");
  QLabel* header_right = new QLabel("Devices from Configuration");

  viewernav = new PnViewerNavQt(this, viewer_eType_Network, &nav_widget);
  viewernav->change_value_cb = &change_value;
  viewernav->message_cb = &message_cb;

  viewernavconf
      = new PnViewerNavQt(this, viewer_eType_Configuration, &navconf_widget);
  viewernavconf->change_value_cb = &change_value;
  viewernavconf->message_cb = &message_cb;

  nav_left_layout->addWidget(header_left);
  add_expanding(nav_left_layout, nav_widget);

  nav_right_layout->addWidget(header_right);
  add_expanding(nav_right_layout, navconf_widget);

  add_expanding(nav_paned, nav_left);
  nav_paned->addWidget(nav_right);

  QVBoxLayout* form = new QVBoxLayout(toplevel);
  form->setMenuBar(menu_bar);
  add_expanding(form, nav_paned);
  form->addWidget(statusbar);

  toplevel->setLayout(form);
  toplevel->show();

  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);

  wow = new CoWowQt(toplevel);
}

PnViewerQt::~PnViewerQt()
{
  if (viewernav) {
    delete viewernav;
  }
}

void PnViewerQt::message(char severity, const char* msg)
{
  msg_label->setText(QString::fromLatin1(msg));
}

void PnViewerQt::open_change_value()
{
  if (input_open) {
    cmd_entry->setVisible(false);
    set_prompt("");
    input_open = 0;
    return;
  }

  int sts = viewernav->check_attr_value();
  if (EVEN(sts)) {
    if (sts == PB__ATTRNOEDIT) {
      message('E', "Attribute is no edit");
    } else {
      message('E', "Syntax error");
    }
    return;
  }

  cmd_entry->setVisible(true);

  message(' ', "");
  cmd_entry->setFocus();

  cmd_entry->setText("");
  set_prompt(Lng::translate("value >"));
  input_open = 1;
}

void PnViewerQtWidget::valchanged_cmd_entry()
{
  if (viewer->input_open) {
    viewer->viewernav->set_attr_value(
        qPrintableLatin1(viewer->cmd_entry->text()));
    viewer->cmd_entry->setVisible(false);
    viewer->set_prompt("");
    viewer->input_open = 0;
    viewer->viewernav->set_input_focus();
  }
}

void PnViewerQt::set_prompt(const char* prompt)
{
  if (streq(prompt, "")) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setText(QString::fromLatin1(prompt));
    cmd_prompt->setVisible(true);
  }
}

void PnViewerQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!viewer->focustimer.disabled()) {
    viewer->viewernav->set_input_focus();
    viewer->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void PnViewerQtWidget::activate_update()
{
  viewer->activate_update();
}

void PnViewerQtWidget::activate_filter()
{
  viewer->activate_filter(viewer_eFilterType_NotMatching);
}

void PnViewerQtWidget::activate_setdevice()
{
  viewer->activate_setdevice();
}

void PnViewerQtWidget::activate_changevalue()
{
  viewer->activate_changevalue();
}

void PnViewerQtWidget::activate_zoom_in()
{
  viewer->viewernav->zoom(1.2);
}

void PnViewerQtWidget::activate_zoom_out()
{
  viewer->viewernav->zoom(5.0 / 6);
}

void PnViewerQtWidget::activate_zoom_reset()
{
  viewer->viewernav->unzoom();
}

void PnViewerQtWidget::activate_help()
{
  viewer->activate_help();
}

#endif