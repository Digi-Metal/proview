/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_pb_gsd_attr_motif_h
#define cow_pb_gsd_attr_motif_h

/* cow_pb_gsd_attr_motif.h -- Profibus gsd attribute editor */

#include "cow_pb_gsd_attr.h"

class GsdAttrMotif : public GsdAttr
{
public:
  Widget parent_wid;
  Widget brow_widget;
  Widget form_widget;
  Widget toplevel;
  Widget msg_label;
  Widget cmd_prompt;
  Widget cmd_input;
  Widget attrnav_form;
  Widget cmd_ok;
  Widget cmd_cancel;
  Widget menubutton_copy;
  Widget menubutton_cut;
  Widget menubutton_paste;
  Widget menubutton_changevalue;

  GsdAttrMotif(Widget a_parent_wid, void* a_parent_ctx, void* a_object,
               pb_gsd* a_gsd, int a_edit_mode);
  ~GsdAttrMotif();

  void message(char severity, const char* message);
  void set_prompt(const char* prompt);
  void change_value();

  static void gsdattr_message(void* attr, char severity, char* message);
  static void gsdattr_change_value_cb(void* attr_ctx);
  static void activate_change_value(Widget w, GsdAttr* attr,
                                    XmAnyCallbackStruct* data);
  static void activate_exit(Widget w, GsdAttr* attr, XmAnyCallbackStruct* data);
  static void activate_help(Widget w, GsdAttr* attr, XmAnyCallbackStruct* data);
  static void activate_copy(Widget w, GsdAttr* attr, XmAnyCallbackStruct* data);
  static void activate_cut(Widget w, GsdAttr* attr, XmAnyCallbackStruct* data);
  static void activate_paste(Widget w, GsdAttr* attr,
                             XmAnyCallbackStruct* data);
  static void activate_zoom_in(Widget w, GsdAttr* attr,
                               XmAnyCallbackStruct* data);
  static void activate_zoom_out(Widget w, GsdAttr* attr,
                                XmAnyCallbackStruct* data);
  static void activate_zoom_reset(Widget w, GsdAttr* attr,
                                  XmAnyCallbackStruct* data);
  static void activate_print(Widget w, GsdAttr* attr,
                             XmAnyCallbackStruct* data);
  static void activate_cmd_ok(Widget w, GsdAttr* attr,
                              XmAnyCallbackStruct* data);
  static void cmd_close_apply_cb(void* ctx, void* data);
  static void cmd_close_no_cb(void* ctx, void* data);
  static void activate_cmd_ca(Widget w, GsdAttr* attr,
                              XmAnyCallbackStruct* dataxo);
  static void create_menubutton(Widget w, GsdAttr* attr,
                                XmAnyCallbackStruct* data);
  static void create_msg_label(Widget w, GsdAttr* attr,
                               XmAnyCallbackStruct* data);
  static void create_cmd_prompt(Widget w, GsdAttr* attr,
                                XmAnyCallbackStruct* data);
  static void create_cmd_ok(Widget w, GsdAttr* attr, XmAnyCallbackStruct* data);
  static void create_cmd_ca(Widget w, GsdAttr* attr, XmAnyCallbackStruct* data);
  static void create_cmd_input(Widget w, GsdAttr* attr,
                               XmAnyCallbackStruct* data);
  static void create_attrnav_form(Widget w, GsdAttr* attr,
                                  XmAnyCallbackStruct* data);
  static void action_inputfocus(Widget w, XmAnyCallbackStruct* data);
  static void valchanged_cmd_input(Widget w, XEvent* event);
};

#endif
