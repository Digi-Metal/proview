/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/* xtt_tbl.cpp -- Sev Table Viewer */

#include <fstream>
#include <vector>

#include "glow_std.h"

#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
#include "cow_wow_qt.h"
#include "cow_xhelp_qt.h"
#include "cow_login_qt.h"

#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "flow_browwidget_qt.h"

#include "glow.h"
#include "glow_curvectx.h"

#include "flow_msg.h"

#include "xtt_tbl_qt.h"
#include "xtt_tblnav_qt.h"
#include "xtt_sevhist_qt.h"

#include <QMenuBar>
#include <QVBoxLayout>

void XttTblQt::message(char severity, const char *message)
{
  msg_label->setText(fl(message));
}

void XttTblQtWidget::closeEvent(QCloseEvent *event)
{
  if (tbl->close_cb) {
    (tbl->close_cb)(tbl);
  } else {
    delete tbl;
  }

  QWidget::closeEvent(event);
}

void XttTblQtWidget::focusInEvent(QFocusEvent *event)
{
  if (tbl->tblnav) {
    tbl->tblnav->set_inputfocus();
  }

  QWidget::focusInEvent(event);
}

void XttTblQtWidget::activate_print()
{
  if (!tbl->is_authorized()) {
    return;
  }

  tbl->activate_print();
}

void XttTblQtWidget::activate_help()
{
  if (!tbl->is_authorized()) {
    return;
  }

  tbl->activate_help();
}

void XttTblQtWidget::activate_help_project()
{
  if (!tbl->is_authorized()) {
    return;
  }

  tbl->activate_help_project();
}

void XttTblQtWidget::activate_help_proview()
{
  if (!tbl->is_authorized()) {
    return;
  }

  tbl->activate_help_proview();
}

void XttTblQtWidget::activate_opensevhist()
{
  if (!tbl->is_authorized()) {
    return;
  }

  tbl->activate_opensevhist();
}

void XttTblQtWidget::activate_delete_item()
{
  if (!tbl->is_authorized(pwr_mPrv_SevAdmin)) {
    return;
  }

  tbl->activate_delete_item();
}

void XttTblQtWidget::activate_tree_layout()
{
  if (!tbl->is_authorized()) {
    return;
  }

  tbl->tblnav->show_tree();
}

void XttTblQtWidget::activate_list_layout()
{
  if (!tbl->is_authorized()) {
    return;
  }

  tbl->tblnav->show_list();
}

XttSevHist *XttTblQt::sevhist_new(pwr_tOid *oidv, pwr_tOName *anamev,
                                  pwr_tOName *onamev, bool *sevhistobjectv,
                                  pwr_tStatus *sts)
{
  QWidget *w;
  return new XttSevHistQt(this, toplevel, "Process History", &w, oidv, anamev,
                          onamev, sevhistobjectv, sevcli, 0, 0, 0, 0,
                          time_ePeriod_lastHour, 0, sts);
}

CoLogin *XttTblQt::login_new(const char *name, const char *groupname,
                             void    (*bc_success)(void *),
                             void    (*bc_cancel)(void *), pwr_tStatus *status)
{
  return new CoLoginQt(this, toplevel, name, groupname, bc_success, bc_cancel,
                       0, status);
}

void XttTblQtWidget::activate_command()
{
  if (!tbl->is_authorized()) {
    return;
  }

  if (tbl->command_open) {
    tbl->cmd_entry->setVisible(false);
    tbl->set_prompt("");
    tbl->command_open = 0;
    return;
  }

  tbl->cmd_entry->setText("");

  tbl->cmd_entry->setVisible(true);
  tbl->message(' ', "");
  tbl->cmd_entry->setFocus();

  tbl->set_prompt("xtt >");
  tbl->command_open = 1;
}

void XttTblQt::set_prompt(const char *prompt)
{
  if (strcmp(prompt, "") == 0) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setText(QString::fromLatin1(prompt));
    cmd_prompt->setVisible(true);
  }
}

void XttTblQtWidget::valchanged_cmd_input()
{
  QByteArray text = tbl->cmd_entry->text().toLatin1();

  tbl->command(text.data());
  tbl->cmd_entry->setVisible(false);
  tbl->set_prompt("");
  tbl->command_open = 0;
  tbl->tblnav->set_inputfocus();
}

XttTblQt::XttTblQt(QWidget *a_parent_wid, void *a_parent_ctx,
                   sevcli_tCtx a_sevcli, sevcli_sHistItem *itemlist,
                   int item_cnt) : XttTbl(a_parent_ctx, a_sevcli)
{
  int sts;

  toplevel = new XttTblQtWidget(this, a_parent_wid);
  toplevel->setMinimumSize(500, 700);
  toplevel->setWindowTitle(fl("SevXtt Navigator"));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar *menu_bar = new QMenuBar();

  // File entry
  QMenu *file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()), "",
              "document-print");
  addMenuItem(toplevel, file, "&Login", SLOT(open_login()));
  addMenuItem(toplevel, file, "Log&Out", SLOT(logout()));
  addMenuItem(toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions entry
  QMenu *functions = menu_bar->addMenu(translate_utf8("F&unctions"));
  addMenuItem(toplevel, functions, "&Open Process History",
              SLOT(activate_opensevhist()), "CTRL+G");
  addMenuItem(toplevel, functions, "Co&mmand", SLOT(activate_command()), "CTRL+B");
  addMenuItem(toplevel, functions, "&Delete Item", SLOT(activate_delete_item()));

  // View menu
  QMenu *view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "&Tree Layout", SLOT(activate_tree_layout()));
  addMenuItem(toplevel, view, "&List Layout", SLOT(activate_list_layout()));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
              "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
              "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
              "zoom-reset");

  // Help entry
  QMenu *help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Overview", SLOT(activate_help()), "CTRL+H",
              "system-help");
  addMenuItem(toplevel, help, "&Project", SLOT(activate_help_project()));
  addMenuItem(toplevel, help, "&About Proview", SLOT(activate_help_proview()));

  // Toolbar
  QToolBar *tools = new QToolBar();

  addToolItem(toplevel, tools, "Open history item", SLOT(activate_opensevhist()),
              "$pwr_exe/xtt_meth_trend.png");
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoomin()),
              "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoomout()),
              "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoomreset()),
              "$pwr_exe/xtt_zoom_reset.png");

  // Statusbar and cmd input
  QStatusBar *statusbar = new QStatusBar();
  msg_label = new QLabel("");
  msg_label->setFixedHeight(25);
  cmd_prompt = new QLabel("value > ");
  cmd_prompt->setFixedHeight(25);

  cmd_recall = new CoWowRecall();
  cmd_entry = new CoWowEntryQt(cmd_recall);
  cmd_entry->setFixedHeight(25);
  QObject::connect(cmd_entry, SIGNAL(editing_finished()), toplevel,
                   SLOT(valchanged_cmd_input()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);

  tblnav = new TblNavQt(this, toplevel, itemlist, item_cnt, &brow_widget, &sts);
  tblnav->message_cb = &XttTbl::message;
  tblnav->is_authorized_cb = &XttTbl::is_authorized;
  tblnav->command_cb = &XttTbl::command_cb;

  QVBoxLayout *vbox = new QVBoxLayout(toplevel);
  vbox->setMenuBar(menu_bar);
  vbox->addWidget(tools);
  add_expanding(vbox, brow_widget);
  vbox->addWidget(statusbar);

  toplevel->setLayout(vbox);
  toplevel->show();

  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);

  // Create help window
  CoXHelp *xhelp = new CoXHelpQt(toplevel, this, xhelp_eUtility_Xtt, &sts);
  CoXHelp::set_default(xhelp);

  wow = new CoWowQt(toplevel);

  if (!is_authorized(pwr_mAccess_AllSev, 0)) {
    open_login();
  }

  if (!quiet) {
    if (cologin) {
      // Set login window as parent to warranty as focus is left to parent.
      ((CoWowQt *) wow)->SetParent(((CoLoginQt *) cologin)->toplevel);
    }

    wow->DisplayWarranty();

    if (cologin) {
      ((CoWowQt *) wow)->SetParent(toplevel);
    }
  }
}