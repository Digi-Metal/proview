/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 **/


#include <math.h>
#include "pwr.h"
#include "pwr_baseclasses.h"
#include "co_dcli.h"
#include "rt_gdh.h"
#include "sev_db.h"
#include "rt_sev_msg.h"

pwr_tStatus sev_db::tree_update()
{
  int new_item = 0;
  int num;
  pwr_tAName hname;
  pwr_tStatus sts;
  pwr_tOid oid;
  pwr_tCid cid;
  char *s;
  pwr_sClass_SevItem ritem;
  char oname_array[20][pwr_cSizObjName + 1];
  pwr_tObjName itemname;
  char root[] = "pwrNode-sev";

  // Check root object
  sts = gdh_NameToObjid( root, &oid);
  if ( EVEN(sts)) {
    sts = gdh_CreateObject( root, pwr_eClass_NodeHier, 0,
			    &oid, pwr_cNObjid, 0, pwr_cNObjid);
    if ( EVEN(sts)) return sts;
  }


  for ( unsigned int i = 0; i < m_items.size(); i++) {
    if ( m_items[i].deleted)
      continue;

    printf( "Tree update item %s\n", m_items[i].oname);
    switch ( m_items[i].attr[0].type) {
    case pwr_eType_Float32:
    case pwr_eType_Float64:
    case pwr_eType_Int8:
    case pwr_eType_Int16:
    case pwr_eType_Int32:
    case pwr_eType_Int64:
    case pwr_eType_UInt8:
    case pwr_eType_UInt16:
    case pwr_eType_UInt32:
    case pwr_eType_UInt64:
    case pwr_eType_Boolean:
      break;
    default:
      continue;
    }

    new_item = 0;

    if ( (s = strchr( m_items[i].oname, ':')))
      s++;
    else
      s = m_items[i].oname;

    num = dcli_parse( s, "-", "",
	     (char *) oname_array, sizeof( oname_array)/sizeof( oname_array[0]), 
	     sizeof( oname_array[0]), 0);

    strcpy( hname, root);
    for ( int j = 0; j < num; j++) {
      strcat( hname, "-");
      strcat( hname, oname_array[j]);

      if ( !new_item)
	sts = gdh_NameToObjid( hname, &oid);
      if ( new_item || EVEN(sts)) {
	// Create object
	sts = gdh_CreateObject( hname, pwr_eClass_PlantHier, 0,
				&oid, pwr_cNObjid, 0, pwr_cNObjid);
	if ( EVEN(sts)) return sts;
	
	new_item = 1;
      }
    }
    sprintf( itemname, "%sItem", m_items[i].attrnum > 1 ? "O" : ""); 
    strcat( hname, "-");
    strcat( hname, itemname);
    if ( !new_item)
      sts = gdh_NameToObjid( hname, &oid);
    if ( new_item || EVEN(sts)) {
      switch ( m_items[i].attr[0].type) {
      case pwr_eType_Float32:
      case pwr_eType_Float64:
	cid = pwr_cClass_SevItemFloat;
	break;
      case pwr_eType_Int8:
      case pwr_eType_Int16:
      case pwr_eType_Int32:
      case pwr_eType_Int64:
      case pwr_eType_UInt8:
      case pwr_eType_UInt16:
      case pwr_eType_UInt32:
      case pwr_eType_UInt64:
	cid = pwr_cClass_SevItemInt;
	break;
      case pwr_eType_Boolean:
	cid = pwr_cClass_SevItemBoolean;
	break;
      default: ;
      }
      sts = gdh_CreateObject( hname, cid, 0,
			      &oid, pwr_cNObjid, 0, pwr_cNObjid);
      if ( EVEN(sts)) return sts;

      memset( &ritem, 0, sizeof(ritem));
      strncpy( ritem.TableName, m_items[i].tablename, sizeof(ritem.TableName));
      strncpy( ritem.ObjectName, m_items[i].oname, sizeof(ritem.ObjectName));
      strncpy( ritem.Attr, m_items[i].attr[0].aname, sizeof(ritem.Attr));
      ritem.AttrType = m_items[i].attr[0].type;
      ritem.NoOfAttr = m_items[i].attrnum;
      ritem.Oid = m_items[i].oid;
      ritem.Id = m_items[i].id;
      ritem.Options = m_items[i].options;
      ritem.Deadband = m_items[i].deadband;
      ritem.ScanTime = m_items[i].scantime;
      ritem.StorageTime = m_items[i].storagetime;
      strncpy( ritem.Description, m_items[i].description, sizeof(ritem.Description));

      sts = gdh_SetObjectInfo( hname, &ritem, sizeof(ritem));
      if ( EVEN(sts)) return sts;

    }

    if ( !m_items[i].ip) {
      // Get pointer to object
      pwr_tAttrRef aref = cdh_ObjidToAref( oid);
      sts = gdh_DLRefObjectInfoAttrref( &aref, (void **)&m_items[i].ip, &m_items[i].refid);
      if ( EVEN(sts)) return sts;
    }
  }
  return SEV__SUCCESS;
}

pwr_tStatus sev_db::tree_update_value( int item_idx, pwr_tTime time, void *buf)
{
  float value;
  pwr_tTime prev_time;
  float interval = 0;

  if ( !m_items[item_idx].ip)
    return SEV__SUCCESS;
  m_items[item_idx].ip->ReceiveCount++;
  if ( m_items[item_idx].ip->ReceiveCount == 0)
    // Wrap around, reset write count
    m_items[item_idx].ip->WriteCount = 0;
  else
    m_items[item_idx].ip->WriteQuota = (pwr_tFloat32)m_items[item_idx].ip->WriteCount / 
      m_items[item_idx].ip->ReceiveCount * 100;

  prev_time = m_items[item_idx].ip->LastTime;
  m_items[item_idx].ip->LastTime = time;

  switch( m_items[item_idx].attr[0].type) {
    case pwr_eType_Float32:
      ((pwr_sClass_SevItemFloat *)m_items[item_idx].ip)->LastValue = *(pwr_tFloat32 *)buf;
      value = ((pwr_sClass_SevItemFloat *)m_items[item_idx].ip)->LastValue;
      break;
    case pwr_eType_Float64:
      ((pwr_sClass_SevItemFloat *)m_items[item_idx].ip)->LastValue = *(pwr_tFloat64 *)buf;
      value = ((pwr_sClass_SevItemFloat *)m_items[item_idx].ip)->LastValue;
      break;
    case pwr_eType_Int32:
    case pwr_eType_UInt32:
      ((pwr_sClass_SevItemInt *)m_items[item_idx].ip)->LastValue = *(pwr_tInt32 *)buf;
      value = ((pwr_sClass_SevItemInt *)m_items[item_idx].ip)->LastValue;
      break;
    case pwr_eType_Int16:
    case pwr_eType_UInt16:
      ((pwr_sClass_SevItemInt *)m_items[item_idx].ip)->LastValue = *(pwr_tInt16 *)buf;
      value = ((pwr_sClass_SevItemInt *)m_items[item_idx].ip)->LastValue;
      break;
    case pwr_eType_Int8:
    case pwr_eType_UInt8:
      ((pwr_sClass_SevItemInt *)m_items[item_idx].ip)->LastValue = *(pwr_tInt8 *)buf;
      value = ((pwr_sClass_SevItemInt *)m_items[item_idx].ip)->LastValue;
      break;
    case pwr_eType_Boolean:
      ((pwr_sClass_SevItemBoolean *)m_items[item_idx].ip)->LastValue = *(pwr_tBoolean *)buf;
      value = ((pwr_sClass_SevItemInt *)m_items[item_idx].ip)->LastValue;
      break;
    default:
      return 0;
  }

  if ( m_items[item_idx].options & pwr_mSevOptionsMask_MeanValue1)
    interval = m_meanvalue_interval1;
  else if ( m_items[item_idx].options & pwr_mSevOptionsMask_MeanValue2)
    interval = m_meanvalue_interval2;

  if ( interval != 0) {
    pwr_tDeltaTime dtime;
    float scantime;
    float prev_deviation;
    if ( prev_time.tv_sec != 0) {
      time_Adiff( &dtime, &time, &prev_time);
      time_DToFloat( &scantime, &dtime);
      prev_deviation = value - m_items[item_idx].mean_value;
    }
    else {
      scantime = m_items[item_idx].scantime;
      prev_deviation = 0;
    }
    
    m_items[item_idx].mean_value = (value * scantime + m_items[item_idx].mean_value * 
				    m_items[item_idx].mean_acc_time) / (scantime + m_items[item_idx].mean_acc_time);
    m_items[item_idx].mean_acc_time += scantime;
    m_items[item_idx].variance_acc = prev_deviation * (value - m_items[item_idx].mean_value);
    m_items[item_idx].variance_cnt++;

    if ( m_items[item_idx].mean_acc_time >= (interval - m_items[item_idx].scantime/2)) {
      m_items[item_idx].ip->MeanValue = m_items[item_idx].mean_value;
      m_items[item_idx].ip->MeanValueTime = time;
      if ( m_items[item_idx].variance_cnt > 1)
	m_items[item_idx].ip->StandardDeviation = sqrt(m_items[item_idx].variance_acc / (m_items[item_idx].variance_cnt-1));
      else
	m_items[item_idx].ip->StandardDeviation = 0;
      m_items[item_idx].mean_acc_time = 0;
      m_items[item_idx].variance_acc = 0;
      m_items[item_idx].variance_cnt = 0;
    }
  }
  return SEV__SUCCESS;
}
