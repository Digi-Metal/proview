
<topic> __DocumentTitlePage

<image> pwr_logga.gif






<h1> Ge
<h1> Designer's Guide




















<hr>
Version 4.8.3	
<hr>
</topic>

<topic> __DocumentInfoPage


Copyright (C) 2006-2011 SSAB Oxelösund AB

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts.

</topic>

<chapter>

<option> printdisable
<topic>index
Guide to Process Graphics

Basobjekt <link>geg_baseobjects
Editering <link>geg_editing
Subgrafer <link>geg_subgraphs
Speciella objekt <link>geg_specialobjects
Dynamik och action <link>geg_dynamics
Skapa en subgraph <link>geg_createsubgraph
Konfigurera <link>geg_configure
Riktlinjer <link>geg_guidelines
</topic>
<option> printenable

<topic>geg_baseobjects
Basobjekt
Vi ska börja med att titta på enkla objekt som linjer, rektanglar cirklar och polyliner. Dessa
enkla objekt kallas för basobjekt. Basobjekten ligger till vänster i vertygpanelens nedersta
rad.

<image>geg_fig1.png
<b>Figur Knappar för att skapa basobjekt

<option> printdisable
Rektangel <link>geg_baseobject_rectangle
Linje <link>geg_baseobject_line
Cirkel <link>geg_baseobject_arc
Polyline <link>geg_baseobject_polyline
Text <link>geg_baseobject_text
<option> printenable
</topic>

<headerlevel>

<topic>geg_baseobject_rectangle
Rektangel
Man ritar en rektangel genom att aktivera rektangelknappen i verktygspanelen, trycka ner höger
musknapp där rektangelns ena hörn ska vara, dra med musknappen intryckt till motsatt hörn och
släppa upp musknappen där. Med default-inställningarna skapas nu en rektangel med en svart 
ram. 

<image> geg_fig3.png
<b>Fig Rektangel

Vi ska nu se hur man kan ändra utseendet på rektangeln. I verktygspanelen finns knapparna
för kant, fyllnad och 3D. De fungerar så att om ett objekt är utvalt, ändas egenskapen på det
utvalda objektet. Samtidigt utgör den aktuella inställningen default värde för nya objekt som
skapas.

<h2>Objekts-editorn
Genom att dubbelklicka på rektangeln öppnas ett fönster där man kan sätta olika egenskaper på
rektangeln. Ett attribut ändras genom att man väljer ut attributet, trycker på pil vänster
(eller Ctrl+Q) och matar in the nya värdet.

<image> geg_fig2.png
<b>Fig Objekteditorn

<h2>Fyllnadsfärg
Vi kan fylla rektangeln med färg genom att klicka på Fill knappen i verkygspanelen. 
<image> geg_fig4.png
Färgen ändras genom att först välja ut rektangeln genom att klicka på den, och sedan klicka 
på önskad färg i färg-paletten.
<image> geg_fig5.png
<b>Fig Rektangel med fyllnadsfärg

<h2>Kant
Kanten på rektangeln kan tas bort med Kant knappen i verktygspanelen. Men det krävs att
rektangeln är antingen fylld eller har en 3D ram (se nedan) för att kanten ska kunna tas bort.
Är kanten borttagen kan man addera den med Kant knappen.

<image> geg_fig6.png
<b>Fig Rektangel utan kant

<h2>Kanttjocklek
Tjockleken på kanten kan ändras med Linewidth menyn i verkygspanelen. Välj ut rektangeln och 
ställ in önskad linjebredd. Linjebredden räknas i pixel och en bredd mellan 1 och 8 pixel
kan väljas.

<image> geg_fig7.png
<b>Fig Rektangel med bredare kant

<h2>Kantfärg
Även färgen på kanten kan ändras. Välj ut rektangeln, välj 'Border' i färg-paletten och klicka
på önskad färg.

<image> geg_fig8.png
<b>Fig Ändrad kantfärg

<h2>3D
Med 3D knappen i verktygspanelen ritas kant på rektangeln som ger relief verkan. 
<image> geg_fig9.png
<b>Fig Rektangel med 3D

Bredden på relief kanten kan ändras med attributet shadow_width. Öppna objekts-editorn genom 
att dubbelklicka på rektangeln och sätt ett nytt värde på shadow_width. Enheten på 
shadow_width är % av bredden eller höjden (den minsta av dem).

<image> geg_fig10.png
<b>Fig Bredd 3 % till vänster och 15 % till höger

Man kan även ändra på relief kantens kontrast med shadow_contrast. Genom att öka värdet till 3
blir skuggan mörkare och den ljusa kanten ljusare. Tillåtna värden är 1-3.

Om reliefen ska gå utåt eller inåt påverkas av attributet relief. Up innebär att reliefen
går utåt, dvs den övre kanten färgas ljus och den undre mörk. Vid Down skiftas detta så att
den över färgas mörk och den under ljus, vilket ger effekt av en inåtgående relief. Störst
relief effekt får man om reliefen ritas med samma färg som bakgrunden.

<image> geg_fig11.png
<b>Fig Relief Up till vänster och Down till höger

<h2>Gradient
Med de tre gradient knapparna kan man sätta en gradient på rektangeln, dvs en färgförskjutning
från ljusare till mörkare färgton. 

<image> geg_fig12.png
<b>Fig Rektanglar med olika gradient

I gradient menyn finns ytterligare 17 varianter av gradient att välja mellan. Nedan visas
Horizonal Tube2 som lämpare sig för cylindriska föremål.

<image> geg_fig13.png
<b>Fig Rektangel med gradient Horizontal Tube2

Kontrasten på gradienten kan påverkas med gradient_contrast attributet i objekts-editorn.
Kontrasten kan ha ett värde mellan 0 och 10.

<h2>Rita en kvadrat
För att rita en kvadrat trycker man Ctrl+E (Scale equal) innan man ritar rektangeln. 
Återställ Equal scale genom att högerklicka i arbetsarean.

<h2>Rita flera rektanglar
Om man ska rita flera rektanglar kan man hålla ner Shift-tangenten samtidigt som man klickar 
på rektangel-knappen i vertygspanelen. Då kan man rita flera rektanglar utan att klicka på 
rektangel-knappen för varje ny rektangel. Funktionen återställs genom att högerklicka i 
arbetsarean.
 
</topic>
<topic>geg_baseobject_line
Linje
Man ritar en linje genom att aktivera linje knappen i verktygspanelen, trycka ner höger 
musknapp där linjen ska starta, dra med musknappen intryckt till slutpositionen och där 
släppa upp musknappen. 

<image> geg_fig14.png
<b>Fig Linje

<h2>Linjebredd
Linjebredden kan ändras genom att välja ut linjen och välja bredden i Linewidth menyn.
<image> geg_fig15.png
<b>Fig Linewidth satt till 8

<h2>Färg
Färgen ändras genom att välja ut linjen, klicka på Border i färg-paletten och klicka på önskad
färg.
<image> geg_fig16.png
<b>Fig Färgad linje

<h2>Linjetyp
Det finns ett antal olika lijetyper att välja mellan. Välj ut linjen och aktivera önskad typ
i Linetype menyn

<image> geg_fig17.png
<b>Fig Olika linjetyper

<h2>Horisontella och vertikala linjer
För att rita en horisontell linje trycker man Ctrl+H (Moverestrictions Horizonal) innan man
ritar linjen. En vertikal linje ritas genom att först trycka Ctrl+G (Moverestrictions 
Vertical). Moverestrictions återställs genom att högerklicka i arbetsarean.

<h2>Rita flera linjer
Om man ska rita flera linjer kan man hålla ner Shift-tangenten samtidigt som man klickar på
linje-knappen i vertygspanelen. Då kan man rita flera linjer utan att klicka på linje-knappen
för varje ny linje. Funktionen återställs genom att högerklicka i arbetsarean. 

</topic>

<topic> geg_baseobject_arc
Ellips och cirkel
Rita en ellips genom att välja ellips-knappen i vertygspanelen, trycka ner vänstra musknappen,
dra med knappen intryckt och slutligen släppa upp knappen.

<image> geg_fig20.png
<b>Fig Ellips

Liksom för rektangeln kan man sätta egenskaper för kant, fyllnad, kantfärg, fyllnadsfärg,
3D och gradient. Några exempel visas nedan.
<image> geg_fig18.png
<b>Fig Cirkel med olika kombinationer av kant, fyllnad, 3D och gradient.

<h2>Cirkelsegment
Man kan även rita ett cirkel-segment, genom att i objects-editorn ange angle1 och angle2.
angle1 är vilkeln från den horisontella axeln till segmentets början, och angle2 är vilkeln
för segmentets utbredning.

<h2>Rita flera ellipser
Genom att hålla ner Shift-tangenten samtidigt som man klickar på ellips-knappen i 
vertygspanelen kan man rita flera ellipser utan att klicka på ellips-knappen
för varje ny ellips. Funktionen återställs genom att högerklicka i arbetsarean. 

<image> geg_fig19.png
<b>Cirkel-segment med angle1=30 and angle2=270

</topic>

<topic> geg_baseobject_polyline
Polylinje och polygon
En polylinje ritas genom att klicka på polyline-knappen in vertygspanelen, trycka ner vänster
musknapp vid startpunkten, hålla musknappen intryckt och dra till nästa brytpunkt, släppa upp
musknappen, trycka ner igen och dra till nästa brytpunkt osv. När sista linjen är ritad
högerklickar man i arbetsarean för att avsluta polylinjen.

<image> geg_fig21.png
<b>Fig Polylinje

Olika kombinationer av kant, fyllnad, 3D, gradient, linjebredd och färg kan anvädas för
polylinjer
<image> geg_fig22.png
<b>Fig Några kombinationer av fyllnad, 3D och gradient

<h2>3D
För att kunna använd 3D effekten på polylinjer bör polylinjen vara sluten, dvs startpunkten
sammanfaller med slutpunkten. För att rita en sluten polylinje använder aktiverar man 
Snap to grid i verktygspanelen innan man ritar polylinjen.

<h2>Ändra en polylinje
För att flytta en brytpunkt i en polylinje väljer man ut polylinjen och aktiverar sedan 
Edit/Edit Polyline in menyn. Brytpunkterna och ändpunkterna blir nu känsliga man kan flytta
på dem genom att dra med vänstra musknappen.

<h2>Vertikala och horisontella linjer
Ofta vill man enbart ha vertikala och horisontella linjer i polylinjen. Genom att trycka
Ctrl+H (Moverestrictions horizontal) så blir den första linjen horisontell. Sedan ändras 
riktningen för varje ny del-linje, så att den andra vertikal, den tredje horisontal osv. 
Trycker man Ctrl+G (Moverestrictions vertical) istället blir den första vertikal, den andra 
horisontell osv.
</topic>

<topic> geg_baseobject_text
Text
Texter ritas genom att aktivera text-knappen i verktygspanelen, klicka i arbetsarean och mata
in texten i inmatningsfältet lägst ner i editorn.

<image> geg_fig23.png
<b>Fig Text

<h2>Objekt attribut
Genom att dubbelklicka på texten öppnas objekteditorn med objektets attribut. Attributet
Adjustment kan ställas in för höger-, mitten-, eller väster-justerad text.

<image> geg_fig24.png
<b>Fig Objekteditorn med val av justering

<h2>Text storlek
Man ändrar storlek på texten med Testsize menyn i verktygspanelen. Välj ut texten och ange 
lämplig storlek i menyn. Man kan även använda skalnings funktionen för att ändra storleken.

<h2>Font
Fonten ställs in med font menyn in verktygspanelen. De fonter som finns a välja mellan är
Helvetica, Times, New Century Schoolbook, Courier och Lucida Sans. Välj ut texten och ange 
lämplig font i menyn.

<h2>Färg
Text färg väljs genom att markera Text knappen i färg-paletten och sedan klicka på en färg.
<image> geg_fig25.png
<b>Fig Färgad text

<h2>Rotera en text
En text kan roteras i steg om 90 grader genom att använda rotations-knappen i vertygspanelen.
Endast texter som är mitt-justerade, dvs har Adjustment satt till Center i objekteditorn,
kan roteras.
<image> geg_fig26.png
<b>Fig Roterad text

<h2>Ändra en text
För att ändra en text väljer man ut texten och trycker på Ctrl+T (Change Text). Ett
inmatningfält öppnas i editorns nederkant där man kan ange en ny text.

<h2>Bitmap fonter
Normalt används fonter som är fullt skalbara och antialiserade. I visa lägen kan bitmap-fonter
vara att föredra. De finns bara i vissa storlekar mellan 8 och 24, men kräver avsevärt mindre
processorkraft att hantera. Bitmap-fonter väljs genom att sätta BitmapFonts i Graph 
Attributes till 1.

<h2>Fontinställning i fönsterhanteraren
Många fönsterhanterar har inställningsmöjligheter som påverkar fonterna. I Gnome hittar man
inställningar under System/Inställningar/Utseende/Typsnitt. Här kan man välja mellan olika
renderingar.

</topic>
</headerlevel>

<topic> geg_editing
Editering
I det här avsnittet ska vi titta närmare på olika editerings funktioner, t ex hur man flyttar,
skalar, färgsätter object mm.

<h1>Skapa objekt
Hur man skapar basobjekt finns närmare beskrivet i kapitlet om basobject ovan. Normalt skapar
man ett object genom att klicka på symbolen i verktygspanelen, och klicka eller dra med
MB1 i arbetsarean. Subgrafer skapas genom att välja en subgraf i subgraf-paletten och klicka
med MB2 i arbetsarean.

<h1>Välja ut objekt
Man väljer ut ett objekt med Klick MB1. Ett utvalt objekt markaras med röd färg. Om man vill 
välja ut fler objekt kan man klicka på dessa med Shift/Klick MB1.

För att välja ut objekt inom ett visst område kan man även dra med MB1 i arbetsarean. De 
objekt som ligger inom utvalsrektangeln kommer att väljas ut. Eftersom man även flyttar 
objekt genom att dra med MB1 gäller att att inte få träff på något objekt när man startar 
draget. Om det är det svårt att undvika kan man använda Shift/Drag MB1 istället som adderar 
objekt till utvalslistan.

Notera att när man ändrar färg på ett utvalt objekt så försvinner rödmarkeringen, eftersom
man då visar den nya färgen istället. Men objektet är fortfarande utvalt trots att det inte
är rödmarkerat.

Genom att klicka med MB3 i arbetsarean tömmer man utvalslistan.

<h2>Ta bort objekt
För att ta bort ett objekt väljer man ut det och trycker på Delete knappen. Man kan även ta
bort ett objekt genom att dubbelklicka med MB2 på objektet, och genom att dubbelclicka med
MB2 någonstans i arbetsarean tar man bort alla utvalda objekt.

<h2>Flytta på objekt
Man flyttar på ett objekt genom att dra med MB1. Om man vill flytta flera objekt samtidigt, 
väljer men ut dem och drar i ett av objekten. Alla utvalda objekt följer då med. Om man 
enbart vill flytta vertikalt eller horisontalt, kan man använda 
Functions/MoveRestrictions/Vertical (Ctrl+G) eller Functions/MoveRestrictions/Horizontal 
(Ctrl+H). Dessa funktioner är verksamma tills man återställer med MB3.

Om man har aktiverat Snap to grid i verktygspanelen, justeras objektets position till närmsta
gridpunkt vid en förflyttning.

Man kan även flytta ett objekt med move kommandot. Det ger större precision än om man flyttar
med musen. Man kan flytta genom att ange relativa eller absoluta koordinater. Kombinationer
av relativa och absoluta är också tillåtet. Kommandot för att flytta det utvalda objektet
till punkten (1, 1) är

<c>ge> move selected /absx=1 /absy=1


<h2>Objekt med fix position
Objekt som ligger i bakgrunden är det lätt att flytta på av misstag när man editerar. För
vissa objekt, rektanglar, ellipser och polylinjer, kan man sätta attributet 'fixposition' som
låser objektet vid en viss position.

<h2>Kopiera objekt
Man kopierar objekt genom att välja ut dem, och aktivera Edit/Copy (Ctrl+C) och Edit/Paste 
(Ctrl+V) i menyn. Efter paste blir de nya objekten hängande på markören och genom att klicka 
med MB1 fäster man dem i arbetsarean. Vid kopiering kan man liksom vid förflyttning, välja 
vertikal (Ctrl+G) eller horisontal (Ctrl+H) förflytting.

<h2>Skala ett objekt
Man skalar objekt home att välja ut dem, klicka på Scale knappen i vertygspanelen, och sedan
dra i den fyrkant som ritas runt objekten. Avsluta med klick MB3. Om man vill att 
proportionerna mellan bredd och höjd ska behållas, trycker man först Ctrl+E (Scal Equal).

Det finns även en knapp för att dubblera storleken på objekten, och en för att halvera
storleken.

<h2>Rotera ett objekt
Man kan rotera ett objekt med rotations-knappen i vertygspanelen. Den roterar utvalda objekt
i steg om 90 grader.

Om man vill ha en annan rotationsvinkel aktiverar man Edit/Rotate i menyn. Observera att 
rektanglar och ellipser endast kan roteras i steg om 90 grader, och för att texter ska
kunna roteras måste attributet Adjustment för texten vara satt till Center.

<h2>Spegling
Det finns två knappar i verktygspanelen för att spegla. En för horisonell spegling och en for
vertikal spegling. Speglingen utförs på utvalda objekt.

<image> geg_fig27.png
<b>Fig Horisontell spegling

<image> geg_fig28.png
<b>Fig Vertikal spegling
<h2>Ändra färg på ett objekt
Det finns tre olika typer av färger man kan välja i färgpaletten, fyllnadsfärg, kantfärg och
textfärg. I paletten finns knapparna Fill, Border och Text där man markerar vilken färgtyp
som ska väljas. När man sedan väljer en färg i paletten ändras färgen på utvalda objekt. 
Den valda färgkombinationen sätts även på nya objekt som skapas.

<b>Fyllnadsfärg
För att sätta fyllnadsfärg på ett objekt, väljer man ut objektet, kontrollerar att Fill är
markerat i paletten, annars klickar man på Fill. Därefter väljer man den färg man vill sätta
på objektet. I exemplet nedan ändras fyllnadsfärgen från blått till grönt.

<image> geg_fig30.png
<b>Fig Fill är markerat och en grön nyans har valts

<image> geg_fig29.png
<b>Fig Fyllnadsfärg ändras från blått till grönt

<b>Kantfärg
Kantfärgen kan ändras på liknande sätt. Här väljer man först Border i färgpaletten, därefter
väljer man en kantfärg som sätts på utvalt objekt.

<image> geg_fig32.png
<b>Fig Border är markerat och en blågrön nyans har valts för kantfärgen

<image> geg_fig31.png
<b>Fig Kantfärg ändras från svart till blågrönt

<b>Textfärg
Fär att ändra text-färgen väljer man Text i färgpaletten, därefter väljer man en textfärg som
sätts på utvalt objekt.

<image> geg_fig34.png
<b>Fig Text är markerat och en grön nyans har valts för textfärgen

<image> geg_fig33.png
<b>Fig Textfärg ändras från svart till grönt

<h2>Bakgrundsfärg
Man sätter bakgrundsfärgen i bilden genom att välja en fyllnadsfärg i färg-paletten och 
aktivera Function/Set Background Color i menyn.

<h2>Grid
Det två knapparna Show grid och Snap to grid, tillsammans med Gridsize menyn hanterar 
grid-funktionen. Show grid visar alla gridpunkter, och med Gridsize menyn kan man ställa
in avståndet mellan gridpunkterna. När Snap to grid är aktiverat, justeras koordinater för
objekt som skapas och flyttas till nämaste grid-punkt.

Grid-storleken kan sättas till 1.0, 0.5, 0.25 eller 0.10 i Gridsize menyn. Med 'set gridsize'
kommandot kan man även sätta andra värden på grid-storleken. För att sätta grid-storleken till
0.20 är kommandot

<c>ge> set gridsize 0.20

<h2>Ordna objekt
Det finns ett antal knappar i verktygspanelen för att justera positionen för en serie av 
objekt så att de hamnar på samma horisontella eller vertikala nivå.

Man kan justera läget så att objekten läggs på lika avstånd från varandra.

<h2>Grupper
Man skapar en grupp av en antal objekt genom att välja ut objekten och trycka på Group
knappen i verktygspanelen. Gruppen behandlas sedan som om det vore ett enskilt objekt, t ex
när man väljer ut den, flyttar på den eller skalar den. Vill man ändra på ett del-objekt
i en grupp måste man först lösa upp gruppen med Ungroup knappen, sedan kan man göra ändringen
och gruppera igen.

Grupper har egenskaperna dynamik och aktion, dvs man kan koppla dem till signaler i databasen
och t ex ändra färg på gruppen beroende på signalens status. Man kan även göra dem 
klick-känsliga och sätta signaler när man klickar på dem. Det här är egenskaper som man delar
med subgrafer, men som basobjekten saknar. Vill man sätta dynamik på ett basobjekt, t ex en
rektangel är det dock bara att skapa en grupp med enbart rektangeln, och man har möjlig att 
sätta dynamik och aktion på den. På det här sättet man man göra en indikator, trycknapp eller
stapeldiagram av rektangeln.

<image> geg_fig35.png
<b>Fig Objekteditorn för grupp med attribut för dynamik och aktion

</topic>

<topic> geg_subgraphs
Subgrafer
Subgraf är en grafisk komponent som är uppbyggd av bas-objekt. Ofta symboliserar den ett visst
element i anläggningen, t ex en ventil eller pump, men den kan också vara en trycknapp eller
inmatningsfält.

<h2>Skapa en subgraf
Till höger i editor finns subgrafs-paletten, och man lägger in en subgraf genom att välja
en subgraf i paletten och klicka med MB2 i arbetsarean. I figuren nedan har vi valt en Ventil
under mappen Process.

<image> geg_fig36.png
<b>Fig En subgraf i form av en ventil

De flesta subgrafer kan man sätta 3D och olika typer av gradienter på ventilen. Det finns
dock en del subgrafer som inte är anpassade för detta.

<image> geg_fig38.png
<b>Fig Ventil med 3D till vänster, och 3D + gradient till höger


<h2>Ändra färg
Ventilen i figuren är en monokrom subgraf och dessa kan man ändra färg på genom att välja en
fyllnadsfärg i färgpaletten, på samma sätt som för bas-objekt. Man kan även ändra på kant
färgen och kantbredden.

<image> geg_fig37.png
<b>Fig Blåfärgad ventil

<h2>Polykroma subgrafer
För subgrafer som innehåller olika färger ändrar man färgen med funktionen för att skifta 
färg eller färgtons paletten. Låt oss skapa en brännare (Process/Burner) som innehåller 
färgerna gult och orange.

<image> geg_fig40.png
<b>Fig Polykrom subgraf

Om vi sätter en fyllnadsfärg tappar vi färgteckningen och brännaren blir enfärgad. I stället
använder vi knapparna för att skifta färg i verkygspanelen (högra knapparna i figuren nedan).
Välj ut subgrafen och klicka på pilarna för att skifta färgen.

<image> geg_fig44.png
<b>Fig Knappar för att skifta färg

Nu roteras färgerna på färgcirkeln så att vi fortfarande har två olika färger is subgrafen, 
och vi behåller den färgkontrast som fanns från början. Man kan även använda knapparna för
att ändra intensitet och ljushet som ligger till vänster om färgskiftknapparna.

<image> geg_fig41.png
<b>Fig Exempel på brännare med skiftade färger

Man kan även använda färgtons-paletten (nedre delen av färgpaletten i figuren nedan). Välj
ut subgrafen och klicka på en färgton i paletten.

<image> geg_fig43.png
<b>Fig Färgtons-paletten

Resultatet blir nu att de olika delarna har samma färgton, men ljuskontrasten mellan olika
delar behålls.

<image> geg_fig42.png
<b>Fig Brännare med olika färgton applicerad

<h2>Kopplingspunkter
Vissa subgrafer innehåller kopplingspunkter som gör att man dra kopplingar mellan subgraferna.
Man skapar en koppling genom att dra med MB2 från en kopplingspunkt i en subgraf, och släppa
upp MB2 vid en kopplingspunkt i en annan subgraf. På kopplingarna kan man sätta linjebredd,
färg och 3D. Släpper man en koppling i arbetsarean, skapas en knutpunkt med kopplingspunkter
i olika riktningar, som man kan dra vidare till andra subgrafer.

<image> geg_fig39.png
<b>Fig Subgrafer med kopplingar

<h2>Dynamik och aktion
Liksom grupper har subgrafer egenskaperna dynamik och aktion, vilket gör att man kan koppla 
dem till signaler i databasen och ändra färg och form beroende på signalens status, eller
göra dem klick-känsliga och sätta signaler när man klickar på dem. Dessutom har subgrafer
ofta en förprogrammerad dynamik eller aktion. En indikator har t ex dynamiken att ändra färg
som default så man behöver bara koppla en signal till den för att den ska fungera.

Låt oss skapa en indikator och se hur vi kan få den att ändra färg. Vi makerar en indikator
Indicator/IndRoundMetalFrame i subgrafs paletten och klickar med MB2 i arbetsarean för att skapa indikatorn. För att koppla den till en signal i databasen klicka vi på navigator knappen i
verktygspanelen. Nu visas plant hierarkin där subgrafspaletten tidigare fanns. Vi vill att
indikatorn ska visa status på Dv'n H1-Dv3 och letar upp den i planthierarkin. Genom att
välja ut H1-Dv3 och klicka med Ctrl+Dubbelklick MB1 på indikatorn har vi gjort kopplingen.

<image> geg_fig45.png
<b>Fig En signal kopplas till indikatorn med Ctrl+Dubbelklick MB1

Genom att öppna objekteditorn för indikatorn kan vi kontrollera att kopplingen är gjord.

<image> geg_fig47.png
<b>Fig Objekteditorn för indikatorn

Vi kan se att indikatorn har default dynamiken DigLowColor, som växlar mellan två färger,
och DigLowColor.Attribute är satt till H1-Dv3.ActualValue.

När vi öppnar grafen i rt_xtt kan vi se hur indikatorn växlar grönt och mörkgrått när Dv3 
växlar mellan 1 och 0.

<image> geg_fig46.png
<b>Fig Indikatorn när dv'n är 1 till vänster och 0 till höger

Om vi tittar på ventilen ovan, så har den lite mer avancerad dynamik. Den kan växla mellan
tre olika färger och måste därför kopplas till två signaler. En signal färgar ventilen röd
för att markera ett fel, och den andra färgar den vit för att markera stängd ventil.

Om vi öppnar objekteditorn för ventilen ser vi att DigError.Attribute ska kopplas till en
signal som indikerar fel, och DigLowColor.Attribut till en signal som markerar att ventilen
är öppen.
<image> geg_fig48.png
<b>Fig Ventil som kopplas till två signaler

I det här fallet gör vi kopplingen i objekteditorn, och markerar H1-Dv4 i plant hierarkin.
Genom att klicka med Ctrl+Dubbelclick MB1 på attributet DigError.Attribute läggs H1-Dv1 in
här. På samma sätt klickar vi in H1-Dv5 på DigLowColor.Attribute. Resultatet ser vi i figuren
nedan. När Dv4 är 0, dvs ventilen stäng, färgas den vit. När Dv4 går hög, dvs ventilen öppnas,
färgas den grön. Om vi sätter felsignalen Dv4 färgas den röd oberoende av värdet på Dv5. Det
beror på att DigError har högre prioritet än DigLowColor. I objekts-editorn är dynamiken 
ordnad efter prioritet så att högst prioritet ligger överst och lägst prioritet underst.

<image> geg_fig49.png
<b>Fig Stängd ventil till vänster, öppen ventil i mitten och felsignal till höger

Om vi vill markera stängd ventil med mörkgrått iställer för vitt, ändrar man på 
DigLowColor.LowColor. Defaultvärdet är Inherit vilket gör att den väljer vitt som är
förprogrammerat. Genom att istället välja GrayHigh9 kommer färgen när signalen är låg att
bli mörkgrått istället. Har man svårt att identifiera färgerna kan man välja ut önskad 
färg som fyllnadsfärg i färg-paletten, och klicka med Ctrl+Dubbelclick MB1 på 
DigLowColor.LowColor attributet i objekts-editorn. Den valda färgen kommer då att läggas in
på DigLowColor.LowColor.

<image> geg_fig51.png
<b>Fig LowColor ändrad från Inherit till mörkgrå

<image> geg_fig50.png
<b>Fig Stängd ventil till vänster, öppen ventil i mitten och felsignal till höger

</topic>

<topic> geg_specialobjects
Speciella objekt
Förutom bas-objekt och subgrafer finns det en uppsättning lite mer komplexa objekt. Dessa
objekt återfinns i subgraf-paletten. Objekten är

Window <link>geg_specialobjects_window
TabbedWindow <link>geg_specialobjects_tabbedwindow
Slider <link>geg_specialobjects_slider
Trend <link>geg_specialobjects_trend
Bar <link>geg_specialobjects_bar
XYCurve <link>geg_specialobjects_xycurve
FastCurve <link>geg_specialobjects_fastcurve
Axis <link>geg_specialobjects_axis
Table <link>geg_specialobjects_table
PulldownMenu <link>geg_specialobjects_pulldownmenu
OptionMenu <link>geg_specialobjects_optionmenu
</topic>

<topic> geg_specialobjects_window
Window
Window-objektet är en ram som visar graf inom ett specifierat område i en anna graf. Grafen
kan visas med eller utan skroll-lister. Det är också möjligt att skifta den graf som visas
i window-objektet genom att exekvera ett kommando från en trycknapp. Man kan även visa 
objektsbilder för olika objekt i databasen.

Här är några användningsområden för window-objektet

- man har tabell liknande del av grafen som tar för stor plats. Denna del kan läggas
  i ett window objekt och genom att utnyttja window-objektets skroll-list vinner man plats. 
- man vill visa information om ett databas-objekt som redan har en objektsbild. 
- man kan bygga upp en graf med ett window objekt som visar olika grafer beroende på
  en uppsättning trycknappar eller menyalternativ. Jämför även TabbedWindow.

<h2> Visa en graf i ett window-objekt
Window-objektet återfinns under Other mappen in subgraf-paletten. Skapa objektet genom att
mittenklicka i arbetsarean och skala objektet till önskad storlek.

<image> geg_fig52.png
<b>Fig Window-objekt

Öppna objekteditorn och ange namnet på grafen som ska visas i Window.Filename. Observera att
grafen läses in från $pwrp_exe, och eftersom grafer in window-objekt ofta inte har något
eget XttGraph objekt, kommer de inte att kopieras automatiskt från $pwrp_pop till $pwrp_exe.
Kopieringen måste göras för hand eller med en make-fil.

<image> geg_fig54.png
<b>Fig Objekteditorn för window-objektet angivet filnamn

När filnament har lagts in och filen finns på $pwrp_exe kommer grafen att visas i 
windowobjektet.

<image> geg_fig53.png
<b>Fig Window-objekt med inlagt filnamn

<h2>Visa en objektsbild i ett window-objekt
Många databas-objekt har en objektsbild som öppnas från 'Object Graph' i popupmenyn för 
objektet. Även objektsbilder kan visas window-objekt, genom att specificera namnet på
graf-filen, dessutom måste databas-objektet som bilden ska vara kopplad till anges
i Window.Object.

Om klassen för objektet ingår i Proview's bassystem, är filnamnet för objektsbilden
$pwr_exe/pwr_c_'klassnamn'.pwg. För ett Av-objekt blir det $pwr_exe/pwr_c_av.pwg. Man måste
här ange även katalogen i filenamnet eftersom filen inte ligger på default katalogen 
$pwrp_exe.

Om klassen återfinns i en klassvolym inom projektet, är filnamnet $pwrp_exe/'klassnamn'.pwg.
Här behöver man inte ange katalogen i filnamnet.

I exemplet nedan visas objeksbilden för av-objektet H1-Av1. Bilden är nedskalad till 3/4
storleken genom att Window.Scale är satt till 0.75.

<image> geg_fig55.png
<b>Fig Attribut för window-objekt som visar objektsbild

<image> geg_fig56.png
<b>Fig  Objektsbild för en Av i window-objektet

<h2>Växla mellan olika grafer
Det finns ett xtt kommando som visar upp en viss graf i ett window-objekt. Genom att lägga
in kommandot på en serie trycknappar kan man växla mellan olika grafer i ett window-objekt.
Funktionen motsvarar ett TabbedWindow med den skillnaden att man har en friare layout på
trycknapparna och att det inte finns någon begränsning i antalet grafer som kan visas upp.

Kommandot som används är

<c>set subwindow 'grafnamn' /name= /source= [/object=]

där grafnamn är namnet på det graf där window-objektet ligger. I /name specificeras namnet
på window-objektet, och i /source anges filnamnet på den graf som ska visas. /objekt används 
när det är en objektsbild som ska visas, och specificerar database-objektet som bilden ska
kopplas till.

I följande exempel visas objektsbilden för ett antal Dv i ett window-objekt. I window-objektet
kan man lägga in en startbild, som konfigureras på normalt sätt, men man kan även låta 
window-objektet vara tomt tills man har valt en graf från någon av knapparna. I det fallet
bör man lägga in "_no_" i Window.FileName för att undvika felutskrift.

Grafen som innehåller window-objektet sparas som 'dvdisplay' och innehåller förutom 
window-objektet 6 trycknappar av typen CommandButtonCenter. Window-objektet namnges till
DvWindow genom att aktivera Edit/Change Name i menyn. Objektbilden för en trycknapp visar
kommandot. Notera att filnamnet måste omgärdas av citations-tecken eftersom det innehåller
ett slash tecken.

<image> geg_fig58.png
<b>Fig Kommandot 'set subwind' i en trycknapp

Den slutgiltiga grafen ser ut så här med Dv4 vald.

<image> geg_fig57.png
<b>Fig Objektsbilden för Dv4 visas efter klick på knappen Dv4.
</topic>

<topic> geg_specialobjects_tabbedwindow
TabbedWindow
TabbedWindow är ett Window objekt med flik-register. För varje flik anges en separat graf, 
och när fliken aktiveras visas en angivna grafen i fönstret.

Man kan visa objekts-bilder eller andra grafer i ett tabbed window. Vi ska här titta på hur
man kan visa en uppsättning objektsbilder, precis som i exemplet för window objektet ovan.

<image> geg_fig64.png
<b>Fig Ett flikfönster objekt

Vi ska ha 6 stycken flikar och varje flik ska visa objektsbilden för ett Dv-objekt. Efter att
ha skapat TabbedWindow objektet, tar vi upp objekteditorn. Här sätter vi 
Folder.NumberOfFolders till 6. Vi ändrar också Folder.HeaderHight till 1 för att öka storleken
på flikarna. Sedan fyller vi i FileName, Text och Object för de 6 första flikarna. FileName
är filnamnet på objektsbilden för Dv, dvs $pwr_exe/pwr_c_dv. Text sätter vi till Dv1, Dv2 osv,
och Object innehåller objektnamnet på respektive Dv, H1-Dv1, H2-Dv2 osv.
Vi ökar också textstorleken i flikarna genom att välja ut window-objektet och sätta TextSize
till 14 i verkygspanelen.

<image> geg_fig65.png
<b>Fig Objekteditorn för flikfönstret 


</topic>

<topic> geg_specialobjects_slider
Slider
En slider eller dragregel är ett flyttbart objekt som är kopplat till en analog signal i 
databasen. Läget på slidern bestämmer signalvärdet. Slidern flyttas antingen horisonellt
eller vertikalt mellan två ändpunkter. Läget för ändpunkterna kan bestämmas med två olika
metoder, antingen genom att man lägger ett speciellt bakgrundsobjekt av typen
SliderBackground, eller genom att man specifierar koordinaterna för ändpunkterna i 
objekteditorn.

<h2>Slider med bakgrundsobjekt
Under Slider mappen i subgraf-paletten finns slider och slider-background objekt. Vi väljer
en SliderBackground1 och placerar ovanpå denna en Slider1. För att få en horisonell slider
roterar vi båda objekten 270 grader. 

<image> geg_fig59.png
<b>Fig Slider med bakgrundsobjekt

Nästa steg är att koppla slidern till en analog signal
i databasen. Vi väljer Av objektet H1-Av1 i planthierarkin och klickar med 
Ctrl+Dubbelklick MB1 på slider-objektet. Nu återstår att ange vilket område slidern motsvarar
för signalen. Signalens går mellan 0 - 1000 och vi sätter Slider.MaxValue till 1000 i 
objektseditorn.

<image> geg_fig60.png
<b>Fig Området för signalen anges i Slider.MinValue och Slider.MaxValue

<h2>Slider utan bakgrundsobjekt
För en slider utan bakgrunds-objekt måste man ange sliderns rörelseriktning, samt min och
max-positionen för rörelsen. 

<image> geg_fig61.png
<b>Fig Slider utan bakgrundsobjekt

Vi skapar en slider av typ Arrow2 som ska kunna flyttas utmed en skala mellan 0 och 100. 100 
ligger på y-koordinat 0 och 0 på y-koordinat 30. Slidern ska placeras vid den lägsta 
y-koordinaten, vilket alltså är vid 100 på skalan. Sedan ska ange sliderns rörelseområde, och 
då mäta i sliderns överkant, vilket ger y-kooridnaterna -1 - 29. Vi lägger in dessa i 
Slider.MinPosition (-1) och Slider.MaxPosition (29). Vidare sätter vi Slider.Direction till
Up eftersom en röreles uppåt i bilden ger ökande värde.

<image> geg_fig62.png
<b>Fig Objekteditorn för slidern

En horisontell slider placeras på den lägsta x-koordinaten, dvs längst till vänster i bilden.
I exemplet nedan är Slider.Direction satt till Left.

<image> geg_fig63.png
<b>Fig Horisontell slider

</topic>

<topic> geg_specialobjects_bar
Stapel
En stapel visar värdet för en analog signal i form av en stapel.

<image> geg_fig68.png
<b>Fig Stapel

En stapel konfigureras genom att koppla den till en analog signal och lägga in området för
stapeln i Bar.MinValue och Bar.MaxValue. Axis-objektet ingår inte i bar-objektet.

<image> geg_fig67.png
<b>Fig Attribut för ett bar-objekt

Om stapeln ingår i en objektsbild är ofta området olika för olika instanser. Man kan då 
koppla Bar.MinValueAttr och Bar.MaxValueAttr till attribut i databas-objektet som innehåller
min och max-värde för signalens område.

Notera att en stapel även kan åstadkommas med en rektangel som är grupperad och försedd med
dynamiken FillLevel. Enda skillnaden är att bar-objektet har en avgränsnings-linje med 
separat färg i mellan stapeln och bakgrunden.
</topic>

<topic> geg_specialobjects_trend
Trend
En trendkurva visar värdet för en eller ett par analog signaler under den senaste tiden.
Även heltal eller digitala signaler kan visas i trendkurvor. 

<image> geg_fig66.png
<b>Fig Trendkurva

Ovanstående trend-objekt är konfigurerat med en analog signal. Antalet vertikala och 
horisontella linjer har ökats genom att sätta Trend.HorizontalLines och Trend.VerticalLines 
till 9. Skalorna ingår inte i trend-objektet, utan har skapats med Axis objekt. Vertikala 
axeln har området 0-100 eftersom Trend.MinValue1 är 0 och Trend.MinValue1 är 100. Tidsaxelns
område blir 50 s då Trend.ScanTime är 0.5 s och antalet lagrade punkter, Trend.NoOfPoints, 
är 100.

<image> geg_fig67.png
<b>Fig Attribut för ett trend-objekt

Om trendkurvan ingår i en objektsbild är ofta området olika för olika instanser. Man kan då 
koppla Trend.MinValueAttr och Trend.MaxValueAttr till attribut i databas-objektet som 
innehåller min och max-värde för signalens område.
</topic>

<topic> geg_specialobjects_axis
Axis och AxisArc
Ett axis-objekt ritar ut en skala med ett visst område. Axis objekt har ingen dynamik utan
skalan är fast. Det finns två varianter, en rak skala och en cirkulär eller elliptisk skala.

<h2>Rak skala
En rak skala är ett Axis-objekt som hämtas från mappen Analog och skalas till önskad storlek.
Storleken på siffrorna justeras med TextSize menyn i verktygspanelen. Skalans område bestäms
av MinValue och MaxValue som i exemplet nedan är satt till 0 och 50. Vill man att skalan ska
gå åt andra hållet kan man byta värden in MinValue och MaxValue. Det finns inte något krav
att MaxValue ska vara större än MinValue.

<image> geg_fig70.png
<b>Fig Rak skala

Antalen streck i skalan bestäms av attributet Lines, som är satt till 101, och eftersom
var 10:de streck ska vara lite längre är LongQuotient satt till 10. På var 20:de streck ska
läget markeras med ett värde, allså sätts ValueQuotient till 20. 

<image> geg_fig72.png
<b>Fig Attribut för ett axis-objekt

Man kan även påverka formateringen av värdena i Format, och vill man inte ha några värden 
utskrivna tar man bort innehållet i Format.

<h2>Elliptisk skala
En cirkulär eller elliptisk skala utgörs av ett AxisArc objekt. Objektet skalas till lämplig
storlek, och textstorleken anpassas med TextSize i vertygspanelen. 

Skalan utgörs av ett cirkel-segment, genom att i objects-editorn ange Angle1 och Angle2
påverkar man segmentets läge och storlek. Angle1 är vilkeln från den horisontella axeln till 
segmentets början, och Angle2 är vilkeln för segmentets utbredning.

Man kan även påverka streck-längden som anges relativt radien, så en LineLength på 0.1 ger en
längd på de längre strecken på 10 % av radien.

<image> geg_fig71.png
<b>Fig Elliptisk skala

<image> geg_fig73.png
<b>Fig Attribut för ett axisarc-objekt
</topic>

<topic> geg_specialobjects_table
Tabell
Tabell-objektet är en överskådlig uppställning av data, uppdelad i rader och kolumner. Ofta
försedd med rubrik. 

<image> geg_fig76.png
<b>Fig Tabell utan rubrik

Data för en kolumn är vanligvis samlad i ett vektor-attribut i databasen. Det finns ett
antal klasser med vektorer av olika typ, t ex AArray100 och AArray500 som innehåller vektorer
med 100 resp 500 element av typen Float32. Motvarande DArray, IArray och SArray objekt finns 
för data av typen boolean, integer och strängar. I exemplet nedan har vi samlat data i 3 st
AArray100 en en SArray100. 

<image> geg_fig75.png
<b>Fig Array-objekt som innehåller tabell-data

Om vi tittar på den enkla tabellen i Fig Tabell utan rubrik ovan, visas två kolumner. Antalet
kolumner anges i Table.Columns. Column1.Attribute och Column2.Attribut är kopplade till var
sitt vektor attribut i databasen, H3-A1.Value och H3-A2.Value. Syntaxen är
H1-A1.Value##Float32#100 vilket innebär att attributet är en array av typen Float32 med 100
element. Man måste även specificera formateringen av värdena i kolumnerna genom att fylla i
Column1.Format och Column2.Format. '%6.1f' innebär ett flyttal med 6 tecken och en decimal.

En del andra detaljer är ändrade på tabellen, 
- fonten är satt till Lucida Sans, genom att välja ut tabellen och ange Lucida Sans i 
  verktygspanelen.
- Textstorleken är ökad till 12 med Textsize i verktygspanelen.
- Höjden på raderna har anpassats till den större texten genom att Table.RowHeigt är 0.8.

<image> geg_fig74.png
<b>Fig Attribut för tabell-objekt

Figuren nedan visar en tabell med rubrik. Här är Table.HeaderRow satt till 1. Textstorleken
för rubriken, Table.HeaderTextSize är satt till 12 och Table.HeaderTextBold är satt till 0
för att unvika fet text.

<image> geg_fig77.png
<b>Fig Tabell med header row

I tabellen nedan har en vertikal skroll-list adderats genom att sätta Table.VerticalScrollbar
till 1. Notera att rubrik-raden inte skrollas utan visas hela tiden. 

Tabell-objektet visar 3 kolumner, den första är kopplad till en sträng-vektor av typen
SArray100.Value, och har Column1.Format satt till %s. Första raden är även markerad som en
header column, genom att Table.HeaderColumn är satt till 1. Det innebär att gränslinjen mellan
första och andra kolumnen är lite tjockare. 

<image> geg_fig78.png
<b>Fig Tabell med vertikal skroll-list och header row

I figuren nedan visas hur en header column fungerar med en horisontell scroll-list. Den
horisontella skroll-listen fås genom att sätta Table.HorizontalScrollbar till 1. Notera att
skroll-listen inte omfattar den första kolumnen, utan den första kolumnen är alltid synlig.

<image> geg_fig79.png
<b>Fig Tabell med horisontell skroll-list och header column

<h2>Tabell som visar objekt av samma typ
Nu ska vi titta på ett exempel där data inte ligger organiserat i tabeller, utan i ett antal
objekt av samma klass. I anläggningshierarkin under H3-Data ligger ett antal objekt av klassen
Thing som innehåller attributen Length, Height och Width. Vi vill visa innehållet i alla
Thing-objekt i en tabell, med ett objekt på varje rad. För att kunna göra det måste vi skapa
en vektor av typen Objid som innehåller identiteten på varje objekt som ska visas. Alltså
skapar vi ett objekt av typen OidArray och lägger in identiteten för all Thing objekt i denna.

<image> geg_fig82.png
<b>Fig Objekt vars innehåll visas i tabellen till vänster, array av objid till höger

Vi skapar en tabell med fyra kolumner. Den första kolumnen ska visa namnet på objektet, den
andra attributet Length i respektive objekt, den tredje Width och den fjärde Height.
Tabellen konfigureras genom att vekorn med objektsideniteterna läggs in i Colomn1.Attribute.
I Column2.Attribute anges $header.Length##Float32. $header pekar på objektet som visas i
header kolumnen, dvs den första kolumnen. På samma sätt fyller vi i Column3.Attribute med
$header.Width##Float32 och Column4.Attribute med $header.Height##Float32.

<image> geg_fig80.png
<b>Fig Attributen för kolumnerna i tabellen

Resultatet ses i figuren nedan. I första kolumnen visas namnet på objektet och på samma rad
innehållet i objektet.

<image> geg_fig81.png
<b>Fig Tabell som visar objektnamn och innehållet i objekten

<h2>Tabell med utvals funktion
Ibland vill man kunna välja ut en cell i en tabell, och utföra någonting i plcprogrammet med
utvalt data eller objekt. Det här gör man genom att koppla en vektor av boolean till 
attributet SelectAttribute för en kolumn. I exemplet nedan har H3-Select1.Value kopplats
till Column1.SelectAttribute. 

<image> geg_fig83.png
<b>Fig En utvals-vektor har angetts för den första kolumnen

Den första kolumnen kommer nu att vara känslig för klick och den utvalda cellen kommer att 
markeras med en avvikande färg som kan anges i Table.SelectColor.

<image> geg_fig84.png
<b>Fig Fjärde raden i första kolumnen har valts ut

Det element i vektorn som motvarar det utvalda objektet kommera att sättas till 1. I figuren
ovan är fjärde raden utvald, vilket medför att fjärde elementet i utvals-vektor sätts, dvs
H3-Select1.Value[3]. 

<image> geg_fig85.png
<b>Fig Elementet som motvarar den utvalda raden markeras i utvals-vektorn

</topic>

<topic> geg_dynamics
Dynamik och action
En processbild har huvudsakligen två uppgifter, att visa läget i processen för operatoren, och
att göra det möjlig för operatören att påverka processen.

För att visa läget i processen lägger man in dynamik i bilderna. Dynamiken kan vara att 

ändra färg på ett objekt <link>geg_dynamic_color
göra objekt osynliga eller okänsliga <link>geg_dynamic_invisible
skriva ut texter <link>geg_dynamic_text
ändra form på ett objekt <link>geg_dynamic_shape
visa analoga värden <link>geg_dynamic_analog
flytta, skala eller rotera objekt <link>geg_dynamic_move
Ljud och kommandon <link>geg_dynamic_misc

För att göra det möjligt för operatören att påverka processen, lägger man in action på objekt
i processbilden. Genom att lägga in action på ett objekt kan man också göra det möjligt för
operatören att få mer information om objektet, från popup-menyer eller genom att öppna bilder
eller kurvor mm. Action kan vara att

sätta värden med trycknappar <link>geg_action_button
popupmeny <link>geg_action_popupmenu
öppna bilder <link>geg_action_opengraph
exekvera kommandon <link>geg_action_command
tooltip <link>geg_action_tooltip
hjälptexter <link>geg_action_help
input focus <link>geg_action_inputfocus

</topic>

<topic> geg_dynamic_color
Ändra färg på objekt
<h2>Skifta mellan två färger
Vi ska titta på hur man kan ändra färg på ett objekt beroende på en digital signal i 
databasen. Det finns några olika typer av dynamik man kan använda, DigLowColor, DigColor,
DigError och DigWarning. Vi börjar med att titta på ett exempel med DigLowColor.

DigLowColor skiftar mellan två färger, den ena är den man sätter på objektet i editorn, och
det är den här färgen objektet kommer att ha när signalen är hög. Den andra färgen anges i
DigLowColor.LowColor. Vi kommer att rita en orange indikator, som ska vara orange när signalen
är hög och mörkgrå när signalen är låg. Vi ritar alltså indikatorn orange i editorn, och 
sätter DigLowColor.LowColor till mörkgrå.

Vi börjar med att rita en cirkel, och fyller den med orange färg. Vi sätter också gradienten
till GradientGlobe.

<image> geg_fig86.png
<b>Fig Orange indikator

Vi skapar också en ram med metalliskt utseende till indikatorn genom att rita en lite större 
cirkel med grå fyllnadsfärg. På ramen sätts fixcolor i objektseditorn till 1, eftersom denna
inte ska ändra färg med indikatorlampan. Vi sätter också 3D och väljer gradienten 
DiagonalDownTube. 

<image> geg_fig89.png
<b>Fig Ram till indikatorn

I objektsediton ökas gradient_contrast till 8 och shadow_width till 9.

<image> geg_fig83.png
<b>Fig Fixcolor sätt på ramen

För att kunna sätta dynamik gör vi en grupp av de båda cirklarna. När vi öppnar objektseditorn
för gruppen har vi nu attributet Dynamic och väljer DigLowColor. Vi sätter DigLowColor.Color
till en mörkgrå nyans och kopplar DigLowColor.Attribute till en Dv, H1-Dv1.

<image> geg_fig88.png
<b>Fig Dynamik DigLowColor

Resultatet ses i figuren nedan. När signalen är hög är indikatorn orange, och signalen är
låg är indikatorn mörkgrå.

<image> geg_fig90.png
<b>Fig Indikatorn med hög signal till vänster och låg till höger

Dynamiktypen DigColor är snarlik DigLowColor, och man skulle också kunna ha använt denna typ
här. Skillnaden är att signalens funktion är inverterad. I DigLowColor anger man den färg
som objektet har när signalen är låg, medan för DigColor anger man den färg som objektet har
när signalen är hög. Vi väljer en blå nyans.

<h2>Skifta mellan flera färger
Vi ska nu se hur man kan skifta mellan flera färger. Vi utgår från indikatorn i exemplet
ovan och adderar dynamiken DigColor. I objektseditorn har vi nu attributen DigColor.Attribute
och DigColor.Color. DigColor.Attriubut kopplas mot en signal i databasen, H1-Dv2, och i
DigColor.Color anges den färg som indikatorn får när signalen är hög.

<image> geg_fig90.png
<b>Fig En Tredje färg adderad med DigColor

Indikatorn kan nu skifta mellan tre olika färger. DigLowColor skiftar som förut mellan
mörkgrått och orange beroende på H1-Dv1, och DigColor sätter blå färg när H1-Dv2 går hög.
Notera att DigColor har högre prioritet än DigLowColor. Man kan se det i objektseditorn där
dynamiken ordnas i prioritetsordning med hög prioritet överst och låg prioritet underst.
Den högre prioriteten på DigColor gör att när H1-Dv2 är hög, blåfärgas indikatorn oberoende
av värdet på H1-Dv1.

<image> geg_fig91.png
<b>Fig Indikatorn färgas orange när H1-Dv1 är hög, och blå när H1-Dv2 är hög

Vi ska nu lägga till ytterligare en färg och studera begreppet Instance. En del dynamik och
action typer kan förekomma i flera upplagor, eller flera instanser på samma objekt. För
DigColor innebär det att när man adderar ytterligare en instans, kan man sätta en färg till
på objektet. Eftersom det finns upp till 32 instanser kan man sätta 32 olika färger, där 
varje färg kopplas till en signal i databasen.

Man adderar en DigColor instans genom att öppna DigColor.Instances och markera instans 2.
Nu visas attributen för denna instans, DigColor2.Attribute och DigColor2.Color. Vi kopplar
DigColor2.Attribute till signalen H1-Dv3 och anger en grön färg i DigColor2.Color. Notera
att instanser med högre instans-nummer har högre prioritet, dvs H1-Dv3 kommer att färga
indikatorn grön oberoende av värdet på H1-Dv1 och H2-Dv2.

<image> geg_fig92.png
<b>Fig En fjärde färg adderad med DigColor instans 2

Resultatet ses i figuren nedan. Man kan nu skifta mellan fyra olika färger. Förutom de tre
tidigare, mörkgrått, orange och blått, färgas indikatorn nu grön när signalen H1-Dv3 är hög.

<image> geg_fig93.png
<b>Fig Indikatorns fyra olika färger

<h2>Färger för varning och fel
I Proview används genomgående färgerna gult och rött för varning resp fel. Det finns
två typer av dynamik, DigWarning och DigError, som sätter gul resp röd färg. Fördelen
jämfört med DigLowColor eller DigColor är att men inte behöver ange färgen, utan det räcker
att koppla dynamiken till en digital signal i databasen.

Vi använder indikatorn i ovanståend exempel, men färgar om den till mörkgrått, som blir
den färg man får då varken signalen för DigWarning eller DigError är hög.
Vi kopplar DigWarning.Attribute till H1-Dv4 och DigError.Attribute till H1-Dv5. 

<image> geg_fig94.png
<b>Fig Dynamiken DigWarning och DigError

När ingen signal är sätt har indikatorn ursprungsfärgen mörkgrått. När H1-Dv4 sätts får den
varnings-färgen gul, och när H1-Dv5 sätts får den fel-färgen rött. DigError har högre
prioritet än DigWarning, alltså blir den röd när H1-Dv4 är satt, oberoende av vad H1-Dv3 har
för värde.

<image> geg_fig95.png
<b>Fig Gul färg för varning och röd för fel

<h2> Blinkande dynamik
För att dra maximal uppmärksamhet till ett objekt kan man sätta DigFlash dynamik på det.
DigFlash innebär att objektet kommer att blinka, dvs skifta mella två färger, när en signal
är hög. Blinknings-frekvensen är lika med uppdaterings-frekvensen för objektet. Om Cycle är 
Slow sker blinkningen med ScanTime för grafen, och om Cycle är Fast med FastScanTime.

Vi sätter DigFlash dynamik på indikatorn och kan nu ange två färger som objektet kommer
att blinka med, DigFlash.Color och DigFlash.Color2. Vi sätter DigFlash.Color till röd och 
DigFlash.Color2 till svart, och kopplar DigFlash.Attribute till signalen H1-Dv6.

<image> geg_fig96.png
<b>Fig DigFlash dynamik

När signalen H1-Dv6 är låg har indikatorn ursprungsfärgen mörkgrå. När H1-Dv6 går hög 
börjar den blinka med färgerna rött och svart.

<image> geg_fig97.png
<b>Fig Indikatorn blinkar mellan rött och svart när signalen är hög

<h2>Ändra färg på en analog signal
Nu ska vi titta på hur man kan ändra färg på ett objekt beroende på värdet på en analog
signal. Det finns två olika typer av dynamik, FillColor och AnalogColor, som kopplas till
en analog signal. FillColor färgar en del av ett objekt och hur stor del beror på signalens
värde. AnalogColor skiftar färg på objektet när signalen passerar vissa gränsvärden.

<h2>Färga till en viss nivå
Dynamiken FillColor färgar ett objekt till en viss nivå beroende på en analog signal. Den
liknar mycket stapel-objektet som vi har ett tidigare, med den skillanden att den kan 
appliceras på vilken form som helst. Vi ska sätta FillColor på en tank som vi hämtar från 
Hydraulics/Tank2 i subgrafmenyn.

<image> geg_fig102.png
<b>Fig En tank

Tanken har ingen default dynamik. Vi markerar FillColor i DynType och kopplar den till Av
objektet H4-Av1. Vi sätter också en mörkgrå nyans i FillLevel.BackgroundColor. 
FillLevel.MinValue och FillLevel.MaxValue anger området på signalen, som default är 0-100.
När värdet är noll kommer tanken att färgas helt med bakgrundsfärgen och när värdet är 100 
med den blå färg som vi sätter i editorn.

<image> geg_fig98.png
<b>Fig FillColor dynamik på tanken

I figuren nedan har vi satt värdet 70 på H4-Av1 och tanken är fylld upp till denna nivå.

<image> geg_fig99.png
<b>Fig Tanken fylld till en viss nivå

Man kan fylla tanken i andra rikningar genom att ändra på FillColor.Direction. Används
FillColor dynamiken i en objektsbild kan också området kopplas till attribut för min och 
max-värde i databasen.

<h2>Ändra färg över eller under en viss nivå
Ofta vill man visa att en analog signal har överskridit eller underskridit ett viss värde.
I tank-exemplet ovan ska nivån normalt ligga under 80, och stiger den över 90 börjar läget
bli kritiskt. Vi använder dynamikan AnalogColor för att ändra färg på tanken när värdet
passerar de båda gränsvärdena.

Till att börja med vill vi färga tanken gul när signalen H4-Av1 är över 80. Vi adderar
AnalogColor till DynType och kan nu sätta AnalogColor.Limit till 80. Typen av gränsvärde,
AnalogColor.LimitType, är redan GreaterThan, så denna behöver vi inte ändra på. Däremot
måste vi ange färgen som ska sättas när signalen överskrider 80, och vi lägger in en
gul nyans i AnlogColor.Color.

För att kunna lägga in ytterligare ett gränsvärde vid 90, lägger vi till instans 2 i 
AnalogColor.Instances. Nu dyker attributen för AnalogColor2 upp och vi sätter 
AnalogColor2.Limit till 90 och AnalogColor2.Color till en röd nyans. Notera att man inte
kopplar något ny signal till instans 2, utan alla instanser använder samma signal.

<image> geg_fig100.png
<b>Fig AnalogColor dynamik

Resultatet visas figuren nedan. Så länge värdet på H4-Dv1 är under 80 är tanken blå. När
värdet går över 80 blir den gul, och när 90 passeras blir den röd.

<image> geg_fig101.png
<b>Fig Vid 80 slår färgen om till gult, och vid 90 till rött

Genom att sätt LimitType till LessThan kan man också lägga till gränsvärden för miniminivåer,
t ex färga tanken gul om nivån underskrider 20, och röd om tanken underskrider 10.

</topic>

<topic> geg_dynamic_invisible
Göra objekt osynliga eller okänsliga
För att göra objekt osynliga eller dimmade använder man dynamiken Invisible. För att
demonstrera det skapar vi en trycknapp från Button/Button2MetallFrame i subgrafsmenyn.

<image> geg_fig103.png
<b>Fig En trycknapp

<h2>Osynlig 
Trycknappen har som default attributen för DigToggle, och genom att addera Invisible till
DynType ser vi även attributen för Invisible. Genom att koppla en digital signal till 
Invisible.Attribut kommer trycknappen att bli osynlig när signalen är hög.

<image> geg_fig104.png
<b>Fig Attribut for invisible

Vi kopplar Invisible.Attribut till H1-Dv2, och resultatet blir att när H1-Dv2 är hög blir
trycknappen osynlig.

<h2>Dimmad
Om man endast vill göra trycknappen okänslig för klick och dimmad, sätter man Invisible.Dimmed
till 1.

<image> geg_fig105.png
<b>Fig Invisible.Dimmed satt för dimmad dynamik

När H1-Dv2 blir hög är trycknappen inte lägre känslig för musklick. Det markeras genom att
den ritas dimmad.

<image> geg_fig106.png
<b>Fig Trycknappen in dimmat läge till vänster
</topic>

<topic> geg_dynamic_text
För att skriva ut en dynamisk text måste man använda en subgraf som innehåller en Annotation.
T ex innehåller nästan alla trycknappar in Annotation för att man ska kunna skriva ut en
text på knappen. Även value och inputvalue subgrafer innehåller en Annotation.

En annotaion är en plats i subgrafen där en text kan skrivas ut. Texten kan antingen anges
i editorn, eller med hjälp av några olika typer av dynamik, kopplas till attribut i databasen
och förändras i runtime. 

Det olika typer av text-dynamik vi ska titta på här är 
- DigText, där man skiftar mellan två olika texter beroende på en digital signal.
- Analog text, där man skiftar mellan flera olika texter beroende på en analog signal.
- Value, som kopplas till ett sträng-attribut i databasen och attributets innehåll.

<h2>Skifta mellan två texter på en digital signal
Dynamiken DigLowText skiftar mellan två texter beroende på en digital signal.
Vi skapar en trycknapp av typen ButtonRoundMetalFrame och öppnar objektseditorn.

<image> geg_fig107.png
<b>Fig Trycknapp med Annotation

I Text kan man lägga in en text som visas på trycknappen, och vi lägger in texten 'Off'.
Genom att addera dynamiken DigText kommer texten i Text att ersättas av texten in 
DigText.LowText när signalen vi kopplar till DigText.Attribut är låg. Vi lägger in 'On' i
DigText.LowText och kopplar DigText.Attribute till Dv'n H1-Dv1. För enkelhets skull kopplar
vi även ToggleDig.Attribute till samma signal så att vi enkelt kan ändra på den genom att
klicka på knappen.

<image> geg_fig108.png
<b>Fig Dynamik DigLowText

Dynamiken fungerar nu så här. När H1-Dv1 är låg skrivs texten 'On' ut på knappen, dvs texten
i DigText.LowText, och när signalen är hög skrivs texten 'Off' ut, den text vi skrev in i Text
attributet.

<image> geg_fig109.png
<b>Fig Låg signal till vänster och hög signal till höger

DigText har flera instanser, och för varje instans kan man ange en text och koppla den till 
en digital signal. Observera att funktionen är annorlunda för de andra instanserna. För den
första anger man en LowText, dvs en text som skrivs ut när signalen är låg. På övriga 
instanser anger man en HighText, en text som skrivs ut när signalen är hög.


<h2>Skifta mellan flera texter berorende på en analog signal
För dynamiken AnalogColor kan man ange upp till 32 olika texter, och vilken av texerna som
skrivs ut beror på värdet av den analoga signal som kopplas till dynamiken.

Vi använder en ValueLargeCenter för att demonstrera dynamiken. 

<image> geg_fig110.png
<b>Fig En ValueLargeCenter subgraf

ValueLargeCenter har Value dynamik som default, så vi börjar med att ta bort den genom att 
ta bort Inherit in DynType, och lägger istället in AnalogText.

I AnalogText.TextMask markerar man de texter som ska användas. Vi kommer att skifta mellan
fyra olika texter och markerar 2, 3 och 4. Texterna 'Low level', 'Normal level', 'High level'
och 'Very high level' fylls i text-attributen. Vi behåller enumvärdena, vilket innebär att 
AnalogText.Text1 visas när signalen är 0, AnalogText.Text2 när signalen är 1 osv. I praktiken
är det så att texten skiftar vid värdena 0.5, 1.5 och 2.5. Om signalen är större än 3.5
skrivs inte någon text ut alls.

Vi kopplar också Av'n H4-Av1 till AnalogText.Attribute.

<image> geg_fig111.png
<b>Fig Value dynamiken ersatt av AnalogText

Resultatet visas i figuren nedan visas value-objektet när H4-Av1 har värden 0, 1, 2 och 3, med
0 värdet längst ner.

<image> geg_fig112.png
<b>Fig Texten vid olika värden på H4-Av1

<h2>Visa texten i ett sträng-attribut
För att visa innehållet i ett sträng-attribut i database använder man Value dynamiken. Som
i föregående exempel skapar vi ett ValueLargeCenter objekt.

<image> geg_fig110.png
<b>Fig En ValueLargeCenter subgraf

Den här subgrafen har Value som default dynamik, så vi behöver bara koppla Value.Attribute
till ett sträng-attribut och lägga in sträng-formatet '%s' i Value.Format. Vi kopplar
Value.Attribute till Sv-objektet H1-Sv.

<image> geg_fig113.png
<b>Fig Value dynamik

För att visa resultatet lägger vi in texten 'Starting up' i H1-Sv1 i Xtt.

<image> geg_fig114.png
<b>Fig Sätt en text i Sv attributet

Texten visas i Value-objektet.

<image> geg_fig115.png
<b>Fig Texten skrivs ut i value objektet
</topic>

<topic> geg_dynamic_shape
I många fall är det bästa sättat att visa läget i processen att ändra form på ett objekt. Det
kan vara en grind som visas öppen eller stängd, eller ett hänglås som är låst eller olåst.
Det här kan man åstadkomma genom att använda subgrafer med två eller flera sidor.

Ett exempel på en subgraf med flera sidor är Smiley

Subgrafer med flera sidor hanteras av dynamiktyperna DigShift, AnalogShift och Animation.

<image> geg_fig116.png
<b>Fig Exempel på subgraf med flera sidor

DigShift växlar mellan två olika sidor beroende på en digital signal.
AnalogShift växlar mellan flera olika sidor beroende på en analog signal.
Animation spelar upp ett antal sidor med en viss hastighet så att man får intryck av rörelse.

<h2>Växla mellan två sidor
Dynamiken DigShift kan användas på en subgraf med flera sidor. Den kopplas till en digial
signal och växlar mellan första och sista sidan beroende på om signalen är hög eller låg.

Vi använder subgrafen Smiley for demonstrera DigShift. Smiley har dynamiken AnalogShift som
default, och den måste vi först ta bort genom att återställa Inherit i DynType. I stället
anger vi DigShift, och kopplar till signalen H1-Dv1.

<image> geg_fig117.png
<b>Fig Dynamiken DigShift vald

Resultatet visas i figuren nedan. När signalen är låg visas subgrafens första sida, och när
signalen är hög visas subgrafens sista sida.

<image> geg_fig118.png
<b>Fig Låg signal till vänster och hög signal till höger

<h2>Växla mellan flera sidor
AnalogShift kopplas till en analog signal, och kan skifta mellan flera sidor. Värdet på
den analoga signalen bestämmer index för den sida som visas. När signalen är 0 visas första
sidan, vid 1 visas andra sidan osv.

Subgrafen Smiley har AnalogShift som default. Det enda vi behöver göra är att koppla den till
en analog signal. Vi kopplar den till H4-Av1.

<image> geg_fig119.png
<b>Fig Dynamik AnalogShift

Smiley innehåller 6 olika sidor, när signalen är 0 eller mindre än 0 visas första sidan, när 
den är 1 visas andra sidan osv. När signalen är 5 eller större än 5 visas sista sidan.

<image> geg_fig120.png
<b>Fig Signalens värde är 0 till vänster och ökar med 1 för varje bild

<h2>Animation
TODO

<image> geg_fig121.png
<b>Fig Animation för att öppna/stänga ett hänglås
</topic>

<topic> geg_dynamic_analog
Visa anloga värden

<h2>Visa analoga värden i sifferform
För att visa analoga värden i sifferform använder man dynamiken Value. Value kopplas till
en analog signal och konverteras till lämplig form med hjälp av format specifikationen.

Value dynamiken kan användas på subgrafer som innehåller en annotation, dvs en plat för att
skriva ut en text. Ett exempel på en sådan subgraf är ValueLargeCenter. 

<image> geg_fig122.png
<b>Fig ValueLargeCenter

Vi skapar en ValueLargeCenter och kopplar den till den analoga signalen H4-Av1. Vi måste
dessutom ange formateringen i Value.Format. '%f' är formateringen för ett flyttal, och man
kan även specifiera hur många tecken och hur många decimaler som talet ska skriva ut
med. Med '%7.2f' anges att talet är upp till 7 tecken stort, inklusive punkten, och att två
av dessa är decimaler.

<image> geg_fig123.png
<b>Fig Value dynamik med format specifikation

Resultatet visas i figuren nedan. Det analoga värdet skrivs med två decimaler.

<image> geg_fig124.png
<b>Fig Value dynamik


Notera att Value dynamiken kan användas för att visa innehållet i en rad olika typer av
signaler, heltal, strängar, tider mm.

Genom att skapar flera instanser av Value dynamik för ett objekt kan man visa fler analoga
värden på samma objekt. Det här kräver att subgrafen innehåller flera Annotations.

Analoga värden kan även visas i form av kurvor, staplar och detta finns beskrivet i kapitlet
'Speciella Object'

Trend <link> geg_specialobjects_trend
Bar <link> geg_specialobjects_bar

</topic>

<topic> geg_dynamic_move
Flytta, skala och rotera objekt

<h2>Flytta ett objekt
För att flytta och skala ett objekt används dynamiken Move. Vi ska till att börja med titta
på hur man kan flytta objektet. Objektet kan flyttas i x- och y-led och för varje riktning
kopplar man en analog signal som specifierar förflyttningen relativt ursprungspositionen.
Signalvärdet kan räknas om till en förflyttning i Ge-koordinater med en faktor (Move.XFactor
och Move.YFactor) och ett offset (Move.XOffset och Move.YOffset).

I det här exemplet ska vi flytta en rektangel i x-led. Vi ritar rektangeln och gör en grupp
av den. Vi ritar också en x-axel för att visa förflyttningen

<image> geg_fig125.png
<b>Fig En rektangel

När den är grupperad kan vi sätta Move i DynType och attributen för Move visas i 
objektseditorn. Eftersom vi ska flytta i x-led kopplar Move.XAttribute till signalen H4-Av1
i databasen. Vi mäter upp områden som rektangeln ska flyttas på, och kommer fram till att
när signalen variera mellan 0-100 ska rektangeln flyttas 20 Ge-enheter i bilden. Genom att
placera rektangeln på 0-punkten behöver vi inte ange något offset, men vi måste skala ner
signalvärdet med 20/100 = 0.2 som vi lägger in i Move.XFactor. I exemplet har vi även lagt
in en x-axel för att visa storleken på förflyttningen.

<image> geg_fig126.png
<b>Fig Move dynamik på rektangeln

Resultatet blir att när signalen är 0 ligger rektangeln kvar på ursprungspositionen. Vid 
värdet 60 har rektanglen flyttats 12 enheter, se figure nedan, och vid värdet 100 har 
rektangeln flyttas 20 enheter.

<image> geg_fig127.png
<b>Fig Rektangeln flyttad 12 Ge-enheter i x-led

<h2>Skala ett objekt
Move dynamiken kan även användas för att skala ett objekt. Skalningen kan ske i x- och y-led
och för varje riktning kopplar man en analog signal som specifierar storleken på skalningen.

Vi lägger in skalning i x-led för rektangeln i exemplet ovan. Move.ScaleXAttribute kopplas
till signalen H4-Av2. Vi måste också räkna ut en skalfaktor och lägga in i Move.ScaleXFactor.
Rektangeln har bredden 2 enheter och med skalfaktorn 0.1 kommer ett signalvärde på 100 att
ge en bredd på 20 enhter.

<image> geg_fig128.png
<b>Fig Signal och skalfaktor angivna

Resultatet blir att när signalvärdet är 0, har rektanglen ingen bredd alls, utan ritas som 
ett streck. Vid signalvärdet 25 ser det ur som i  figuren nedan, rektanglen är skalad 2.5 
gånger, och när signalvärdet är 100 är rektanglen skalad 10 gånger och täcker hela x-axeln.

<image> geg_fig129.png
<b>Fig Signalvärdet 25 ger en skalning på 2.5 gånger

<h2>Rotera ett objekt
För att roterar ett objekt använder man dynamiken Rotate. Rotate kopplas till en analog 
signal som innehåller rotationen i grader.

Rotate har vissa begränsningar eftersom rektanglar och ellipser endast kan roteras i steg 
med 90 grader. Därför använder man företrädesvis polylinjer, linjer och cirklar med Rotate.

Vi ritar en enkel visare med ett cirkel-segment och en polylinje. Efter att ha grupperat dem
sätter vi Rotate i DynType. Vi ritar även en cirkulär skala med ett AxisArc objekt.

<image> geg_fig130.png
<b>Fig Visare med rotations-dynamik

Visaren kopplas till den analoga signalen H4-Av1. Vi måste också specifiera den punkt som 
objeket ska rotera runt. I det här fallet är det cirkelsegmentets mittpunkt som har 
x-koordinaten 9 och y-koordinaten 1. Rotationspunkten läggs in i Rotate.x0 och Rotate.y0.

Skalan som vi har ritat har områden -100 - 100, vilket är området för signalen H4-Av1. Denna
ska räknas om till grader och motvarande rotation är -90 - 90 grader, dvs skalfaktorn är 0.9.
Vi lägger in 0.9 i Rotate.Factor.

<image> geg_fig131.png
<b>Fig Visaren kopplade till en analog signal och skalfaktorn satt till 0.9

Resulatet kan ses i figuren nedan.

<image> geg_fig132.png
<b>Fig Värdet 40 ger en rotation på 36 grader
</topic>

<topic> geg_dynamic_misc
Ljud och kommandon

TODO
</topic>

<topic> geg_action_button
Sätta värden med trycknappar

<h2>Sätta ett digitalt värde
Action SetDig sätter värdet på en digital signal till 1 när man klickar på ett objekt.

Vi börjar med att tillverka en knapp av en rektangel. Genom att sätta 3D och öka shadow_width
till 15 får vi ett karakteristiskt knapp-utseende på rektangeln. Dessutom adderar vi
gradienten DiagonalLowerRight med gradient_contrast 1 för att ytterligare förstärka 3D 
effekten. Slutligen gör vi en grupp av rektangeln så att vi kan sätta Action på den.

<image> geg_fig133.png
<b>Fig En rektangel formad som en trycknapp

För att sätta en digital signal till 1 när man trycker på knappen, sätter vi SetDig i Action.
Det innebär att om signalens värde är 0 kommer det att sättas till 1. Om det redan är 1 blir
det ingen förändring.

Vi kopplar SetDig.Attribute till signalen H1-Dv1. 

<image> geg_fig134.png
<b>Fig Action SetDig på knappen

Resultatet blir att när vi klickar på knappen sätts H1-Dv1 till 1.

Det är möjlig att addera flera instanser av SetDig och för varje ny instans kopplar man en
ny signal som sätts till 1 när man klickar på knappen. På så sätt kan man sätta flera 
signaler på en knapptryckning.


<h2>Återställa ett digitalt värde
ResetDig fungera som SetDig med den skillnaden att den sätter värdet 0 på signalen i stället.

Vi sätter Action ResetDig och kopplar till signalen H1-Dv1.

<image> geg_fig135.png
<b>Fig Action ResetDig på knappen

Resultatet blir att när vi klickar på knappen sätts H1-Dv1 till 0.

<h2>Toggla ett digitalt värde
Med Action ToggleDig ändrar man värdet på en digital signal när man klickar på objektet. Om
värdet på signalen är 1, sätt det till 0, och om värdet på signalen är 0 sätts det till 1.

Vi kopplar ToggleDig.Attribute till signalen H1-Dv1.

<image> geg_fig136.png
<b>Fig Action ToggleDig på knappen

Resultatet blir att värdet på H1-Dv1 ändras när man klickar på knappen.

<h2>Sätta ett digitalt värde så länge knappen är nedtryckt
Med Action StoDig sättar man värdet på en digital signal till 1 när knappen trycks ned, och 
återställer till 0 när knappen släpps.

Vi sätter Action StoDig på knappen och kopplar den till H1-Dv1.

<image> geg_fig137.png
<b>Fig Action StoDig

Resultatet blir att när vi trycker på knappen, sätts H1-Dv1 till 1, och när vi släpper
knappen sätts H1-Dv1 till 0.

<h2>Sätta ett analog värde
För att sätta ett värde i en analog signal använder man Action SetValue. SetValue kopplas till
en analog signal, och man klickar på objektet sätts ett specificerat värde i signalen.

Vi sätter Action SetValue på knappen, och kopplar till Av-objektet H4-Av1. Vi vill sätta
värdet 4.5 och lägger in 4.5 i SetValue.Value.

<image> geg_fig138.png
<b>Fig SetValue

Resultatet blir att när vi klickar på knappen läggs värdet 4.5 in i H4-Av1.

SetValue tillåter flera instanser, och för varje instans anger man ett värde och kopplar
instansen till en analog signal. Men knapptryckningen kan man då sätta olika värden in ett
antal analoga signaler.

<h2>Öka/Minska knappar
Med action IncrAnalog kan man öka eller minska värdet på en analog singnal med en 
knapptryckning. IncrAnalog kopplas till en analog signal och i IncrAnalog.Increment anger
man hur mycket värdet ska öka eller minska vid varje klick. Man kan också lägga in min och
max-värde för signalen.

Vi lägger ut en ButtonUp och en ButtonDown. 

<image> geg_fig148.png
<b>Fig ButtonUp och ButtonDown

Båda har SetDig som default. Vi tar bort SetDig genom att avmarkera Inherit i Action, och 
markerar istället IncrAnalog. Vi kopplar båda knapparna till signalen H4-Av1. ButtonUp knappen
ska öka värdet med 1 för varje klick, så vi sätter IncrAnalog.Increment till 1. ButtonDown
knappen ska minska värdet med 1, så vi sätter IncrAnalog.Increment till -1. Vi lägger också 
in min och maxvärden och sätter IncrAnalog.MaxValue till 10. 

<image> geg_fig149.png
<b>Fig ButtonUp till vänster och ButtonDown till höger

Resultatet blir att när vi klickar på ButtonUp knappen ökar värdet på H4-Av1 med 1 för varje
klick tills värdet har nått max-värdet 10. När vi klickar på ButtonDown minskar värdet med 1
för varje klick men går inte under min-värdet 0.

<h2>Radioknappar
Radioknappar används när man vill välja ut ett alternativ av ett antal alternativ. För varje
alternativ skapar man en radioknapp och kopplar den till en digital signal. Därefter
grupperar man radio-knapparna. Action RadioButton fungerar så att signalen för den radioknapp
man klickar på sätts, medan övriga radioknappar i gruppen återställs. Det innebär att det är
högst ett alternativ valt, dvs bara en av signalerna är 1. 

Vi lägger ut fyra radioknappar av typen RadioButtonRelief. 

<image> geg_fig150.png
<b>Fig Fyra radioknappar

De har redan action RadioButton som default. Vi kopplar radioknapparna till var sin digital 
signal, H1-Dv1, H1-Dv2, H1-Dv3 och H1-Dv4. Därefter grupperar vi de fyra radioknapparna så 
att de tillhör samma grupp. Vidare lägger vi in några lämpliga texter för att beskriva de 
olika alternativen.

<image> geg_fig151.png
<b>Fig Den första radioknappen kopplad till H1-Dv1

När vi tar upp grafen med radioknappar i operatörsmiljön, kan vi välja ett av alternativen. 
Det utvalda makeras med ett svart prick, medan tidigare utvalda återställs. Samtidigt sätts 
signalen som den utvalda knappen är kopplad till, medan övriga signaler nollställs. I figuren
nedan är andra alternativet makerat, dvs H1-Dv2 är 1 och Dv1, Dv3 och Dv4 0.

<image> geg_fig152.png
<b>Fig Radioknapp markerad

<h2>Checkbox
Checkboxar brukar användas för att bocka för ett antal alternativ ut en lista. Till skillnad 
från radioknappar kan man välja ut flera alternativ samtidigt. En checkbox har action 
ToggleDig kombinerad med dynamiken DigShift. 

Vi skapar fyra checkboxar av typen Checkbox2, och lägger beskrivande texter intill.

<image> geg_fig153.png
<b>Fig Checkboxar

Checkboxarna kopplas till signalerna H1-Dv1, H1-Dv2, H1-Dv3 och H1-Dv4. Notera att både
DigShift.Attribute och ToggleDig.Attribut kopplas till samma signal.

<image> geg_fig154.png
<b>Fig Objektseditorn för den första checkboxen

I figuren nedan är första och tredje checkboxen markerad, dvs H1-Dv1 och H1-Dv3 är satta till
1.

<image> geg_fig155.png
<b>Fig Checkboxar markerade

</topic>

<topic> geg_action_popupmenu
Popup-meny
Med action PopupMenu kan man genom att högerklicka på ett objekt visa en popup-meny. 
Popup-menyn är kopplad till ett objekt i databasen, och visar upp metoderna för det objektet.
Vilka metoder som visas i popup-menyn beror på hur objektet är konfigurerat i databasen, och
vilka metoder som finns definerade för den typen av objekt.

Låt oss börja med ett enkelt exempel där vi visar värdet i ett Av-objekt i ett Value fält.
Vi skapar en ValueLargeCenter, kopplar den till H4-Av1 och lägger in formateringen %7.2f i
Value.Format.

<image> geg_fig122.png
<b>Fig ValueLargeCenter

Nu adderar vi även PopupMenu i Action, och lägger in Av-objektet i PopupMenu.ReferenceObject.
Notera att det är hela objektet som refereras och inte ett enskilt attribut.

Vi måste också öppna Files/Graph Attributes från menyn och sätta MB3Action till PopupMenu.

<image> geg_fig139.png
<b>Fig Action PopupMenu adderad

När vi nu tar upp bilden i operatörsmiljön och högerklickar på Value fältet öppnas 
popup-menyn.

<image> geg_fig140.png
<b>Fig Popupmenyn

Vilka metoder som finns i popmenyn beror vilken klass det refererade objektet har och hur
det är konfigurerat. I figuren nedan kan visas Av-objektets konfigurering, och vi kan se
attributen DefGraph, DefTrend, HelpTopic, DataSheet, CircuitDiagram, Photo och Note som
alla har samband med olika metoder.

<image> geg_fig141.png
<b>Fig Konfigurereringen av H4-Av1

Vi ska här gå igenom några av alternativen i popmenyn och se hur de är konfigurerade, eller
vad de är beroende av

<b>Graph
För Graph kan man specifiera en graf som visar information om objektet, eller 
anläggningsdelen där objektet förekommer. Konfigureringen sker genom att man lägger in ett
XttGraph objekt i DefGraph. För H4-Av1 är inte DefGraph ifyllt, och då öppnas grafen för 
närmaste överliggande objekt som har DefGraph ifyllt. I det här fallet är det H4 som har
en default graf angiven.

<b>Object Graph
Object Graph visar objektsbilden för objektet. Objektsbilden är en graf som visar 
information om ett objekt av en viss klass. Om det finns en objektbild tillgänglig för det
aktuella klassen finns det här alternativet i menyn.

<b>Trend
Visar en trend för objektet. Det kräver att en trend är konfigurerad med ett DsTrend objekt,
och att trend-objektet är inlagt in attributet DefTrend. DefTrend kan även vara ett DsFast
eller PlotGroup objekt.

<b>History
Visar en kurva med process historik för objektet. Det kräver att lagring av data är 
konfigurerat med ett SevHist objekt under objektet.

<b>Hist Event
Hist Event öppnar en dialog där man kan söka efter larm och händelser som finns lagrade för
det aktuella objektet. 

<b>Block Events
Block Event öppnar en dialog där man kan blockera larm av olika prioritet.

<b>Help
Help visar en hjälptext för objektet. Hjälptexter skrivs in i en hjälp-fil 
($pwrp_cnf/xtt_help.dat) och varje text omfattar ett ämne (topic). Genom att lägga in ett ämne
i attributet HelpTopic visas texten för det här ämnet när Help alternativet i popupmenyn
aktiveras.

<b>Note
Med Note kan man skriva in en text som lagras i objektets Note-attribut. Note texten visas i
objektets objektsbild.

<b>Open Object
Open Object öppnar objektet och visar innehållet i objektet.

<b>RtNavigator
RtNavigator letar upp objektet i runtime navigatorn.

<b>Crossreferences
Visar en lista med referenser till objektet i plc-kod och grafer.

<b>Help Class
Help Class öppnar en hjälptext för objekts-klassen.

<b>Photo
Photo visar ett fotografi på objektet i anläggningen. Det konfigureras genom att man lägger
in en URL till fotografiet i attributet Photo. 

<b>DataSheet
Om man har ett datablad för objektet, kan man lägga in en URL till detta i attributet
DataSheet.

<b>CircuitDiagram
En länk till ett kretsschema kan läggas in i attributet CircuitDiagram.
</topic>

<topic> geg_action_opengraph
Öppna en graf
För att öppna en graf genom att klicka på ett objekt, använder man normalt action OpenGraph.
Man kan även använda action Command med kommandot 'open graph'.

<h2>Öppna en graf från en trycknapp

Vi tillverkar en trycknapp för att öppna en bild med en rektangel och en text som grupperas.

<image> geg_fig142.png
<b>Fig Trycknapp för att öppna en bild

I första exemplet sätter vi action till OpenGraph. OpenGraph kräver att man har ett 
konfigurerat XttGraph objekt i databasen (se kapitel...). XttGraph objektet läggs in i
OpenGraph.GraphObject.

<image> geg_fig143.png
<b>Fig OpenGraph action

Man kan även öppna en graf med action Command och kommandot

<c>open graph 'graphname' [/width=] [/height=]

eller en objektsbild med kommandot

<c>open graph /class /instance=

I det här exemplet har vi satt Command i Action och lagt ett kommando för att öppna
objektsbilden för Av-objektet H4-Av1.

<image> geg_fig144.png
<b>Fig Öppna en objektsbild

Om man redan har action PopupMenu och dessutom vill öppna objektsbilden när man klickar
på objektet, då räcker det med att addera OpenGraph till action. Man behäver inte fylla
i något objekt, utan det objekt som är angivet i PopupMenu.ReferenceObject väljs som default.

<image> geg_fig145.png
<b>Fig Öppna objektsbilden när PopupMenu är konfigurerat


<h2>Stänga en graf
För att stänga en graf används action CloseGraph. 

<image> geg_fig146.png
<b>Fig Trycknapp för att stänga en graf

Vi skapar en trycknapp med texten 'Close' och sätter Action till CloseGraph.

<image> geg_fig147.png
<b>Fig Action CloseGraph

</topic>

<topic> geg_action_command
Exekvera kommandon
Med action Command kan man ange ett xtt-kommando som exekveras när man klickar på ett objekt.
Det finns en rad xtt-kommandon för att öppna bilder, visa kurvor, anropa metoder etc. Xtt
kommandona finns beskrivna i Operator's Guide. Man kan även exekvera script med Command.

I det har exemplet ska vi öppna en trend-kurva från en trycknapp.
Vi skapar en rektangel, lägger en lämplig text ovanpå och grupperar rektangeln och texten.

<image> geg_fig156.png
<b>Fig Kommando trycknapp

I Action markeras Command och i Command.Command läggs xtt-kommandot in. Vi vill öppna en
trend-kurva som är konfigurerad med DsTrend objektet H4-Av1-Trend, och kommandot för att
öppna kurvan är

<c>open trend H4-Av1-Trend

<image> geg_fig157.png
<b>Fig Kommando för att öppna en trend

<h2>Exekvera ett script
Med ett script kan man utföra flera kommandon samtidigt, men man kan även läsa attribut
i databasen, test på olika villkor, och sätta attribut.

Ett script exekveras med ett xtt-kommando genom att ange filnamnet för scriptet med ett '@'
tecken framför, t ex

<c>@$pwrp_exe/my_script

kommer att exekvera scriptet my_script.rtt_com på $pwrp_exe.

Här är ett exempel på ett script som öppnar grafen g1 om H1-Dv1 är satt, annars öppnas grafen
g2.

<c>main()
<c>  int sts;
<c>
<c>  if ( GetAttribute( "H1-Dv1.ActualValue", sts))
<c>    open graph g1
<c>  else
<c>    open graph g2
<c>  endif
<c>endmain


</topic>


</chapter>
