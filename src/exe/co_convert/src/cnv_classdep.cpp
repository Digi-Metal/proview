/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2016 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */



#include <vector>
#include <iostream>
#include <fstream>
#include <float.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "cnv_classdep.h"
extern "C" {
#include "pwr.h"
#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
}
#include "co_lng.h"

using namespace std;

int CnvClassDep::read()
{
  pwr_tFileName fname, found_file;
  pwr_tStatus sts;
  int idx;
  int currentidx = 0;

  sprintf( fname, "$pwre_broot/$pwre_target/bld/wbl/*.cdp");
  // dcli_translate_filename( fname, fname);

  // Create root;
  CdpItem root;
  root.idx = currentidx++;
  classlist.push_back( root);

  sts = dcli_search_file( fname, found_file, DCLI_DIR_SEARCH_INIT);
  while ( ODD(sts)) {
    pwr_tObjName classname, supername, volumename;
    ifstream fp( found_file);

    fp >> volumename >> classname >> supername;

    CdpItem item;
    strcpy( item.name, classname);
    strcpy( item.supername, supername);
    strcpy( item.volumename, volumename);
    item.idx = currentidx++;
    item.fth = 0;
    item.bws = classlist[0].lch;
    classlist[item.bws].fws = item.idx;
    if ( classlist[0].fch == 0)
      classlist[0].fch = item.idx;
    classlist[0].lch = item.idx;
    classlist.push_back( item);

    sts = dcli_search_file( fname, found_file, DCLI_DIR_SEARCH_NEXT);
  }
  dcli_search_file( fname, found_file, DCLI_DIR_SEARCH_END);


  for ( int i = 1; i < (int)classlist.size(); i++) {
    if ( strcmp( classlist[i].supername, "-") == 0)
      continue;

    if ( find( classlist[i].supername, &idx)) {
      // Unlink from current position
      if ( classlist[i].bws)
	classlist[ classlist[i].bws].fws = classlist[i].fws;
      if ( classlist[i].fws)
	classlist[ classlist[i].fws].bws = classlist[i].bws;
      if ( classlist[classlist[i].fth].fch == i)
	classlist[classlist[i].fth].fch = classlist[i].fws;
      if ( classlist[classlist[i].fth].lch == i)
	classlist[classlist[i].fth].lch = classlist[i].bws;

      // Link as last child to new father
      classlist[i].fws = 0;
      classlist[i].fth = idx;
      if ( classlist[idx].fch) {
	classlist[classlist[idx].lch].fws = i;
	classlist[i].bws = classlist[idx].lch;
	classlist[idx].lch = i;
      }
      else {
	classlist[i].bws = 0;
	classlist[idx].fch = i;
	classlist[idx].lch = i;
      }
    }
    else
      printf( "SuperClass not found: %s\n", classlist[i].supername);
  }

  // print( 0, 0);

  for ( int i = 1; i < (int)classlist.size(); i++) {
    print_html_classtable( i);
  }
  return 1;
}

void CnvClassDep::print( int idx, int level) {
  for ( int i = classlist[idx].fch; i; i = classlist[i].fws) {
    for ( int j = 0; j < level; j++)
      printf( "  ");
    printf( "%s\n", classlist[i].name);

    print( i, level+1);
  }
}

void CnvClassDep::print_html_classtable( int idx) 
{
  pwr_tFileName fname;
  int parentlist[100];
  int parent_cnt = 0;
  char href[200];

  for ( int fth = classlist[idx].fth; fth; fth = classlist[fth].fth)
    parentlist[parent_cnt++] = fth;

  sprintf( fname, "%s%s_%s_ctree.html", ctx->dir, classlist[idx].volumename, 
	   classlist[idx].name);
  cdh_ToLower( fname, fname);
  dcli_translate_filename( fname, fname);
  ofstream fp( fname);

  fp <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">" << endl <<
"<!-- Generated by co_convert -->" << endl <<
"<html>" << endl <<
"  <head>" << endl <<
"    <title>Proview classtree</title>" << endl <<
"    <link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">" << endl <<
"  </head>" << endl <<
"  <body>" << endl;

  if ( parent_cnt == 0 && classlist[idx].fch == 0) {
    switch( Lng::current()) {
    case lng_eLanguage_sv_SE:
      fp << "Det finns ingen superklass eller kända subklasser till klass " << classlist[idx].name << "." << endl;
      break;
    default:
      fp << "There are no superclass or known subclasses to class " << classlist[idx].name << "." << endl;
    }    
  }
  else {
    switch( Lng::current()) {
    case lng_eLanguage_sv_SE:
      fp << "<h2>Klassträd " << classlist[idx].name << "</h2>" << endl;
      break;
    default:
      fp << "<h2>ClassTree " << classlist[idx].name << "</h2>" << endl;
    }
    fp << "<table id=\"ctree\"><tr>" << endl;
    for ( int i = parent_cnt - 1; i >= 0; i--) {
      sprintf( href, "%s_%s.html", classlist[parentlist[i]].volumename, classlist[parentlist[i]].name);
      cdh_ToLower( href, href);
      fp << "<td id=\"ctree\"><a href=\"" << href << "\">" <<  classlist[parentlist[i]].name << "</a></td>" << endl;
    }
    sprintf( href, "%s_%s.html", classlist[idx].volumename, classlist[idx].name);
    cdh_ToLower( href, href);
    fp << "<td id=\"ctree\" bgcolor=\"lightblue\"><a href=\"" << href << "\">" << classlist[idx].name << "</a></td><td id=\"ctree\">" << endl;

    print_html_classtable_children( fp, idx);
    fp << "</td></table>" << endl;
  }
  fp << 
"  </body>" << endl <<
"</html>" << endl;
}

void CnvClassDep::print_html_classtable_children( ofstream& fp, int idx)
{
  char href[200];

  if ( classlist[idx].fch == 0)
    return;

  fp << "<table id=\"ctree\">" << endl;
  for ( int i = classlist[idx].fch; i; i = classlist[i].fws) {
    sprintf( href, "%s_%s.html", classlist[i].volumename, classlist[i].name);
    cdh_ToLower( href, href);
    fp << "<tr><td id=\"ctree\"><a href=\"" << href << "\">" << classlist[i].name << "</a>" << endl;
    if ( classlist[i].fch) {
      fp << "<td id=\"ctree\">" << endl;
      print_html_classtable_children( fp, i);
      fp << "</td></tr>" << endl;
    }
  }
  fp << "</table>" << endl;
}

bool CnvClassDep::find( char *name, int *idx)
{
  for ( int i = 0; i < (int)classlist.size(); i++) {
    if ( cdh_NoCaseStrcmp( name, classlist[i].name) == 0) {
      *idx = i;
      return true;
    }
  }
  return false;
}



