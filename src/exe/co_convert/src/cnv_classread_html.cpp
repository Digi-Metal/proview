

#include <iostream.h>
#include <fstream.h>
#include <float.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "cnv_classread.h"
extern "C" {
#include "pwr.h"
#include "co_cdh.h"
#include "co_time.h"
}


int ClassRead::html_init( char *first)
{
  char fname[200];
  char gname[200];
  char allclasses_name[80];
  char timestr[80];

  time_AtoAscii( 0, time_eFormat_DateAndTime, timestr, sizeof(timestr));
  strcpy( html_first, volume_name);
  strcat( html_first, "_");
  strcat( html_first, first);
  cdh_ToLower( html_first, html_first);

  strcpy( allclasses_name, volume_name);
  strcat( allclasses_name, "_allclasses.html");
  cdh_ToLower( allclasses_name, allclasses_name);

  // Create index file
  {
    strcpy( fname, dir);
    strcat( fname, volume_name);
    strcat( fname, "_index.html");
    cdh_ToLower( fname, fname);

    ofstream fp( fname);

    // Get group menu name
    if ( setup_group_cnt) {
      strcpy( gname, low(volume_name));
      strcat( gname, "_menu_group.html");
      cdh_ToLower( fname, fname);
    }

    fp <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd>" << endl <<
"<!-- Generated by co_convert " << timestr << "  -->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<TITLE>" << endl <<
"Class Menu" << endl <<
"</TITLE>" << endl <<
"<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">" << endl <<
"</HEAD>" << endl <<
"<FRAMESET cols=\"20%,80%\">" << endl;
    if ( setup_group_cnt)
      fp <<
"<FRAMESET rows=\"20%,80%\">" << endl <<
"<FRAME src=\"" << gname << "\" name=\"groupFrame\">" << endl <<
"<FRAME src=\"" << allclasses_name << "\" name=\"menuFrame\">" << endl <<
"</FRAMESET>" << endl;
    else
      fp <<
"<FRAME src=\"" << allclasses_name << "\" name=\"menuFrame\">" << endl;
      
    fp <<
"<FRAME src=\"" << html_first << ".html\" name=\"classFrame\">" << endl <<
"</FRAMESET>" << endl <<
"<NOFRAMES>" << endl <<
"<H2>" << endl <<
"Frame Alert</H2>" << endl <<

"<P>" << endl <<
"This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client." << endl <<
"<BR>" << endl <<
"Link to <A HREF=\"" << html_first << ".html\">Non-frame version.</A></NOFRAMES>" << endl <<
"</HTML>" << endl;
  }

  // Create group menu file 
  if ( setup_group_cnt) {
    strcpy( fname, dir);
    strcat( fname, gname);
    cdh_ToLower( fname, fname);

    ofstream fp( fname);


    fp <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">" << endl <<
"<!-- Generated by co_convert " << timestr << "  -->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<TITLE>" << endl <<
"Groups" << endl <<
"</TITLE>" << endl <<
"<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">" << endl <<
"</HEAD>" << endl <<
"<BODY BGCOLOR=\"white\">" << endl <<
"<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">" << endl <<
"<B>Groups</B></FONT>" << endl <<
"<BR>" << endl <<
"" << endl <<
"<TABLE BORDER=\"0\" WIDTH=\"100%\">" << endl <<
"<TR>" << endl <<
"<TD NOWRAP><FONT CLASS=\"FrameItemFont\">  " << endl;

    // Put index filename in fname
    strcpy( fname, volume_name);
    strcat( fname, "_index.html");
    cdh_ToLower( fname, fname);

    fp <<
"<A HREF=\"" << fname << "\" TARGET=\"_parent\">AllClasses</A>" << endl <<
"<BR>" << endl;
  
    for ( int i = 0; i < setup_group_cnt; i++) {
    // Put group index filename in fname
    strcpy( fname, volume_name);
    strcat( fname, "_group_");
    strcat( fname, setup_groups[i]);
    strcat( fname, "_index.html");
    cdh_ToLower( fname, fname);

      fp <<
"<A HREF=\"" << fname << "\" TARGET=\"_parent\">" << setup_groups[i] << "</A>" << endl <<
"<BR>" << endl;
    }

    fp <<
"</FONT></TD>" << endl <<
"</TR>" << endl <<
"</TABLE>" << endl <<
"" << endl <<
"</BODY>" << endl <<
"</HTML>" << endl;

  }

  // Open allclasses file
  strcpy( fname, dir);
  strcat( fname, allclasses_name);
  cdh_ToLower( fname, fname);
  fp_html_index.open( fname);


  html_index_open = 1;

  fp_html_index <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">" << endl <<
"<!-- Generated by co_convert " << timestr << "  -->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<TITLE>" << endl <<
"All Classes" << endl <<
"</TITLE>" << endl <<
"<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">" << endl <<
"</HEAD>" << endl <<
"<BODY BGCOLOR=\"white\">" << endl <<
"<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">" << endl <<
"<B>All Classes</B></FONT>" << endl <<
"<BR>" << endl <<
"" << endl <<
"<TABLE BORDER=\"0\" WIDTH=\"100%\">" << endl <<
"<TR>" << endl <<
"<TD NOWRAP><FONT CLASS=\"FrameItemFont\">  " << endl;

  // Open one index file for each configured group
  for ( int i = 0; i < setup_group_cnt; i++) {

    // Create index page for each group
    strcpy( fname, dir);
    strcat( fname, volume_name);
    strcat( fname, "_group_");
    strcat( fname, setup_groups[i]);
    strcat( fname, "_index.html");
    cdh_ToLower( fname, fname);
    {
      ofstream fp( fname);

      // Put menu filename in fname
      strcpy( fname, volume_name);
      strcat( fname, "_group_");
      strcat( fname, setup_groups[i]);
      strcat( fname, ".html");
      cdh_ToLower( fname, fname);

      fp <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd>" << endl <<
"<!-- Generated by co_convert " << timestr << "  -->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<TITLE>" << endl <<
"Group Menu" << endl <<
"</TITLE>" << endl <<
"<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">" << endl <<
"</HEAD>" << endl <<
"<FRAMESET cols=\"20%,80%\">" << endl <<
"<FRAMESET rows=\"20%,80%\">" << endl <<
"<FRAME src=\"" << gname << "\" name=\"groupFrame\">" << endl <<
"<FRAME src=\"" << fname << "\" name=\"menuFrame\">" << endl <<
"</FRAMESET>" << endl;
      if ( strcmp( setup_groups_startpage[i], "") == 0)
	fp <<
"<FRAME name=\"classFrame\">" << endl;
      else
	fp <<
"<FRAME src=\"" << setup_groups_startpage[i] << "\" name=\"classFrame\">" << endl;

      fp <<
"</FRAMESET>" << endl <<
"<NOFRAMES>" << endl <<
"<H2>" << endl <<
"Frame Alert</H2>" << endl <<

"<P>" << endl <<
"This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client." << endl <<
"<BR>" << endl <<
"Link to <A HREF=\"" << html_first << ".html\">Non-frame version.</A></NOFRAMES>" << endl <<
"</HTML>" << endl;

    }

    // Create menu page
    strcpy( fname, dir);
    strcat( fname, volume_name);
    strcat( fname, "_group_");
    strcat( fname, setup_groups[i]);
    strcat( fname, ".html");
    cdh_ToLower( fname, fname);
    fp_html_group[i].open( fname);

    fp_html_group[i] <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">" << endl <<
"<!-- Generated by co_convert " << timestr << "  -->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<TITLE>" << endl <<
setup_groups[i] << endl <<
"</TITLE>" << endl <<
"<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">" << endl <<
"</HEAD>" << endl <<
"<BODY BGCOLOR=\"white\">" << endl <<
"<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">" << endl <<
"<B>" << setup_groups[i] << "</B></FONT>" << endl <<
"<BR>" << endl <<
"" << endl <<
"<TABLE BORDER=\"0\" WIDTH=\"100%\">" << endl <<
"<TR>" << endl <<
"<TD NOWRAP><FONT CLASS=\"FrameItemFont\">  " << endl;

  }
  return 1;
}

int ClassRead::html_close()
{

  fp_html_index <<
"</FONT></TD>" << endl <<
"</TR>" << endl <<
"</TABLE>" << endl <<
"" << endl <<
"</BODY>" << endl <<
"</HTML>" << endl;
  fp_html_index.close();

  for ( int i = 0; i < setup_group_cnt; i++) {
    fp_html_group[i] <<
"</FONT></TD>" << endl <<
"</TR>" << endl <<
"</TABLE>" << endl <<
"" << endl <<
"</BODY>" << endl <<
"</HTML>" << endl;
    fp_html_group[i].close();
  }

  return 1;
}

int ClassRead::html_class()
{
  char fname[200];
  int i;
  char html_file_name[80];
  char full_class_name[80];
  char ref_name[200];
  char struct_file[100];
  char low_volume_name[80];
  char low_class_name[80];
  char txt[200];
  char timestr[80];

  time_AtoAscii( 0, time_eFormat_DateAndTime, timestr, sizeof(timestr));

  cdh_ToLower( low_volume_name, volume_name);
  cdh_ToLower( low_class_name, class_name);

  struct_get_filename( fname);
  src_filename_to_html( struct_file, fname);

  strcpy( full_class_name, volume_name);
  strcat( full_class_name, ":");
  strcat( full_class_name, class_name);

  strcpy( html_file_name, low_volume_name);
  strcat( html_file_name, "_");
  strcat( html_file_name, low_class_name);

  // Add into index file
  fp_html_index <<
"<A HREF=\"" << html_file_name << ".html\" TARGET=\"classFrame\">" << class_name << "</A>" << endl <<
"<BR>" << endl;

  // Add into group file
  for ( int i = 0; i < doc_group_cnt; i++) {
    for ( int j = 0; j < setup_group_cnt; j++) {
      if ( cdh_NoCaseStrcmp( doc_groups[i], setup_groups[j]) == 0) {
	fp_html_group[j] <<
"<A HREF=\"" << html_file_name << ".html\" TARGET=\"classFrame\">" << class_name << "</A>" << endl <<
"<BR>" << endl;
      }
    }
  }

  // Create class html file

  strcpy( fname, dir);
  strcat( fname, html_file_name);
  strcat( fname, ".html");
  cdh_ToLower( fname, fname);
  html_clf = new CnvFile();
  html_clf->f.open( fname);

  fp_tmp.open( cread_cTmpFile1);

  fp_tmp <<
"<HR><BR>" << endl <<
"<A NAME=\"detail\"><H1>Attributes detail</H1></A>" << endl;

  html_class_open = 1;

  html_clf->f <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">" << endl <<
"<!-- Generated by co_convert " << timestr << "  -->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<TITLE>" << endl <<
"  Class  " << full_class_name << endl <<
"</TITLE>" << endl <<
"<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">" << endl <<
"</HEAD>" << endl <<
"<BODY BGCOLOR=\"white\">" << endl <<
"" << endl <<
"<!-- ========== START OF NAVBAR ========== -->" << endl <<
"<A NAME=\"navbar_top\"><!-- --></A>" << endl <<
"<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\">" << endl <<
"<TR>" << endl <<
"<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">" << endl <<
"<A NAME=\"navbar_top_firstrow\"><FONT  CLASS=\"NavBarFont1Rev\"><B>Volume " << volume_name << "</B></FONT></A>" << endl <<
"</TD>" << endl <<
"</TR>" << endl <<
endl <<
"<TR>" << endl <<
"<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">" << endl <<
"  Attributes: &nbsp;<A HREF=\"#RtBody\">Runtime</A>" << endl <<
"&nbsp;|&nbsp;<A HREF=\"#DevBody\">Development</A>" << endl <<
"&nbsp;|&nbsp;<A HREF=\"#SysBody\">System</A>" << endl <<
"&nbsp;|&nbsp;<A HREF=\"#template\">Template</A>" << endl <<
"&nbsp;|&nbsp;<A HREF=\"#detail\">Detail</A>" << endl <<
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C Binding: " << endl <<
"&nbsp;<A HREF=\"" << struct_file << "#" << class_name << "\">Struct</A>" << endl;

  if ( doc_fresh && strcmp( doc_code, "") != 0) {
    src_filename_to_html( ref_name, doc_code);
    html_clf->f <<
"&nbsp;|&nbsp;<A HREF=\"" << ref_name << "#" << low_class_name << "\">Code</A>" << endl;
  }

  html_clf->f <<
"</FONT></TD>" << endl <<
"<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">" << endl <<
"  <A HREF=\"" << low_volume_name << "_index.html\" TARGET=\"_top\"><B>INDEX</B></A>  &nbsp;" << endl <<
"&nbsp;<A HREF=\"" << html_file_name << ".html\" TARGET=\"_top\"><B>NO INDEX</B></A></FONT></TD>" << endl <<
"</TR>" << endl <<
"</TABLE>" << endl <<
"<!-- =========== END OF NAVBAR =========== -->" << endl <<
endl <<
"<HR>" << endl <<
"<!-- ======== START OF CLASS DATA ======== -->" << endl <<
"<H2>" << endl <<
"Class " << class_name << "</H2>" << endl <<
"<HR>" << endl <<
"<DL>" << endl;
  if ( doc_fresh && strcmp( doc_author, "") != 0)
  {
    html_clf->f <<
"<DT><B>Author</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << doc_author << "<DT>" << endl;
  }

  if ( doc_fresh && strcmp( doc_version, "") != 0)
  {
    html_clf->f <<
"<DT><B>Version</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << doc_version << "<DT>" << endl;
  }
  if ( doc_fresh && strcmp( doc_code, "") != 0)
  {
    html_clf->f <<
      "<DT><B>Code</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A HREF=\"" << ref_name << "#" << low_class_name << "\"><FONT size=\"-1\">" << doc_code << "</FONT></A><DT>" << endl;
  }

  html_clf->f <<
"<BR><DT><B>Description</B><DT><BR>" << endl <<
"</DL><DIV ID=\"description\"><XMP>" << endl;

  if ( doc_fresh) {
    for ( i = 0; i < doc_cnt; i++) {
      remove_spaces( doc_text[i], txt);
      if ( strncmp( low(txt), "@image", 6) == 0)  {
	char imagefile[80];

	remove_spaces( txt + 6, imagefile);
	html_clf->f << "</XMP><IMG SRC=\"" << imagefile << "\"><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@b", 2) == 0)  {
	html_clf->f << "</XMP><B><FONT SIZE=\"3\">" << txt + 2 << "</FONT></B><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@h1", 3) == 0)  {
	html_clf->f << "</XMP><H3>" << txt + 3 << "</H3><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@h2", 3) == 0)  {
	html_clf->f << "</XMP><H4>" << txt + 3 << "</H4><XMP>" << endl;
      }
      else
	html_clf->f << doc_text[i] << endl;
    }
  }
  html_clf->f <<
"</XMP>" << endl;

  for ( i = 0; i < doc_link_cnt; i++) {
    html_clf->f <<
"  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\"" << doc_link_ref[i] << "\" TARGET=\"_self\"><FONT size=\"-1\"> " << doc_link_text[i] <<"</FONT></A><BR>" << endl;
  }
  for ( i = 0; i < doc_clink_cnt; i++) {
    html_clf->f <<
"  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\"" << doc_clink_ref[i] << "\" TARGET=\"_self\"><FONT size=\"-1\"> " << doc_clink_text[i] <<"</FONT></A><BR>" << endl;
  }
  html_clf->f <<
"</DIV>" << endl;  
  return 1;
}

int ClassRead::html_body()
{
  char struct_name[80];
  char fname[200];
  char struct_file[80];

  struct_get_filename( fname);
  src_filename_to_html( struct_file, fname);

  if ( strcmp( low(body_name), "devbody") == 0)
    strcpy( struct_name, "");
  else
  {
    strcpy( struct_name, "pwr_sClass_");
    if ( strcmp( body_structname, "") == 0)
      strcat( struct_name, class_name);
    else
      strcat( struct_name, body_structname);
  }

  html_clf->f <<
"<!-- =========== BODY =========== -->" << endl <<
endl <<
"<HR><BR>" << endl <<
"<A NAME=\"" << body_name << "\"><!-- --></A>" << endl <<
"<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" WIDTH=\"100%\">" << endl <<
"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">" << endl <<
"<TD COLSPAN=3><FONT SIZE=\"+2\">" << endl <<
"<B>" << body_name << " attributes</B></FONT>" <<
"<FONT SIZE=\"+1\"<B>&nbsp;&nbsp;&nbsp;&nbsp; <A HREF=\"" << struct_file << "#" << class_name << "\">" << struct_name << "</A></B></FONT></TD>" << endl <<
"</TR>" << endl;

  return 1;
}

int ClassRead::html_body_close()
{
  html_clf->f <<
"</TABLE>" << endl;

  return 1;
}

int ClassRead::html_graphplcnode()
{
  int i;

  html_clf->f <<
"<!-- =========== GRAPHPLCNODE =========== -->" << endl <<
endl <<
"<HR><BR>" << endl <<
"<A NAME=\"GraphPlcNode\"><!-- --></A>" << endl <<
"<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" WIDTH=\"100%\">" << endl <<
"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">" << endl <<
"<TD COLSPAN=2><FONT SIZE=\"+2\">" << endl <<
"<B>" << graphplcnode_name << "</B></FONT></TD>" << endl <<
"</TR>" << endl;

  for ( i = 0; i < doc_cnt; i += 2)
  {
    html_clf->f <<
"<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">" << endl <<
"<TD><CODE><B>" << doc_text[i] << "</B></CODE></TD>" << endl <<
"<TD><CODE>" << doc_text[i+1] << "</CODE></TD>" << endl;
  }
  html_clf->f << "</TABLE>" << endl;

  return 1;
}

int ClassRead::html_graphplccon()
{
  int i;

  html_clf->f <<
"<!-- =========== GRAPHPLCCON =========== -->" << endl <<
endl <<
"<HR><BR>" << endl <<
"<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" WIDTH=\"100%\">" << endl <<
"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">" << endl <<
"<TD COLSPAN=2><FONT SIZE=\"+2\">" << endl <<
"<B>" << graphplccon_name << "</B></FONT></TD>" << endl <<
"</TR>" << endl;

  for ( i = 0; i < doc_cnt; i += 2)
  {
    html_clf->f <<
"<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">" << endl <<
"<TD><CODE><B>" << doc_text[i] << "</B></CODE></TD>" << endl <<
"<TD><CODE>" << doc_text[i+1] << "</CODE></TD>" << endl;
  }
  html_clf->f << "</TABLE>" << endl;

  return 1;
}

int ClassRead::html_template()
{
  int i;

  if ( !html_class_open)
    return 1;

  html_clf->f <<
"<!-- =========== TEMPLATE =========== -->" << endl <<
endl <<
"<HR><BR>" << endl <<
"<A NAME=\"template\"><!-- --></A>" << endl <<
"<TABLE BORDER=\"1\" CELLPADDING=\"3\" CELLSPACING=\"0\" WIDTH=\"100%\">" << endl <<
"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">" << endl <<
"<TD COLSPAN=2><FONT SIZE=\"+2\">" << endl <<
"<B>Template Object</B></FONT></TD>" << endl <<
"</TR>" << endl;

  for ( i = 0; i < doc_cnt; i += 2)
  {
    html_clf->f <<
"<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">" << endl <<
"<TD><CODE><B>" << doc_text[i] << "</B></CODE></TD>" << endl <<
"<TD><CODE>" << doc_text[i+1] << "</CODE></TD>" << endl;
  }
  html_clf->f << "</TABLE>" << endl;

  return 1;
}

int ClassRead::html_class_close()
{
  fp_tmp.close();

  // Copy temporary file
  copy_tmp_file( cread_cTmpFile1, html_clf->f);

  html_clf->f <<
"<!-- ========= END OF CLASS DATA ========= -->" << endl <<
"</BODY>" << endl <<
"</HTML>" << endl;

  html_clf->f.close();
  delete html_clf;

  html_class_open = 0;

  return 1;
}

int ClassRead::html_attribute()
{
  int i;
  char txt[200];
  char typeref_href[80];
  char attrtype_href[80];

  if ( strncmp( attr_typeref, "pwr_eClass_", 11)  == 0) {
    strcpy( typeref_href, &attr_typeref[11]);
    strcpy( attr_typeref, typeref_href);    
  }
  else if ( strncmp( attr_typeref, "pwr_eType_", 10)  == 0) {
    strcpy( typeref_href, &attr_typeref[10]);
    strcpy( attr_typeref, typeref_href);    
  }
  sprintf( typeref_href, "pwrs_%s.html", low(attr_typeref));

  sprintf( attrtype_href, "pwrs_%s.html", low(attr_type));

  // Summary

  html_clf->f <<
"<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">" << endl <<
"<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">" << endl <<
"<A HREF=\"" << typeref_href << "\">";
  
  if ( attr_array && attr_pointer)
    html_clf->f <<
"<CODE>Array of pointers to "<< attr_typeref << "</CODE></FONT></A></TD>" << endl;
  else if ( attr_array)
    html_clf->f <<
"<CODE>Array of "<< attr_typeref << "</CODE></FONT></A></TD>" << endl;
  else if ( attr_pointer)
    html_clf->f <<
"<CODE>Pointer to " << attr_typeref << "</CODE></FONT></A></TD>" << endl;
  else
    html_clf->f <<
"<CODE>" << attr_typeref << "</CODE></FONT></A></TD>" << endl;

  html_clf->f <<
"</A><TD><A HREF=\"#" << attr_name << "\"><CODE><B>" << attr_name << "</B></CODE></A></TD>" << endl <<
"<TD>";
  if ( doc_fresh)
  {
    if ( strcmp( doc_summary, "") == 0) 
    {
      for ( i = 0; i < doc_cnt; i++) {
	remove_spaces( doc_text[i], txt);
	if ( strncmp( low(txt), "@image", 6) == 0) {
	  continue;
	}
	else if ( strncmp( low(txt), "@b", 2) == 0)  {
	  html_clf->f << "</XMP><B><FONT SIZE=\"3\">" << txt + 2 << "</FONT></B><XMP>" << endl;
	}
	else if ( strncmp( low(txt), "@h1", 3) == 0)  {
	  html_clf->f << "<H3>" << txt + 3 << "</H3>" << endl;
	}
	else if ( strncmp( low(txt), "@h2", 3) == 0)  {
	  html_clf->f << "<H4>" << txt + 3 << "</H4>" << endl;
	}
	else {
	  html_clf->f << doc_text[i];
	  if ( i < doc_cnt - 1)
	    html_clf->f << "<BR>" << endl;
	}
      }
    }
    else
      html_clf->f << doc_summary << endl;
  }
  else
    html_clf->f << "<BR>" << endl;

  html_clf->f <<
"</TD>" << endl;


  // Detail

  fp_tmp <<
"<HR>" << endl <<
"<A NAME=\"" << attr_name << "\"> <H3>" <<
"<FONT SIZE=\"-1\">" << attr_type << "</FONT> " << attr_name << "</H3></A>" << endl <<
    "<DL><DT>" << endl;

  if ( attr_array && attr_pointer)
    fp_tmp <<
"<CODE><B>Type</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Array of pointers to <A HREF=\"" << typeref_href << "\">" << attr_typeref << "</A></CODE><DT>" << endl;
  else if ( attr_array)
    fp_tmp <<
"<CODE><B>Type</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Array of <A HREF=\"" << typeref_href << "\">" << attr_typeref << "</A></CODE><DT>" << endl;
  else if ( attr_pointer)
    fp_tmp <<
"<CODE><B>Type</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pointer to <A HREF=\"" << typeref_href << "\">" << attr_typeref << "</A></CODE><DT>" << endl;
  else
    fp_tmp <<
"<CODE><B>Type</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\"" << typeref_href << "\">" << attr_typeref << "</A></CODE><DT>" << endl;

  fp_tmp <<
    "<DT><CODE><B><A HREF=\"" << attrtype_href << "#Flags\">Flags</A></B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << attr_flags << "</CODE><DT>" << endl;

  if ( attr_array)
    fp_tmp <<
"<DT><CODE><B>Elements</B>&nbsp;&nbsp;" << attr_elements << "</CODE><DT>" << endl;

  fp_tmp <<
"<DT><CODE><B>Body</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << body_name << "</CODE><DT>" << endl <<
    "<DT><CODE><B>Class</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\"" << attrtype_href << "\">$" << attr_type << "</A></CODE><DT>" << endl;

  fp_tmp <<
"<BR>" << endl <<
"<CODE><B>Description</B></CODE><DT></DL>" << endl <<
"<DIV ID=\"description\"><XMP>" << endl;

  if ( doc_fresh) {
    for ( i = 0; i < doc_cnt; i++) {
      remove_spaces( doc_text[i], txt);
      if ( strncmp( low(txt), "@image", 6) == 0)  {
	char imagefile[80];

	remove_spaces( txt + 6, imagefile);
	fp_tmp << "</XMP><IMG SRC=\"" << imagefile << "\"><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@b", 2) == 0)  {
	fp_tmp << "</XMP><B><FONT SIZE=\"3\">" << txt + 2 << "</FONT></B><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@h1", 3) == 0)  {
	fp_tmp << "</XMP><H3>" << txt + 3 << "</H3><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@h2", 3) == 0)  {
	fp_tmp << "</XMP><H4>" << txt + 3 << "</H4><XMP>" << endl;
      }
      else
	fp_tmp << doc_text[i] << endl;
    }
  }
  fp_tmp <<
"</XMP></DIV>" << endl;

  return 1;
}


int ClassRead::html_typedef()
{
  char fname[200];
  int i;
  char html_file_name[80];
  char full_class_name[80];
  char ref_name[200];
  char struct_file[100];
  char low_volume_name[80];
  char low_class_name[80];
  char txt[200];

  strcpy( class_name, typedef_name);

  cdh_ToLower( low_volume_name, volume_name);
  cdh_ToLower( low_class_name, class_name);

  struct_get_filename( fname);
  src_filename_to_html( struct_file, fname);

  strcpy( full_class_name, volume_name);
  strcat( full_class_name, ":");
  strcat( full_class_name, class_name);

  strcpy( html_file_name, low_volume_name);
  strcat( html_file_name, "_");
  strcat( html_file_name, low_class_name);

  // Add into index file
  fp_html_index <<
"<A HREF=\"" << html_file_name << ".html\" TARGET=\"classFrame\">" << class_name << "</A>" << endl <<
"<BR>" << endl;

  // Add into group file
  for ( int i = 0; i < doc_group_cnt; i++) {
    for ( int j = 0; j < setup_group_cnt; j++) {
      if ( cdh_NoCaseStrcmp( doc_groups[i], setup_groups[j]) == 0) {
	fp_html_group[j] <<
"<A HREF=\"" << html_file_name << ".html\" TARGET=\"classFrame\">" << class_name << "</A>" << endl <<
"<BR>" << endl;
      }
    }
  }

  // Create class html file

  strcpy( fname, dir);
  strcat( fname, html_file_name);
  strcat( fname, ".html");
  cdh_ToLower( fname, fname);
  html_clf = new CnvFile();
  html_clf->f.open( fname);

  fp_tmp.open( cread_cTmpFile1);


  html_class_open = 1;

  html_clf->f <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">" << endl <<
"<!-- Generated by pwr_cnv-->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<TITLE>" << endl <<
": Type  " << full_class_name << endl <<
"</TITLE>" << endl <<
"<link rel=\"stylesheet\" type=\"text/css\" href=\"orm.css\">" << endl <<
"</HEAD>" << endl <<
"<BODY BGCOLOR=\"white\">" << endl <<
"" << endl <<
"<!-- ========== START OF NAVBAR ========== -->" << endl <<
"<A NAME=\"navbar_top\"><!-- --></A>" << endl <<
"<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\">" << endl <<
"<TR>" << endl <<
"<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">" << endl <<
"<A NAME=\"navbar_top_firstrow\"><FONT  CLASS=\"NavBarFont1Rev\"><B>Volume " << volume_name << "</B></FONT></A>" << endl <<
"</TD>" << endl <<
"</TR>" << endl <<
endl <<
"<TR>" << endl <<
"<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">" << endl;
  if ( doc_fresh && strcmp( doc_code, "") != 0)
  {
    src_filename_to_html( ref_name, doc_code);
    html_clf->f <<
" C Binding: &nbsp;<A HREF=\"" << ref_name << "#" << low_class_name << "\">Typedef</A>" << endl;
  }
  for ( i = 0; i < 50; i++)
    html_clf->f << "&nbsp;";
  html_clf->f <<
"</FONT></TD>" << endl <<
"<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">" << endl <<
"  <A HREF=\"" << low_volume_name << "_index.html\" TARGET=\"_top\"><B>INDEX</B></A>  &nbsp;" << endl <<
"&nbsp;<A HREF=\"" << html_file_name << ".html\" TARGET=\"_top\"><B>NO INDEX</B></A></FONT></TD>" << endl <<
"</TR>" << endl <<
"</TABLE>" << endl <<
"<!-- =========== END OF NAVBAR =========== -->" << endl <<
endl <<
"<HR>" << endl <<
"<!-- ======== START OF CLASS DATA ======== -->" << endl <<
"<H2>" << endl <<
"Type " << class_name << "</H2>" << endl <<
"<HR>" << endl <<
"<DL>" << endl;
  if ( doc_fresh && strcmp( doc_author, "") != 0)
  {
    html_clf->f <<
"<DT><B>Author</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << doc_author << "<DT>" << endl;
  }

  if ( doc_fresh && strcmp( doc_version, "") != 0)
  {
    html_clf->f <<
"<DT><B>Version</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << doc_version << "<DT>" << endl;
  }
  if ( doc_fresh && strcmp( doc_code, "") != 0)
  {
    html_clf->f <<
"<DT><B>Code</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" << doc_code << "<DT>" << endl;
  }

  html_clf->f <<
"<BR><DT><B>Description</B><DT><BR>" << endl <<
"</DL><DIV ID=\"description\"><XMP>" << endl;

  if ( doc_fresh) {
    for ( i = 0; i < doc_cnt; i++) {
      remove_spaces( doc_text[i], txt);
      if ( strncmp( low(txt), "@image", 6) == 0)  {
	char imagefile[80];

	remove_spaces( txt + 6, imagefile);
	html_clf->f << "</XMP><IMG SRC=\"" << imagefile << "\"><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@b", 2) == 0)  {
	html_clf->f << "</XMP><B><FONT SIZE=\"3\">" << txt + 2 << "</FONT></B><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@h1", 3) == 0)  {
	html_clf->f << "</XMP><H3>" << txt + 3 << "</H3><XMP>" << endl;
      }
      else if ( strncmp( low(txt), "@h2", 3) == 0)  {
	html_clf->f << "</XMP><H4>" << txt + 3 << "</H4><XMP>" << endl;
      }
      else
	html_clf->f << doc_text[i] << endl;
    }
  }
  html_clf->f <<
"</XMP></DIV>" << endl;

  for ( i = 0; i < doc_link_cnt; i++) {
    html_clf->f <<
"  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\"" << doc_link_ref[i] << "\" TARGET=\"_self\"><FONT size=\"-1\"> " << doc_link_text[i] <<"</FONT></A><BR>" << endl;
  }
  for ( i = 0; i < doc_clink_cnt; i++) {
    html_clf->f <<
"  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF=\"" << doc_clink_ref[i] << "\" TARGET=\"_self\"><FONT size=\"-1\"> " << doc_clink_text[i] <<"</FONT></A><BR>" << endl;
  }
  html_clf->f <<
"</FONT>" << endl;

  fp_tmp.close();

  // Copy temporary file
  copy_tmp_file( cread_cTmpFile1, html_clf->f);

  html_clf->f <<
"<!-- ========= END OF CLASS DATA ========= -->" << endl <<
"</BODY>" << endl <<
"</HTML>" << endl;

  html_clf->f.close();
  delete html_clf;

  html_class_open = 0;

  return 1;
}






