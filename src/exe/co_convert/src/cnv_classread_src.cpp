#include <iostream.h>
#include <fstream.h>
#include <float.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

extern "C" {
#include "pwr.h"
#include "co_dcli.h"
#include "co_cdh.h"
}
#include "cnv_classread.h"

int ClassRead::src_read( char *filename)
{
  int sts;
  char orig_line[400];
  char line[400];
  char	line_part[4][80];
  int nr;

  fp = fopen( filename, "r");
  if ( !fp)
    return 0;

  state = 0;
  doc_fresh = 0;

  src_html_init( filename);

  while( 1)
  {
    sts = read_line( orig_line, sizeof(orig_line), fp);
    if ( !sts)
      linetype = cread_eLine_EOF;
    else
    {
      remove_spaces( orig_line, line);
      if ( strcmp( line, "") == 0)
        continue;

      if ( strncmp( line, "/*_*", 4) != 0 &&
           !(state & cread_mState_Doc))
      {
        src_html_line( orig_line);
        continue;
      }

      nr = dcli_parse( line, " 	=", "", (char *)line_part,
                	sizeof( line_part) / sizeof( line_part[0]), 
			sizeof( line_part[0]), 0);

      if ( strcmp( low( line_part[0]), "/*_*") == 0)
        linetype = cread_eLine_Doc;
      else if ( strcmp( low( line_part[0]), "*/") == 0)
        linetype = cread_eLine_DocEnd;

      switch( linetype)
      {
        case cread_eLine_Doc:
          state |= cread_mState_Doc;
          strcpy( src_aref, "");
          strcpy( src_aref_text, "");
          break;
        case cread_eLine_DocEnd:
          state &= ~cread_mState_Doc;
          break;
        case cread_eLine_EOF:
          break;

        default:
          printf( "Error, unknown linetype\n");
      }
    }
    if ( state & cread_mState_Doc)
    {
      if ( strcmp( low(line_part[0]), "@aref") == 0)
      {
        if ( nr > 1)
          strcpy( src_aref, line_part[1]);
        if ( nr > 2)
          strcpy( src_aref_text, line_part[2]);
        src_html_aref();
      }
      if ( strstr( line, "*/"))
        state &= ~cread_mState_Doc;
    }

    if ( linetype ==  cread_eLine_EOF)
      break;
  }

  if ( generate_html && html_class_open)
    html_class_close();
  if ( generate_xtthelp && xtthelp_index_open)
    xtthelp_class_close();

  fclose(fp);
  src_html_close();
  return 1;
}

int ClassRead::src_html_init( char *filename)
{
  char fname[200];
  char dir_fname[200];

  src_filename_to_html( fname, filename);
  strcpy( dir_fname, dir);
  strcat( dir_fname, fname);

  // Open html file
  fp_src_html.open( dir_fname);

  fp_src_html <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Frameset//EN\"\"http://www.w3.org/TR/REC-html40/frameset.dtd\">" << endl <<
"<!--NewPage-->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<!-- Generated by wbdoc on... -->" << endl <<
"<TITLE>" << endl <<
filename << endl <<
"</TITLE>" << endl <<
"</HEAD>" << endl <<
"<BODY BGCOLOR=\"white\">" << endl <<
"<CODE><XMP>" << endl;

  return 1;
}

int ClassRead::src_html_close()
{
  fp_src_html <<
"</XMP></CODE>" << endl <<
"</BODY>" << endl <<
"</HTML>" << endl;
  fp_src_html.close();

  return 1;
}

int ClassRead::src_html_line( char *line)
{
  fp_src_html << line << endl;

  return 1;
}

int ClassRead::src_html_aref()
{
  fp_src_html <<
"</XMP></CODE>" << endl <<
"<HR><BR>" << endl <<
"<A NAME=\"" << src_aref << "\"><H1>" << src_aref_text << "</H1></A>" << endl <<
"<HR><CODE><XMP>" << endl;
  
  return 1;
}

void ClassRead::src_filename_to_html( char *fname, char *filename)
{
  char *s;

  // Convert filename ...name.ext... -> name_ext.html
  if ( (s = strrchr( filename, '/')))
    strcpy( fname, s+1);
  else if ( (s = strrchr( filename, '>')))
    strcpy( fname, s+1);
  else if ( (s = strrchr( filename, ']')))
    strcpy( fname, s+1);
  else if ( (s = strrchr( filename, ':')))
    strcpy( fname, s+1);
  else
    strcpy( fname, filename);

  if ( (s = strrchr( fname, ';')))
    *s = 0;
  if ( (s = strrchr( fname, '.')))
    *s = '_';
  strcat( fname, ".html");
}
