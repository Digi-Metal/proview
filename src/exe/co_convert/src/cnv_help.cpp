/* cnv_help.cpp --

   PROVIEW/R
   Copyright (C) 1996-98 by Mandator AB.

   Convert xtt help file to html. */

/*_Include files_________________________________________________________*/

#include <iostream.h>
#include <fstream.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

extern "C" {
#include "co_cdh.h"
#include "co_dcli.h"
}

#include "co_nav_help.h"
#include "cnv_help.h"

#define CNV_TAB 18

/* Nice functions */
#define ODD(a)	(((int)(a) & 1) != 0)
#define EVEN(a)	(((int)(a) & 1) == 0)
#define max(Dragon,Eagle) ((Dragon) > (Eagle) ? (Dragon) : (Eagle))
#define min(Dragon,Eagle) ((Dragon) < (Eagle) ? (Dragon) : (Eagle))
#ifndef __ALPHA
#define abs(Dragon) ((Dragon) >= 0 ? (Dragon) : (-(Dragon)))
#endif

XhelpToHtml::XhelpToHtml( char *x_name, char *x_directory)
{
  char *s;

  strcpy( filename, x_name);
  if ( (s = strrchr(x_name,'/')))
    strcpy( name, s+1);
  else
    strcpy( name, x_name);
  if ((s = strrchr( name, '.')))
    *s = 0;
  strcpy( directory, x_directory);

  generate();
}

void XhelpToHtml::subject_to_fname( char *fname, char *subject, int path)
{
  char *s, *t;

  if ( path) {
    strcpy( fname, directory);
    strcat( fname, name);
  }
  else
    strcpy( fname, name);
  strcat( fname, "_");
  t = fname + strlen(fname);
  for ( s = subject; *s; s++,t++) {
    if ( *s == ' ')
      *t = '_';
    else
      *t = *s;
  }
  *t = 0;
  strcat( fname, ".html");
  cdh_ToLower( fname, fname);
}

void *wnav_help_insert_cb( void *ctx, navh_eItemType item_type, char *text1,
		      char *text2, char *text3, char *link, 
		      char *link_bookmark, char *file_name,
		      navh_eHelpFile file_type, int help_index, 
		      char *bookmark)
{
  XhelpToHtml *xh = (XhelpToHtml *)ctx;
  int i;
  static int in_table = 0;

  if ( (text2 && strcmp(text2, "") != 0) || 
       (text3 && strcmp(text3, "") != 0) ) {
    if ( !in_table) {
      xh->fp << "<TABLE>" << endl;
      in_table = 1;
    }
  }
  else {
    if ( in_table) {
      // Close table (keep if empty line) 
      if ( !( strcmp( text1, "") == 0 && 
	      (item_type == navh_eItemType_Help || 
	       item_type == navh_eItemType_HelpBold))) {
        xh->fp << "</TABLE>" << endl;
        in_table = 0;
      }
    }
  }
  switch ( item_type) {
    case navh_eItemType_Topic:
    {
      char fname[200];

      xh->subject_to_fname( fname, text1, 1);
      xh->fp.open( fname);
      xh->fp <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd>" << endl <<
"<!--NewPage-->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<!-- Generated by co_convert.-->" << endl <<
"<TITLE>" << endl <<
"Generated Documentation (Untitled)" << endl <<
"</TITLE>" << endl <<
"<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"pwr_css.css\" TITLE=\"Style\">" << endl <<
"</HEAD>" << endl <<
	//"<H2>" << text1 << "</H2><BR>" << endl <<
"<P>" << endl;
      return NULL;
    } 
    case navh_eItemType_EndTopic:
    {
      xh->fp.close();
      return NULL;
    }
    case navh_eItemType_Help:
    {      

      if ( strcmp( link, "") != 0) {
        char fname[200];

        if ( (strstr( link, ".htm") == 0) || (strstr( link, ".pdf") == 0)) {
          strcpy( fname, link);
        }
        else {
          xh->subject_to_fname( fname, link, 0);
        
          if ( strcmp( link_bookmark, "") != 0) {
	    strcat( fname, "#");
	    strcat( fname, link_bookmark);
          }
        }
        xh->fp << "<A HREF=\"" <<  fname << "\">";
      }
      else if ( bookmark) {
        xh->fp << "<A NAME=\"" << bookmark << "\">";
      }

      if ( ! in_table) {
        xh->fp << text1;
        if ( strcmp( link, "") != 0 || bookmark)
          xh->fp << "<BR></A>" << endl;
        else
          xh->fp << "<BR>" << endl;
      }
      else {
	xh->fp << "<TR><TD>" << text1;
        if ( strcmp( text2, "") != 0 || strcmp( text3, "") != 0) {
          for ( i = 0; i < (int)(CNV_TAB - strlen(text1)); i++)
            xh->fp << "&nbsp;";
          xh->fp << "&nbsp;&nbsp;</TD><TD>" << text2;
          if ( strcmp( text3, "") != 0) {
            for ( i = 0; i < (int)(CNV_TAB - strlen(text2)); i++)
              xh->fp << "&nbsp;";
            xh->fp << "&nbsp;&nbsp;</TD><TD>" << text3;
          }
        }
        xh->fp << "</TD></TR>";
        if ( strcmp( link, "") != 0 || bookmark)
          xh->fp << "</A>" << endl;
        else
          xh->fp << endl;
      }
      return NULL;
    }
    case navh_eItemType_HelpBold:
    {
      char fname[200];
      if ( strcmp( link, "") != 0) {
        if ( (strstr( link, ".htm") == 0) || (strstr( link, ".pdf") == 0)) {
          strcpy( fname, link);
        }
        else {
          xh->subject_to_fname( fname, link, 0);
          if ( strcmp( link_bookmark, "") != 0) {
	    strcat( fname, "#");
	    strcat( fname, link_bookmark);
          }
        }
        if ( !in_table)
          xh->fp << "<A HREF=\"" <<  fname << "\">";
      }
      else if ( bookmark) {
	if ( !in_table)
          xh->fp << "<A NAME=\"" << bookmark << "\">";
      }

      if ( ! in_table) {
        xh->fp << "<B>" << text1 << "</B>"; 
        if ( strcmp( link, "") != 0 || bookmark)
          xh->fp<< "<BR></A>" << endl;
        else
          xh->fp<< "<BR>" << endl;
      }
      else {
	xh->fp << "<TR><TD><B>";
        if ( strcmp( link, "") != 0)
          xh->fp << "<A HREF=\"" <<  fname << "\">";
        else if ( bookmark != 0)
          xh->fp << "<A NAME=\"" <<  bookmark << "\">";
        xh->fp << text1;
        if ( strcmp( link, "") != 0 || bookmark)
	  xh->fp << "</A>";
        if ( strcmp( text2, "") != 0 || strcmp( text3, "") != 0) {
          for ( i = 0; i < (int)(CNV_TAB - strlen(text1)); i++)
            xh->fp << "&nbsp;";
          xh->fp << "&nbsp;&nbsp;</B></TD><TD><B>" << text2;
          if ( strcmp( text3, "") != 0) {
            for ( i = 0; i < (int)(CNV_TAB - strlen(text2)); i++)
              xh->fp << "&nbsp;";
            xh->fp << "&nbsp;&nbsp;</B></TD><TD><B>" << text3;
          }
        }
        xh->fp << "</B></TD></TR>";
        if ( strcmp( link, "") != 0 || bookmark)
          xh->fp << "</A>" << endl;
        else
          xh->fp << endl;
      }
      return NULL;
    }
    case navh_eItemType_HelpHeader:
    {
      xh->fp << "<H1>" << text1 << "</H1><BR>" << endl;
      return NULL;
    }
    case navh_eItemType_Header:
    {      
      xh->fp << "<H3>" << text1 << "</H3><BR>" << endl;
      return NULL;
    }
    case navh_eItemType_HeaderLarge:
    {      
      xh->fp << "<H2>" << text1 << "</H2><BR>" << endl;
      return NULL;
    }
    default:
      return 0;
  }
}

int XhelpToHtml::generate()
{
  int sts;
  void *bookmark_node;
  NavHelp *navhelp = new NavHelp( (void *)this, "$pwr_exe/wtt_help.dat",
				  "$pwrp_exe/xtt_help.dat");
  navhelp->insert_cb = wnav_help_insert_cb;

  sts = navhelp->help( NULL, "", navh_eHelpFile_Other, 
		       filename, &bookmark_node);
  if ( EVEN(sts)) return sts;
  delete navhelp;

  return 1;
}




