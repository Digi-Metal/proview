/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2011 SSAB Oxelosund AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

#ifndef cnv_wblto_h
#define cnv_wblto_h

#if defined __cplusplus
extern "C" {
#endif

#include "pwr.h"
#include "cnv_readwbl.h"

using namespace std;

class CnvReadWbl;

typedef enum {
  Cnv_eWblToType_Html,
  Cnv_eWblToType_H,
  Cnv_eWblToType_Xtthelp,
  Cnv_eWblToType_Ps
} Cnv_eWblToType;
  
class CnvWblTo {
 public:
  // CnvWblTo() {}
  virtual ~CnvWblTo() {}

  virtual int init( char *);
  virtual int close() { return 1;}
  virtual int class_exec() { return 1;}
  virtual int class_close() { return 1;}
  virtual int body_exec() { return 1;}
  virtual int body_close() { return 1;}
  virtual int attribute_exec() { return 1;}
  virtual int typedef_exec() { return 1;}
  virtual int typedef_close() { return 1;}
  virtual int bit_exec() { return 1;}
  virtual int graphplcnode() { return 1;}
  virtual int graphplccon() { return 1;}
  virtual int template_exec() { return 1;}
  virtual Cnv_eWblToType type() { return Cnv_eWblToType_H;} 
  virtual int class_open() { return 0;}
  virtual int index_open() { return 0;}
  virtual bool confpass() { return false;}
  virtual void set_confpass( bool conf) {};
};

#if defined __cplusplus
}
#endif
#endif

