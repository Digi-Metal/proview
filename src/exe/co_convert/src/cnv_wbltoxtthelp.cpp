/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */



#include <iostream>
#include <fstream>
#include <float.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "cnv_wbltoxtthelp.h"
#include "cnv_ctx.h"
extern "C" {
#include "pwr.h"
#include "co_cdh.h"
}
#include "co_lng.h"

static int  get_class_link( char *typeref, char *volume, char *file) {
  char tr[80];
  char v[80];

  cdh_ToLower( v, volume);

  if ( strcmp( v, "pwrs") == 0 ||
       strcmp( v, "pwrb") == 0 ||
       strcmp( v, "basecomponent") == 0 ||
       strcmp( v, "miscellaneous") == 0 ||
       strcmp( v, "nmps") == 0 ||
       strcmp( v, "opc") == 0 ||
       strcmp( v, "otherio") == 0 ||
       strcmp( v, "othermanufacturer") == 0 ||
       strcmp( v, "profibus") == 0 ||
       strcmp( v, "remote") == 0 ||
       strcmp( v, "siemens") == 0 ||
       strcmp( v, "abb") == 0)
    sprintf( file, "$pwr_lang/%s_xtthelp.dat", v);
  else
    sprintf( file, "$pwrp_exe/%s_xtthelp.dat", v);
  
  cdh_ToLower( tr, typeref);
  if ( strcmp( tr, "pwrs:class-$plcnode") == 0)
    return 0;
  if ( strstr( tr, "enum") != 0)
    return 0;
  if ( strstr( tr, "mask") != 0)
    return 0;
  if ( strncmp( tr, "string", 6) == 0)
    return 0;
  if ( strncmp( tr, "text", 4) == 0)
    return 0;
  if ( strcmp( tr, "boolean") == 0 ||
       strcmp( tr, "float32") == 0 ||
       strcmp( tr, "float64") == 0 ||
       strcmp( tr, "char") == 0 ||
       strcmp( tr, "int8") == 0 ||
       strcmp( tr, "int16") == 0 ||
       strcmp( tr, "int32") == 0 ||
       strcmp( tr, "uint8") == 0 ||
       strcmp( tr, "uint16") == 0 ||
       strcmp( tr, "uint32") == 0 ||
       strcmp( tr, "objid") == 0 ||
       strcmp( tr, "buffer") == 0 ||
       strcmp( tr, "string") == 0 ||
       strcmp( tr, "enum") == 0 ||
       strcmp( tr, "struct") == 0 ||
       strcmp( tr, "mask") == 0 ||
       strcmp( tr, "array") == 0 ||
       strcmp( tr, "time") == 0 ||
       strcmp( tr, "text") == 0 ||
       strcmp( tr, "attrref") == 0 ||
       strcmp( tr, "uint64") == 0 ||
       strcmp( tr, "int64") == 0 ||
       strcmp( tr, "classid") == 0 ||
       strcmp( tr, "typeid") == 0 ||
       strcmp( tr, "volumeid") == 0 ||
       strcmp( tr, "objectix") == 0 ||
       strcmp( tr, "refid") == 0 ||
       strcmp( tr, "deltatime") == 0 ||
       strcmp( tr, "status") == 0 ||
       strcmp( tr, "netstatus") == 0 ||
       strcmp( tr, "castid") == 0 ||
       strcmp( tr, "prostring") == 0 ||
       strcmp( tr, "disableattr") == 0 ||
       strcmp( tr, "dataref") == 0 ||
       strcmp( tr, "void") == 0)
    return 0;

  return 1;
}

int CnvWblToXtthelp::init( char *first)
{
  pwr_tFileName fname;

  strcpy( fname, ctx->dir);
  strcat( fname, ctx->rw->volume_name);
  strcat( fname, "_xtthelp.dat");

  fp_xtthelp_index.open( fname);

  ctx->set_dependfile( fname);

  fp_tmp.open( cread_cTmpFile2);

  xtthelp_index_open = 1;
  xtthelp_in_topic= 0;

  fp_xtthelp_index <<
"<TOPIC> " << ctx->rw->volume_name << endl <<
"ClassVolume " << ctx->rw->volume_name << endl << endl;

  return 1;
}

int CnvWblToXtthelp::close()
{

  fp_xtthelp_index <<
"</TOPIC>" << endl << endl;

  fp_tmp.close();

  ctx->rw->copy_tmp_file( cread_cTmpFile2, fp_xtthelp_index);
  
  fp_xtthelp_index.close();

  ctx->print_depend();

  return 1;
}

int CnvWblToXtthelp::class_exec()
{
  int i;
  char full_class_name[80];
  char link_ref[80];
  char *s;
  char txt[256];
  char prefix[80];
  int lng_sts = 1;

  if ( Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng( ctx->rw->class_name, 0);

  strcpy( full_class_name, ctx->rw->volume_name);
  strcat( full_class_name, ":");
  strcat( full_class_name, ctx->rw->class_name);
  
  // Add into index file
  fp_xtthelp_index <<
"<B>" << ctx->rw->class_name << "<T><T> " << ctx->rw->doc_summary << " <LINK> " << ctx->rw->class_name << endl;

  // Add to class file
  if ( xtthelp_in_topic)
    fp_tmp <<
"</TOPIC>" << endl;

  xtthelp_in_topic = 1;
  fp_tmp <<
"<TOPIC> " << ctx->rw->class_name << endl <<
Lng::translate("Class") << " " << full_class_name << endl <<
"<H1>" << ctx->rw->class_name << endl << endl;

  if ( !lng_sts)
    fp_tmp <<
"(" << Lng::translate( "English text not available") << ")" << endl << endl;

  if ( ctx->rw->doc_fresh && strcmp( ctx->rw->doc_author, "") != 0)
  {
    fp_tmp <<
"<B>" << Lng::translate("Author") << "<T>" << ctx->rw->doc_author << endl;
  }

  if ( ctx->rw->doc_fresh && strcmp( ctx->rw->doc_creator, "") != 0)
  {
    fp_tmp <<
"<B>" << Lng::translate("Creator") << "<T>" << ctx->rw->doc_creator << endl;
  }

  if ( ctx->rw->doc_fresh && strcmp( ctx->rw->doc_version, "") != 0)
  {
    fp_tmp <<
"<B>" << Lng::translate("Version") << "<T>" << ctx->rw->doc_version << endl;
  }

  fp_tmp <<
    "<H1>"<< Lng::translate("Description") << endl;

  if ( ctx->rw->doc_fresh) {

    for ( i = 0; i < ctx->rw->doc_cnt; i++) {
      CnvCtx::remove_spaces( ctx->rw->doc_text[i], txt);
      if ( strncmp( CnvCtx::low(txt), "@image", 6) == 0)  {
	char imagefile[80];

	CnvCtx::remove_spaces( txt + 6, imagefile);
	fp_tmp << "<IMAGE> " << imagefile << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@b", 2) == 0)  {
	fp_tmp << "<B> " << txt + 2 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@h1", 3) == 0)  {
	fp_tmp << "<H1> " << txt + 3 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@h2", 3) == 0)  {
	fp_tmp << "<H2> " << txt + 3 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@i", 2) == 0)  {
	fp_tmp << "<i>" << txt + 2 << endl;
      }
      else
	fp_tmp << ctx->rw->doc_text[i] << endl;
    }
  }
  for ( i = 0; i < ctx->rw->doc_xlink_cnt; i++) {
    if ( strncmp( ctx->rw->doc_xlink_ref[i], "../../en_us/man_exlib_", 
		  strlen("../../en_us/man_exlib_")) == 0)
      strncpy( link_ref, &ctx->rw->doc_xlink_ref[i][0] + strlen("../../en_us/man_exlib_"),
	       sizeof(link_ref));
    else
      strncpy( link_ref, ctx->rw->doc_xlink_ref[i], sizeof(link_ref));
    
    if ( (s = strrchr( link_ref, '.')))
      *s = 0;
    strcat( link_ref, ", ,$pwr_exe/en_us/man_exlib.dat");
    fp_tmp << "      " << ctx->rw->doc_xlink_text[i] << " <LINK>" << link_ref << endl;
  }
  for ( i = 0; i < ctx->rw->doc_clink_cnt; i++) {
    strcpy( prefix, CnvCtx::low(ctx->rw->volume_name));
    strcat( prefix, "_");
    if ( strncmp( ctx->rw->doc_clink_ref[i], prefix, strlen(prefix)) == 0) {
      strcpy( link_ref, &ctx->rw->doc_clink_ref[i][strlen(prefix)]);
      if ( (s = strrchr( link_ref, '.')))
	*s = 0;
    }
    else {
      if ( (s = strchr( ctx->rw->doc_clink_ref[i], '_'))) {
	int len = s - ctx->rw->doc_clink_ref[i];
	memset( link_ref, 0, sizeof(link_ref));
	strcpy( link_ref, &ctx->rw->doc_clink_ref[i][len+1]);
	if ( (s = strrchr( link_ref, '.')))
	  *s = 0;
	strcat( link_ref, ", ,$pwr_lang/");
	strncat( link_ref, ctx->rw->doc_clink_ref[i], len);
	strcat( link_ref, "_xtthelp.dat");
      }
      else {
	strcpy( link_ref, ctx->rw->doc_clink_ref[i]);
	if ( (s = strrchr( link_ref, '.')))
	  *s = 0;
      }
    }
    fp_tmp << "      " << ctx->rw->doc_clink_text[i] << " <LINK>" << link_ref << endl;
  }
  return 1;
}

int CnvWblToXtthelp::body_exec()
{
  fp_tmp <<
"<HR>" << endl <<
"<H1>" << ctx->rw->body_name << endl;

  return 1;
}

int CnvWblToXtthelp::class_close()
{

  xtthelp_in_topic = 0;
  fp_tmp <<
"</TOPIC>" << endl << endl;

  return 1;
}

int CnvWblToXtthelp::bit_exec()
{
  int i;
  char txt[200];
  char prefix[80];
  char link_ref[80];
  char *s;
  int lng_sts = 1;

  if ( Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng( ctx->rw->typedef_name, ctx->rw->bit_name);

  if ( first_bit) {
    if ( strstr( ctx->rw->typedef_name, "Enum"))
      fp_tmp <<
	"<H1>" << Lng::translate("Enumerations") << endl;
    else 
      fp_tmp <<
	"<H1>" << Lng::translate("Bits") << endl;
    first_bit = 0;
  }

  fp_tmp << "<B>" << ctx->rw->bit_name << endl;

  // char bitchar = _tolower(ctx->rw->typedef_typeref[0]);
  //fp_tmp << "  pwr_" << bitchar << ctx->rw->typedef_name << "_" << ctx->rw->bit_pgmname << endl;

  if ( ctx->rw->doc_fresh)
  {
    for ( i = 0; i < ctx->rw->doc_cnt; i++) {
      CnvCtx::remove_spaces( ctx->rw->doc_text[i], txt);
      if ( strncmp( CnvCtx::low(txt), "@image", 6) == 0)  {
	char imagefile[80];

	CnvCtx::remove_spaces( txt + 6, imagefile);
	fp_tmp << "<IMAGE> " << imagefile << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@b", 2) == 0)  {
	fp_tmp << "<B> " << txt + 2 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@h1", 3) == 0)  {
	fp_tmp << "<H1> " << txt + 3 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@h2", 3) == 0)  {
	fp_tmp << "<H2> " << txt + 3 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@i", 2) == 0)  {
	fp_tmp << "<i>" << txt + 2 << endl;
      }
      else
	fp_tmp << ctx->rw->doc_text[i] << endl;
    }
  }
  for ( i = 0; i < ctx->rw->doc_clink_cnt; i++) {
    strcpy( prefix, CnvCtx::low(ctx->rw->volume_name));
    strcat( prefix, "_");
    if ( strncmp( ctx->rw->doc_clink_ref[i], prefix, strlen(prefix)) == 0) {
      strcpy( link_ref, &ctx->rw->doc_clink_ref[i][strlen(prefix)]);
      if ( (s = strrchr( link_ref, '.')))
	*s = 0;
    }
    else {
      if ( (s = strchr( ctx->rw->doc_clink_ref[i], '_'))) {
	int len = s - ctx->rw->doc_clink_ref[i];
	memset( link_ref, 0, sizeof(link_ref));
	strcpy( link_ref, &ctx->rw->doc_clink_ref[i][len+1]);
	if ( (s = strrchr( link_ref, '.')))
	  *s = 0;
	strcat( link_ref, ", ,$pwr_lang/");
	strncat( link_ref, ctx->rw->doc_clink_ref[i], len);
	strcat( link_ref, "_xtthelp.dat");
      }
      else {
	strcpy( link_ref, ctx->rw->doc_clink_ref[i]);
	if ( (s = strrchr( link_ref, '.')))
	  *s = 0;
      }
    }
    fp_tmp << "      " << ctx->rw->doc_clink_text[i] << " <LINK>" << link_ref << endl;
  }
  fp_tmp << endl;

  return 1;
}

int CnvWblToXtthelp::attribute_exec()
{
  int i;
  char *s;
  int lng_sts = 1;
  pwr_tFileName link_file;

  if ( strcmp( ctx->rw->attr_typeref, "CastId") == 0 ||
       strcmp( ctx->rw->attr_typeref, "DisableAttr") == 0)
    return 1;
    
  if ( Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng( ctx->rw->class_name, ctx->rw->attr_name);

  if ( strcmp( ctx->rw->attr_graphname, "") == 0)
    fp_tmp << endl <<
"<H2>" << ctx->rw->attr_name << "<BOOKMARK>" << ctx->rw->attr_name << endl;
  else 
    fp_tmp << endl <<
"<H2>" << ctx->rw->attr_name << "       " << ctx->rw->attr_graphname << "<BOOKMARK>" << ctx->rw->attr_name << endl;
  if ( ctx->rw->attr_array && ctx->rw->attr_pointer)
    fp_tmp <<
"<B>Array[" << ctx->rw->attr_elements << "] of pointers to " << ctx->rw->attr_typeref << "   ";
  else if ( ctx->rw->attr_array)
    fp_tmp <<
"<B>Array[" << ctx->rw->attr_elements << "] of "<< ctx->rw->attr_typeref << "   ";
  else if ( ctx->rw->attr_pointer)
    fp_tmp <<
"<B>Pointer to " << ctx->rw->attr_typeref << "   ";
  else
    fp_tmp <<
"<B>" << ctx->rw->attr_typeref << "   ";

  fp_tmp <<
"$" << ctx->rw->attr_type << "   ";

  if ( strcmp( ctx->rw->attr_flags, "") != 0)
    fp_tmp <<
"Flags[" << ctx->rw->attr_flags << "]";

  if ( get_class_link(ctx->rw->attr_typeref, ctx->rw->attr_typeref_volume, link_file))
    fp_tmp << " <LINK>"  << ctx->rw->attr_typeref << ",," << link_file;
  fp_tmp << endl;

  if ( ctx->rw->doc_fresh) {
    for ( i = 0; i < ctx->rw->doc_cnt; i++) {
      if ( (s = strstr( CnvCtx::low(ctx->rw->doc_text[i]), "@image")) != 0)  {
	char imagefile[80];

	CnvCtx::remove_spaces( s + 6, imagefile);
	fp_tmp << "<IMAGE> " << imagefile << endl;
      }
      else
	fp_tmp << ctx->rw->doc_text[i] << endl;
    }
  }
  return 1;
}

int CnvWblToXtthelp::typedef_exec()
{
  int i;
  char full_class_name[80];
  char link_ref[80];
  char *s;
  char txt[256];
  char prefix[80];
  int lng_sts = 1;

  if ( Lng::current() != lng_eLanguage_en_US)
    lng_sts = ctx->rw->read_lng( ctx->rw->class_name, 0);

  strcpy( ctx->rw->class_name, ctx->rw->typedef_name);

  strcpy( full_class_name, ctx->rw->volume_name);
  strcat( full_class_name, ":");
  strcat( full_class_name, ctx->rw->class_name);
  
  // Add into index file
  fp_xtthelp_index <<
"<B>" << ctx->rw->class_name << "<T><T> " << ctx->rw->doc_summary << " <LINK> " << ctx->rw->class_name << endl;

  // Add to class file
  if ( xtthelp_in_topic)
    fp_tmp <<
"</TOPIC>" << endl;

  xtthelp_in_topic = 1;
  fp_tmp <<
"<TOPIC> " << ctx->rw->class_name << endl << "Type" << " " << full_class_name << endl <<
"<H1>" << ctx->rw->class_name << endl << endl;

  if ( !lng_sts)
    fp_tmp <<
"(" << Lng::translate( "English text not available") << ")" << endl << endl;

  if ( ctx->rw->doc_fresh && strcmp( ctx->rw->doc_author, "") != 0)
  {
    fp_tmp <<
"<B>" << Lng::translate("Author") << "<T>" << ctx->rw->doc_author << endl;
  }

  if ( ctx->rw->doc_fresh && strcmp( ctx->rw->doc_creator, "") != 0)
  {
    fp_tmp <<
"<B>" << Lng::translate("Creator") << "<T>" << ctx->rw->doc_creator << endl;
  }

  if ( ctx->rw->doc_fresh && strcmp( ctx->rw->doc_version, "") != 0)
  {
    fp_tmp <<
"<B>" << Lng::translate("Version") << "<T>" << ctx->rw->doc_version << endl;
  }

  fp_tmp <<
    "<H1>"<< Lng::translate("Description") << endl;

  if ( ctx->rw->doc_fresh) {

    for ( i = 0; i < ctx->rw->doc_cnt; i++) {
      CnvCtx::remove_spaces( ctx->rw->doc_text[i], txt);
      if ( strncmp( CnvCtx::low(txt), "@image", 6) == 0)  {
	char imagefile[80];

	CnvCtx::remove_spaces( txt + 6, imagefile);
	fp_tmp << "<IMAGE> " << imagefile << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@b", 2) == 0)  {
	fp_tmp << "<B> " << txt + 2 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@h1", 3) == 0)  {
	fp_tmp << "<H1> " << txt + 3 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@h2", 3) == 0)  {
	fp_tmp << "<H2> " << txt + 3 << endl;
      }
      else if ( strncmp( CnvCtx::low(txt), "@i", 2) == 0)  {
	fp_tmp << "<i>" << txt + 2 << endl;
      }
      else
	fp_tmp << ctx->rw->doc_text[i] << endl;
    }
  }
  for ( i = 0; i < ctx->rw->doc_clink_cnt; i++) {
    strcpy( prefix, CnvCtx::low(ctx->rw->volume_name));
    strcat( prefix, "_");
    if ( strncmp( ctx->rw->doc_clink_ref[i], prefix, strlen(prefix)) == 0) {
      strcpy( link_ref, &ctx->rw->doc_clink_ref[i][strlen(prefix)]);
      if ( (s = strrchr( link_ref, '.')))
	*s = 0;
    }
    else {
      if ( (s = strchr( ctx->rw->doc_clink_ref[i], '_'))) {
	int len = s - ctx->rw->doc_clink_ref[i];
	memset( link_ref, 0, sizeof(link_ref));
	strcpy( link_ref, &ctx->rw->doc_clink_ref[i][len+1]);
	if ( (s = strrchr( link_ref, '.')))
	  *s = 0;
	strcat( link_ref, ", ,$pwr_lang/");
	strncat( link_ref, ctx->rw->doc_clink_ref[i], len);
	strcat( link_ref, "_xtthelp.dat");
      }
      else {
	strcpy( link_ref, ctx->rw->doc_clink_ref[i]);
	if ( (s = strrchr( link_ref, '.')))
	  *s = 0;
      }
    }
    fp_tmp << "      " << ctx->rw->doc_clink_text[i] << " <LINK>" << link_ref << endl;
  }
  first_bit = 1;
  return 1;
}

int CnvWblToXtthelp::typedef_close()
{

  xtthelp_in_topic = 0;
  first_bit = 0;
  fp_tmp <<
"</TOPIC>" << endl << endl;

  return 1;
}
