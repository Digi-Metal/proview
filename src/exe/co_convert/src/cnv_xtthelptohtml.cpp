/* 
 * Proview   $Id: cnv_xtthelptohtml.cpp,v 1.8 2008-11-03 13:20:14 claes Exp $
 * Copyright (C) 2005 SSAB Oxelösund AB.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with the program, if not, write to the Free Software 
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/* cnv_xtthelptohtml.cpp --
   Convert xtt help file to html. */

/*_Include files_________________________________________________________*/

#include <iostream>
#include <fstream>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

extern "C" {
#include "co_cdh.h"
#include "co_dcli.h"
}

#include "co_nav_help.h"
#include "cnv_ctx.h"
#include "cnv_readxtthelp.h"
#include "cnv_xtthelptohtml.h"

#define CNV_TAB 18

/* Nice functions */
#define ODD(a)	(((int)(a) & 1) != 0)
#define EVEN(a)	(((int)(a) & 1) == 0)
#define max(Dragon,Eagle) ((Dragon) > (Eagle) ? (Dragon) : (Eagle))
#define min(Dragon,Eagle) ((Dragon) < (Eagle) ? (Dragon) : (Eagle))
#ifndef __ALPHA
#define abs(Dragon) ((Dragon) >= 0 ? (Dragon) : (-(Dragon)))
#endif

void CnvXtthelpToHtml::subject_to_fname( char *fname, const char *subject, int path)
{
  char *s, *t;

  if ( path) {
    strcpy( fname, ctx->dir);
    strcat( fname, ctx->rx->name);
  }
  else
    strcpy( fname, ctx->rx->name);
  strcat( fname, "_");
  t = fname + strlen(fname);
  for ( s = (char *)subject; *s; s++,t++) {
    if ( *s == ' ' || *s == '(' || *s == ')')
      *t = '_';
    else
      *t = *s;
  }
  *t = 0;
  strcat( fname, ".html");
  cdh_ToLower( fname, fname);
}

void *CnvXtthelpToHtml::insert( navh_eItemType item_type, const char *text1,
				const char *text2, const char *text3, const char *link, 
				const char *link_bookmark, const char *file_name,
				navh_eHelpFile file_type, int help_index, 
				const char *bookmark)
{
  int i;
  static int in_table = 0;

  if ( (text2 && strcmp(text2, "") != 0) || 
       (text3 && strcmp(text3, "") != 0) ) {
    if ( !in_table && cf) {
      cf->f << "<TABLE>" << endl;
      in_table = 1;
    }
  }
  else {
    if ( in_table && cf) {
      // Close table (keep if empty line) 
      if ( !( text1 && strcmp( text1, "") == 0 && 
	      (item_type == navh_eItemType_Help || 
	       item_type == navh_eItemType_HelpCode || 
	       item_type == navh_eItemType_HelpBold))) {
        cf->f << "</TABLE>" << endl;
        in_table = 0;
      }
    }
  }
  switch ( item_type) {
    case navh_eItemType_Topic:
    {
      pwr_tFileName fname;

      subject_to_fname( fname, text1, 1);
      cf = new CnvFile();
      cf->f.open( fname);
      cf->f <<
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd>" << endl <<
"<!--NewPage-->" << endl <<
"<HTML>" << endl <<
"<HEAD>" << endl <<
"<META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">" << endl <<
"<!-- Generated by co_convert.-->" << endl <<
"<TITLE>" << endl <<
"Generated Documentation (Untitled)" << endl <<
"</TITLE>" << endl <<
"<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"../pcss.css\" TITLE=\"Style\">" << endl <<
"</HEAD>" << endl <<
	//"<H2>" << text1 << "</H2><BR>" << endl <<
"<P>" << endl;
      return NULL;
    } 
    case navh_eItemType_EndTopic:
    {
      if ( !cf) 
	break;

      cf->f.close();
      delete cf;
      cf = 0;
      return NULL;
    }
    case navh_eItemType_Help:
    case navh_eItemType_HelpCode:
    {      
      if ( !cf) 
	break;

      pwr_tFileName fname;
      if ( strcmp( link, "") != 0) {

	if ( strncmp( link, "$web:", 5) == 0) {
	  if ( strncmp( &link[5], "$pwrp_web/", 10) == 0)
	    strcpy( fname, &link[15]);
	  else
	    strcpy( fname, &link[5]);
	} 
	else if ( strncmp( link, "$class:", 7) == 0) {
	  char *s;

	  // Get prefix from file
	  strcpy( fname, "./orm/");
	  s = strrchr( file_name, '/');
	  if ( s)
	    strcat( fname, s+1);
	  s = strchr( fname, '_');
	  if ( s)
	    *(s+1) = 0;
	  strcat( fname, &link[7]);
	  strcat( fname, ".html");
	} 
        else if ( (strstr( link, ".htm") != 0) || 
		  (strstr( link, ".pdf") != 0)) {
          strcpy( fname, link);
        }
        else {
          subject_to_fname( fname, link, 0);
        
          if ( strcmp( link_bookmark, "") != 0) {
	    strcat( fname, "#");
	    strcat( fname, link_bookmark);
          }
        }
	if ( !in_table)
	  cf->f << "<A HREF=\"" <<  fname << "\">";
      }
      else if ( bookmark) {
	if ( in_table) {
	  cf->f << "</TABLE>" << endl;
	  in_table = 0;
	}
        cf->f << "<A NAME=\"" << bookmark << "\">";
      }

      if ( ! in_table) {
        cf->f << text1;
        if ( strcmp( link, "") != 0 || bookmark)
          cf->f << "<BR></A>" << endl;
        else
          cf->f << "<BR>" << endl;
      }
      else {
	cf->f << "<TR><TD>";
        if ( strcmp( link, "") != 0)
          cf->f << "<A HREF=\"" <<  fname << "\">";
        else if ( bookmark != 0)
          cf->f << "<A NAME=\"" <<  bookmark << "\">";
	cf->f << text1;
        if ( strcmp( text2, "") != 0 || strcmp( text3, "") != 0) {
          for ( i = 0; i < (int)(CNV_TAB - strlen(text1)); i++)
            cf->f << "&nbsp;";
          cf->f << "&nbsp;&nbsp;</TD><TD>" << text2;
          if ( strcmp( text3, "") != 0) {
            for ( i = 0; i < (int)(CNV_TAB - strlen(text2)); i++)
              cf->f << "&nbsp;";
            cf->f << "&nbsp;&nbsp;</TD><TD>" << text3;
          }
        }
        if ( strcmp( link, "") != 0 || bookmark)
          cf->f << "</A>" << endl;
        else
          cf->f << endl;
        cf->f << "</TD></TR>";
      }
      return NULL;
    }
    case navh_eItemType_HelpBold:
    {
      if ( !cf) 
	break;

      pwr_tFileName fname;
      if ( strcmp( link, "") != 0) {
	if ( strncmp( link, "$web:", 5) == 0) {
	  if ( strncmp( &link[5], "$pwrp_web/", 10) == 0)
	    strcpy( fname, &link[15]);
	  else
	    strcpy( fname, &link[5]);
	} 
	else if ( strncmp( link, "$class:", 7) == 0) {
	  char *s;

	  // Get prefix from file
	  strcpy( fname, "./orm/");
	  s = strrchr( file_name, '/');
	  if ( s)
	    strcat( fname, s+1);
	  s = strchr( fname, '_');
	  if ( s)
	    *(s+1) = 0;
	  strcat( fname, &link[7]);
	  strcat( fname, ".html");
	} 
        else if ( (strstr( link, ".htm") != 0) || 
		  (strstr( link, ".pdf") != 0)) {
          strcpy( fname, link);
        }
        else {
          subject_to_fname( fname, link, 0);
          if ( strcmp( link_bookmark, "") != 0) {
	    strcat( fname, "#");
	    strcat( fname, link_bookmark);
          }
        }
        if ( !in_table)
          cf->f << "<A HREF=\"" <<  fname << "\">";
      }
      else if ( bookmark) {
	if ( !in_table)
          cf->f << "<A NAME=\"" << bookmark << "\">";
      }

      if ( ! in_table) {
        cf->f << "<B>" << text1 << "</B>"; 
        if ( strcmp( link, "") != 0 || bookmark)
          cf->f<< "<BR></A>" << endl;
        else
          cf->f<< "<BR>" << endl;
      }
      else {
	cf->f << "<TR><TD><B>";
        if ( strcmp( link, "") != 0)
          cf->f << "<A HREF=\"" <<  fname << "\">";
        else if ( bookmark != 0)
          cf->f << "<A NAME=\"" <<  bookmark << "\">";
        cf->f << text1;
        if ( strcmp( link, "") != 0 || bookmark)
	  cf->f << "</A>";
        if ( strcmp( text2, "") != 0 || strcmp( text3, "") != 0) {
          for ( i = 0; i < (int)(CNV_TAB - strlen(text1)); i++)
            cf->f << "&nbsp;";
          cf->f << "&nbsp;&nbsp;</B></TD><TD><B>" << text2;
          if ( strcmp( text3, "") != 0) {
            for ( i = 0; i < (int)(CNV_TAB - strlen(text2)); i++)
              cf->f << "&nbsp;";
            cf->f << "&nbsp;&nbsp;</B></TD><TD><B>" << text3;
          }
        }
        if ( strcmp( link, "") != 0 || bookmark)
          cf->f << "</A>" << endl;
        else
          cf->f << endl;
        cf->f << "</B></TD></TR>";
      }
      return NULL;
    }
    case navh_eItemType_HelpHeader:
    {
      if ( !cf) 
	break;

      cf->f << "<H1>" << text1 << "</H1><BR>" << endl;
      return NULL;
    }
    case navh_eItemType_Header:
    {      
      if ( !cf) 
	break;

      if ( bookmark != 0)
	cf->f << "<A NAME=\"" <<  bookmark << "\">";
      cf->f << "<H3>" << text1 << "</H3><BR>";
      if ( bookmark != 0)
	cf->f << "</A>";
      cf->f << endl;
      return NULL;
    }
    case navh_eItemType_HeaderLarge:
    {      
      if ( !cf) 
	break;

      if ( bookmark != 0)
	cf->f << "<A NAME=\"" <<  bookmark << "\">";
      cf->f << "<H2>" << text1 << "</H2><BR>";
      if ( bookmark != 0)
	cf->f << "</A>";
      cf->f << endl;
      return NULL;
    }
    case navh_eItemType_HorizontalLine:
    {      
      if ( !cf) 
	break;

      cf->f << "<HR>" << endl;
      return NULL;
    }
    case navh_eItemType_Image:
    {      
      if ( !cf) 
	break;

      cf->f << "<IMG SRC=\"" << text1 << "\"><BR>" << endl;
      return NULL;
    }
    default:
      return 0;
  }
  return 0;
}







