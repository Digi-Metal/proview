$! wb_gcg.com -- compile and link PLC code
$!
$! PROVIEW/R
$! Copyright (C) 1996 by Comator Process AB.
$!
$! This compiles a file generated by ds_foe_gcg
$! and inserts it in the plc library
$! It is called from the ds_foe_gcg.c module.
$!
$! Arguments
$!
$ set noon
$	Debug			= p1	! 1 if debug, 0 i nodebug
$ 	FileType 		= p2	! the type of file: rtnode,
$                                       ! plc or window module
$	FileName		= p3	! the name of the file to be compiled
$ 	call BitToIdx 		'p4'	! the bitmask is converted to an index
$ 	OpSys = BitToIdx_Idx		! the operating system, defined by
$                                       ! pwr_mOpSys
$	OutFile			= p5	! the name of the generated file
$	PlcLib			= p5	! library for filetype Program and Windoow
$	ObjectName		= p6	! name of object
$	Libs			= p6	! plc library for Library type
$	SystemName		= p7	! name of system
$       ProjectRoot		= p8	! project root directory
$!
$! Local symbols
$!
$	say			= "write sys$output"
$       delete                  = "delete/nolog"
$
$	OpSys__Low		= 0
$	OpSys_VAX_ELN		= 1
$	OpSys_VAX_VMS		= 2
$	OpSys_AXP_VMS		= 3
$	OpSys_PPC_LYNX		= 4
$	OpSys_X86_LYNX		= 5
$	OpSys_PPC_LINUX		= 6
$	OpSys_X86_LINUX		= 7
$	OpSys_AXP_LINUX		= 8
$	OpSys__High		= 9
$	vOpSys			= "_Low,VAX_ELN,VAX_VMS,AXP_VMS,PPC_LYNX,X86_LYNX,PPC_LINUX,X86_LINUX,AXP_LINUX"
$ 	say_op			= " for ''f$element(OpSys, ",", vOpSys)'"
$
$	FileType__Low		= -1
$	FileType_Process	= 0
$	FileType_Program	= 1
$	FileType_Window		= 2
$	FileType_RtNode		= 3
$	FileType_Library	= 4
$	FileType__High		= 5
$	vFileType		= "Process,Program,Window,RtNode,Library"
$
$ if Debug
$ then
$	cc_debug		= "/noopt/debug"
$	link_debug		= "/debug"
$	say_debug		= " with debug"
$	dele_gc			= "purge/noconfirm/nolog"
$	gc_ver			= ""
$ else
$	cc_debug		= "/opt/nodebug"
$	link_debug		= "/nodebug"
$	say_debug		= ""
$!	dele_gc			= "delete/noconfirm/nolog"
$	dele_gc			= "!"
$	gc_ver			= ";*"
$ endif
$
$ local_setup = "pwr_gcg_setup.com"
$ if f$search( local_setup).nes."" then -
	@'local_setup' "''ProjectRoot'" "''SystemName'" 'OpSys'
$
$
$ if f$mode() .eqs. "BATCH" then say "-- PwrBatchStartLog"
$!
$! Check OpSys
$!
$ if OpSys .le. OpSys__Low .or. OpSys .ge. OpSys__High
$ then
$   say "Unknown operating system: ''OpSys'"
$   goto exit
$ endif
$!
$! Check FileType
$!
$ if FileType .le. FileType__Low .or. FileType .ge. FileType__High
$ then
$   say "Unknown file type: ''FileType'"
$   goto exit
$ endif
$
$ gosub Set_'f$element(OpSys, ",", vOpSys)'
$ call CheckLibrary
$ call 'f$element(FileType, ",", vFileType)'
$exit:
$ if f$mode() .eqs. "BATCH" then say "-- PwrBatchEndLog"
$ exit
$
$Set_VAX_VMS:
$
$ pwr_exe	= "pwrb_root:[os_vms.hw_vax.exp.exe]"
$ pwr_obj	= "pwrb_root:[os_vms.hw_vax.exp.obj]"
$ pwr_lib	= "pwrb_root:[os_vms.hw_vax.exp.lib]"
$ pwrp_gc	= "pwrp_tmp:"
$ pwrp_exe	= "pwrp_root:[vax_vms.exe]"
$ pwrp_obj	= "pwrp_root:[vax_vms.obj]"
$ pwrp_lib	= "pwrp_root:[vax_vms.lib]"
$ plc_lib	= "''pwrp_lib'ra_plc.olb"
$ cc_cmd	= "cc/decc''cc_debug'/stand=vaxc/define=(os_vms=1,os=""vms"")" + -
		  "/obj=''pwrp_obj'/nog_float/inc=(pwrp_inc:,pwr_inc:,pwrp_gc:)"
$ cc_lib	= ""
$ return
$
$Set_AXP_VMS:
$
$ pwr_exe	= "pwrb_root:[os_vms.hw_axp.exp.exe]"
$ pwr_obj	= "pwrb_root:[os_vms.hw_axp.exp.obj]"
$ pwr_lib	= "pwrb_root:[os_vms.hw_axp.exp.lib]"
$ pwrp_gc	= "pwrp_tmp:"
$ pwrp_exe	= "pwrp_root:[axp_vms.exe]"
$ pwrp_obj	= "pwrp_root:[axp_vms.obj]"
$ pwrp_lib	= "pwrp_root:[axp_vms.lib]"
$ plc_lib	= "''pwrp_lib'ra_plc.olb"
$ cc_cmd	= "cc/stand=vaxc''cc_debug'/define=(os_vms=1,os=""vms"")/obj=''pwrp_obj'" + -
		  "/float=g_float/noansi/assume=noal/nomember/extern=strict_refdef" + - 
		  "/inc=(pwrp_inc:,pwr_inc:,pwrp_gc:)"
$ cc_lib	= ""
$ return
$
$Set_VAX_ELN:
$
$ pwr_exe	= "pwrb_root:[os_eln.hw_vax.exp.exe]"
$ pwr_obj	= "pwrb_root:[os_eln.hw_vax.exp.obj]"
$ pwr_lib	= "pwrb_root:[os_eln.hw_vax.exp.lib]"
$ pwrp_gc	= "pwrp_tmp:"
$ pwrp_exe	= "pwrp_root:[vax_eln.exe]"
$ pwrp_obj	= "pwrp_root:[vax_eln.obj]"
$ pwrp_lib	= "pwrp_root:[vax_eln.lib]"
$ plc_lib	= "''pwrp_lib'ra_plc.olb"
$ cc_cmd	= "cc/vaxc''cc_debug'/define=(os_eln=1,os=""eln"")/object=" + -
		  "''pwrp_obj'/inc=(pwrp_inc:,pwr_inc:,pwrp_gc:)"
$ cc_lib	= "+ eln$:vaxelnc/lib"
$ return
$
$Set_X86_LYNX:
$Set_PPC_LYNX:
$Set_X86_LINUX:
$Set_PPC_LINUX:
$Set_AXP_LINUX:
$
$ build_host = f$trnlnm("pwr_build_host_''f$element(OpSys, ",", vOpSys)'")
$ p_root = f$trnlnm("pwrp_root")
$ p_root = p_root - ":"
$ p_root2 = f$trnlnm("''p_root'")
$ if p_root2.nes."" then p_root=p_root2
$ if p5.eqs."" then p5 = "Dummy"
$ if p6.eqs."" then p6 = "Dummy"
$ rsh 'build_host' "$pwr_exe/wb_gcg.sh" "''p1'" "''p2'" "''p3'" "'"'p4'"'" -
	"'"'p5'"'" "'"'p6'"'" "'"'p7'"'" "'"'p_root'"'"
$ exit
$ return
$
$CheckLibrary:
$ subroutine
$
$   if FileType.eq.FileType_Process then exit
$   if FileType.eq.FileType_RtNode then exit
$   lib = f$search("''PlcLib'")
$   if lib .eqs. "" then libr/create 'PlcLib'
$
$ endsubroutine
$
$Process:
$ subroutine
$
$   'cc_cmd' 'pwrp_gc''FileName'.gc 'cc_lib'
$   purge/nolog 'pwrp_obj''FileName'.obj
$   dele_gc 'pwrp_gc''FileName'.gc'gc_ver'
$   say "-- Plc process compiled''say_op'''say_debug' ''FileName'"
$
$ endsubroutine
$
$Program:
$ subroutine
$
$   'cc_cmd' 'pwrp_gc'plc_m'FileName'.gc 'cc_lib'
$   librarian/replace 'PlcLib' 'pwrp_obj'plc_m'FileName'
$   dele_gc 'pwrp_gc'plc_m'FileName'.gc'gc_ver'
$   delete 'pwrp_obj'plc_m'FileName'.obj;*
$   say "-- Plc plcpgm compiled''say_op'''say_debug' ''ObjectName'" 
$
$ endsubroutine
$
$Window:
$ subroutine
$
$   'cc_cmd' 'pwrp_gc'plc_m'FileName'.gc 'cc_lib'
$   librarian/replace 'PlcLib' 'pwrp_obj'plc_m'FileName'
$   dele_gc 'pwrp_gc'plc_m'FileName'.gc'gc_ver'
$   dele_gc 'pwrp_gc'plc_dec'FileName'.gc'gc_ver'
$   dele_gc 'pwrp_gc'plc_r1r'FileName'.gc'gc_ver'
$   dele_gc 'pwrp_gc'plc_r2r'FileName'.gc'gc_ver'
$   dele_gc 'pwrp_gc'plc_ref'FileName'.gc'gc_ver'
$   dele_gc 'pwrp_gc'plc_cod'FileName'.gc'gc_ver'
$   delete 'pwrp_obj'plc_m'FileName'.obj;*
$   say "-- Plc window compiled''say_op'''say_debug' ''ObjectName'"
$
$ endsubroutine
$
$Library:
$ subroutine
$
$   copy 'Libs' 'PlcLib'
$   say "-- Library copied ''Libs' -> ''PlcLib'"
$
$ endsubroutine
$
$RtNode:
$ subroutine
$
$   optfile = f$search("''pwr_exe'rt_plc_wb.opt")
$   localopt = f$search("''pwrp_rexe'rt_plc_wb.opt")
$!
$   if localopt .nes. ""
$   then
$     optfile = localopt
$     say "-- Using local optfile ''optfile'"
$   endif
$
$   @pwr_exe:pwr_expand_opt 'optfile' pwrp_tmp:rt_plc_wb.opt
$!
$! 
$   if OpSys .eq. OpSys_VAX_VMS
$   then
$     link 'link_debug'/exe='OutFile' -
	'pwr_obj'rt_plc_process.obj, -
	pwrp_tmp:'FileName'.opt/opt, -
	'pwr_lib'libpwr_rt.olb/lib, -
	'pwr_lib'libpwr_co.olb/lib, -
	'pwr_obj'pwr_msg_co.obj, -
	'pwr_obj'pwr_msg_rt.obj, -
	sys$library:deccrtl/lib, -
	pwrp_tmp:rt_plc_wb.opt/opt, -
	sys$system:sys.stb/selective_search
$    endif
$
$   if OpSys .eq. OpSys_AXP_VMS
$   then
$!     link 'link_debug'/nosysshr/sysexe/threads_enable/exe='OutFile' -
$     link 'link_debug'/sysexe/exe='OutFile' -
	'pwr_obj'rt_plc_process.obj, -
	pwrp_tmp:'FileName'.opt/opt, -
	'pwr_lib'libpwr_rt.olb/lib, -
	'pwr_lib'libpwr_co.olb/lib, -
	'pwr_obj'pwr_msg_co.obj, -
	'pwr_obj'pwr_msg_rt.obj, -
	pwrp_tmp:rt_plc_wb.opt/opt
$    endif
$
$    if OpSys .eq. OpSys_VAX_ELN
$    then
$ define/user dcio eln$:dcio
$ define/user cmsc eln$:cmsc
$ define/user ipcshr eln$:ipcshr
$ define/user langmsc eln$:langmsc
$ define/user pascalmsc eln$:pascalmsc
$ define/user libcommon eln$:libcommon
$ define/user dap eln$:dap
$ define/user elnaccess eln$:elnaccess
$ define/user getmsgshr eln$:getmsgshr
$ define/user fileutil eln$:fileutil
$ define/user dmath eln$:dmath
$ define/user dcmath eln$:dcmath
$ define/user dda eln$:dda
$ define/user prgloader eln$:prgloader
$ define/user auxcshr eln$:auxcshr
$ define/user libmsc eln$:libmsc
$ define/user libvm eln$:libvm
$ define/user eln$pshr eln$:eln$pshr
$ define/user dpascalio eln$:dpascalio
$ define/user icsshr eln$:icsshr
$ goto noshare
$	link 'link_debug'/nosysshr/exe='OutFile' -
	 'pwr_obj'rt_plc_process.obj, -
	 pwrp_tmp:'FileName'.opt/opt, -
	 'pwr_exe'libpwr.opt/opt, -
	 'pwr_lib'libpwr_rt.olb/lib, -
	 'pwr_lib'rtpvx_mj.olb/lib, -
!	 eln$rpc_lib:librpc/lib, -
	 eln$:crtlshare/lib,eln$:rtlshare/lib,eln$:rtl/lib, -
	 eln$:psxshare/lib/inc=(eln$pshr), -
	 pwrp_tmp:rt_plc_wb.opt/opt
$ goto purge
$noshare:
$	link 'link_debug'/nosysshr/exe='OutFile' -
	 'pwr_obj'rt_plc_process.obj, -
	 pwrp_tmp:'FileName'.opt/opt, -
	 'pwr_lib'libpwr_rt.olb/lib, -
	 'pwr_lib'libpwr_co.olb/lib, -
	 'pwr_lib'rtpvx_mj.olb/lib, -
	 'pwr_lib'libpwr_co.olb/lib, -
	 'pwr_obj'pwr_msg_co.obj, -
	 'pwr_obj'pwr_msg_rt.obj, -
	 eln$rpc_lib:librpc/lib, -
	 eln$:crtlshare/lib,eln$:rtlshare/lib,eln$:rtl/lib, -
	 eln$:psxshare/lib/inc=(eln$pshr), -
	 pwrp_tmp:rt_plc_wb.opt/opt
$    endif
$purge:
$!    purge/nolog 'pwrp_obj''FileName'.opt
$    if f$trnlnm("pwrp_rexe").nes."" then copy 'OutFile' pwrp_rexe:
$    say "-- Plc program linked''say_op'''say_debug' node ''FileName'"
$
$!    delete := delete
$!    if f$search("pwrp_tmp:rt_plc_wb.opt") .nes. "" then delete pwrp_tmp:rt_plc_wb.opt;*
$
$ endsubroutine
$
$ BitToIdx: subroutine
$	BitM = p1
$	Idx =  0
$	Val = 1
$L1:
$	if Val.ge.BitM then goto L2
$	Val = Val * 2
$	Idx = Idx + 1
$	goto L1
$L2:
$	BitToIdx_Idx == Idx + 1
$ endsubroutine
