/* 
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

#ifndef pwr_lst_h
#define pwr_lst_h 

/* pwr_lst.h -- list macros
*/

#define LstType(a) \
    typedef struct s_LstLink_##a sLstLink_##a;\
    struct s_LstLink_##a { \
	sLstLink_##a *nex;\
	sLstLink_##a *pre;\
	a *obj;}

#define LstLink(a)\
	  sLstLink_##a

#define LstHead(a)\
	  sLstLink_##a

#define LstNex(p) ((p)->nex)
#define LstPre(p) ((p)->pre)
#define LstLas(h) ((h)->pre)
#define LstFir(h) ((h)->nex)
#define LstEnd(h) (h)
#define LstIns(p, o, e) (\
    (o)->e.obj = (void *)o,\
    (o)->e.pre = (void *)((p)->pre),\
    (o)->e.nex = (void *)(p),\
    (p)->pre->nex = (void *)(&(o)->e),\
    (p)->pre = (void *)(&(o)->e))
#define LstRem(p) ((p)->nex->pre = (p)->pre,(p)->pre->nex = (p)->nex)
#define LstNul(p) ((p)->nex = (p)->pre = NULL)
#define LstIsNul(p) ((p)->nex == NULL && (p)->pre == NULL)
#define LstInl(p) ((p)->nex != NULL && (p)->pre != NULL)
#define LstIni(h) ((h)->nex = (h)->pre = (h))
#define LstObj(p) ((p)->obj)
#define LstEmp(h) ((h) == (h)->nex)

#endif
