***********************************************
<topic> pwrb_sv_se
PROVIEW/R
<h1>Objekt Referens Manual
<h1>v1.2

<b>Inledning
Manual som beskriver objekt/klasser i Proview. Innhållsförteckningen är 
grupperad i 4 delar:

1 Allmänt
2 Standardobjekt
3 IO objekt
4 Nmps objekt

<h1>INNEHÅLLSFÖRTECKNING

<h1>Allmänt
Översikt standard objekt<link> lite_info
Bra att veta om objekt<link>info
Info Nmps objekt<link> Nmps_info
Info IO objekt<link> io_info
Senaste nytt, ändringar<link> nytt


<h1>Standard objekt:
<h1>A
AArithm<link>AArithm
Adelay<link>Adelay
Ai<link>Ai
And<link>And
Ao<link>Ao
Appl<link>$Appl
ASup<link>ASup
Av<link>Av
<h1>B
Backup<link>Backup
Backup_Conf<link>Backup_Conf
BCDDo<link>BCDDo
BodyText<link>BodyText
<h1>C
Carithm<link> CArithm
ChanAi<link>ChanAi
ChanAit<link>ChanAit
ChanAo<link>ChanAo
ChanCo<link>ChanCo
ChanDi<link>ChanDi
ChanDo<link>ChanDo
Co<link>Co
Comph<link>Comph
Compl<link>Compl
Count<link>Count
CStoAi<link>CStoAi
CStoAo<link>CstoAo
CStoAp<link>CStoAp
CStoAv<link>CstoAv
CStoIp<link>CstoIp
CSub<link>CSub
Curve<link>Curve
<h1>D
Darithm<link>Darithm
Di<link>Di
DiBCD<link>DiBCD
Do<link>Do
$DocHier<link>$DocHier
Document<link>Document
Drive<link>Drive
DsFast<link>DsFast
DsFastConf<link>DsFastConf
DsHist<link>DsHist
DsHistServer<link>DsHistServer
DsTrend<link>DsTrend
DsTrendConf<link>DsTrendConf
Dsup<link>Dsup
Dv<link>Dv
<h1>E
Edge<link>Edge
EventFile<link>EventFile
EventPrinter<link>EventPrinter
<h1>F
Filter<link>Filter
Form<link>Form
Frame, Head, Text, Title <link>Frame
<h1>G
GetAi<link>GetAi
GetAo<link>GetAo
GetAp<link>GetAp
GetAv<link>GetAv
GetDi<link>GetDi
GetDo<link>GetDo
GetDp<link>GetDp
GetDv<link>GetDv
GetIp<link>GetIp
GetPi<link>GetPi
Graph<link>Graph
Gray<link>Gray
<h1>I
Inc3P<link>Inc3P
InitStep<link>InitStep
Inv<link>Inv
IOHandler<link>IOHandler
$LibHier<link>$LibHier
Limit<link>Limit
ListDescriptor<link>ListDescriptor
<h1>M
Maxmin<link>Maxmin
MessageHandler<link>MessageHandler
Mode<link>Mode
MValve<link>MValve
<h1>N
$Node<link>$Node
$NodeHier<link>$NodeHier
<h1>O
OpPlace<link>OpPlace
Or<link>Or
Order<link>order
OrderAct<link>OrderAct
Out2P<link>Out2P
<h1>P
Pid<link>Pid
PiPos<link>PiPos
PiSpeed<link>PiSpeed
$PlantHier<link>$PlantHier
PlcPgm<link>PlcPgm
PlotGroup<link>PlotGroup
Po<link>Po
Point<link>Point
Posit<link>Posit
Pos3P<link>Pos3P
Pulse<link>Pulse
<h1>Q
Queue<link>Queue
<h1>R
ResDi<link>ResDi
ResDo<link>ResDo
ResDp<link>ResDp
ResDv<link>ResDv
Reset_SO<link>Reset_SO
<h1>S
Select<link>Select
SetCond<link>SetCond
SetDi<link>SetDi
SetDo<link>SetDo
SetDp<link>SetDp
SetDv<link>SetDv
ShowPlcAttr<link>ShowPlcAttr
Speed<link>Speed
SR_R, SR_S<link>SR_R
Ssbegin<link>Ssbegin
SsEnd<link>SsEnd
Step<link>Step
StoAi<link>StoAi
StoAo<link>StoAo
StoAp<link>StoAp
StoAv<link>StoAv
StoDi<link>StoDi
StoDo<link>StoDo
StoDp<link>StoDp
StoDv<link>StoDv
StoIp<link>StoIp
StoPi<link>StoPi
SubStep<link>SubStep
Sum<link>Sum
$System<link>$System
<h1>T
Table<link>Table
Timer<link>Timer
Timint<link>Timint
Trans<link>Trans
<h1>U
User<link>User
<h1>V
Valve<link>Valve
<h1>W
Wait<link>Wait
Waith<link>Waith
WindowPlc<link>WindowPlc
WindowSubStep<link>WindowSubStep
<h1>X
Xor<link>Xor

<h1>I/O objekt:<bookmark> meny_io
<h1>A
Ai_HVAI32<link> Ai_HVAI32
Ao_HVAO4<link> Ao_HVAO4
<h1>C
Co_PI24BO<link> Co_PI24BO
<h1>D
Di_DIX2<link> Di_DIX2
Do_HVDO<link>Do_HVDO
<h1>R
Rack_SSAB<link>Rack_SSAB

<h1>Nmps objekt:<bookmark> meny_nmps
<h1>A
ApCollect<link>ApCollect
ApDistribute<link>ApDistribute
<h1>C
CurrentData<link>CurrentData
CurrentIndex<link>CurrentIndex
CLoop<link>CLoop
CellDisp<link>CellDisp
<h1>D
DataArithm<link>DataArithm
DataCopy<link>DataCopy
DataReset<link>DataReset
DataCollect<link>DataCollect
DpCollect<link>DpCollect
DpDistribute<link>DpDistribute
DataSelect<link>DataSelect
DataRequest<link>DataRequest
DataRcv<link>DataRcv
DataSend<link>DataSend
DataCnv<link>DataCnv
DispLink<link>DispLink
<h1>F
Func<link>Func
FuncExtend<link>FuncExtend
FuncInput<link>FuncInput
FuncOutput<link>FuncOutput
<h1>G
GetData<link>GetData
<h1>N
NMpsCell<link>NMpsCell
NMpsOutCell<link>NMpsOutCell
NMpsStoreCell<link>NMpsStoreCell
NMpsCellMir<link>NMpsCellMir
NMpsTrp<link>NMpsTrp
NMpsTrpRR<link>NMpsTrpRR
NMpsTrpFF<link>NMpsTrpFF
NMpsMirrorConfig<link>NMpsMirrorConfig
NMpsConvConfig<link>NMpsConvConfig
NMpsBackupConfig<link>NMpsBackupConfig
nmpsappl_Mirror<link>nmpsappl_Mirror
nmpsappl_MirrorInit<link>nmpsappl_MirrorInit
nmpsappl_RemoveData<link>nmpsappl_RemoveData
nmpsappl_RemoveAndDeleteData<link>nmpsappl_RemoveAndDeleteData
<h1>R
RemTransSend<link>RemTransSend
RemTransRcv<link>RemTransRcv

</topic> **********

************************************************
************************************************
************************************************

<topic> AArithm
AArithm
Engelsk text<link> AArithm, "", $pwr_exe/pwrb_xtthelp.dat

Beräknar värdet av egendefinierat aritmetriskt uttryck. 

<h1>Beskrivning

Friprogrammerat uttryck i C-språket. Uttrycket editeras med hjälp av Attribute 
Editor under Expression . Värdet av Expression visas i instansen. Uttrycket, 
som saknar '=', översätts vid kompileringen. 

Upp till 8 analoga ( A1, ..., A8) och 8 digitala (d1, ...., d8) insignaler. 

Digitala ingångar kan med hjälp av Attribute Editor fås att invertera insignalen. 
Invertering kan också åstadkommas genom den logiska negationsoperatorn '!'. 

NB! Då en aritmetisk operator följs av ett 'graph name', t.ex. A1, ska operator 
och 'graph name' åtskiljas med blanktecken eller vänster parentes. 

En ingång, använd som konstant storhet, görs lämpligen osynlig med hjälp av 
'Used' faciliteten. Om konstanten inte behöver ändra värde skrivs värdet med 
fördel direkt i Expression , dvs. utan användning av ingång. Kan konstanten 
komma att ändra värde är det lämpligt att använda en Av eller Dv , eftersom 
den då blir tillgänglig via Av/Dv-objektens MERbild. 

Ej ansluten ingång ger kompileringsfel. 

C-bibliotekets matematiska funktioner kan användas, t.ex. 

exp(A1) exponentialfunktion 
log10(A1) logaritm 
sin(A1) sinus 
(1.2E3 + A1) * ( A2 + 3.7 ) aritmetik, notera de båda konstanterna 
fabs(A1) absolutbelopp 
pow(A1, A2) potensfunktionen A1 A2 
C-språkets praktiska trestegsoperator '?' används för att uttrycka alternativ. I 
exemplet nedan betyder '&&' logiskt OCH, 
Exempel: Uttrycket (d1 && d2) ? A1 + A2 : A3, innebär att VAL = A1+ A2 
om d1 och d2 båda är sanna, annars sätts VAL = A3 

<h1>Input Attributes 

<b>AIn1, AIn2, ... , AIn8 
Graph name: A1, ..., A8
Type: pwr_tFloat32 

Flags: NoRtdb, OpenParam
Default value: 0.0, 0.0, ..., 0.0 

Analoga storheter som kan ingå i Expression . Om t.ex. A1 är ansluten avses en 
yttre signal, annars det interna attributet AIn1 . ändringar av AIn1 , ..., AIn8 
gjorda i målmiljön beaktas. 
 

<b>DIn1, DIn2, ... , DIn8 
Graph name: d1, ..., d8
Type: pwr_tBoolean
Flags: NoRtdb, OpenParam
Default value: FALSE, FALSE, ..., FALSE 

Digitala signaler som kan ingå i Expression . Om t.ex. d1 är ansluten avses en 
yttre signal, annars det interna attributet DIn1 . ändringar av DIn1 , ..., DIn8 
gjorda i målmiljön beaktas. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Resultatet av Expression efter senaste beräkning. 

<h1>Internal Attributes 

<b>Expression 
Type: pwr_tString80
Flags: DevOnly 

Aritmetriskt uttryck i C-språket. Uttrycket anges med hjälp av Attribute Editor 
och kan inte ändras i målmiljön. 

<h1>Se även 

DArithm , som beräknar värdet av logiska uttryck.<link>DArithm

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Adelay
Adelay 
Engelsk text<link> Adelay, "", $pwr_exe/pwrb_xtthelp.dat

Tidsfördröjning av analog signal ( Analog delay ). 

<h1>Beskrivning

Tidsfördröjningen Tim kan vara variabel inom intervallet: 

{ 0 - 100 MaxCount ScanTime } 

Fördröjningen realiseras i ett skiftregister med 100 steg. Tidsupplösningen per 
steg är MaxCount ScanTime . Maximala tidsfördröjning blir 100 MaxCount 
ScanTime sekunder. 

Krävs större upplösning kan flera Adelay -instanser seriekopplas. 

Om tidsupplösningen per steg blir sämre än PLC programmets cykeltid ( dvs. 
MaxCount >1) sker medelvärdesbildning vid lagring i skiftregister 1. 

Vid allra 1:a samplet lagras insignalvärdet i samtliga skiftregister. Vid 2:a 
samplet medelvärdesbildas värdet i skiftregister ? och insignalen varefter 
resultatet återlagras i skiftregister 1. Detta upprepas t.o.m sampel nr. MaxCount 
- 1. Vid sampel nr. MaxCount sker skiftning av registerinnehåll och insignalen 
lagras direkt i skiftregister 1. Första registerpositionen lagrar därefter 
insignalens medelvärde fram till nästa skifttillfälle. 

Utsignalen hämtas från det register som representerar den aktuella 
fördröjningen. 

<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Värde på insignalen. 

<b>Tim 
Graph name: TIM
Type: pwr_tFloat32
Flags: InRtdb, OpenParam, Access 

Aktuell tidsfördröjning ( i sekunder ) i intervallet { 0, 100 MaxCount · 
ScanTime }. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Fördröjd signal enligt Tim . 

<h1>Internal Attributes 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltid i sekunder, lagras automatiskt vid kompilering. 

<b>MaxCount 
Type: pwr_tInt32
Flags: Param
Default value: 1 

Antal cykler per registersteg ; dvs registerskiftning sker vid vart MaxCount :e 
programcykel. 

Är MaxCount t.ex. 1.6 sker avkortning till 1. 

<b>TimVect[100] 
Type: pwr_tFloat32
Flags: Intern 

Cykliskt register. 

<b>StoInd 
Type: pwr_tInt32
Flags: Intern 

Index som anger nästa position för lagring. 

<b>StoredNumbers 
Type: pwr_tInt32
Flags: Intern 

Räknare under initieringsfas. 

<b>Count 
Type: pwr_tInt32
Flags: Intern 

Varvräknare för skift. 

<b>AccTim 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Tim . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinTim, MaxTim 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta och största tillåtna värde vid operatörsändring av Tim . 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Ai
Ai
Engelsk text<link> Ai, "", $pwr_exe/pwrb_xtthelp.dat

Analog ingång. 

<h1>Beskrivning

Konfigurerar analog insignal i 'Plant Configuration'. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva vilken fysisk signal som representeras; t.ex. 
signalnamn, beskrivande text etc. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: 

Namn på associerat kanalobjekt. 

<b>ValueIndex 
Type: pwr_tUInt32
Flags: InitSetParam 

Index i AIValue -vektorn hos de Ai_Value_Base-objekt som används för bas- 
resp. delfrekvenssampel. Initieras vid start av rs_init. 

<b>*ActualValue 
Type: pwr_tFloat32
Flags: 

Pekare till ärvärdet (= ingenjörsvärdet ActualValue ). Ingenjörsvärdet erhålls 
efter konvertering från SigValue . 

<b>Unit 
Type: pwr_tString16
Flags: Param 

Ingenjörsenhet. Enhet för ActualValue . 

<b>NoOfDecimals 
Type: pwr_tUInt8
Flags: Param
Default value: 0 

Antal decimaler vid presentation av ActualValue . 

<b>PresMinLimit, PresMaxLimit
Type: pwr_tFloat32
Flags: Param
Default value: 0.0, 0.0 

Skalområdets undre resp övre gräns i objektbildens stapeldiagramm. 

<b>SigValue 
Type: pwr_tFloat32
Flags: Intern 

Reellt signalvärde efter konvertering från RawValue . 

<b>RawValue 
Type: pwr_tUInt16
Flags: Intern 

Inläst råvärde (normalt A/D-omvandlarens bitmönster). 

<b>DefGraph 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i processbild anges namnet på motsvarande bilds 
$Graph-objekt här. Därigenom kan den aktuella processbilden enkelt aktiveras 
från 'Operator Window'. Som information visas namnet på $Graph- objektet i 
signalobjektets MER-bild. 

<b>DefTrend 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i snabb- eller trendkurvgrupp anges namnet på 
motsvarande $PlotGroup-objekt här. Därigenom kan aktuellt kurvdiagram 
enkelt aktiveras från 'Operator Window'. Som information visas namnet på 
$PlotGroup-objektet i signalobjektets MER-bild. 

<b>FilterAttribute[0], FilterAttribute[1], ..., FilterAttribute[3] 
Type: pwr_tFloat32
Flags: Param
Default value: 0, 0, 0 resp 0 

Definierar filterkonstanter i vald filterfunktion, se FilterType . Konstanterna 
anges i sekunder. 

Endast om FilterType = och FilterAttribute[0] > ScanInterval · CycleTimeBus 
(= signalens uppdateringsperiod) sker filtrering. 

<b>FilterType 
Type: pwr_tInt32
Flags: FixParam1
Default value: 0 

Intern filtrering avser enbart lokala Ai-signaler. 

Anger den valda filtertypen. Följande filtertyper finns: 

0 -- Ingen filtrering.

1 -- Exponentialfilter.

Filtrering görs på ingenjörsvärdet, ActualValue, före lagring i
rtdb enligt:

ActualValue t = ActualValue t-1 + a · (InValue t - ActualValue t-1 ),
där ActualValue t-1 är det vid förra samplet lagrade ingenjörs-
värdet och InValue t det aktuella ingenjörsvärdet före filtrering.

a = ScanIntervall · CycleTimeBus / FilterAttribute[0] och
0 < a < 1.0. Om a = 0 sker ingen filtrering. Ju mindre a är desto
hårdare blir filtreringen.

Produkten ScanIntervall · CycleTimeBus anger signalens
uppdatreingsperiod.

<b>Tips 

Placera i utvecklingsmiljön objektet under $PlantHier objekt så att det kommer 
att tillhöra samma målnod som dess associerade kanalobjekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 


</topic> **********
<topic> And
And
Engelsk text<link> And, "", $pwr_exe/pwrb_xtthelp.dat

OCH-grind. 

<h1>Beskrivning

Och-grind för upp till 8 ingångar. Använda ingångar behöver inte vara 
konsekutivt valda. 

Grundsymbolen har två ingångar. Med Attribute Editor kan antalet ingångar 
ändras och individuella ingångar inverteras. 

Inläst signalvärde används utan att lagras. 

<h1>Input Attributes 

<b>In1, In2, ..., In8 
Graph name: -
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Logiska ingångar. 

<h1>Output Attributes 

<b>Status 
Graph name: -
Type: pwr_tBoolean
Flags: Output 

OCH-grindens aktuella tillstånd. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Ao
Ao

Analog utgång ( A nalog o utput). 

<h1>Beskrivning

Konfigurerar analog utsignal i 'Plant Configuration'. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för beskriva vilken fysisk signal som representeras; t.ex. 
signalnamn, beskrivande text etc. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: 

Namn på associerat kanalobjekt. 

<b>ValueIndex 
Type: pwr_tUInt32
Flags: InitSetParam 

Index i AOValue -vektorn hos de Ao_Value_Base -objekt som används för 
bas- resp. delfrekvenssampel. Initieras vid start av rs_init. 

<b>*ActualValue 
Type: pwr_tFloat32
Flags: 

Pekare till ärvärdet (= ingenjörsvärdet ActualValue ). 

<b>Unit 
Type: pwr_tString16
Flags: Param 

Ingenjörsenhet. Enhet för ActualValue . 

<b>NoOfDecimals 
Type: pwr_tUInt8
Flags: Param
Default value: 0 

Antal decimaler vid presentation av ActualValue . 

<b>PresMinLimit, PresMaxLimit 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0, 0.0 

Skalområdets undre resp övre gräns i objektbildens stapeldiagram. 

<b>SigValue 
Type: pwr_tFloat32
Flags: Intern 

Reellt signalvärde efter konvertering från ActualValue . 

<b>RawValue 
Type: pwr_tUInt16
Flags: Intern 

Utställt råvärde efter omvandling från SigValue . Värdet används av D/A- 
omvandlaren. 

<b>DefGraph 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i processbild anges namnet på motsvarande bilds Graph -
objekt här. Därigenom kan den aktuella processbilden enkelt aktiveras från 
'Operator Window'. Som information visas namnet på Graph - objektet i 
signalobjektets MER-bild. 

<b>DefTrend 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i snabb- eller trendkurvgrupp anges namnet på 
motsvarande PlotGroup -objekt här. Därigenom kan aktuell kurvdiagram enkelt 
aktiveras från 'Operator Window'. Som information visas namnet på PlotGroup 
-objektet i signalobjektets MER-bild. 

<b>Tips 

Placera i utvecklingsmiljön objektet under $ PlantHier objekt så att det 
kommer att tillhöra samma målnod som dess associerade kanalobjekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper


 

</topic> **********
<topic> ASup
ASup
Engelsk text<link> ASup, "", $pwr_exe/pwrb_xtthelp.dat

Larmövervakning av analog storhet ( Analog Supervisory ). 

<h1>Beskrivning
<image>orm_asup_fo.gif
Övervakar analog storhet i godtyckligt objekt med avseende på över eller 
underskridande av övervakningsgräns. High anger om det är över eller 
underskridande som utgör storhetens larmläge. 

Övervakningsgränsen kan förses med hysteres, Hysteres . Larmmeddelande 
kan fördröjas en tiden TimerTime . 

Då den övervakade storheten antar larmläge reagerar ASup objektet med två 
åtgärder: 

'act' utgången sätts ovillkorligen för att indikera larm tillstånd. 
efter tiden TimerTime skickas meddelande till utenheter, t.ex. 
operatörsstationer. Denna åtgärd kan undertryckas med hjälp av DetectOn . 
Meddelande består dels av textsträngen DetectText , dels av flaggor, se 
EventFlags , för att manövrera kompletterande aktiviteter. 

Meddelanden kan vara av olika typ; (se EventType ) 

ALARM ALARM-meddelanden ska kvitteras. De kvarstår i larmlistan
tills kvittering sker, dvs. oberoende av om det övervakade
objektet då befinner sig i larm- eller normaltillstånd. 
INFO Kvitteringsbara INFO-meddelanden skickas till larmfönstrets
informationsdel varifrån kvittering kan ske. F.ö hanteras de som
ALARM-meddelanden.

Ej kvitteringsbara INFO-meddelanden skickas endast till
händelselistan. 
Alla meddelanden skickas till händelselistan. 

ALARM-meddelanden ges olika prioritet; (se EventPriority ). Både A- och B- 
larm hamnar i larmfönstret och larmlistan. Kvittering kan ske från båda 
platserna. I larmfönstret anges antalet okvitterade C- och D-larm medan själva 
meddelandena finns i larmlistan varifrån kvittering också kan göras. 

NB! Ett meddelande som skapas av ett ASup objekt får samma identitet som 
det övervakade objektet. Attributet SelectList som finns i utenheternas objekt, 
t.ex. User -objekt anger från vilka hierarkier meddelanden ska tas emot. 

Olika typer av utenheter finns: 

OPERATOR: Urvalslistan definieras av ett attribut i User -objekt. 
PRINTER: Urvalslistan definieras av ett attribut i EventPrinter -
objekt. 

<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: NoRtdb, OpenNoFunction 

Övervakat objekt. Lämnas ingången öppen anges i Attribute vad som ska 
övervakas. 

<b>Control 
Graph name: con
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default: TRUE 

Anger om övervakningen ska ske eller ej. Notera att blockering görs när 
Control är FALSE. Insignalen kan inverteras. 

FALSE kopplar bort övervakningen och TRUE eller öppen ingång innebär att 
övervakningen utförs. 

<h1>Output Attributes 

<b>Action 
Graph name: act
Type: pwr_tBoolean
Flags: Output 

Anger den övervakade storhetens tillstånd. FALSE innebär normaltillstånd och 
TRUE larmtillstånd. 

Utsignalen kan användas t.ex. för att aktivera åtgärdspaket vid larmtillstånd. 

<b>Acked 
Graph name: ack
Type: pwr_tBoolean
Flags: Output 

Anger om ett larmtillstånd kvitterats eller ej. FALSE betyder att okvitterat larm 
finns. Utsignalen sätts initialt TRUE då ASup-objektet skapas i rtdb och när 
larmtillstånd kvitteras. 

<b>Blocked 
Graph name: blk
Type: pwr_tBoolean
Flags: Output 

Anger om övervakningsobjektet är blockerat eller ej. Med blockering avses 
övervakningsobjektets förmåga att initiera meddelanden. Blockering påverkar 
inte objektets act-utgång. 

FALSE innebär att ASup-objektet inte är blockerat och TRUE att det är 
blockerat. Vid blockering av övervakningsobjekt som befinner sig i larmläge 
tas existerande meddelanden för det aktuella objektet bort. 

Blockering /deblockering görs med hjälp av larmblockeringsformuläret i 
Operator Window. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Fri text för att beskriva objektet. Används i bilden 'Larmgränser'. 

<b>DetectOn 
Type: pwr_tBoolean
Flags: Param
Default value: TRUE 

Anger om den åtgärd som vid larmtillstånd består i att skicka DetectText ska 
blockeras eller ej. FALSE betyder att inget meddelande skickas vid 
larmtillstånd; TRUE betyder att meddelandet DetectText skickas vid 
larmtillstånd. 

<b>DetectText 
Type: pwr_tString80
Flags: Param 

Fri text som ingår i meddelandet vid larmtillstånd. Texten skrivs ut vid 
larmtillstånd om DetectOn är TRUE. 

<b>ShowDetectText 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om DetectText ska visas i ASup-objektets symbol eller ej. FALSE 
betyder ingen visning och TRUE visning. 

<b>ReturnText 
Type: pwr_tString80
Flags: Param 

Fri text som ingår i meddelandet vid återgång till normaltillstånd. Meddelandet 
skrivs i händelselistan. 

<b>EventType 
Type: pwr_tUInt32
Flags: Param
Default value: 64 

Anger vilken typ av meddelande (= DetectText ) som ska skickas vid 
larmtillstånd.
64 -- ALARM Meddelandet kräver kvittering och skickas till
larmfönstret, larmlistan och händelselistan.
32 -- INFO Om meddelandet kräver kvittering skickas det till
larmfönstrets informationsdel och händelselistan annars
enbart till händelselistan. 

<b>EventPriority 
Type: pwr_tUInt32
Flags: Param
Default value: 67 

Prioritet. Gäller enbart ALARM-meddelanden. 

67 = A-larm; högst prioritet. (= 43Hex)
66 = B-larm (= 42Hex)
65 = C-larm (= 41Hex)
64 = D-larm ; lägst prioritet. (= 40Hex) 

<b>EventFlags 
Type: pwr_tUInt32
Flags: Param
Default value: 7 

Bitmask. En kombination av flaggor används också för att närmare precisera 
meddelandet. Följande värden är möjliga: 

1 -- Om denna flagga finns ska ett returmeddelande med ReturnText skickas 
till utenheternas händelselistor, annars inte.
2 -- Om denna flagga finns ska ett kvittensmeddelande skickas till
utenheternas händelselistor, annars inte.
4 -- Om den enskilda utenheten har pip-funktion ska den aktiveras då
meddelandet tas emot.
8 -- Meddelandet ska tas emot av varje utenhet oberoende av vad det står i 
urvalslistorna.
16 -- Om meddelandet är av typen INFO placeras det förutom i
händelselistan också i larmfönstrets info-del. Kvittens- resp
returmeddelande som för t.ex. A-larm. 

<b>Attribute 
Type: pwr_sAttrRef
Flags: CompileSetParam 

Anger komplett namn på övervakat attribut. Om ingången IN lämnas öppen ska 
vid konfigureringen Attribute fyllas i. Knyts ingången till annat objekt ifylls 
attributet vid kompileringen av PROVIEW. 

<b>AlarmStatus 
Type: pwr_tUInt16
Flags: Intern 

Aktuellt statusvärde. Bitmask bestående av 16 bitar där de 8 minst signifikanta 
bitarna anger tillståndet och de 8 mest signifikanta prioriteten . 

Tillståndet är en kombination av följande: 

0 -- Normaltillstånd
1 -- Larmtillstånd
2 -- Okvitterat larmtillstånd 

Prioriteten är en av prioriteterna EventPriority . 

Följande värde på AlarmStatus kan förekomma: 

EventPrority + 1 => Prioritet + larmtillstånd
EventPrority + 3 => Prioritet + okvitterat larm och rådande larmtillstånd 
EventPrority + 2 => Prioritet + okvitterat larm och normaltillstånd 

<b>AlarmCheck 
Type: pwr_tBoolean
Flags: Intern
Default value: TRUE 

Används internt vid händelse detektering. 

<b>DetectCheck 
Type: pwr_tBoolean
Flags: Intern 
 

Anger om larmtillstånd ska detekteras eller ej. FALSE betyder att larmtillstånd 
inte ska detekteras; TRUE att larmtillstånd ska detekteras. 

<b>DetectSend 
Type: pwr_tBoolean
Flags: Intern 

Anger om meddelande sänts till utenheter (eller mer precis till meddelande 
hanteraren) eller ej; TRUE betyder att meddelande har sänts. 

<b>DetectTime 
Type: pwr_tTime
Flags: Intern 

Datum och klockslag för senast detekterade larmtillstånd. 

<b>ReturnCheck 
Type: pwr_tBoolean
Flags: Intern 

Anger om objektet återgått till normaltillstånd eller ej. TRUE betyder att 
objektet återgått till normaltillstånd. 

<b>ReturnSend 
Type: pwr_tBoolean
Flags: Intern 

Anger om returmeddelande med ReturnText sänts till utenheterna eller ej. 
TRUE betyder att returmeddelande sänts. 

<b>ReturnTime 
Type: pwr_tTime
Flags: Intern 

Datum och klockslag för senast detekterade retur till normaltillstånd. 

<b>AckTime 
Type: pwr_tTime
Flags: Intern 

Datum och klockslag för senast detekterade kvittens. 

<b>AckOutunit 
Type: pwr_tUInt32
Flags: Intern 

Identitet på utenhet (operatör) varifrån kvittering skett. 

<b>BlockStatus 
Type: pwr_tUInt16
Flags: Intern 

Ej använd. 

<b>ActualValue 
Type: pwr_tFloat32
Flags: Intern 

Den övervakad storhetens värde vid tidpunkten TimeOfDetect . 

<b>CtrlLimit 
Type: pwr_tFloat32
Flags: Param 

Larmgräns. 

<b>Hysteres 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Hysteresvärde. Ett absolutvärde som övervakad storhet måste avvika från 
larmgränsen CtrlLimit före retur till normaltillstånd. 

<b>High 
Type: pwr_tBoolean
Flags: Param
Default value: TRUE 

Anger om larmläge föreligger då storheten ligger över eller under CtrlLimit . 

FALSE Under; om värdet av övervakad storhet < CtrlLimit så larmläge.
TRUE över; om värdet av övervakad storhet > CtrlLimit så larmläge. 

<b>Unit 
Type: pwr_tString16
Flags: Param 

Den övervakade storhetens enhet. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer. 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timerkön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( ? tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller, om sådant objekt inte används, på 
TimerDoDum . Efter tiden TimerTime nollställs den av TimerDo angivna 
signalen. 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 0.0 

Fördröjning i sekunder. Anger när, efter det att larmtillstånd inträtt, 
meddelandet ska skickas. Om larmtillståndet försvinner innan tiden gått ut 
genereras inget meddelande. 

TimerTime = PLC-jobbets bascykeltid. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts då laddfilen skapas. Används i målmiljön. 

<b>TimerAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
TimerTime . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>TimerMin, TimerMax 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Anger tillåtet intervall för TimerTime vid operatörs inmatning. 

TimerMin = TimerTime = TimerMax 

<b>Tips 

Att den övervakade storheten får tillhöra ett godtyckligt objekt betyder att inte 
bara signalobjekt utan också andra objekt kan övervakas; t.ex. attribut i egen 
definierade objekt. 

Både ASup och DSup objekt kan konfigureras på olika sätt. Vid konfigurering 
i PLC program handhar PLC jobbet övervakningen. När objekten konfigureras 
utanför PLC program.

The Supervisory Objects may also be used Outside PLC Programs 

<h1>Se även 

DSup , som hanterar övervakning av digital storhet.<link> DSup

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Av
Av
Engelsk text<link> Av, "", $pwr_exe/pwrb_xtthelp.dat

Analogtvärde. 

<h1>Beskrivning

Konfigurerar beräknad analog storhet (=flyttalsvariabel ) under 'Plant 
Configuration'. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri beskrivande text för att beskriva vad storheten representerar eller vad 
den används till. 

<b>ValueIndex 
Type: pwr_tUInt32
Flags: InitSetParam 

Index i AVValue -vektorn hos de Av_Value_Base -objekt som används för 
bas- resp. delfrekvenssampel. Initieras vid start av rs_init. 

<b>*ActualValue 
Type: pwr_tFloat32
Flags: 

Pekare till ärvärdet (= ingenjörsvärdet ActualValue ). 

<b>InitialValue 
Type: pwr_tFloat32
Flags: FixParam
Default: 0.0 

InitialValue anger signalens startvärde vid s.k. kallstart. Vilket värde som utgör 
startvärde vid varmstart ( = PLC-programbyte) beror på om signalen är ny eller 
ej. Existerade signalen i förra programversionen används dess sista ärvärde 
som startvärde, annars I nitialValue . 

<b>Unit 
Type: pwr_tString16
Flags: Param 

Ingenjörsenhet. Enhet för ActualValue . 

<b>NoOfDecimals 
Type: pwr_tUInt8
Flags: Param
Default value: 0 

Antal decimaler vid presentation av ActualValue . 

<b>PresMinLimit, PresMaxLimit 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0, 0.0 

Skalområdets undre resp övre gräns i objektbildens stapeldiagram. 

<b>DefGraph 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i processbild anges namnet på motsvarande bilds Graph -
objekt här. Därigenom kan den aktuella processbilden enkelt aktiveras från 
'Operator Window'. Som information visas namnet på Graph - objektet i 
signalobjektets MER-bild. 

<b>DefTrend 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i snabb- eller trendkurvgrupp anges namnet på 
motsvarande PlotGroup -objekt här. Därigenom kan aktuellt kurvdiagram 
enkelt aktiveras från 'Operator Window'. Som information visas namnet på 
PlotGroup -objektet i signalobjektets MER-bild. 

<b>OwnedByPLC 
Type: pwr_tBoolean 

Används ej. 

<b>Tips 

Placera i utvecklingsmiljön objektet under $ PlantHier objekt. 

Objektet tilldelas initialt värde (? 0 ) i målnoden, t.ex. med hjälp av StoAv.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper


 

</topic> **********
<topic> Backup
Backup 
Engelsk text<link> Backup, "", $pwr_exe/pwrb_xtthelp.dat

Pekar ut ett datasegment i rtdb för lagring (backup) på fil. 

<h1>Beskrivning

Är det av Backup objektet utpekade segmentet skapat i utvecklingsmiljön kan 
uppbackningen avse antingen hela objektet eller enskilda attribut. I 
utvecklingsmiljön kan Backup-objektet konfigureras dels från 
konfigurationseditorn, dels från PLC Editorn. 

Backup-objekt skapat i konfigurationseditorn placeras under $PlantHier - 
objekt. Backup-objektet och objekt som refereras måste ligga lagrade på 
samma nod, annars sker ingen uppbackning. DataName talar om vad som ska 
backas upp. 

Ingången på backup-objekt, skapat i PLC Editorn , kopplas till utgången på 
aktuellt objekt. Det förutsätts att denna utgång avser ett attribut med Output-
flagga. Med ObjectBackup anges om hela det aktuella objektet eller bara den 
aktuella utgången ska backas upp. Vid PLC-jobbets initiering kommer 
DataName att fylls i. 

För objekt skapade under drift i målmiljön , t.ex. objekt skapade från C- 
program, gäller att endast hela objektkroppar kan backas upp; inte enstaka 
attribut. Motsvarande Backup-objekt skapas då också på initiativ av 
tillämpningsprogrammet. 

<h1>Input Attributes 

<b>In 
Type: pwr_tBoolean
Flags: Intern 

<h1>Internal Attributes 

<b>ObjectBackup 
Type: pwr_tBoolean
Flags:
Default value: FALSE 

Används av Backup-objekt skapade i PLC Editorn. Anger om hela det till 
Backup-objekt kopplade objektet ska backas upp eller bara objektets utgång. 

FALSE innebär att endast den till Backup-objekt kopplade utgången ( = 
attributet ) backas upp. TRUE innebär att hela objektet backas upp. 

<b>DataName 
Type: pwr_tString80
Flags: 

Namn på det som ska backas upp. Max 79 tecken.
Exempel: VKV-ProdEnergi ( hela objektet backas upp )
VKV-TEMP1. ActualValue ( bara ActualValue backas upp) 

<b>Fast 
Type: pwr_tBoolean
Flags:
Default value: FALSE 

Anger om uppbackningscykeln ska vara snabb eller långsam. FALSE innebär 
en långsam backup-cykel och TRUE en snabb backup-cykel. Vad som avses 
med en långsam resp. snabb backup-cykel framgår av Backup_Conf objektet. 

<b>Status 
Type: pwr_tUInt32
Flags:
Default value: 

Statuskod på VMS-format. Anger om fel uppstått i samband med objektets 
uppbackning. Så länge Status = 0 har ingen upp backning gjorts. 

<b>Tips 

NB! Hela signalobjekt skall inte backas upp, eftersom det kan leda till problem 
efter laddning. 

Varje typ av signalobjekt har en pekare * ActualValue och det är inte sannolikt 
att dessa pekare kommer att bli de samma efter en omladdning som före. Om 
backup av enskilt attribut i ett signalobjekt erfordras, t.ex. av ActualValue i ett 
Av objekt, backa då upp attributet och inte hela objektet. 

Då en nods 'run-time environment' skapas får instansernas attribut 
defaultvärden. De instanser i backup-filen som, 

återfinns i nodens rtdb kommer att uppdateras utifrån upp backningen 

saknas i rtdb, t.ex. på grund av att de tagits bort eller fått nytt namn, kommer 
att hoppas över 

I samband med byte av PROVIEW distribution kan man inte förutsätta att upp 
backningen kan användas. 

<h1>Se även 

Backup_Conf <link> Backup_Conf

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper
 



</topic> **********
<topic> Backup_Conf
Backup_Conf
Engelsk text<link> Backup_Conf, "", $pwr_exe/pwrb_xtthelp.dat

Innehåller attribut för nodens backup-jobb. 

<h1>Beskrivning

Vilka objekt eller delar av objekt som ska ingå i backup-funktionen 
konfigureras med hjälp av Backup -objekt. 

Backup av enskilt objekt kan ske i en snabb eller långsam cykel. Vad som 
menas med snabbt resp. långsamt anges av CycleFast resp. CycleSlow . 

Backup_Conf konfigureras direkt under aktuellt $Node objekt 

<h1>Internal Attributes 

<b>BackupFile 
Type: pwr_tString80
Flags: 

Backup-filens namn. Max. 79 tecken. Om backup-filen inte lagras på den 
lokala noden ska också noddestinationen anges; t.ex. 1.30:: 
PWRP_LOAD:VKVAMN.BCK 

<b>CycleFast 
Type: pwr_tUInt32
Flags:
Default value: 0 

Anger den snabba backup-cykelns period i 10-dels sekunder; t.ex. 300, dvs 30 
sek. Om CycleFast = 0 väljs en default (=BCK_DEFAULT_FAST ) cykeltid. 
Denna är 10 sek f. n. 

<b>CycleSlow, 
Type: pwr_tUInt32
Flags:
Default value: 0 

Anger den långsamma backup-cykelns period i 10-dels sekunder; t.ex. ? 200, 
dvs 2 minuter. Om CycleSlow = 0 väljs en default 
(=BCK_DEFAULT_SLOW) cykeltid. Denna är 60 sek för närvarande. 

<b>CntFast, CntSlow 
Type: pwr_tUInt32
Flags: Intern 

Antal kompletta 'snabba' resp. 'långsamma' backup-cykler som gjorts. 

<b>BytesFast, BytesSlow 
Type: pwr_tUInt32
Flags: Intern 

Antal bytes som skrivs under 'snabba' resp. 'långsamma' backup-cyklen. 

<b>SegFast, SegSlow 
Type: pwr_tUInt32
Flags: Intern 

Antal Backup -objekt som ingick i senaste 'snabba' resp. 'långsamma' backup-
cykeln. 

<b>ObjTimeFast, ObjTimeSlow 
Type: pwr_tTime
Flags: Intern 

Tid då Backup -objekten i 'snabba' resp. 'långsamma' backup-cykeln senast 
uppdaterades i backup-filen. 

<b>LastWrite 
Type: pwr_tTime
Flags: Intern 

Tid för senaste skrivning i backup-filen utan hänsyn till typ ( snabb, långsam) 
av backup-cykel. 

<b>DiskStatus 
Type: pwr_tUInt32
Flags: Intern 

Statuskod efter senaste operation mot disk. 

<h1>Se även 

Backup<link> Backup

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper
 


</topic> **********
<topic> BCDDo
BCDDo 
Engelsk text<link> BCDDo, "", $pwr_exe/pwrb_xtthelp.dat

BCD ut ( t.ex. till teckenfönster) 

<h1>Beskrivning

Avbildar decimalt flyttal på 4 BCD-kodade siffror (=16 digitala signaler). 
Eventuell 'overflow' beräknas. 

Insignalen trunkeras till närmast lägre heltal. 

Negativ insignal sätter samtliga utgångar till 0. 

Flera BCDDo objekt kan seriekopplas för att klara tal = 10 000. 

Utgångarnas namn anger vilket värde utgången representerar. 

Används t.ex. för att styra teckenfönster. 

BCDDo = B inary C oded D ecimal D igital o utput. 

<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Positiv analog storhet som ska BCD-kodas. är IN ansluten avses en yttre signal, 
annars konstanten In . Ändringar av In gjorda under drift beaktas. 

<h1>Output Attributes 

<b>BCD0, BCD1, BCD2, BCD3 
Graph name: 1, 2, 4 resp. 8
Type: pwr_tBoolean
Flags: Output 

BCD0 - BCD3 ger 1-talssiffran. 

<b>BCD4, BCD5, BCD6, BCD7 
Graph name: 10, 20, 40 resp. 80
Type: pwr_tBoolean 

Flags: Output 

BCD4 - BCD7 ger 10-talssiffran.

 <b>BCD8, BCD9, BCDA, BCDB 
Graph name: 100, 200, 400 resp. 800
Type: pwr_tBoolean
Flags: Output 

BCD8 - BCDB ger 100-talssiffran. 

<b>BCDC, BCDD, BCDE, BCDF 
Graph name: 1000, 2000, 4000 resp. 8000
Type: pwr_tBoolean
Flags: Output 

BCDC - BCDF ger 1000-talssiffran. 

<b>Rest 
Graph name: RES
Type: pwr_tFloat32
Flags: Output 

Insignal / 10 000, eller insignalens värde om insignalen är mindre än noll 
(=ogiltigt värde) 

<h1>Internal Attributes 

- 
<h1>Exempel 

Antag att insignalen har värdet 235 016.7 

BCD-värdet blir då 5016 eftersom, 

BCD1 och BCD2 båda är satta => 6
BCD4 är satt => 10
BCDC och BCDE båda är satta => 5000 

Rest = 23. Det är möjligt att ansluta Rest -utgången till ingången In på ett andra 
BCDDo objekt. Därvid kommer de decimal siffror som representerar 10 000 
och 100 000 också att BCD-kodas. 

<h1>Se även 

DiBCD , som representerar den motsatta funktionen.<link> DiBCD

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper



</topic> *************
<topic> BodyText
BodyText
Engelsk text<link> BodyText, "", $pwr_exe/pwrb_xtthelp.dat

Flerradigt textobjekt 

<h1>Beskrivning

Används då flerradig beskrivning ska göras i t.ex. Document objekt. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Text 
Type: pwr_tText1024
Flags: DevOnly 

Anger den text som ska visas i objektet. 

Används Tab-tecken i Attribute Editor kommer det i objektet att visas som 
blanktecken. 

<b>TextAttribute 
Type: pwr_tUInt32
Flags: DevOnly
Default value: 1 

Attributet påverkar textens utseende. Följande värden finns: 

 
<b>FrameAttribute 
Type: pwr_tUInt32
Flags: DevOnly
Default value: 2 

Attributet anger om texten ska omges med ram. 

 
<b>FrameWidth, FrameHeight 
Type: pwr_tFloat32
Flags: DevOnly
Default value: 0, 0 

I det fall objektet har ram bestämmer attributen ramens storlek. 

0, 0 innebär att ramstorleken anpassas efter den aktuella texten. 

Används objektet bara för att rama in andra objekt ökas default värdena så att 
ramen får den önskade storleken. 

<h1>Se även 
 

Frame , Head , Text och Title.<link> Frame

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> CArithm
CArithm 
Engelsk text<link> CArithm, "", $pwr_exe/pwrb_xtthelp.dat

Friprogrammerbart objekt. Kodning sker i C-språket. 

<h1>Beskrivning

Koden editeras med hjälp av Attribute Editor under objektets Code attribut. 

Upp till 8 analoga ingångar respektive utgångar och upp till 8 digitala ingångar 
respektive utgångar. 

Digitala ingångar kan inverteras antingen med hjälp av Attribute Editor eller i 
koden med den logiska '!'-operatorn. 

NB! Varje utgång som inte explicit tilldelas värde i koden kommer implicit att 
få värdet 0 vid varje exekvering. 

<h1>Input Attributes 

<b>AIn1, AIn2, ... , AIn8 
Graph name: A1, ..., A8
Type: pwr_tFloat32
Flags: NoRtdb, OpenParam
Default value: 0.0, 0.0, ..., 0.0 

Anger analoga storheter som kan inkluderas Code . Om, t.ex. A1 är ansluten 
används den externa signalen, annars det interna attributet AIn1 . Förändringar 
av AIn1 , ..., AIn8 i målsystemet beaktas. 

NB! Ingångarna är sådana att den anslutna storheten förutsätts vara ett flyttal. 
Funktionen blir inte utan vidare korrekt om en heltalsstorhet ansluts till någon 
av ingångarna. 

<b>DIn1, DIn2, ... , DIn8 
Graph name: d1, ..., d8
Type: pwr_tBoolean
Flags: NoRtdb, OpenParam
Default value: FALSE, FALSE, ..., FALSE 

Anger digitala storheter som kan inkluderas Code . Om, t.ex. d1 är ansluten 
används den externa signalen, annars det interna attributet DIn1 . Förändringar 
av DIn1 , ..., DIn8 i målsystemet beaktas. 

<h1>Output Attributes 

<b>OutA1, OutA2, ... , OutA8 
Graph name: OA1, ..., OA8
Type: pwr_tFloat32
Flags: Output
Default value: 0.0, 0.0, ..., 0.0 

Det analoga resultatet efter den senaste Code evalueringen. 

<b>OutD1, OutD2, ... , OutD8 
Graph name: Od1, ..., Od8
Type: pwr_tBoolean
Flags: OutputDefault value: FALSE, FALSE, ..., FALSE 

Det binära resultatet efter den senaste Code evalueringen. 

<h1>Internal Attributes 

<b>Code 
Type: pwr_tText[1024]
Flags: DevOnly 

Ordinär C-kod med upptill 1024 tecken. Koden, som editeras med hjälp av 
Attribute Editor, kan inte ändras i målmiljön. Alla typer av C-satser är tillåtna. 

NB! Då en aritmetisk operator följs av ett 'graph name', t.ex. A1, ska operatorn 
och 'graph name' separeras av ett blanktecken eller en vänster parentes. 

<b>Tips 

Storleken på CArithm -objektets symbol anpassas efter textmängden i Code . 
För att undvika mycket breda CArithm-objekt avslutas C-satserna lämpligen 
med 'return' som i exemplet ovan. 

<h1>Se även 

AArithm <link> AArithm
DArithm <link> DArithm

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> ChanAi
ChanAi
Engelsk text<link> ChanAi, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar analog ingångskanal oberoende av det fysiska Ai-kortets typ. För 
omvandling från signalvärde till ärvärde används polynom . 

<h1>Beskrivning

SigValue omvandlas till ActualValue via givarfunktionen g , givarpolynomet p 
och filtret f enligt. 

ActualValue = f ( p( g( SigValue ) ) ), där valet av 

-- givarfunktion g styrs av SensorTypeCode
-- givarpolynom p styrs av SensorPolyType
-- filter f styrs av FilterType i Ai objektet 

Placeras direkt under Ai-kortobjekt. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva kanalen eller dess användning. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: CompileFixParam 

Namn på Ai-signalobjekt knutet till kanalobjektet. 

<b>Identity 
Type: pwr_tString40
Flags: Param 

Kanalens identitet. Valfri text, t.ex. Ai0 för att beteckna kortets första kanal, 
fysisk kabelmärkning etc. 

<b>Number 
Type: pwr_tUInt16
Flags: CompileFixParam
Default value: 0 

Attributet används för att knyta ChanAi objektet till en bestämd kanal på 
kortet. Kortets fysiska kanaler numreras 0,1, ... , ( MaxNoOfChannels -1), där 
MaxNoOfChannels finns i kortobjektet.
Kortets kanalnummer räknas enligt korttillverkarens anvisningar. 

<b>ConversionOn 
Type: pwr_tBoolean
Flags: Param
Default value: TRUE 

Anger om signalobjektets RawValue ska uppdateras eller ej. FALSE betyder 
ingen uppdatering; TRUE innebär att RawValue kommer att uppdateras med 
cykeltiden ScanInterval . 

<b>ScanInterval 
Type: pwr_tUInt32
Flags: Param
Default value: 1 

Anger, i förhållande till grundperioden T0, hur ofta RawValue ska läsas in och 
konverteras till ActualValue .
IO-jobbet hanterar lokala Ai signaler med grundperioden T0 = CycleTimeBus 
och icke-lokala Ai signaler med grundperioden T0 = CycleTimeSerial ; se 
IOHandler). 

ScanInterval ska vara = 1. 

RawValue kommer att uppdateras med perioden: ScanInterval · T0. 

<b>SensorTypeCode 
Type: pwr_tUInt16
Flags: Param
Default value: 0 

Signalvärdet kan modifieras av givarfunktionen g före vidare hantering. 
Följande givarfunktioner finns: 

0 -- Normalfallet: g( SigValue ) = SigValue 

<b>SensorPolyType 
Type: pwr_tUInt16
Flags: Param
Default value: 1 

Anger på vilket sätt givarfunktionens värde g( SigValue ) ska omvandlas. 
Följande konverteringstyper finns att välja mellan: 

0 -- Ingen omvandling: p ( g( SigValue ) ) = g( SigValue )
1 -- Normal omvandling via givarpolynomet: p ( g( SigValue ) ) =
SensorPolyCoef0 + SensorPolyCoef1 g( SigValue ) +
SensorPolyCoef2 g( SigValue ) 

SigValue tillhör det Ai objekt som utpekas av SigChanCon . SensorTypeCode 
anger givarfunktionen g. 

<b>SensorPolyCoef0 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Anger den konstanta termen i givarpolynomet; se ovan. 

<b>SensorPolyCoef1, SensorPolyCoef2 
Type: pwr_tFloat32
Flags: Param
Default value: 1.0 resp. 0.0 

Koefficienter i givarpolynomet; se ovan 

<b>SigValueUnit 
Type: pwr_tString16
Flags: Param 

Ingenjörsenhet för SigValue , t.ex. Volt. 

<h1>Se även 

ChanAit<link> ChanAit
Vars omvandling till ActualValue baseras på en styckvis linjär kurva definierad 
i tabell. 

<b>Tips 

ChanAi objekt konfigureras under lämpligt Ai-kortobjekt. 

Rack- och kortobjekt för olika I/O system är separat dokumenterade. 

För att skapa kortobjekt med tillhörande kanalobjekt används lämpligen 
funktionen 'Configure Card' i "Utility Window". 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper



</topic> **********
<topic> ChanAit
ChanAit
Engelsk text<link> ChanAit, "", $pwr_exe/pwrb_xtthelp.dat

<b>Beskrivning saknas!


<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper
 

</topic> **********
<topic> ChanAo
ChanAo
Engelsk text<link> ChanAo, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar analog utgångskanal oberoende av det fysiska Ao-kortets typ. 

<h1>Beskrivning 

Attributes Used in Ao-signal Conversion 

Om EmergBreakTrue = TRUE och EmergBreakSelect = 2 kommer utsignalen 
att baseras på FixedOutValue . Annars avgör TestOn vilket attribut utsignalen 
baseras på. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva kanalen eller dess användning. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: CompileFixParam 

Namn på associerat Ao -signalobjekt. 

<b>Identity 
Type: pwr_tString40
Flags: Param 

Kanalens identitet. Valfri text, t.ex. Ao0 för att beteckna kortets första kanal, 
fysisk kabelmärkning etc. 

<b>Number 
Type: pwr_tUInt16
Flags: CompileFixParam
Default value: 0 

Attributet används för att knyta ChanAo objektet till en bestämd kanal på 
kortet. Kortets fysiska kanaler numreras 0,1, ... , ( MaxNoOfChannels -1), där 
MaxNoOfChannels finns i kortobjektet. 

Kortets kanalnummer räknas enligt korttillverkarens anvisning. 

<b>TestOn 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Signaltest. Anger om utsignalen ska baseras på ingenjörsvärdet ActualValue 
eller på TestValue .

<b>TestValue 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Signaltestvärde. Utsignalen baseras på TestValue istället för ActualValue när 
TestOn är TRUE.

<b>FixedOutValue 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Åtgärdsvärde. Utsignalen sätts till FixedOutValue istället för ActualValue då 
EmergBreakTrue är TRUE och EmergBreakSelect = 2. 

EmergBreak -attributen tillhör ett $ Node -objekt. 

<b>OutPolyType 
Type: pwr_tUInt16
Flags: Param
Default value: 1 

Omvandlingstyp. Anger hur ärvärdet ska omvandlas till signalvärde. Följande 
konverteringstyper finns att välj mellan: 

0 -- Ingen omvandling: SigValue = ActualValue 

1 -- Normal omvandling enl. utsignalpolynomet:
SigValue = OutPolyCoef0 + OutPolyCoef1 · ActualValue 

ActualValue och SigValue tillhör det Ao objekt som utpekas av SigChanCon . 

<b>OutPolyCoef0 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Anger den konstanta termen i utsignalpolynomet; se ovan. 

<b>OutPolyCoef1 
Type: pwr_tFloat32
Flags: Param
Default value: 1.0 

Koefficienter i utsignalpolynomet; se ovan 

<b>OutMinLimit, OutMaxLimit 
Type: pwr_tFloat32
Flags: Param
Default value: -4.99 resp. 4.99 

Anger undre resp övre gränsen för SigValue .

<b>SigValueUnit 
Type: pwr_tString16
Flags: Param 

Ingenjörsenhet för SigValue , t.ex. Volt. 

<h1>Tips 

ChanAo objekt konfigureras direkt under lämpligt Ao-kortobjekt. 

Rack- och kortobjekt för olika I/O system är separat dokumenterade. 

För att skapa kortobjekt med tillhörande kanalobjekt används lämpligen 
funktionen 'Configure Card' i "Utility Window". 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> ChanCo
ChanCo
Engelsk text<link> ChanCo, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar pulsräknarkanal oberoende av det fysiska Co-kortets typ. 

<h1>Beskrivning 

ChanCo objekt konfigureras direkt under lämpligt Co-kortobjekt. Objekt för att 
konfigurera olika I/O system finns separat dokumenterade.
För att skapa kortobjekt med tillhörande kanalobjekt används lämpligen 
funktionen 'Configure Card' i "Utility Window". 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva kanalen eller dess användning. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: CompileFixParam 

Namn på Co -signalobjekt knutet till kanalobjektet. 

<b>Identity 
Type: pwr_tString40
Flags: Param 

Kanalens identitet. Valfri text, t.ex. Co0 för att beteckna kortets första kanal, 
fysisk kabelmärkning etc. 

<b>Number 
Type: pwr_tUInt16
Flags: CompileFixParam
Default value: 0 

Attributet används för att knyta ChanCo objektet till en bestämd kanal på 
kortet. Kortets fysiska kanaler numreras 0,1, ... , ( MaxNoOfCounters -1), där 
MaxNoOfCounters finns i kortobjektet. 

Kortets kanalnummer räknas enligt korttillverkarens anvisning. 

<b>ConversionOn 
Type: pwr_tBoolean
Flags: Param
Default value: TRUE 

Anger om signalobjektets RawValue ska uppdateras eller ej. FALSE betyder 
ingen uppdatering; TRUE innebär att RawValue kommer att uppdateras med 
perioden T0, där T0 är lika med ScanTime för det/de PlcPgm i noden som 
exekverar med den kortaste cykeltiden. 

<b>SensorPolyType 
Type: pwr_tUInt16 

Ej använd. 

<b>SensorPolyCoef0, SensorPolyCoef1, SensorPolyCoef2 
Type: pwr_tFloat32 

Ej använd. 

<b>SyncRawValue 
Type: pwr_tUInt32 

Ej använd. 

<b>CounterZeroFlag 
Type: pwr_tBoolean 

Ej använd. 

<b>CounterSyncFlag 
Type: pwr_tBoolean 

Ej använd. 

<b>CounterSyncValue 
Type: pwr_tFloat32 

Ej använd. 

<b>IntegationSum 
Type: pwr_tFloat32 

Ej använd. 

<b>IntegationTime 
Type: pwr_tUInt32 

Ej använd. 

<b>LastUpdateTime 
Type: pwr_tTime 

Ej använd. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> ChanDi
ChanDi
Engelsk text<link> ChanDi, "", $pwr_exe/pwrb_xtthelp.dat

Digital ingångskanal

<h1>Beskrivning 

Konfigurerar digital ingångskanal oberoende av det fysiska Di-kortets typ.

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva kanalen eller dess användning. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: CompileFixParam 

Namn på Di -signalobjekt knutet till kanalobjektet. 

<b>Identity 
Type: pwr_tString40
Flags: Param 

Kanalens identitet. Valfri text, t.ex. Di0 för att beteckna kortets första kanal, 
fysisk kabelmärkning etc. 

<b>Number 
Type: pwr_tUInt16
Flags: CompileFixParam
Default value: 0 

Attributet används för att knyta ChanDi objektet till en bestämd kanal på 
kortet. Kortets fysiska kanaler numreras 0,1, ... , ( MaxNoOfChannels -1), där 
MaxNoOfChannels finns i kortobjektet. 

Kortets kanalnummer räknas enligt korttillverkarens anvisningar. 

ConversionOn 
<b>Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Anger om ingenjörsvärdet ActualValue ska uppdateras eller ej. FALSE betyder 
ingen uppdatering; TRUE innebär att ActualValue ska uppdateras med 
perioden T0, där T0 är lika med ScanTime för det/de PlcPgm i noden som 
exekverar med kortaste cykeltiden. 

Idag är det i utvecklingsmiljön inte meningsfullt att tilldela ConversionOn ett 
värde ? 0 , eftersom värdet inte kommer att beaktas i målmiljön. Istället 
datasätts ConversionOn via kortobjektets ConvMask1 ; se vidare under 
ConvMask1 i kortobjektet. 

I målmiljön kan värdet av ConversionOn ändras via Di-objektets MER-bild. 

<b>InvertOn 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Anger om det inlästa digitala värdet ska inverteras före lagring i ActualValue 
eller ej. FALSE betyder att det inlästa värdet inte ska inverteras; TRUE betyder 
att det ska inverteras. 

Idag är det i utvecklingsmiljön inte meningsfullt att tilldela InvertOn ett värde ? 
0 , eftersom värdet inte kommer att beaktas i målmiljön. Istället datasätts 
InvertOn via kortobjektets InvMask1 ; se vidare under InvMask1 i 
kortobjektet. 

I målmiljön kan värdet av InvertOn ändras via Di-objektets MER-bild. 

<h1>Tips 

ChanDi objekt konfigureras direkt under lämpligt kortobjekt. 

Rack- och kortobjekt för olika I/O system är separat dokumenterade. 

För att skapa kortobjekt med tillhörande kanalobjekt används lämpligen 
funktionen 'Configure Card' i "Utility Window". 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> ChanDo
ChanDo
Engelsk text<link> ChanDo, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar digital utgångskanal oberoende det fysiska Do-kortets typ. 

<h1>Beskrivning 

Om EmergBreakTrue = TRUE och EmergBreakSelect = 2 kommer utsignalen 
att baseras på FixedOutValue . Annars avgör TestOn vilket attribut som 
utsignalen baseras på. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva kanalen eller dess användning. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: CompileFixParam 

Namn på Do -signalobjekt knutet till kanalobjektet. 

<b>Identity 
Type: pwr_tString40
Flags: Param 

Kanalens identitet. Valfri text, t.ex. Do0 för att beteckna kortets första kanal, 
fysisk kabelmärkning etc. 

<b>Number 
Type: pwr_tUInt16
Flags: CompileFixParam
Default value: 0 

Attributet används för att knyta ChanDo objektet till en bestämd kanal på 
kortet. Kortets fysiska kanaler numreras 0,1, ... , ( MaxNoOfChannels -1), där 
MaxNoOfChannels finns i kortobjektet. 

Kortets kanalnummer räknas enligt korttillverkarens anvisningar. 

<b>InvertOn 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Anger om värdet av ActualValue ska inverteras före utställning eller ej. 
FALSE betyder att värdet inte ska inverteras; TRUE betyder att det ska 
inverteras. 

Idag är det i utvecklingsmiljön inte meningsfullt att tilldela InvertOn ett värde ? 
0, eftersom värdet inte kommer att beaktas i målmiljön. Istället datasätts 
InvertOn via kortobjektets InvMask1 ; se vidare under InvMask1 i 
kortobjektet. 

I målmiljön kan värdet av InvertOn ändras via Do-objektets MER-bild. 

<b>TestOn 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Signaltest. Anger om utsignalen ska baseras på ingenjörsvärdet ActualValue 
eller på TestValue.

Idag är det i utvecklingsmiljön inte meningsfullt att tilldela TestOn ett värde ? 
0 , eftersom värdet inte kommer att beaktas i målmiljön. Istället datasätts 
TestOn via kortobjektets TestMask1 

I målmiljön kan värdet av TestOn ändras via Do-objektets MER-bild. 

<b>TestValue 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Utvärdet baseras på TestValue istället för ActualValue då TestOn är TRUE. 

Idag är det i utvecklingsmiljön inte meningsfullt att tilldela TestValue ett värde 
? 0 , eftersom värdet inte kommer att beaktas i målmiljön. Istället datasätts 
TestValue via kortobjektets TestValue1 ; se vidare under TestValue1 i 
kortobjektet. 

I målmiljön kan värdet av TestValue ändras via Do-objektets MER-bild. 

<b>FixedOutValue 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Åtgärdsvärde. Utsignalen sätts till FixedOutValue istället för ActualValue då 
EmergBreakTrue är TRUE och EmergBreakSelect = 2. 

EmergBreak -attributen tillhör ett $Node -objekt. 

Idag är det i utvecklingsmiljön inte meningsfullt att tilldela FixedOutValue ett 
värde ? 0 , eftersom värdet inte kommer att beaktas i målmiljön. Istället 
datasätts FixedOutValue via kortobjektets FixedOutValue1 ; se vidare under 
FixedOutValue1 i kortobjektet. 

I målmiljön kan värdet av FixedOutValue ändras via Do-objektets MER-bild. 

<h1>Tips 

ChanDo objekt konfigureras direkt under lämpligt Do-kortobjekt. 

Rack- och kortobjekt för olika I/O system är separat dokumenterade. 

För att skapa kortobjekt med tillhörande kanalobjekt används lämpligen 
funktionen 'Configure Card' i "Utility Window". 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Co
Co
Engelsk text<link> Co, "", $pwr_exe/pwrb_xtthelp.dat

Räknaringång (= Co unter). 

<h1>Beskrivning 

Konfigurerar pulsräknarsignal i 'Plant Configuration'.
Inläsning av av råvärde för pulsräknarsignaler anslutna till lokalt I/O-system 
hanteras av PLC-jobbet och konverteringen till ingenjörsvärde av IO-jobbet. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva vilken fysisk signal som representeras; t.ex. 
signalnamn, beskrivande text etc. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: 

Namn på associerat kanalobjekt. 

<b>ActualValue 
Type: pwr_tFloat32 

Ej använd. 

<b>Unit 
Type: pwr_tString16 

Ej använd. 

<b>NoOfDecimals 
Type: pwr_tUInt8
Flags: Param
Default value: 0 

Antal decimaler vid presentation av ActualValue . 

<b>PresMinLimit, PresMaxLimit 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0, 0.0 

Skalområdets undre resp övre gräns vid presentation av AbsValue . Används 
t.ex. i stapeldiagrammet i Co-objektens objektbild 

<b>ValueIndex 
Type: pwr_tUInt32
Flags: InitSetParam 

Index i vektorn hos de Co_Value_Base - och Ca_Value_Base -objekt som 
används för bas- resp. delfrekvenssampel. Initieras vid start av rs_init. 

<b>*RawValue 
Type: pwr_tInt32
Flags: 

Pekare till hårdvaruräknarens registervärde på pulsräknarkortet. 

<b>*AbsValue 
Type: pwr_tInt32
Flags: 

Pekar till absolutvärdet. 

AbsValue t = AbsValue t-1 + ( RawValue t - RawValue t-1 ) 

<b>DefGraph 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i processbild anges namnet på motsvarande bilds Graph -
objekt här. Därigenom kan den aktuella processbilden enkelt aktiveras från 
'Operator Window'. Som information visas namnet på Graph - objektet i 
signalobjektets MER-bild. 

<b>DefTrend 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i snabb- eller trendkurvgrupp anges namnet på 
motsvarande PlotGroup -objekt här. Därigenom kan aktuellt kurvdiagram 
enkelt aktiveras från 'Operator Window'. Som information visas namnet på 
PlotGroup -objektet i signalobjektets MER-bild. 

<h1>Tips 

Placera i utvecklingsmiljön objektet under $ PlantHier objekt så att det 
kommer att tillhöra samma målnod som dess associerade kanalobjekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Comph
Comph
Engelsk text<link> Comph, "", $pwr_exe/pwrb_xtthelp.dat

Jämför (= Comp ares ) analog storhet mot övre (= h igh) gräns. 

<h1>Beskrivning 

Både insignalen och gränsen kan antingen vara konstanter, definierade med 
hjälp av Attribute Editor, eller vanliga analoga signaler. 


Utsignalen är TRUE när insignalen är större än gränsvärdet, dvs Lim . 
Hysteresen beaktas då utsignalen åter ska bli FALSE. Utsignalen blir FALSE 
så snart insignalen blir mindre än eller lika med gränsvärdet minus hysteresen. 

<h1>Input Attributes 

<b>Lim 
Graph name: HIG
Type: pwr_tFloat32
Flags: InRtdb, OpenParam, Access
Default value: 0.0 

Anger det aktuella övre gränsvärdet. Värdet kan vara dynamiskt eller statiskt. 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Anger värdet som ska jämföras med gränsvärdet Lim . 

<h1>Output Attributes 

<b>High 
Graph name: hl
Type: pwr_tBoolean
Flags: Output 

Flaggan anger om In överstiger gränsvärdet eller ej FALSE betyder att In inte 
överstiger gränsen; TRUE innebär att In överstiger gränsen eller har över stigit 
gränsen utan att ha nått en nivå, enligt hysteresen, där flaggan ska tas ner. 

<h1>Internal Attributes 

<b>Hysteres 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 0.0 

Anger värdet på hysteresen. Ett negativt värde är ej tillåtet. 

<b>AccLim 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Lim . Det är inte meningsfullt att manuellt ändra Lim -värdet om attributet 
samtidigt uppdateras av extern signal. Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinLim, MaxLim 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta och största tillåtna värde vid operatörsändring av Lim . 

<b>AccHys 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra Hysteres . 

<b>MinHys, MaxHys 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0, 0.0} 

Minsta ( = 0) och största tillåtna värde vid operatörsändring av Hysteres . 

<h1>Se även 

Compl.<link> Compl


<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Compl
Compl
Engelsk text<link> Compl, "", $pwr_exe/pwrb_xtthelp.dat

Jämför (= Comp ares ) analog storhet mot undre (= l ow) gräns. 

<h1>Beskrivning 

Både insignalen och gränsen kan antingen vara konstanter, definierade med 
hjälp av Attribute Editor, eller vanliga analoga signaler. 


Utsignalen är TRUE när insignalen är mindre än gränsvärdet, dvs Lim . 
Hysteresen beaktas då utsignalen åter ska bli FALSE. Utsignalen blir FALSE 
så snart insignalen blir större än eller lika med gränsvärdet plus hysteresen. 

<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Anger värdet som ska jämföras med gränsvärdet Lim . 

<b>Lim 
Graph name: LOW
Type: pwr_tFloat32
Flags: InRtdb, OpenParam, Access
Default value: 0.0 

Anger det aktuella övre gränsvärdet. Värdet kan vara dynamiskt eller statiskt. 

<h1>Output Attributes 

<b>Low 
Graph name: ll
Type: pwr_tBoolean
Flags: Output 

Flaggan anger om In är mindre än gränsvärdet eller ej. FALSE betyder att In är 
större än gränsvärdet; TRUE betyder att In är mindre än gränsvärdet eller har 
understigit gränsen utan att ha nått en nivå, enligt hysteresen, där flaggan ska 
tas ner. 

<h1>Internal Attributes 

<b>Hysteres 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 0.0 

Anger värdet på hysteresen. Ett negativt värde är ej tillåtet. 

<b>AccLim 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Lim . Det är inte meningsfullt att manuellt ändra Lim -värdet om attributet 
samtidigt uppdateras av extern signal. Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinLim, MaxLim 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta och största tillåtna värde vid operatörsändring av Lim . 

<b>AccHys 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra Hysteres. 

<b>MinHys, MaxHys 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta ( = 0) och största tillåtna värde vid operatörsändring av Hysteres . 

<h1>Se även 

Comph<link> Comph

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Count
Count
Engelsk text<link> Count, "", $pwr_exe/pwrb_xtthelp.dat

Pulsräknare (Pulse count er). 

<h1>Beskrivning 

Räknaren kan räknas upp, ner, nollställas eller ställas på fördefinierat värde.
Räknaren triggar på positiv flank. 

<h1>Input Attributes 

<b>CountUp 
Graph name: up
Type: pwr_tBoolean
Flags: InRtdb, OpenNoFunction, NoInvert
Default value: FALSE 

Positiv flank räknar upp Accum med 1. 

<b>CountDown 
Graph name: do
Type: pwr_tBoolean
Flags: InRtdb, OpenNoFunction, NoInvert
Default value: FALSE 

Positiv flank räknar ner Accum med 1. 

<b>Clear 
Graph name: c
Type: pwr_tBoolean
Flags: InRtdb, OpenNoFunction, NoInvert
Default value: FALSE 

Positiv flank nollställer Accum . 

<b>Init 
Graph name: i
Type: pwr_tBoolean
Flags: InRtdb, OpenNoFunction, NoInvert
Default value: FALSE 

Positiv flank sätter Accum = Preset . 

<h1>Output Attributes 

<b>Accum 
Graph name: PI
Type: pwr_tInt32
Flags: Output 

Anger aktuellt räknarvärde ( i form av heltal). Accum kan användas som 
RawValue till PiPos objektet..

Talområdet är -2 147 483 648 till 2 147 483 647. Det betyder att det är möjligt 
att ackumulera pulser med frekvensen 25 Hz kontinuerligt under 994 dagar 
utan risk för 'overflow', om Accum = 0 vid start. 

<b>Pos 
Graph name: pos
Type: pwr_tBoolean
Flags: Output 

Anger om Accum > 0 eller ej. FALSE betyder att Accum = 0 och TRUE 
innebär att Accum > 0. 

<b>Zero 
Graph name: z
Type: pwr_tBoolean
Flags: Output 

Anger om Accum = 0 eller ej. FALSE betyder att Accum ? 0 och TRUE 
innebär att Accum = 0. 

<b>Neg 
Graph name: neg
Type: pwr_tBoolean
Flags: Output 

Anger om Accum < 0 eller ej. FALSE betyder att Accum = 0 och TRUE 
innebär att Accum < 0. 

<b>Equal 
Graph name: eq
Type: pwr_tBoolean
Flags: Output 

Anger om Accum = Preset eller ej. FALSE betyder att Accum %ne; Preset och 
TRUE innebär att Accum = Preset . 

<h1>Internal Attributes 

<b>Preset 
Type: pwr_tInt32
Flags: Param, Access
Default value: 0 

Anger ett fördefinierat värde. 

<b>AccPre, AccAccum 
Type: pwr_tInt32
Flags: Param
Default value: 0 resp. 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Preset resp. Accum . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<h1>Tips 

Objektet kan användas som ett 'pulsräknarkort i mjukvara' om det kommer 
högst en puls varannan programcykel (flankdetektering). Finns Count - 
objektet i ett PlcPgm, som exekverar med den minsta tillåtna cykeltiden ( = 20 
millisekunder), kan pulser upptill 25 Hz detekteras. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper



</topic> **********
<topic> CStoAi
CStoAi
Engelsk text<link> CStoAi, "", $pwr_exe/pwrb_xtthelp.dat

Villkorlig lagring i Ai-signal (= C onditional Sto rage A nalog i nput). 

<h1>Beskrivning 

Villkorlig lagring av analogt värde på angiven lokal Ai-signal (= Ai objekt). 

Villkorlig lagring syftar på con-ingången, som förväntas vara kopplad. 

NB! Detta objekt används i samband med I/O-simulering. IOSimulFlag ska 
sättas TRUE och IOReadWriteFlag FALSE i $Node objektet, dvs noden får 
inte använda någon fysisk I/O-hårdvara samtidigt med detta objekt. 

<h1>Input Attributes 

<b>In 
Graph name: VAL
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Ingången kopplas till analog signal eller lämnas öppen. I senare fallet kommer 
värdet av In att vara föremål för lagring. 

<b>Cond 
Graph name: con
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Anger om lagring ska göras eller ej. FALSE betyder ingen lagring och TRUE 
innebär lagring. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>AiObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Anger namnet på det Ai objekt där lagringen ska göras. Ai-signalens sista 
namnled visas i CStoAi-symbolens nedre del. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>AiObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Ai -objektets namn som ska visas i CStoAi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 0 och 1 ger båda sista namnledet. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default: TRUE 

Anger om namnet på det till Ai -objektet kopplade kanalobjektet ska visas i 
CStoAi-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default : 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i CStoAi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Ai-signalens fullständiga namn anges; lämpligen på sätt som anges under 
GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> CStoAo
CStoAo
Engelsk text<link> CStoAo, "", $pwr_exe/pwrb_xtthelp.dat

Villkorlig lagring i Ao-signal ( C onditional Sto rage A nalog o utput). 

<h1>Beskrivning 

Villkorlig lagring av analogt värde på angiven lokal Ao-signal (= Ao objekt). 

Villkorlig lagring syftar på con-ingången, som förväntas vara kopplad. 

   

Villkorsingången kan med hjälp av Attribute Editor fås att invertera insignalen. 

Det är inte tillåtet att med funktion i C-program eller PLC program skriva i 
någon av ingångarna. 

<h1>Input Attributes 

<b>In 
Graph name: VAL
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Ingången kopplas till analog signal eller lämnas öppen. I senare fallet kommer 
värdet av In att vara föremål för lagring. 

<b>Cond 
Graph name: con
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Anger om lagring ska göras eller ej. FALSE betyder ingen lagring och TRUE 
innebär lagring. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>AoObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Anger namnet på det Ao objekt där lagringen ska göras. Ao-signalens sista 
namnled visas i CStoAo-symbolens nedre del. 

<b>AoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Ao -objektets namn som ska visas i CStoAo- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Ao -objektet kopplade kanalobjektet ska visas i 
CStoAo-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i CStoAo-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

<h1>Tips 

Ao-signalens fullständiga namn anges; lämpligen på sätt som anges under 
GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> CStoAp
CStoAp
Engelsk text<link> CStoAp, "", $pwr_exe/pwrb_xtthelp.dat

Villkorlig lagring i analog parameter ( C onditional Sto rage A nalog p 
arameter). 

<h1>Beskrivning

Villkorlig lagring av analogt värde på analog storhet (= parameter, in- eller 
utsignal) i godtyckligt lokalt objekt. Lokal betyder att målobjektet tillhör 
samma nod som CStoAp objektet. Villkorlig lagring syftar på con-ingången 
som förväntas vara kopplad. 

Villkorsingången kan med hjälp av Attribute Editor fås att invertera insignalen. 
Idag kan emellertid den grafiska symbolen inte visa en inverterad con- ingång. 
Därför rekommenderas, då så erfordras, en explicit användning av Inv -objekt. 

Det är inte tillåtet att med funktion i C-program eller PLC program skriva i 
någon av ingångarna. 

<h1>Input Attributes 

<b>In 
Graph name: -
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Ingången kopplas till analog signal eller lämnas öppen. I senare fallet kommer 
värdet av In att vara föremål för lagring. 

<b>Cond 
Graph name: con
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: FALSE 

Anger om lagring ska göras eller ej. FALSE betyder ingen lagring och TRUE 
innebär lagring. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Object 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Anger namnet på det objekt där lagringen ska ske. Objektets sista namnled 
visas i CStoAp-symbolens övre högra del. 

ObjectSegments 

<b>Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
CStoAp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: NoRtdb, CompileFixParam 

Anger namnet på det attribut, i det objekt som Object pekar ut, där lagringen 
ska ske. Attributets namn visas i CStoAp-symbolens undre högra del. 

<h1>Tips 

Namnet på den storhet som ska lagras anges med fördel på sätt som visas under 
GetAp -objektet, steg 1  5.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> CStoAv
CStoAv
Engelsk text<link> CStoAv, "", $pwr_exe/pwrb_xtthelp.dat

Villkorlig lagring i Av-signal ( C onditional Sto rage A nalog v alue). 

<h1>Beskrivning 

Villkorlig lagring av analogt värde på angiven lokal Av-signal (= Av objekt). 

Villkorlig lagring syftar på con-ingången, som förväntas vara kopplad. 

Villkorsingången kan med hjälp av Attribute Editor fås att invertera insignalen. 

Det är inte tillåtet att med funktion i C-program eller PLC program skriva i 
någon av ingångarna. 

<h1>Input Attributes 

<b>In 
Graph name: VAL
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Ingången kopplas till analog signal eller lämnas öppen. I senare fallet kommer 
värdet av In att vara föremål för lagring. 

<b>Cond 
Graph name: con
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Anger om lagring ska göras eller ej. FALSE betyder ingen lagring och TRUE 
innebär lagring. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>AvObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Anger namnet på det Av objekt där lagringen ska göras. Av-signalens sista 
namnled visas i CStoAv-symbolens nedre del. 

<b>AvObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Av -objektets namn som ska visas i CStoAv- 
objektet. Segmenten räknas med början från signalobjektets sista namnled. 

<h1>Tips 

Av-signalens fullständiga namn anges; lämpligen på sätt som anges under 
GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> CStoIp
CStoIp
Engelsk text<link> CStoIp, "", $pwr_exe/pwrb_xtthelp.dat

Villkorlig lagring i heltalsparameter ( C onditional Sto rage I nteger p 
arameter). 

<h1>Beskrivning 

Villkorlig lagring av analogt värde ( parameter, insignal eller utsignal av typen 
pwr_tFloat32) i angivet lokalt objekts 32-, 16- eller 8-bitars heltalsparameter.
Villkorlig lagring syftar på con-ingången, som förväntas vara kopplad. 
Insignalens decimaler trunkeras.
Sista ledet i instansens namn respektive parameterns namn visas i CStoIp-
symbolens högra del.
Villkorsingången kan med hjälp av Attribute Editor fås att invertera insignalen. 
Idag kan emellertid den grafiska symbolen inte visa en inverterad con- ingång. 
Därför rekommenderas, då så erfordras, en explicit användning av Inv -objekt.
Det är inte tillåtet att med funktion i C-program eller PLC program skriva i 
någon av ingångarna. 

<h1>Input Attributes 

<b>In 
Graph name: -
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Ingången kopplas till analog signal eller lämnas öppen. I senare fallet kommer 
värdet av In att vara föremål för lagring. 

<b>Cond 
Graph name: con
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Anger om lagring ska göras eller ej. FALSE betyder ingen lagring och TRUE 
innebär lagring. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Object 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Anger namnet på det objekt där lagringen ska ske. Objektets sista namnled 
visas i CStoIp-symbolens övre högra del. 

<b>ObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
StoIp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: NoRtdb, CompileFixParam 

Anger namnet på det attribut, i det objekt som Object pekar ut, där lagringen 
ska ske. Attributets namn visas i CStoAp-symbolens undre högra del. 

<h1>Tips 

Namnet på den storhet som ska lagras anges med fördel på sätt som visas under 
GetAp -objektet, steg 1  5.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> CSub
CSub
Engelsk text<link> CSub, "", $pwr_exe/pwrb_xtthelp.dat

Villkorlig exekvering av objekt placerade i underfönster. 

<h1>Beskrivning 

Koden i underfönstret, 

exekverar om och endast om objektets logiska insignal är TRUE; jfr vanliga 
Order -objekt där exekveringen sker så länge ingången är TRUE och därefter 
ytterligare en gång , dvs en Order-instans exekveras totalt minst två gånger. 
placeras under ett WindowPlc objekt (se WindowPlc) under CSub-objektet. 
Ingången kan med hjälp av Attribute Editor fås att invertera insignalen. 

Underfönstret får innehålla valfria PLC-objekt. 

CSub = C onditional Sub -window. 

<h1>Input Attributes 

<b>In 
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Anger om underfönstret ska exekveras eller ej. FALSE betyder ingen 
exekvering och TRUE innebär exekvering av objekten i underfönstret. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 
- 
<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Curve
Curve
Engelsk text<link> Curve, "", $pwr_exe/pwrb_xtthelp.dat

Interpolera i tabell. 

<h1>Beskrivning 

Själva tabellen, funktionskurvan, beskrivs i en Table -instans; ( se Table). 

 
Om insignalen ligger utanför tabellområdet väljs första/sista tabellvärdet som 
funktionsvärde.

<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Ingången kopplas till analog signal eller lämnas öppen. I senare fallet används 
In som invärde för bestämning funktionsvärdet. 

<b>Tab 
Graph name: TAB
Type: pwr_tFloat32
Flags: NoRtdb, OpenNoFunction 

Ingången måste anslutas till Table -instans; vanlig förbindning. 

<h1>Output Attributes 

ActVal 
<b>Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Interpolerat tabellvärde i enlighet med insignalen. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> DArithm
DArithm
Engelsk text<link> DArithm, "", $pwr_exe/pwrb_xtthelp.dat

Beräknar värdet av egendefinierat logiskt uttryck. 

<h1>Beskrivning 

Friprogrammerat logiskt uttryck i C-språket. 

Uttrycket editeras med hjälp av Attribute Editor under Expression . Värdet av 
Expression visas i instansen. Uttrycket, som saknar '=', översätts vid 
kompileringen. 

Upp till 8 analoga ( A1, ..., A8) och 8 digitala (d1, ...., d8) insignaler. 

Digitala ingångar kan med hjälp av Attribute Editor fås att invertera insignalen. 
Invertering kan också åstadkommas med den logiska negationsoperatorn '!'. 

NB! Då en aritmetisk operator följs av ett 'graph name', t.ex. A1, ska operator 
och 'graph name' åtskiljas med blanktecken eller vänster parentes. 

En ingång, använd som en konstant storhet, görs lämpligen osynlig med 'Used' 
faciliteten. Om konstanten inte behöver ändra värde skrivs värdet med fördel 
direkt i Expression , dvs. utan användning av någon ingång. Kan konstanten 
komma att ändras är det lämpligt att använda en Av eller Dv , eftersom den då 
blir tillgänglig via Av/Dv-objektens MER-bild. 

Ej ansluten ingång ger kompileringsfel. 

<h1>Input Attributes 

<b>DIn1, DIn2, ... , DIn8 
Graph name: d1, ..., d8
Type: pwr_tBoolean
Flags: NoRtdb, OpenParam
Default value: FALSE, FALSE, ..., FALSE 

Digitala signaler som kan ingå i Expression . Om t.ex. d1 är ansluten avses en 
yttre signal, annars det interna attributet DIn1 . ändringar av DIn1 , ..., DIn8 
gjorda i målmiljön beaktas. 

<b>AIn1, AIn2, ... , AIn8 
Graph name: A1, ..., A8
Type: pwr_tFloat32
Flags: NoRtdb, OpenParam
Default value: 0.0, 0.0, ..., 0.0 

Analoga signaler som kan ingå i Expression . Om t.ex. A1 är ansluten avses en 
yttre signal, annars det interna attributet AIn1 . ändringar av AIn1 , ..., AIn8 
gjorda i målmiljön beaktas. 

<h1>Output Attributes 

<b>Status 
Graph name: sts
Type: pwr_tBoolean
Flags: Output 

Resultatet av Expression efter senaste beräkning. 

<h1>Internal Attributes 

<b>Expression 
Type: pwr_tString80
Flags: DevOnly 

Logiskt uttryck i C-språket. Uttrycket anges med hjälp av Attribute Editor och 
kan inte ändras i målmiljön. 

<h1>Exempel 

Kombinatoriskt nät.
I exemplet nedan avser '&&'-operatorn logiskt AND, '||'-operatorn logiskt OR 
och '!' innebär negation.

Expression : (d1 && d2 || !d3) && d4 
 
<==>


Högst en av d1 - d5 är TRUE eller d6

Expression : ((d1 + d2 + d3 + d4 + d5) < 2) || d6 
Jämförelse.

Expression : (A1 + 3.5 * A2) < A3 

<h1>Se även 

AArithm , som beräknar värdet av aritmetiska uttryck.<link> AArithm

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Di
Di
Engelsk text<link> Di, "", $pwr_exe/pwrb_xtthelp.dat

Digital ingång. 

<h1>Beskrivning 

Konfigurerar digital insignal i 'Plant Configuration'. 

Den inbyggda filterfunktionen, där valet av filter styrs av FilterType , avser 
lokala Di-signaler, dvs icke-lokala Di-signaler berörs ej. 

Filterfunktionen innebär t.ex. att konstruktören utan extra konfigurering direkt i 
objektet kan ange om den samplade signalen måste vara satt viss tid för att vara 
giltig eller att det ska gå viss minsta tid från det att den samplade signalen 
senast blivit FALSE tills att den åter tillåts bli TRUE. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva vilken fysisk signal som representeras; t.ex. 
signalnamn, beskrivande text etc. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: CompileFixParam 

Namn på associerat kanalobjekt. 

<b>ValueIndex 
Type: pwr_tUInt32
Flags: InitSetParam 

Index i DIValue -vektorn hos de Di_Value_Base-objekt som används för bas- 
resp. delfrekvenssampel. Initieras vid start av rs_init. 

<b>*ActualValue 
Type: pwr_tBoolean
Flags: 

Pekare till ärvärdet (= ingenjörsvärdet ActualValue ). ConversionOn och 
InvertOn i kanalobjektet ChanDi, anger dels om det inlästa värdet ska lagras, 
dels om invertering före lagring ska ske. 

<b>SigValue 
Type: pwr_tBoolean 

Ej använd. 

<b>DefGraph 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i processbild anges namnet på motsvarande bilds 
$Graph-objekt här. Därigenom kan den aktuella processbilden enkelt aktiveras 
från 'Operator Window'. Som information visas namnet på $Graph- objektet i 
signalobjektets MER-bild. 

<b>DefTrend 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i snabb- eller trendkurvgrupp anges namnet på 
motsvarande $PlotGroup-objekt här. Därigenom kan aktuellt kurvdiagram 
enkelt aktiveras från 'Operator Window'. Som information visas namnet på 
$PlotGroup-objektet i signalobjektets MER-bild. 

<b>TextWhenValIs0 
Type: pwr_tString16
Flags: Param
Default value: 

Text knuten till signalen då ActualValue = FALSE. Vid presentation av 
signalen då ActualValue = FALSE skrivs den i TextWhenValIs0 angivna 
texten ut; FRåN är ibland en lämplig text. 

Attributet används i Di-objektets Objekt-bild 

<b>TextWhenValIs1 
Type: pwr_tString16
Flags: Param
Default value: 

Text knuten till signalen då ActualValue = TRUE. Vid presentation av signalen 
då ActualValue = TRUE skrivs den i TextWhenValIs1 angivna texten ut; TILL 
är ibland en lämplig text. 

Attributet används i Di-objektets Objekt-bild. 

<b>FilterAttribute[0], FilterAttribute[1], ..., FilterAttribute[3] 
Type: pwr_tFloat32
Flags: Param
Default value: 0, 0, 0 resp 0 

Definierar filterkonstanter i vald filterfunktion, se FilterType . Konstanterna 
anges i sekunder. 

För FilterType = 1 anger FilterAttribute[0] tillslagsfördröjning och 
FilterAttribute[1] frånslagsfördröjning. 

<b>FilterType 
Type: pwr_tInt32
Flags: FixParam2
Default value: 0 

Den interna filterfunktionen avser enbart lokala Di-signaler. 

Anger den valda filtertypen. Följande filtertyper finns: 

0 -- Ingen filtrering

1 -- Till- och frånslagsfördröjning.

Tillslag är endast aktuell då filtrets `output' är FALSE. Tillslags-
fördröjningen räknas då från senaste positiva flank på `input'. Då
tiden FilterAttribute[0] löpt ut sätts `output' = `input'.

 
Frånslag är aktuell då filtrets `output' är TRUE. Frånslags-
fördröjningen räknas från senaste negativa flank på `input'. Då
tiden FilterAttribute[1] löpt ut sätts `output' = `input'.

2 -- Reserve
... -- Reserve
99 -- Reserve
>99 -- User specific filtering The user writes the filter functions as
C-code in existing program structure.


<h1>Tips 

Placera objektet i utvecklingsmiljön under $PlantHier objekt så att det kommer 
att tillhöra samma målnod som dess associerade kanalobjekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> DiBCD
DiBCD
Engelsk text<link> DiBCD, "", $pwr_exe/pwrb_xtthelp.dat

BCD in (t.ex från tumhjul). 

<h1>Beskrivning 

Avbildar 4 stycken BCD-kodade siffror (= 16 digitala signaler) på decimalt 
flyttal; DiBCD = D igital i nput B inary C oded D ecimal. Ingångarnas namn 
indikerar vilken dignitet den enskilda ingången representerar. 

BCD0 - BCD3 representerar heltal i intervallet {0, 1, ..., 9} 

BCD4 - BCD7 representerar heltal i intervallet {10, 20, ..., 90} 

BCD8 - BCDB representerar heltal i intervallet {100, 200, ..., 900} 

BCDC - BCDF representerar heltal i intervallet {1000, 2000, ..., 9000} 

Ingångarna används t.ex. för att ta emot signaler vid s.k. tumhjulsinställning.
Ingångarna kan INTE fås att invertera insignaler trots att Attribute Editor 
erbjuder möjligheten till invertering. 

<h1>Input Attributes 

<b>BCD0, BCD1, BCD2, BCD3 
Graph name: 1, 2, 4 resp. 8
Type: pwr_tBoolean
Flags: NoRtdb, OpenParam, NoInvert 

BCD0 - BCD3 ger 1-talssiffran. 

<b>BCD4, BCD5, BCD6, BCD7 
Graph name: 10, 20, 40 resp. 80
Type: pwr_tBoolean
Flags: NoRtdb, OpenParam, NoInvert 

BCD4 - BCD7 ger 10-talssiffran. 

<b>BCD8, BCD9, BCDA, BCDB 
Graph name: 100, 200, 400 resp. 800
Type: pwr_tBoolean
Flags: NoRtdb, OpenParam, NoInvert 

BCD8 - BCDB ger 100-talssiffran. 

<b>BCDC, BCDD, BCDE, BCDF 
Graph name: 1000, 2000, 4000 resp. 8000
Type: pwr_tBoolean
Flags: NoRtdb, OpenParam, NoInvert 

BCDC -BCDF ger 1000-talssiffran. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Senast giltiga värde, om Error är FALSE. 

<b>Error 
Graph name: err
Type: pwr_tBoolean
Flags: Output 

Felflagga. FALSE betyder att ActVal anger decimalvärdet av insignalerna; 
TRUE innebär att något fel inträffat i samband med senaste omvandlingen. 

<h1>Internal Attributes 

<b>Inv 
Type: pwr_tBoolean
Flags: Param 

TRUE betyder att alla ingångar ska invertera motsvarande insignaler. Om t.ex., 
bara de 4 första bitarna används i en tillämpning, måste de återstående 12 
bitarna sättas till TRUE i utvecklingsmiljön, annars blir resultatet felaktigt. 

<h1>Exempel 

BCD1 = BCD4 = BCD7 = TRUE och resten FALSE.

VAL ger värdet BCD1 2 + BCD4 10 + BCD7 80 = 92
och err blir FALSE, dvs 0 
BCD1 och BCD3 satt ( 2 + 8 ). En omöjlig kombination !

VAL = senast giltiga värde och err är TRUE, dvs 1 
<h1>Tips 

Flera DiBCD - objekt kan parallellkopplas för ytterligare BCD-insignaler. 

<h1>Se även 

BCDDo , som representerar den motsatta funktionen<link> BCDDo

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Do
Do
Engelsk text<link> Do, "", $pwr_exe/pwrb_xtthelp.dat

Digital utgång ( D igital o utput). 

<h1>Beskrivning 

Konfigurerar digital utsignal i 'Plant Configuration'.
En Do-signal hanteras internt enligt figur 3-6, sidan 3-70. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva vilken fysisk signal som representeras; t.ex. 
signalnamn, beskrivande text etc. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: CompileFixParam 

Namn på associerat kanalobjekt. 

<b>ValueIndex 
Type: pwr_tUInt32
Flags: InitSetParam 

Index i DoValue -vektorn hos de Do_Value_Base -objekt som används för bas- 
resp. delfrekvenssampel. Initieras vid start av rs_init. 

<b>*ActualValue 
Type: pwr_tBoolean
Flags: 

Pekare till ärvärdet (= ingenjörsvärdet ActualValue ). 

<b>SigValue 
Type: pwr_tBoolean 

Ej använd. 

<b>DefGraph 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i processbild anges namnet på motsvarande bilds Graph -
objekt här. Därigenom kan den aktuella processbilden enkelt aktiveras från 
'Operator Window'. Som information visas namnet på Graph - objektet i 
signalobjektets MER-bild. 

<b>DefTrend 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i snabb- eller trendkurvgrupp anges namnet på 
motsvarande PlotGroup -objekt här. Därigenom kan aktuellt kurvdiagram 
enkelt aktiveras från 'Operator Window'. Som information visas namnet på 
PlotGroup -objektet i signalobjektets MER-bild. 

<b>TextWhenValIs0 
Type: pwr_tString16
Flags: Param
Default value: 

Text knuten till signalen då ActualValue = FALSE. Vid presentation av 
signalen då ActualValue = FALSE skrivs den i TextWhenValIs0 angivna 
texten ut; FRåN är ibland en lämplig text. 

Attributet används i Do -objektets Objekt-bild. 

<b>TextWhenValIs1 
Type: pwr_tString16
Flags: Param
Default value: 

Text knuten till signalen då ActualValue = TRUE. Vid presentation av signalen 
då ActualValue = TRUE skrivs den i TextWhenValIs1 angivna texten ut; TILL 
är ibland en lämplig text. 

Attributet används i Do -objektets Objekt-bild. 

<h1>Tips 

Placera i utvecklingsmiljön objektet under $ PlantHier objekt så att det 
kommer att tillhöra samma målnod som dess associerade kanalobjekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> $DocHier
$DocHier
Engelsk text<link> $DocHier, "", $pwr_exe/pwrb_xtthelp.dat

Grupperingsobjekt för 'dokument'. 

<h1>Beskrivning 

Olika typer av objekt för 'dokumentation' är tänkt att placeras under $DocHier 
objekt. Varken $DocHier objekt eller objekt därunder ingår i det aktuella 
målsystemet. 

Objektet kan inte placeras på översta nivån. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Description 
Type: pwr_tString80
Flags: Param 

Fri text för att beskriva objektets användning. 

<h1>Tips 

Det är lämpligt, men inte nödvändigt, att samla t.ex. ListDescriptor objekt 
under ett $DocHier objekt. De ListDescriptor objekt som levereras med 
PROVIEW/R distributionen finns under hierarkin Layout-Lists, där 'Lists' just 
är ett $DocHier objekt. 

Ska en ny typ av lista definieras eller en redan definierad lista modifieras görs 
detta med hjälp av ListDescriptor objekt placerade under ett objekt med 
namnet 'Lists'. 'Lists' bör vara av klassen $DocHier och konfigureras direkt 
under $System objektet.  

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper


 

 
</topic> **********
<topic> Document
Document
Engelsk text<link> Document, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar i PLC Editorns arbetsyta ett delområde i A-format. 

<h1>Beskrivning 

Genom att vid konfigurering av PLC program dela upp PLC Editorns arbetsyta 
i Document objekt och arrangera PLC objekten så att de omsluts av Document 
objekt kan konfigurationen skrivas ut på ett antal A4 sidor. 

PLC Editorns arbetsyta kan innehålla ett godtyckligt antal Document objekt. 

Ett Document objekt väljs ut genom att med pekdonet klicka på ramen eller på 
det s.k. huvudet. 

Med hjälp av Attribute Editor kan objektets orientering, format, sidnummer 
och konstruktörens signatur anges. Utvecklingsmiljön fyller i objekthuvudets 
fält först i samband med objektets utskrift. 

Vid utskrift skapas en PostScript fil per Document objekt och default placeras 
filen på 'pwrp_obj'. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Page 
Type: pwr_tString8
Flags: DevOnly
Default value: 

Attribut för att förse Document objektet med sidnummer. Värdet visas i 
objektet först i samband med utskrift. 

<b>Signature 
Type: pwr_tString8
Flags: DevOnly
Default value: 

Attribut för att förse Document objektet med signatur. Värdet visas i objektet 
först i samband med utskrift. 

Size 
Default value: A4 

Anger objektets format. Följande format kan anges: A0, A1, A2, A3, A4 eller 
A5. 

Utskrift skickas till printerkön pwr_foe_gre_print och görs alltid på 
pappersformat A4. Om Document objektet har A5 format innebär det en 
uppförstoring; förminskning sker om objektet är A0, A1, A2 eller A3. 

<b>Orientation 
Default value: Landscape 

Anger hur objektet ska orienteras.

Landscape orientation: Portrait orientation: 


+------------------+ +-----------+
| " " " " " " " " " " | | " " " " " |
| " " " " " " " " " " | | " " " " " |
| " " " " " " " " " " | | " " " " " |
+------------------+ | " " " " " |
| " " " " " |
| " " " " " |
+-----------+ 

<h1>Tips 

Ända skillnaden mellan å ena sidan Document och å andra sidan DocUser1 och 
DocUser2 är att de senare objekten saknar PROVIEW logon. 

Med pwr_plc kommandona: 

document /repage -- sidnumreras Document objekten på formen x.y. Första 
siffran anger PlcPgm inom PROVIEW-systemet och andra siffran anger 
Document objekt i den ordning de skapats i PLC programmet. Ska sidorna 
numreras i bestämd ordning måste objekten ordnas i önskad följd i 
arbetsbänken. 
document /list -- skriver ut en lista över systemets alla Document objekt i 
alfabetisk ordning. Default sker utskriften till samma fönster varifrån 
utvecklingsmiljön startats. 
 
A List with Name on Document Objects in a PROVIEW system 

Behövs lite större arbetsyta väljs ett Document objekt i A3 format. Objekten i 
motsvarande A4-utskrift är visserligen något förminskade jämfört med om de 
fanns i ett Document objekt i A4 format men likväl fullt läsbara. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Drive
Drive
Engelsk text<link> Drive, "", $pwr_exe/pwrb_xtthelp.dat

Enkel (= START/STOPP) motorstyrning med övervakning av kontaktorsvar 
och rörelsevakt. 

<h1>Beskrivning 

Tre skilda förreglingstyper finns: 

säkerhetsförregling, SafeStop 
driftsförregling, ProdStop 
starthinder, NoStart 
SafeStop och ProdStop blockerar varför sig de interna larmen ( Alarm1 , ..., 
Alarm3 ), dvs när SafeStop eller ProdStop är satt kan inte något av larmen bli 
TRUE. 

För fram/back-drift användes lämpligen två enkla drifter (dvs. två Drive 
objekt), vilka förreglar varandra för samtidig drift via SafeStop.

Val av driftläge, LOKAL / MANUELL / AUTO, görs med hjälp av insignalen 
Local och utsignalen ManMode enligt: 

 
Används vid körning från yttre pulpet, manöverskåp e.d. 
Enbart säkerhetsförseglingen SafeStop beaktas. 
LocStart har en återfjädrande tryckknappsfunktion med slutande startfunktion. 
Signalen ska hållas satt tills själv-
hållning erhålls via kontaktorsvaret ConOn; se nedan. 
LocDrive har en återfjädrande tryckknappsfunktion med brytande 
stoppfunktion. Ett alternativt sätt att stoppa är att sätta Local = FALSE.. 
 
Både drifts- och säkerhetsförreglingen beaktas. 
I läge MANUAL manövreras START/STOPP med hjälp av parametrarna 
ManSta resp ManSto. 
I läge AUTO sker START vid positiv flank på AutoStart; STOPP då AutoStart 
= 0, dvs inte på flanken utan på nivån. 
Växlingarna,
- AUTO --> MANUAL, påverkar inte styrsignalen, Order.
- MANUAL --> AUTO. Om styrsignalen var satt i driftläge
MANUAL och AutoStart = TRUE förblir den satt efter övergången annrs inte.

Övervakningar. Om inte kontaktorsvar resp hastighetsvakt används lämnas 
motsvarande ingång öppen. Internt används då utsignalen Order istället för den 
saknade insignalen. Det är alltså inte värdet på ProdTim eller SpeedTim som 
avgör om de beaktas. 

<h1>Input Attributes 

<b>AutoStart 
Graph name: sta
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger i driftläge AUTO en START/STOPP begäran. FALSE betyder STOPP- 
begäran. övergången FALSE --> TRUE innebär START-begäran. 

<b>Local 
Graph name: lok
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Val av driftläge. Signalen kan komma från vridomkopplare e.d. FALSE 
betyder att driftläget 'NOT LOCAL' väljs och ManMode huruvida det är 
MANUAL eller AUTO som gäller. TRUE innebär att driftläge LOCAL har 
valts. 

<b>LocStart 
Graph name: lst
Type: pwr_tBoolean
Flags: InRtdb,OpenParam, NoInvert 

Anger i driftläge LOCAL en start-begäran. FALSE betyder ingen åtgärd; 
TRUE medför att driftordern, Order , sätts. 

<b>LocDrive 
Graph name: ldr
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger i driftläge LOCAL en STOPP-begäran. FALSE medför att driftordern, 
Order , tas ned; notera slutande funktion . TRUE innebär ingen åtgärd, men är 
nödvändig för att möjliggöra nästa START-begäran av LocStart . 

<b>ConOn 
Graph name: con
Type: pwr_tBoolean
Flags: InRtdb, OpenExtern ( to Order ), NoInvert 

Kontaktorsvar.
Om con-ingången lämnas öppen används ord-utgången som insignal och värdet 
lagras i ConOn . FALSE betyder att kontaktorn inte gått till inom tiden 
ProdTim och TRUE att den den gjort det. 

<b>Speed 
Graph name: sl
Type: pwr_tBoolean
Flags: InRtdb, OpenExtern ( to Order ), NoInvert 

Hastighets- eller rörelsevakt. 

Om sl-ingången lämnas öppen används ind-utgången som insignal och värdet 
lagras i Speed . FALSE betyder ingen rörelse och TRUE indikerar rörelse. 
Attributet påverkar Alarm3 . 

<b>SafeStop 
Graph name: ss
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger säkerhetsförreglingens tillstånd. FALSE betyder att 
säkerhetsförreglingen ej löst ut. TRUE innebär ovillkorligt STOPP, dvs. 
driftordern, Order , sätts till STOPP oberoende av driftläge. 

<b>ProdStop 
Graph name: ps
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger produktionsförreglingens tillstånd. Produktionsförreglingen beaktas 
enbart i lägena AUTO och MANUAL. FALSE betyder att 
produktionsförreglingen ej löst ut. TRUE innebär att driftordern, Order , sätts 
till STOPP 

<b>NoStart 
Graph name: nos
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger starthinderförreglingens tillstånd. Starthinder beaktas enbart i lägena 
AUTO och MANUAL. FALSE betyder att inget starthinder registrerats. TRUE 
innebär att något starthinder föreligger. 

Om NoStart gör övergången FALSE --> TRUE när driftordern, Order = TRUE, 
påverkas inte driftordern. 

<h1>Output Attributes 

<b>ManMode 
Graph name: man
Type: pwr_tBoolean
Flags: Param, Access
Default value: FALSE 

Anger valt driftläge ( MANUAL eller AUTO) när LOCAL är FALSE. 
Attributet används som en vanlig parameter, dvs. dess värde kan ändras från 
t.ex. tillämpningsprogram. En fördel med att placera attributet som utgång är 
att det därigenom blir enklare att använda i den grafiska konfigurationen. Om 
Local = FALSE betyder, 

FALSE -- valt driftläge är AUTO
TRUE -- valt driftläge är MANUAL 

<b>Order 
Graph name: ord
Type: pwr_tBoolean
Flags: Output 

Driftordern anger antingen START eller STOPP. FALSE betyder STOPP och 
TRUE innebär START. 

<b>Ind 
Graph name: ind
Type: pwr_tBoolean
Flags: Output 

Driftindikering med avseende på drift eller ej drift. Attributet används för 
bekräftelse av aktuellt drifttillstånd. Det används t.ex. för att förregla drifter 
eller larm som endast är aktuella under drift. FALSE betyder ingen drift; 
TRUE innebär driftorder och svar från kontaktor och rörelsevakt, m. a. o. drift, 
dvs. Order = ConOn = Speed är TRUE och driftläget är 'NOT LOCAL'. 

<b>Alarm1 
Graph name: al1
Type: pwr_tBoolean
Flags: Output 

Anger om kontaktorsvaret kom inom den tidsgräns som ProdTim anger eller ej. 
FALSE betyder inget larm; TRUE innebär att kontaktorsvaret inte kom inom 
den tid som anges av ProdTim . Driftordern, Order , sätts till STOPP och 
larmet kvarstår tills nästa START-begäran ( AutoStart gör övergången FALSE 
--> TRUE eller ManSta blir TRUE) görs. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange 
t.ex. ' Motorn xxx startar inte ' i övervakningsobjektets DetectText . 

<b>Alarm2 
Graph name: al2
Type: pwr_tBoolean
Flags: Output 

Anger om kontaktorsvaret anlände inom den tidsgräns som ProdTim anger och 
kvarstår eller ej. FALSE betyder inget larm; TRUE innebär att kontaktorsvaret 
kom inom föreskriven tid men att det därefter försvunnit . Driftordern, Order , 
sätts till STOPP och larmet kvarstår tills nästa START-begäran görs. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange 
t.ex. ' Förlorat kontaktorsvar från xxx ' i övervakningsobjektets DetectText. 

<b>Alarm3 
Graph name: al3
Type: pwr_tBoolean
Flags: Output 

FALSE betyder inget larm. 

TRUE innebär att kontaktorsvaret kom, men att Speed inte är TRUE när 
SpeedTim löpt ut eller att rörelseindikeringen därefter försvunnit . Driftordern, 
Order , sätts till STOPP och larmet kvarstår tills nästa START-begäran görs. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange 
t.ex. ' Ingen rörelse på .... ', ' Inget drifttryck på .... ' i övervakningsobjektets 
DetectText . 

<b>SumAlarm 
Graph name: als
Type: pwr_tBoolean
Flags: Output 

Summalarm. Anger om något av objektets interna larm är aktivt eller ej. 
FALSE betyder att inget aktivt larm finns i objektet; TRUE innebär att minst 
en av utgångarna al1 , al2 eller al3 är TRUE. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och definiera 
texten i DetectText . 

<h1>Internal Attributes 

<b>ManSta 
Type: pwr_tBoolean
Flags: Operator
Default value: FALSE 

Anger START-begäran om driftläget är MANUAL. FALSE betyder ingen 
begäran; TRUE innebär START-begäran. Begäran tas ned av PROVIEW-
systemet då den noterats. 

<b>ManStp 
Type: pwr_tBoolean
Flags: Operator
Default value: FALSE 

Anger STOPP-begäran om driftläget är MANUAL. FALSE betyder ingen 
begäran; TRUE innebär STOPP-begäran. Begäran tas ned av PROVIEW-
systemet då den noterats. 

<b>ProdTim 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Anger, i sekunder, tidsgränsen ( = 0 ) för kontaktorsvar. Om svaret kommer 
senare får Alarm1 värdet TRUE. Tiden räknas från det ögonblick då Order blir 
TRUE. 

<b>SpeedTim 
Type: pwr_tFloat32
Flags: Param
Default value: 2.0 

Anger, i sekunder, tidsgränsen ( = 0 ) för rörelseindikering. Om svaret kommer 
senare får Alarm3 värdet TRUE. Tiden räknas från det ögonblick då ConOn 
blir TRUE. 

<b>ManAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att växla mellan 
driftlägena MANUAL / AUTO. Följande behörigheter är möjliga: 

0 -- Ingen växling tillåten
? 0 -- Växling tillåten. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer. 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller om sådant inte används, på TimerDoDum 
. Efter tiden TimerTime tas den signal som utpekas av TimerDo ned. 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Intern 

Timerns värde i sekunder. Värdet sätts i målmiljön till ProdTime eller 
SpeedTime . 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts i samband med 'Create Load Files ...' för 
användning i målmiljön. 

<b>Status 
Type: pwr_tInt32
Flags: Intern 

Följande värden finns: 

0 -- Stoppad; Order = Ind = FALSE
1 -- Stoppar; Order = FALSE och Ind = TRUE
2 -- Väntar på kontaktorsvar
3 -- Väntar på att rörelsevakten ska indikera rörelse
4 -- Drift 

<h1>Exempels 

Skruv med hastighetsvakt 
Förutsättningar: 

Manöverpulpet för "på platsen körning". 
Signaler för nödstopp och termisk utlösning finns. 
Skruven får köras först om en viss pump, PUMP1, är igång. Denna pump 
representeras och körs från annan Drive -instans. PUMP1-restriktionen gäller 
dock ej vid körning från manöverpulpet. 
Skruven körs i driftläge AUTO med rotation i 5 min varje halvtimme eller på 
operatörsorder; 'WAIT0' har TimerTime = 25 60 sekunder och 'WAIT1' 
TimerTime = 5 60 sekunder. 
Vid larm ska meddelande ges. 
 
Periodical Control of a Contactor 

Fram/Back drift 
Körning enbart i driftläge AUTO. Fram/back begärs via Dv-signaler. 
Kontaktorsvar finns men ingen hastighetsvakt. De båda enkla drifterna 
förreglar varandra och växlingen mellan Fram/Back separeras i tiden av 
'TIMER0' resp. 'TIMER1'. 

 
Configuration of a Forward/Backward Operation 

Två bandtransportörer 
 
Transportbandet 'Trp1', får startas först om 'Trp2' är igång (= driftsförregling). 
Transportbanden har gemensam signal för termisk utlösning. 

 
Figure 3-10 Shows the Operational Indicator Used to Control the Order
of Starting 

AND-grinden för start av 'TRP1' krävs för att få positiv flank på startsignalen 
efter att 'TRP2' kommit igång. 

Också i driftläge MANUAL gäller att 'TRP1' förreglas av 'TRP2' och 'TRP2' av 
nivåvakter. Skulle en manöverpulpet för "på platsen körning" anslutas, gäller i 
driftläge LOCAL enbart förreglingen mot termisk utlösning. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> DsFast
DsFast
Engelsk text<link> DsFast, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar data för snabbkurva à la minnesoscilloskop. 

<h1>Beskrivning 

I varje nod där mätdata för snabbkurvor ska lagras finns behov av ett DsFast- 
jobb som genomsöker nodens (= lokala ) datalagringsobjekt. 

Varje attribut (= mätstorhet) som ska kunna plottas måste ha ett data 
lagringsobjekt. Attribut i datalagringsobjektet anger t.ex. namnet på den 
samplade mätstorheten och hur ofta lagring ska. En mätstorhet kan ha flera 
datalagringsobjekt, t.ex. för lagring med olika frekvens. 

 
DsFast Job with Data Storage Objects 

NB! Kom ihåg att sampling av fysiska signaler sker med ändlig frekvens. För 
närvarande samplas analoga signaler (Ai, Ao) med 5 Hz och Co-, Di-, Do-
signaler med basfrekvensen vilken är lika med den frekvens som det i noden 
oftast exekverande PLC programmet har. Högsta möjliga basfrekvens är 50 Hz. 

Data lagras i en cirkulär lista (buffer) med storleken NoOfBufElement . 

Samplingscykeln startas genom att Start -flaggan sätts. Detta kan göras med 
hjälp av Start-knappen i snabbkurv-bilden. Mätstorheten samplas och värdet 
lagras i DataBuffer . När alla element i den cirkulära listan fått värden en gång 
sätts AllDataOK . 

Flaggan Trigged kan sättas av två skilda händelser: 

manuellt från t.ex. Trigger-knappen i snabbkurv-bilden. I detta fall sätts 
TrigManTrue . 
via yttre signal vars namn anges av TrigName . 
Samplingscykeln fortsätter därefter med ytterligare NoOfBufElement - 
SampBeforeTrig sampel efter det att flaggan Trigged blivit satt varefter den 
stoppas. Mätvärdena i den cirkulära listan, som nu är frysta, plottas därefter i 
snabbkurv-bilden. 

 
Det samplade attributet ska vara en lokal storhet . Därför ska i målmiljön 
DsFast objekten finnas i samma nod som de samplade attributens objekt. 

DsFast modulen inkluderas i resp. processnods EBUILD-fil med hjälp av: 

program PWR_EXE:RS_DS_FAST.EXE_ELN /warm_debug 
Det samplade attributet förutsätts vara någon av typerna: 

- pwr_tBoolean 

- pwr_tFloat32, pwr_tFloat64 

- pwr_tInt8, pwr_tInt16, pwr_tInt32 

- pwr_tUInt8, pwr_tUInt16, pwr_tUInt32 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text. 

<b>Start 
Type: pwr_tBoolean
Flags: Operator
Default value: FALSE 

Anger om lagring ska göras eller ej. FALSE betyder att lagringen ska stoppas. 
TRUE innebär att lagringen är igång. Lagringen kan startas från Start-knappen 
i snabbkurv-bilden. Attributet sätts FALSE när lagringscykeln avslutas. 

<b>BaseFrequency 
Type: pwr_tUInt32
Flags: InitSetParam 

DsFast-jobbets frekvens i Hz. Se också Multiple nedan. 

Attributet tilldelas samma värde som motsvarande attribut i nodens 
DsFastConf objekt. Detta görs vid DsFast-jobbets initialisering. 

<b>Multiple 
Type: pwr_tUInt16
Flags: FixParam
Default value: 1 

Den enskilda mätstorhet som DataName anger kommer att lagrasmed 
frekvensen BaseFrequency / Multiple . 

<b>NextMultiple 
Type: pwr_tUInt16
Flags: Intern 

Används för att hålla reda på vid vilka scan just denna instans ska hanteras. 
NextMultiple sätts till värdet av Multiple och räknas därefter ned vid varje 
scan. Blir NextMultiple = 0 sker sampling och lagring varefter attributet åter 
tilldelas värdet Multiple . 

<b>TrigMode 
Type: pwr_tUInt8
Flags: Param
Default value: FALSE 

Anger triggvillkoret för den binära signal som anges av TrigName . Följande 
värden är möjliga:
0 -- triggning är blockerad.
1 -- positiv flank, dvs. övergången FALSE --> TRUE startar lagring.
2 -- negativ flank, dvs. övergången TRUE --> FALSE startar lagring. 

<b>TrigName 
Type: pwr_sAttrRef
Flags: FixParam 

Namn på extern binär triggsignal. Triggsignalens fullständiga namn, t.ex. för 
lokal storhet, PROC1-Di123 . ActualValue . Fältet lämnas blankt om yttre 
triggsignal saknas. 

<b>*TrigPointer 
Type: pwr_tBoolean
Flags: InitSetParam 

Om TrigName är ifylld, pekare till den externa triggsignalen. 

<b>TrigSubId 
Type: pwr_tUInt32
Flags: InitSetParam 

Identitet vid prenumeration av triggsignal. 

<b>TrigManTrue 
Type: pwr_tBoolean
Flags: Operator
Default value: 

Anger om ovillkorlig triggning ska göras eller ej. TRUE betyder att triggning 
ska ske. Attributet sätts TRUE , t.ex. via Trigger-knappen i snabbkurv-bilden 
för att åter blir FALSE när samplingscykeln avslutas. 

<b>DataType 
Type: pwr_tUInt8
Flags: Intern 

Lagrar mätstorhetens datatyp. Denna ska vara någon av typerna: 
pwr_tBoolean, pwr_tFloat32, pwr_tFloat64, pwr_tInt8, pwr_tInt16, 
pwr_tInt32, pwr_tUInt8, pwr_tUInt16 eller pwr_tUInt32. 

<b>DataName 
Type: pwr_sAttrRef
Flags: FixParam 

Samplade mätstorhetens (attributets) fullständiga namn. Storheten, som ska 
vara lokal, anges t.ex. som PROC1-TEMP1. ActualValue 

<b>*DataPointer 
Type: pwr_tFloat32
Flags: InitSetParam 

Pekar på den storhet som ska samplas och lagras. 

<b>DataSubId 
Type: pwr_tUInt32
Flags: InitSetParam 

Identitet vid prenumeration av mätstorheten. 

<b>StorageTime 
Type: pwr_tUInt32
Flags: FixParam
Default value: 9 

Anger, i sekunder, längden på lagringssekvensen. Om denna tid, med hänsyn 
till lagringsfrekvensen, överskrider vad som ryms i DataBuffer , stoppas 
lagringen när DataBuffer blivit fylld. 

StorageTime , Multiple , BaseFrequency och NoOfBufElement bestämmer 
NoOfSample . 

<b>NoOfSample 
Type: pwr_tUInt32
Flags: FixParam
Default value: 

Antal sampel som kan lagras i DataBuffer . 

<b>SampBeforeTrig 
Type: pwr_tUInt32
Flags: Param
Default value: 0 

Anger antal sampel före triggtidpunkten som ska ingå i 'mätprovet'. 

<b>TrigIndex 
Type: pwr_tUInt32
Flags: Intern 

Anger 1:a elementet i DataBuffer sedan triggning skett. 

<b>Trigged 
Type: pwr_tBoolean
Flags: Intern
Default value: FALSE 

Anger om triggvillkoret, under pågående samplingscykel, har uppfyllts eller ej. 
TRUE betyder att triggvillkoret uppfyllts. Attributet blir FALSE så snart 
samplingscykeln avslutas. 

<b>NextIndex 
Type: pwr_tUInt32
Flags: Intern 

Anger var i bufferten nästa skrivning ska göras. 

<b>AllDataOK 
Type: pwr_tBoolean
Flags: Intern
Default value: FALSE 

Anger om hela bufferten uppdaterats sedan Start -attributet blivit TRUE eller 
ej. AllDataOK sätts TRUE då DataBuffer har uppdaterats minst en gång och 
FALSE så snart samplingscykeln avslutas. 

<b>NoOfBufElement 
Type: pwr_tUInt16
Flags: PwrConstant
Default value: 460 

Anger antalet element som kan lagras i DataBuffer vid ett mätprov. 

<b>DataBuffer[460] 
Type: pwr_tFloat32
Flags: Intern
Default value: 

Totalt tillgänglig lagringsutrymme. Max. storleken, som är förutbestämd (= 
NoOfBufElement ), anger antal sampel som samtidigt kan hållas lagrade. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> DsFastConf
DsFastConf
Engelsk text<link> DsFastConf, "", $pwr_exe/pwrb_xtthelp.dat

Innehåller attribut för enskilt DsFast-jobb. 

<h1>Beskrivning 

I varje nod där mätdata för snabbkurvor ska lagras behövs ett DsFast-jobb som 
genomsöker nodens (= lokala ) datalagringsobjekt, DsFast objekt. 

 
DsFast Job with Matching Objects 

<h1>Input Attributes 

- 
Output Attribute 

- 
<h1>Internal Attributes 

<b>BaseFrequency 
Type: pwr_tUInt32
Flags: FixParam
Default value: 10 

1 Hz = BaseFrequency = 50 Hz. 

BaseFrequency attributen i de DsFast objekt som tillhör samma nod som 
DsFastConf tilldelas värdet av detta attribut! 

Digitala signaler och pulsräknar signaler hanteras av PLC program som arbetar 
med viss cykeltid. Denna är alltid en heltalsmultipel av 20 ms, vilket i 
frekvensplanet innebär att endast vissa frekvenser kan användas, t.ex. 50 Hz, 
25 Hz, .... 

Lokala analoga signaler hanteras i en takt som anges av IOHandler . 

<h1>Tips 

DsFastConf konfigureras i utvecklingsmiljön under $Node objekt. Om ett 
Ds_Fast jobb laddas till nod som saknar DsFastConf objekt kommer det att 
exekvera med 10 Hz. 

Ska mätdata för snabbkurvor lagras i noden måste ett Ds_Fast-jobb laddas och 
startas i noden. Gäller det en OpenVMS-nod görs detta med hjälp av $Appl 
objekt och för VAXELN-noder används antingen $Appl objekt eller också 
inkluderas Ds_Fast-jobbet i processnodens EBUILD-fil. 

 
<h1>Se även 

DsFast.<link> DsFast

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> DsHist
DsHist
Engelsk text<link> DsHist, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar historisk datalagring av skalär storhet eller element i 1- 
dimensionell vektor. ( D ata s torage Hist ory). 

<h1>Beskrivning 

Historisk datalagring är en option i PROVIEW/R. 

I en relationsdatabas finns data i två-dimensionella tabeller, s.k. datarelationer. 
En relation besår av rader och kolumner.
DsHist objektet anger vilken storhet som ska lagras och i vilken relation.
Storheten kan med ett DsHist objekt anges för lagring i upptill tre olika 
datarelationer. 

<h1>Internal Attributes 

<b>Attribute 
Type: pwr_sAttrRef
Flags: FixParam 

Anger fullständigt namn på det attribut som ska lagras. Attributet ska vara av 
någon av typerna: pwr_tBoolean, pwr_tFloat32, pwr_tInt8, pwr_tInt16 eller 
pwr_tInt32. 

Värdet lagras alltid som pwr_tFloat32. 

CycleObject[0], CycleObject[1], CycleObject[2] 
Type: pwr_tObjid
Flags: FixParam 

Attributen anger i vilken/vilka datarelationer den under Attribute angivna 
storheten ska lagras. Detta görs genom att namnet på motsvarande 
DsHistServer objekt anges. 

Attributen behöver inte väljas konsekutivt. 

<b>DeadBand 
Type: pwr_tFloat32 

Attributet är avsett för framtida användning. 

<h1>Tips 

Om lagringen avser signalvärden konfigureras DsHist i utvecklingsmiljön ofta 
direkt under aktuellt signalobjekt.

<h1>Se även 

DsHistServer <link> DsHistServer

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> DsHistServer
DsHistServer
Engelsk text<link> DsHistServer, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar servern för historisk datalagring. ( D ata s torage Hist ory Server 
).

<h1>Beskrivning 

Historisk datalagring är en option i PROVIEW/R.
Datalagringen görs i en relationsdatabas, Rdb. Datalagringsrelationer 
förutsättes vara skapade och namngivna redan vid leverans av optionen. 
Antalet relationer är som standard 4.
DsHistServer konfigureras i utvecklingsmiljön under det $Node objekt som 
representerar noden där den historiska datalagringen görs.
I den historiska datalagringsnoden görs automatiskt prenumeration på storheter 
som ska ingå i datalagringen. Data som ska medelvärdesbildas lagras vid varje 
inläsningstillfälle i en lokal buffert och medelvärdesbildas före lagring.
För storheter som ingår i den historiska datalagringen men som inte är 
tillgängliga t.ex. på grund av att prenumerationen inte är uppe, lagras mätvärdet 
som NULL tecken. 

<h1>Internal Attributes 

Table 
Type: pwr_tString40
Flags: FixParam 

Anger namnet på en datalagringsrelation i Rdb. En datalagringsrelation består 
av en rad för varje lagringstillfälle med upptill 1500 datakolumner.
Attributet är 'case sensitive'. Om det finns en relation HistoricRelation_1 ska 
man i Attribute Editor skriva HistoricRelation_1 och inte t.ex 
historicrelation_1. 

<b>StoreInterval 
Type: pwr_tUInt32
Flags: FixParam
Default value: 10 

Anger, i sekunder, tiden mellan två datalagringar i relationen. Attributet ska 
vara en heltalsmultipel av ScanTime ; se nedan. 

ScanTime 
Type: pwr_tUInt32
Flags: FixParam
Default value: 10 

Anger, i sekunder, tiden mellan två mätvärdesavläsningar, sampel.
Minsta tillåtna värde är 10 sekunder. 

Om StoreInterval = ScanTime sker lagring av senaste mätvärde. 

Om StoreInterval > ScanTime sker lagring enligt FilterFunction . 

<b>StoreTime 
Type: pwr_tUInt32
Flags: FixParam
Default value: 2 

Anger, i dygn, hur länge data ska sparas i Rdb. 

Rdb är vid leverans skapad för ett bestämt antal sampel av respektive data 
lagringsstorhet. Det ska gälla att, 

StoreTime = max antal sampel · StoreInterval 

<b>FilterFunction 
Type: pwr_tUInt16
Flags: FixParam
Default value: 0 

Anger hur inläst värde ska hanteras före lagring. Följande alternativ finns: 

- 0 Vid lagring ska storhetens senaste sampel användas.
- 1 Vid lagring ska storhetens aritmetiska medelvärde användas.

<h1>Se även 

DsHist.<link> DsHist

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> DsTrend
DsTrend
Engelsk text<link> DsTrend, "", $pwr_exe/pwrb_xtthelp.dat

Långtidslagrar data för trendkurva. 

<h1>Beskrivning 

I varje nod där mätdata för trendkurvor ska lagras finns behov av ett DsTrend-
jobb som genomsöker nodens (= lokala ) datalagringsobjekt. 

Varje attribut (= mätstorhet) som ska kunna plottas kräver ett 
datalagringsobjekt. Attribut i datalagringsobjektet anger t.ex. namnet på den 
samplade mätstorheten och hur ofta lagring ska.
 
DsTrend Job with Data Storage Objects 

NB! Kom ihåg att sampling av fysiska signaler sker med ändlig frekvens. För 
närvarande samplas analoga signaler (Ai, Ao) med 5 Hz och Co-, Di-, Do-
signaler med basfrekvensen vilken är lika med den frekvens som det i noden 
oftast exekverande PLC programmet har. Högsta möjliga basfrekvens är 50 Hz. 

En trendkurva består av mätvärden insamlade med given frekvens. 

Insamlade mätvärden lagras i DataBuffer . Internt är DataBuffer uppdelad i två 
lika delbuffrar. Arbetssättet går ut på att uppdatera varje element i den ena av 
delbuffrarna och sedan fortsätta med första elementet i den andra delbufferten. 
När också det sista elementet i den andra delbufferten blivit uppdaterad 
fortsätter uppdateringen med första elementet i den första delbufferten. 
Delbuffrarna uppdateras växelvis. BufferStatus anger hur resp delbuffert 
används för tillfället. 

Det samplade attributet ska vara en lokal storhet . Därför ska i målmiljön 
DsTrend objekten finnas i samma nod som de samplade attributens objekt. 

DsTrend modulen inkluderas i resp. processnods EBUILD-fil med hjälp av:
program PWR_EXE:RS_DS_TREND.EXE_ELN /warm_debug 

Det samplade attributet förutsätts vara någon av typerna: 

- pwr_tBoolean 

- pwr_tFloat32, pwr_tFloat64 

- pwr_tInt8, pwr_tInt16, pwr_tInt32 

- pwr_tUInt8, pwr_tUInt16, pwr_tUInt32 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text. 

<b>ScanTime 
Type: pwr_tUInt32
Flags: InitSetParam
Default value: 1 

Anger, i sekunder, DsTrend-jobbets cykeltid. Se också Multiple . 

Attributet tilldelas samma värde som motsvarande attribut i nodens 
DsTrendConf objekt. Detta görs vid DsTrend-jobbets initialisering. 

<b>Multiple 
Type: pwr_tUInt16
Flags: FixParam
Default value: 1 

Den enskilda mätstorhet som DataName anger kommer att lagrasmed perioden 
ScanTime · Multiple . 

<b>NextMultiple 
Type: pwr_tUInt16
Flags: Intern
Default value: 

Används för att hålla reda på vid vilka exekveringar just denna instans ska 
hanteras. NextMultiple sätts till värdet av Multiple och räknas därefter ned vid 
varje exekvering. Blir NextMultiple = 0 sker sampling och lagring varefter 
attributet åter tilldelas värdet Multiple . 

<b>DataType 
Type: pwr_tUInt8
Flags: Intern 

Lagrar mätstorhetens datatyp. Denna ska vara någon av typerna: 
pwr_tBoolean, pwr_tFloat32, pwr_tFloat64, pwr_tInt8, pwr_tInt16, 
pwr_tInt32, pwr_tUInt8, pwr_tUInt16 eller pwr_tUInt32. 

<b>DataName 
Type: pwr_sAttrRef
Flags: FixParam 

Samplade mätstorhetens (attributets) fullständiga namn. Storheten, som ska 
vara lokal, anges t.ex. som PROC1-TEMP1. ActualValue 

<b>*DataPointer 
Type: pwr_tFloat32
Flags: InitSetParam 

Pekar på den storhet som ska samplas och lagras. 

<b>DataSubId 
Type: pwr_tUInt32
Flags: InitSetParam 

Identitet vid prenumeration av mätstorheten. 

<b>StorageTime 
Type: pwr_tUInt32
Flags: FixParam
Default value: 239 

Anger, i sekunder, längden på lagringssekvensen per delbuffert. Om denna tid, 
med hänsyn till lagringsfrekvensen, överskrider vad som ryms i DataBuffer , 
förloras de äldsta värdena i DataBuffer . 

Default får trendkurvdiagrammets tidsfönster bredden 2 239 sekunder, 
eftersom ScanTime = Multiple = 1 

StorageTime , Multiple , BaseFrequency och NoOfBufElement bestämmer 
NoOfSample . 

<b>NoOfSample 
Type: pwr_tUInt32
Flags: InitSetParam
Default value: 

Anger antal sampel som kan lagras per delbuffert. 

<b>WriteBuffer 
Type: pwr_tUInt16
Flags: Intern 

Anger vilken delbuffert som för närvarande används för skrivning. 

= 0, .... ( NoOfBuffers - 1) 

<b>NextWriteIndex[2] 
Type: pwr_tUInt16
Flags: Intern 

Anger var i den aktuella delbufferten nästa skrivning ska ske. 

BufferStatus[2] 
Type: pwr_tUInt16
Flags: Intern
Default value: 1 

Anger aktuell status för resp. delbuffert. Följande värden finns: 

0 -- Delbufferten används ej för skrivning.
1 -- Delbufferten används för skrivning. 

<b>NoOfBuffers 
Type: pwr_tUInt16
Flags: FixParam
Default value: 2 

Anger antalet delbuffrar som arean DataBuffer består av. NoOfBufElement 
anger antalet element som varje delbuffert består av. 

<b>NoOfBufElement 
Type: pwr_tUInt16
Flags: FixParam
Default value: 239 

Anger antal element varje delbuffert består av. 

<b>BufferTime[2] 
Type: pwr_tTime
Flags: Intern 

Tidpunkt, per delbuffert, för första lagringen i en skrivsession. 

<b>DataBuffer[478] 
Type: pwr_tFloat32
Flags: PwrConstant 

Totalt tillgängligt lagringsutrymme. Max. storleken är förutbestämd (= 
NoOfBuffers · NoOfBufElement ) och anger antal sampel som samtidigt kan 
hållas lagrade i en lagringscykel. 

<h1>Tips 

Om till signal hör objekt av typen DsTrend , DsFast eller DsHist kan 
förhållandet markeras genom att objektet placeras direkt under aktuellt 
signalobjekt.

Configuration of a DsTrend Object 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> DsTrendConf
DsTrendConf
Engelsk text<link> DsTrendConf, "", $pwr_exe/pwrb_xtthelp.dat

Innehåller attribut för enskilt DsTrend-jobb. 

<h1>Beskrivning 

I varje nod där mätdata för snabbkurvor ska lagras behövs ett DsTrend-jobb 
som genomsöker nodens (= lokala ) datalagringsobjekt, DsTrend objekt. 

 
DsTrend Job with Matching Objects 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>ScanTime 
Type: pwr_tUInt32
Flags: FixParam
Default value: 1 

Anger, i sekunder, DsTrend-jobbets cykeltid. 1 = ScanTime = 3600. 

ScanTime attributen i de DsTrend objekt som tillhör samma nod som 
DsTrendConf tilldelas värdet av detta attribut! 

<h1>Tips 

Eftersom DsTrend-jobb default finns på OpenVMS-noder är det lämpligt att 
konfigurera DsTrendConf på dess noder. DsTrendConf konfigureras i 
utvecklingsmiljön under $Node objekt. 

Om ett Ds_Trend jobb laddas till nod som saknar DsTrendConf objekt kommer 
det att exekvera med 1 Hz. 

<h1>Se även 

DsTrend<link> DsTrend

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Dsup
DSup 
Engelsk text<link> DSup, "", $pwr_exe/pwrb_xtthelp.dat

Larmövervakning av digital storhet ( D igital Sup ervisory ). 

<h1>Beskrivning 

Övervakar binär storhet i godtyckligt objekt med avseende på larmläge. 
CtrlPosition anger om det är sann eller falsk som utgör storhetens larmäge.
Larmmeddelande kan fördröjas en tid som specificeras av TimerTime . 

Då den övervakade storheten antar larmläge reagerar DSup objektet med två 
åtgärder: 

'act' utgången sätts ovillkorligen för att indikera larm tillstånd. 
efter tiden TimerTime skickas meddelande till utenheter, t.ex. operatörs 
stationer. Denna åtgärd kan undertryckas med hjälp av DetectOn . 
Meddelande består dels av textsträngen DetectText , dels av flaggor, se 
EventFlags , för att manövrera kompletterande aktiviteter. 

Meddelanden kan vara av olika typ; (se EventType ) 

ALARM ALARM-meddelanden ska kvitteras. De kvarstår i larmlistan
tills kvittering sker, dvs. oberoende av om det övervakade
objektet då befinner sig i larm- eller normaltillstånd. 
INFO Kvitteringsbara INFO-meddelanden skickas till larmfönstrets
informationsdel varifrån kvittering kan ske. F.ö hanteras de som
ALARM-meddelanden.

Ej kvitteringsbara INFO-meddelanden skickas endast till
händelselistan. 
Alla meddelanden skickas till händelselistan. 

ALARM-meddelanden ges olika prioritet; (se EventPriority ). Både A- och B- 
larm hamnar i larmfönstret och larmlistan. Kvittering kan ske från båda 
platserna. I larmfönstret anges antalet okvitterade C- och D-larm medan själva 
meddelandena finns i larmlistan varifrån kvittering också kan göras. 

NB! Meddelande som skapas av ett DSup objekt får samma identitet som det 
övervakade objektet. Attributet SelectList, som finns i utenheternas objekt, 
t.ex. User -objekt, anger från vilka hierarkier meddelanden ska tas emot. 

Olika typer av utenheter finns: 

OPERATOR: Urvalslistan definieras av ett attribut i User -objekt. 
PRINTER: Urvalslistan definieras av ett attribut i EventPrinter -
objekt. 
<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Övervakat objekt. Lämnas ingången öppen anges i Attribute vad som ska 
övervakas. 

<b>Control 
Graph name: con
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Anger om övervakningen ska ske eller ej. Notera att blockering görs när 
Control är FALSE. Insignalen kan inverteras. 

FALSE kopplar bort övervakningen och TRUE eller öppen ingång innebär att 
övervakningen ska utföras. 

<h1>Output Attributes 

<b>Action 
Graph name: act
Type: pwr_tBoolean
Flags: Output 

Anger den övervakade storhetens tillstånd. FALSE innebär normaltillstånd och 
TRUE larmtillstånd. 

Utsignalen kan t.ex. användas för att aktivera åtgärdspaket vid larmtillstånd. 

<b>Acked 
Graph name: ack
Type: pwr_tBoolean
Flags: Output 

Anger om larmtillståndet kvitterats eller ej. FALSE betyder att okvitterat larm 
finns. Utsignalen sätts initialt TRUE då DSup-objektet skapas i rtdb och när 
larmtillstånd kvitteras. 

<b>Blocked 
Graph name: blk
Type: pwr_tBoolean
Flags: Output 

Anger om övervakningsobjektet är blockerat eller ej. Med blockering avses 
övervakningsobjektets förmåga att initiera meddelanden. Blockering påverkar 
inte objektets act-utgång. 

FALSE innebär att ASup-objektet inte är blockerat och TRUE att det är 
blockerat. Vid blockering av övervakningsobjekt som befinner sig i larmläge 
tas existerande meddelanden för det aktuella objektet bort. 

Blockering /deblockering görs med hjälp av larmblockeringsformuläret i 
Operator Window. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Fri text för att beskriva objektet. Används i bilden 'Larmgränser'. 

<b>DetectOn 
Type: pwr_tBoolean
Flags: Param
Default value: TRUE 

Anger om den åtgärd som vid larmtillstånd består i att skicka DetectText ska 
blockeras eller ej. FALSE betyder att inget meddelandet skickas vid 
larmtillstånd; TRUE betyder att meddelandet DetectText skickas vid 
larmtillstånd. 

<b>DetectText 
Type: pwr_tString80
Flags: Param 

Fri text som ingår i meddelandet vid larmtillstånd. Texten skrivs ut vid 
larmtillstånd om DetectOn är TRUE. 

<b>ShowDetectText 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om DetectText ska visas i DSup-objektets symbol eller ej. FALSE 
betyder ingen visning och TRUE visning. 

<b>ReturnText 
Type: pwr_tString80
Flags: Param 

Fri text som ingår i meddelandet vid återgång till normaltillstånd. Meddelandet 
skrivs i händelselistan. 

<b>EventType 
Type: pwr_tUInt32
Flags: Param
Default value: 64 

Anger vilken typ av meddelande (= DetectText ) som ska skickas vid 
larmtillstånd.
64 -- ALARM Meddelandet kräver kvittering och skickas till
larmfönstret, larmlistan och händelselistan.
32 -- INFO Om meddelandet kräver kvittering skickas det till
larmfönstrets informationsdel och händelselistan annars
enbart till händelselistan. 

<b>EventPriority 
Type: pwr_tUInt32
Flags: Param
Default value: 67 

Prioritet. Gäller enbart ALARM-meddelanden. 


67 = A-larm; högst prioritet. (= 43Hex)
66 = B-larm (= 42Hex)
65 = C-larm (= 41Hex)
64 = D-larm ; lägst prioritet. (= 40Hex) 

<b>EventFlags 
Type: pwr_tUInt32
Flags: Param
Default value: 7 

Bitmask. En kombination av flaggor används också för att specificera 
meddelandet. Följande värden (flaggor) finns: 

1 = Om denna flagga finns ska ett returmeddelande med ReturnText
skickas till utenheternas händelselistor, annars inte.

2 = Om denna flagga finns ska ett kvittensmeddelande skickas till
utenheternas händelselistor, annars inte.

4 = Om den enskilda utenheten har akustisk signal (pip-funktion)
ska den aktiveras då meddelandet tas emot.

8 = Meddelandet ska tas emot av varje utenhet oberoende av vad det
står i urvalslistorna.

16 = Om meddelandet är av typen INFO placeras det förutom i
händelselistan också i larmfönstrets info-del. Kvittens- resp
returmeddelande som för t ex. A-larm.

<b>Attribute 
Type: pwr_sAttrRef
Flags: CompileSetParam 

Anger komplett namn på övervakat attribut. Om ingången 'in' lämnas öppen 
ska vid konfigureringen Attribute fyllas i. Knyts ingången till annat objekt 
ifylls attributet vid kompileringen av PROVIEW. 

<b>AlarmStatus 
Type: pwr_tUInt16
Flags: Intern 

Aktuellt statusvärde. Bitmask bestående av 16 bitar där de 8 minst signifikanta 
bitarna anger tillståndet och de 8 mest signifikanta prioriteten . 

Tillståndet är en kombination av följande: 

0 -- Normaltillstånd
1 -- Larmtillstånd
2 -- Okvitterat larmtillstånd 

Prioriteten är en av prioriteterna EventPriority . 

Följande värde på AlarmStatus kan förekomma: 

EventPrority + 1 => Prioritet + larmtillstånd
EventPrority + 3 => Prioritet + okvitterat larm och rådande larmtillstånd
EventPrority + 2 => Prioritet + okvitterat larm och normaltillstånd 

<b>AlarmCheck 
Type: pwr_tBoolean
Flags: Intern
Default value: TRUE 

Används internt vid händelse detektering. 

<b>DetectCheck 
Type: pwr_tBoolean
Flags: Intern 

Anger om larmtillstånd ska detekteras eller ej. FALSE betyder att larmtillstånd 
inte ska detekteras; TRUE att larmtillstånd ska detekteras. 

<b>DetectSend 
Type: pwr_tBoolean
Flags: Intern 

Anger om meddelande sänts iväg till utenheter (eller mer precis till 
meddelande hanteraren) eller ej; TRUE betyder att meddelande har sänts. 

<b>DetectTime 
Type: pwr_tTime
Flags: Intern 

Datum och klockslag för senast detekterade larmtillstånd. 

<b>ReturnCheck 
Type: pwr_tBoolean
Flags: Intern 

Anger om objektet återgått till normaltillstånd eller ej. TRUE betyder att 
objektet återgått till normaltillstånd. 

<b>ReturnSend 
Type: pwr_tBoolean
Flags: Intern 

Anger om ett returmeddelande med ReturnText sänts till utenheterna eller ej. 
TRUE betyder att returmeddelande sänts. 

<b>ReturnTime 
Type: pwr_tTime
Flags: Intern 

Datum och klockslag för senast detekterade retur till normaltillstånd. 

<b>AckTime 
Type: pwr_tTime
Flags: Intern 

Datum och klockslag för senast detekterade kvittens. 

<b>AckOutunit 
Type: pwr_tUInt32
Flags: Intern 

Identitet på utenhet (operatör) varifrån kvittering skett. 

<b>BlockStatus 
Type: pwr_tUInt16
Flags: Intern 

Ej använd. 

<b>ActualValue 
Type: pwr_tBoolean
Flags: Intern 

Den övervakad storhetens värde vid tidpunkten TimeOfDetect . 

<b>CtrlPosition 
Type: pwr_tBoolean
Flags: Param
Default value: TRUE 

Anger om det är TRUE eller FALSE som utgör den övervakade storhetens 
larmläge. 

FALSE = Frånslag. Då In -signalen 1 --> 0 => larmtillstånd.
TRUE = Tillslag. Då In -signalen 0 --> 1 => larmtillstånd. Detta är normal
fallet. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer. 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timerkön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller, om sådant objekt inte används, på 
TimerDoDum . Efter tiden TimerTime nollställs den av TimerDo angivna 
signalen. 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 0.0 

Fördröjning i sekunder. Anger när, efter det att larmtillstånd inträtt, 
meddelandet ska skickas. Om larmtillståndet försvinner innan tiden gått ut 
genereras inget meddelande. 

TimerTime = PLC-jobbets bascykeltid. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts då laddfilen skapas. Används i målmiljön. 

<b>TimerAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
TimerTime . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>TimerMin, TimerMax 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Anger tillåtet intervall för TimerTime vid operatörs inmatning. 

TimerMin = TimerTime = TimerMax 

<h1>Tips 

Övervakning av frånslag sker lämpligen efter invertering av In -signalen. 

Att den övervakade storheten kan tillhöra ett godtyckligt objekt betyder att inte 
bara signalobjekt utan också andra objekt kan övervakas; t.ex attribut i egen 
definierade objekt. 

Både ASup och DSup objekt kan konfigureras på olika sätt. Vid konfigurering 
i PLC program handhar PLC jobbet övervakningen. När objekten konfigureras 
utanför PLC program.

<h1>Se även 

ASup , som hanterar övervakning analog storhet.<link> ASup

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Dv
Dv
Engelsk text<link> Dv, "", $pwr_exe/pwrb_xtthelp.dat

Digitalt värde. 

<h1>Beskrivning 

Konfigurerar beräknad binär storhet under 'Plant Configuration'. Storheten 
används som en binär flagga med värdena TRUE eller FALSE. 

<h1>Input Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri beskrivande text för att beskriva vad storheten representerar eller vad 
den används till. 

<b>ValueIndex 
Type: pwr_tUInt32
Flags: InitSetParam 

Index i DVValue -vektorn hos de Dv_Value_Base -objekt som används för 
bas- resp. delfrekvenssampel. Initieras vid start av rs_init. 

<b>*ActualValue 
Type: pwr_tBoolean
Flags: 

Pekare till ärvärdet (= ingenjörsvärdet ActualValue ). 

<b>InitialValue 
Type: pwr_tBoolean
Flags: FixParam
Default: FALSE 

InitialValue anger signalens startvärde vid s.k. kallstart. Vilket värde som utgör 
startvärde vid varmstart ( = PLC-programbyte) beror på om signalen är ny eller 
ej. Existerade signalen i förra programversionen används dess sista ärvärde 
som startvärde, annars InitialValue. 

<b>DefGraph 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i processbild anges namnet på motsvarande bilds Graph -
objekt här. Därigenom kan den aktuella processbilden enkelt aktiveras från 
'Operator Window'. Som information visas namnet på Graph - objektet i 
signalobjektets MER-bild. 

<b>DefTrend 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i snabb- eller trendkurvgrupp anges namnet på 
motsvarande PlotGroup -objekt här. Därigenom kan aktuellt kurvdiagram 
enkelt aktiveras från 'Operator Window'. Som information visas namnet på 
PlotGroup -objektet i signalobjektets MER-bild. 

<b>TextWhenValIs0 
Type: pwr_tString16
Flags: Param
Default value: 

Text knuten till signalen då ActualValue = FALSE. Vid presentation av 
signalen då ActualValue = FALSE skrivs den i TextWhenValIs0 angivna 
texten ut; FRåN är ibland en lämplig text. 

Attributet används i Dv -objektets Objekt-bild 

<b>TextWhenValIs1 
Type: pwr_tString16
Flags: Param
Default value: 

Text knuten till signalen då ActualValue = TRUE. Vid presentation av signalen 
då ActualValue = TRUE skrivs den i TextWhenValIs1 angivna texten ut; TILL 
är ibland en lämplig text. 

Attributet används i Dv -objektets Objekt-bild 

OwnedByPLC 
Type: pwr_tBoolean 

Ej använd. 

<h1>Tips 

Placera i utvecklingsmiljön objektet under $PlantHier objekt. 

Objektet tilldelas initialt värde (? FALSE ) i målnoden, t.ex. med hjälp av 
StoDv.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Edge
Edge
Engelsk text<link> Edge, "", $pwr_exe/pwrb_xtthelp.dat

Flankdetektor. 

<h1>Beskrivning 

Används för att detektera en positiv flank. 

Efter detektering sätts utsignalen TRUE under en programcykel. 

<h1>Input Attributes 

<b>In 
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Anger övervakad storhet. 

Ingången kan med hjälp av Attribute Editor fås att invertera insignalen för 
avkänning av negativ flank. 

<h1>Output Attributes 

<b>Status 
Type: pwr_tBoolean
Flags: Output 

När den övervakade signalen gör övergången FALSE -- > TRUE sätts 
utgången för att vid nästa exekvering tas ned igen. 

<h1>Internal Attributes 

<b>StatusOld 
Type: pwr_tBoolean
Flags: Intern 

Anger den övervakade signalens värde vid senaste exekvering. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> EventFile
EventFile
Engelsk text<link> EventFile, "", $pwr_exe/pwrb_xtthelp.dat

<b>Beskrivning saknas!

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> EventPrinter
EventPrinter
Engelsk text<link> EventPrinter, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar logisk händelseskrivare. 

<h1>Beskrivning 

Konfigurerar en logisk skrivare för utskrift av t.ex. larm och info-meddelanden.
Placeras under $Node -objektet i den nod där utskriftsprocessen kommer att 
exekvera. Utskriftsprocessen, som enbart finns för s. k. operatörsnoder, heter 
pwr_exe:rs_mh_eventprinter.exe 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: 

Fri text för att beskriva EventPrinter -objektet. 

<b>DeviceName 
Type: pwr_tString80
Flags: 

Anger terminalportens namn, t.ex. LTA55 

<b>PrinterName 
Type: pwr_tInt16] 

Ej använd. 

<b>PrinterNumber 
Type: pwr_tInt16 

Ej använd. 

<b>PrinterType 
Type: pwr_tInt16 

Ej använd. 

<b>PrintItemFormat[10] 
Type: pwr_tInt16 

Ej använd. 

TimeFormat 
Type: pwr_tInt16 

Ej använd. 

RowSize 
Type: pwr_tInt16
Flags:
Default value: 80 

Anger radlängden. 

<b>SelectList[0], SelectList[1], ...., SelectList[9] 
Type: pwr_tString80
Flags: 

Meddelanden initierade av ASup - resp DSup -objekt får samma identitet som 
övervakat objekt. För mh_ApplMessage-meddelanden ( se PROVIEW/R 
Programmer's Reference Manual ) bestäms identiteten av anropsparametern 
EventName . 

I SelectList anges hierarkin för de meddelanden som ska skickas till 
EventPrinter -objektet. Upp till 10 olika hierarkier kan anges. önskas t.ex 
meddelanden från en nods Watchdog -objekt anges nodens namn här. 

Lämnas SelectList blank skickas inga meddelanden till EventPrinter - objektet 
såvida det inte finns ASup - resp DSup -objekt med EventFlag = 8. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Filter
Filter
Engelsk text<link> Filter, "", $pwr_exe/pwrb_xtthelp.dat

Första ordningens filter. 

<h1>Beskrivning 

Insignalen får en exponentiell utjämning enligt: 

VAL = a · In t + (1 - a) · X = X + a · ( In t - X) , där 

X =  

a = ScanTime / FiltCon och 0 < a < 1.0. Om a = 1.0 sker ingen filtrering. 

 
<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Värde på insignalen. 

<b>FeedB 
Graph name: FB
Type: pwr_tFloat32
Flags: NoRtdb, OpenExtern ( to ActVal ) 

Extern återkoppling. Om ingången lämnas öppen kommer VAL-utgången att 
användas som intern insignal. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Filtrerat värde, se ovan. 

<h1>Internal Attributes 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltid (= samplings intervallet), i sekunder, lagras automatiskt vid 
kompilering. 

<b>FiltCon 
Type: pwr_tFloat32
Flags: Param, Access 

Filterkonstanten, i sekunder, kan vara fix eller ändringsbar. FiltCon > 
ScanTime är giltigt värde. FiltCon = ScanTime ger ingen filtrering. 

<b>AccCon 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
FiltCont . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinCon, MaxCon 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta och största tillåtna värde vid operatörsändring av FiltCon . 

<h1>Tips 

NB! För att undvika vikning krävs att alla frekvenskomponenter över halva 
samplingsfrekvensen med minst AD-omvandlarens upplösning måste filtreras 
bort analogt. 

<h1>Exempel 

Om a (= ScanTime / FiltCon ) är litet, 0.1 - 0.2, får utsignalen karaktären av 
uppdaterat väntevärde, som långsamt uppdateras. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 
 

 
</topic> **********
<topic> Form
Form
Engelsk text<link> Form, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar fönster för visning av formulär. 

<h1>Beskrivning 

För att på bildskärm kunna visa formulär krävs att de knyts till Form -objekt 
placerade i de operatörsnoder där visning ska ske.
Användare (i betydelsen 'user') av operatörsstation representeras av User 
objekt. Ska användare av en operatörsstation kunna ta upp formulär krävs dels 
att formulärets namn finns i ett Form -objekt, dels att Form objektet anges i 
någon FastAvail -parameter i användarens User -objekt. Ett Form objekt kan 
refereras av flera User objekt.
Flera Form -objekt samlas med fördel under egen etikett (hierarki).
Formulär och processgrafik hanteras på liknande sätt. Formulären representeras 
av Form -objekt och processgrafiken av Graph -objekt. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text. 

<b>FormName 
Type: pwr_tString40
Flags: 

Anger namnet på formulärets frm-fil exklusive filkatalog och filtyp . 

<b>MaxNoOfInstances 
Type: pwr_tUInt16
Flags:
Default value: 1 

Anger max antal instanser av formuläret FormName som samtidigt tillåts 
existera på bildskärmen. Om MaxNoOfInstances = 1, formuläret finns på 
bildskärmen och operatören begär upp formuläret på nytt läggs det alltså inte 
ut. 

<h1>Tips 

Form objekt konfigureras ofta analogt med Graph objekt. 

<h1>Se även 

User -objekt <link> User

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Frame
Frame, Head, Text, Title 
Engelsk text<link> Frame, "", $pwr_exe/pwrb_xtthelp.dat

En-radiga textobjekt. 

Utskrifter gjorda med resp objekts default attribut: 

Om ingen text anges i t.ex Frame objektet kan det användas för att rama in 
andra objekt. 

<h1>Beskrivning 

Frame , Head , Text och Title skiljer sig enbart i fråga om attributens 
defaultvärde. De används i Document objekt där t.ex 

Title används för att ange vad konfiguration på sidan gör, dess funktion. 
Head anger olika delfunktioner. 
Frame och Text för detaljinformation. 
<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Text 
Type: pwr_tString80
Flags: DevOnly 

Anger den text som ska visas i objektet. 

<b>TextAttribute 
Type: pwr_tUInt32
Flags: DevOnly 

Attributet påverkar textens utseende. Följande värden finns: 

 
<b>FrameAttribute 
Type: pwr_tUInt32
Flags: DevOnly
Default value: 

Attributet anger om texten ska omges med ram. 

 
<b>FrameWidth, FrameHeight 
Type: pwr_tFloat32
Flags: DevOnly
Default value: 0, 0 

I det fall objektet har ram bestämmer attributen ramens storlek. 

0, 0 innebär att ramstorleken anpassas efter den aktuella textlängden. 

Används objektet bara för att rama in andra objekt ökas default värdena så att 
ramen får den önskade storleken. 

<h1>Tips 

Ett välskrivet PLC program kan förutom de för datorexekveringen nödvändiga 
objekten också innehålla objekt vars syfte är att och göra programmet mer 
lättillgängligt vid senare betraktande.

Title , Head and Text Objects Make the Program Easy to Read. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> GetAi
GetAi
Engelsk text<link> GetAi, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på Ai-signal ( Get A nalog i nput). 

<h1>Beskrivning 

Hämtar angiven Ai-signals ingenjörsvärde från I/O-kopierad area. Se 
PROVIEW/R Designer's Guide . 

Ai-objektets fullständiga namn anges; dess sista namnled visas i GetAi - 
symbolens högra del. 

GetAi -objektet: 

är en adressreferens till Ai-signalens värde i I/O-kopierad area 
innehåller ingen relevant information (=data) i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>ActVal 
Type: pwr_tFloat32
Flags: OutNoVal 

Används av PLC Editorn. 

<h1>Internal Attributes 

<b>AiObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editorn. Anger Ai -objektets fullständiga namn. 

<b>AiObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Ai -objektets namn som ska visas i GetAi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Ai -objektet kopplade kanalobjektet ska visas i 
GetAi-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i GetAi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Ai-objektets fullständiga namn på sätt som anges under 
GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper
 

 
</topic> **********
<topic> GetAo
GetAo
Engelsk text<link> GetAo, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på Ao-signal ( Get A nalog o utput). 

<h1>Beskrivning 

Hämtar angiven Ao-signals ingenjörsvärde från I/O-kopierad area. Se 
PROVIEW/R Designer's Guide . 

Ao-objektets fullständiga namn anges; dess sista namnled visas i GetAo - 
symbolens högra del. 

GetAo -objektet: 

är en adressreferens till Ao-signalens värde i I/O-kopierad area 
innehåller ingen relevant information (=data) i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>ActVal 
Type: pwr_tFloat32
Flags: OutNoVal 

Används av PLC Editorn. 

<h1>Internal Attributes 

<b>AoObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editorn. Anger Ao -objektets fullständiga namn. 

<b>AoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Ao -objektets namn som ska visas i GetAo- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Ao -objektet kopplade kanalobjektet ska visas i 
GetAo-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i GetAo-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Ao-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> GetAp
GetAp
Engelsk text<link> GetAp, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på analog parameter ( Get A nalog p arameter). 

<h1>Beskrivning 

Hämtar värdet på analog storhet (= pwr_tFloat32) i godtyckligt objekt. 
Storheten kan avse skalär eller element i 1-dimensionell vektor. Antag ett 
objekt som bl. a. innehåller den analoga vektorn Temp[3]. Då gäller att 
Temp[0] refererar 1:a elementet i vektorn, Temp[1] det 2:a o.s.v. 

Storhetens fullständiga namn anges; se nedan. 

GetAp -objektet: 

är en adressreferens till godtyckligt objekt 
innehåller ingen relevant information (=data) i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>ActVal 
Type: pwr_tFloat32
Flags: OutNoVal 

Används av PLC Editorn. 

<h1>Internal Attributes 

<b>ApObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editor. Anger det aktuella objektets fullständiga namn. 

ApObjectSegments 

<b>Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
GetAp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: CompileFixParam 

Används av PLC Editor. Anger parameterns fullständiga namn. 

NB! PLC Editorn är 'case sensitive' vad gäller detta attribut. Avses 
ActualValue ska man i Attribute Editor skriva ActualValue och inte t.ex 
ACTUALVALUE. 

<h1>Tips 

Ett praktiskt sätt att ange den analoga storhetens fullständiga namn i GetAp -
objektet är följande: 

Välj, i Navigatören, aktuellt PLC program och starta PLC Editorn från popup-
menyn med hjälp av MB3 (=MouseButton knapp 3) genom att välja 'PLC 
Edit...' 
Välj 'Edit' i PLC Editorn och skapa ett GetAp-objekt 
Tag parallellt med PLC Editorn upp Navigatören och markera (välj ut) det 
objekt som innehåller den analoga storhet som GetAp -objektet ska hämta; t.ex. 
EX1-CONTROL-W-PID0 
Tryck ned Ctrl-tangenten och dubbelklicka samtidigt med MB1 ( vänstra 
knappen på en 3-knappars mus) på GetAp-objektets klassnamn, 'GetAp'. 
Därvid kopieras namnet på det i Navigatören utvalda objekt till GetAp- 
objektet. Det kopierade namnets sista namnled visas i GetAp-objektets symbol; 
se 'PID0' nedan. 
Dubbelklicka med MB1 på GetAp-objektet för att starta Attribute Editor. 
Editera in under Parameter aktuellt parameternamn; t.ex. ControlDiff . Detta 
namn kommer också att skrivas ut i GetAp-objektets symbol.
Kom ihåg att dubbelklick med MB2 på ett objekt innebär att objektet raderas. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper
 
 

 
</topic> **********
<topic> GetAv
GetAv
Engelsk text<link> GetAv, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på Av-signal ( Get A nalog v alue). 

<h1>Beskrivning 

Hämtar angiven Av-signals ingenjörsvärde från I/O-kopierad area. Se 
PROVIEW/R Designer's Guide .
Av-objektets fullständiga namn anges; dess sista namnled visas i GetAv - 
symbolens högra del. 

GetAv -objektet: 

är en adressreferens till Av-signalens värde i I/O-kopierad area 
innehåller ingen relevant information (=data) i rtdb 
saknar exekverbar kod 
Output Attributes

<b>ActVal
Type: pwr_tFloat32
Flags: OutNoVal

Används av PLC Editorn.

Internal Attributes

<b>AvObject
Type: pwr_tObjid
Flags: CompileFixParam

Används av PLC Editorn. Anger fullständigt namn på aktuellt Av -objekt. 

<b>AvObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Av -objektets namn som ska visas i GetAv-
objektet. Segmenten räknas med början från signalobjektets sista namnled. 

<h1>Tips 

Det är lämpligt att ange Av-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> GetDi
GetDi
Engelsk text<link> GetDi, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på Di-signal ( Get D igital i nput). 

<h1>Beskrivning 

Hämtar angiven Di-signals ingenjörsvärde från I/O-kopierad area. Se 
PROVIEW/R Designer's Guide . 

Di-objektets fullständiga namn anges; dess sista namnled visas i GetDi - 
symbolens högra del. 

GetDi -objektet: 

är en adressreferens till Di-signalens värde i I/O-kopierad area 
innehåller ingen relevant information (=data) i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>Status 
Type: pwr_tBoolean
Flags: OutNoVal 

Används av PLC Editorn. 

<h1>Internal Attributes 

<b>DiObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editorn. Anger Di -objektets fullständiga namn. 

<b>DiObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Di -objektets namn som ska visas i GetDi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till signalobjektet kopplade kanalobjektet ska visas i 
GetDi-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i GetDi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Di-objektets fullständiga namn på sätt som anges under 
GetAp -objektet, steg 1  4. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> GetDo
GetDo
Engelsk text<link> GetDo, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på Do-signal ( Get D igital o utput). 

<h1>Beskrivning 

Hämtar angiven Do-signals ingenjörsvärde från I/O-kopierad area. Se 
PROVIEW/R Designer's Guide . 

Do-objektets fullständiga namn anges; dess sista namnled visas i GetDo -
symbolens högra del. 

GetDo -objektet: 

är en adressreferens till Do-signalens värde i I/O-kopierad area 
innehåller ingen relevant information (=data) i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>Status 
Type: pwr_tBoolean
Flags: OutNoVal 

Används av PLC Editorn. 

<h1>Internal Attributes 

<b>DoObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editorn. Anger Do -objektets fullständiga namn. 

<b>DoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Do -objektets namn som ska visas i GetDo-
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Do -objektet kopplade kanalobjektet ska visas i 
GetDo-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i GetDo-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Do-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> GetDp
GetDp
Engelsk text<link> GetDp, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på digital parameter ( Get D igital p arameter). 

<h1>Beskrivning 

Hämtar värdet på binär storhet t.ex. utsignal från objekt eller internt digitalt 
attribut ( skalär eller element i 1-dimensionell vektor) i godtyckligt objekt. 

Storhetens fullständiga namn anges; se nedan. 

GetDp -objektet: 

är en adressreferens till godtyckligt objekt 
innehåller ingen relevant information (=data) i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>Status 
Type: pwr_tBoolean
Flags: OutNoVal 

Används av PLC Editorn. 

<h1>Internal Attributes 

<b>DpObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editorn. Anger fullständigt namn på aktuellt objekt. 

DpObjectSegments 

<b>Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
GetDp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: CompileFixParam 

Används av PLC Editorn. Anger parameterns fullständiga namn. PLC Editorn 
är 'case sensitive' vad gäller detta attribut. Avses ActualValue ska man i 
Attribute Editor skriva ActualValue och inte t.ex. ACTUALVALUE. 

<h1>Tips 

Det är lämpligt att ange storheten på sätt som anges under GetAp -objektet, 
steg 1  5.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> GetDv
GetDv
Engelsk text<link> GetDv, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på Dv-signal ( Get D igital v alue). 

<h1>Beskrivning 

Hämtar angiven Dv-signals ingenjörsvärde från I/O-kopierad area. Se 
PROVIEW/R Designer's Guide .
Dv-objektets fullständiga namn anges; dess sista namnled visas i GetDv -
symbolens högra del. 

GetDv -objektet: 

är en adressreferens till Dv-signalens värde i I/O-kopierad area 
innehåller ingen relevant information (=data) i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>Status 
Type: pwr_tBoolean
Flags: OutNoVal 

Används av PLC Editorn. 

<h1>Internal Attributes 

<b>DvObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editorn. Anger fullständigt namn på aktuellt Dv -objekt. 

<b>DvObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Dv -objektets namn som ska visas i GetDv-
objektet. Segmenten räknas med början från signalobjektets sista namnled. 

<h1>Tips 

Det är lämpligt att ange Dv-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper
 

 
</topic> **********
<topic> GetIp
GetIp
Engelsk text<link> GetIp, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på heltals parameter ( Get I nteger p arameter). 

<h1>Beskrivning 

Hämtar i godtycklig instans värdet av 32-, 16- eller 8-bitars heltalsparameter. 
Parametern kan avse skalär eller element i 1-dimensionell vektor. 

Parameterns fullständiga namn anges.

GetIp-objektet: 

är en adressreferens till godtyckligt objekt 
innehåller ingen relevant information i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>ActVal 
Type: pwr_tFloat32
Flags: OutNoVal 

Används av PLC Editorn. 

<h1>Internal Attributes 

<b>IpObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editor. Anger det aktuella objektets fullständiga namn. 

<b>IpObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
GetIp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: CompileFixParam 

Används av PLC Editorn. Anger parameterns fullständiga namn. 

NB! PLC Editorn är 'case sensitive' vad gäller detta attribut. Avses 
ActualValue ska man i Attribute Editor skriva ActualValue och inte t.ex. 
ACTUALVALUE. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> GetPi
GetPi
Engelsk text<link> GetPi, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar värdet på Co-signal ( Get P ulse i nput). 

<h1>Beskrivning 

Hämtar I/O-kopierat råvärde från pulsgivarkort; RawValue från Co -objekt. 

Man kan välja att hämta kortets direkt avlästa råvärde ( som är ett 16 eller 24 
bitars tal) eller det utökade råvärdet (32 bitar) som tillhandahålls av I/O- 
kopieringen. Finns risk för 'overflow' bör det utökade råvärdet användas. 

Objektets sista namnled visas i GetPi -symbolens nedre fält; här PI0. 

 
GetPi -objektet: 

är en adressreferens till Co-signalens värde i I/O-kopierad area 
innehåller ingen relevant information i rtdb 
saknar exekverbar kod 
<h1>Output Attributes 

<b>PulsIn 
Graph name: PI
Type: pwr_tInt32
Flags: OutNoVal 

Anger pulsräknarkortets avlästa råvärde RawValue (= 16 eller 24 bitars heltal). 

<b>PulsInEx 
Graph name: PIX
Type: pwr_tInt32
Flags: OutNoVal 

Anger det utökade råvärdet RawValue (= 32 bitars heltal). 

<h1>Internal Attributes 

<b>CoObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editorn. Anger fullständigt namn på aktuellt Co -objekt. 

<b>CoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Co -objektets namn som ska visas i GetPi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Co -objektet kopplade kanalobjektet ska visas i 
GetPi-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i GetPi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Co-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Graph
Graph
Engelsk text<link> Graph, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar fönster för visning av GMS-grafikbild. 

<h1>Beskrivning 

För att på bildskärm kunna visa GMS-grafik (t.ex. processbilder eller mer 
precis processgrafik) krävs att grafikbilden knyts till Graph -objekt placerade i 
de operatörsnoder där visning ska ske. 

Användare (i betydelsen 'user') av operatörsstation representeras av User 
objekt. De Graph -objekt som anges under FastAvail -parameter i användarens 
User -objekt kan operatören direkt aktivera från Operator Window. Ett Graph -
objekt kan refereras av flera User objekt. 

Flera Graph -objekt samlas med fördel under egen hierarki. 

Formulär och grafikbilder hanteras på liknande sätt. Formulären representeras 
av Form -objekt och grafikbilderna av Graph -objekt. 

<h1>Internal Attributes 

<b>Title 
Type: pwr_tString40
Flags: Param 

Fönstrets namn visas längst upp i fönstret. 

Default får ett fönster med GMS-grafikbild samma namn som motsvarande 
Graph objekt. Med hjälp av Title kan fönstret förses med eget namn. 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text. 

<b>CodeBehind 
Type: pwr_tBoolean
Flags: FixParam
Default value: FALSE 

Anger om det finns applikationsskriven kod bakom GMS-grafiken eller inte. 
FALSE betyder att det saknas applikationskod och att PROVIEW/ R:s paket 
för kodlösa bilder används; se också UpdateInterval . 

TRUE innebär att den GMS-grafik, som anges av GMS_Model , underhålls 
från ett applikationsskrivet program; se ClassName . 

<b>ClassName 
Type: pwr_tString40
Flags: FixParam 

Om CodeBehind är TRUE identifierar attributet vilka rutiner som hör till 
bilden. Rutinerna bör länkas med operatörsmiljön. 

<b>GMS_Model 
Type: pwr_tString80
Flags: FixParam 

Anger namnet på GMS-grafikens m1-fil exklusive filkatalog (= path) och filtyp 
(= extension). 

<b>UpdateInterval 
Type: pwr_tFloat32
Flags: FixParam
Default value: 1.0 

Om CodeBehind är FALSE, anges här uppdateringsperioden, i sekunder, för 
GMS-grafiken. 

Width 

<b>Type: pwr_tInt16
Flags: FixParam
Default value: -1 

För ett GMS-grafikbildfönster gäller att förhållandet mellan fönstrets höjd och 
bredd är konstant. ändras bredden kommer höjden att ändras på motsvarande 
sätt så att fönstrets proportioner bibehålls. 

Attributet anger fönstrets bredd uttryckt i pixel. Ett negativt värde ger default 
bredd. 

Om fönstret bredd ändras, uppdateras attributet, så att fönstrets senaste bredd 
kommer att användas nästa gång fönstret tas upp. 

<b>X, Y 
Type: pwr_tInt16
Flags: FixParam
Default value: -1, -1 

Anger, i pixel, var på bildskärmen GMS-grafikbildens fönster ska läggas ut. X , 
Y avser koordinaten för bildens övre vänstra hörn. Hela bildskärmsytan kan 
t.ex vara 1280 · 1024 pixel.
Om fönstret flyttas, uppdateras attributen, så att fönstrets senaste position 
kommer att styra var fönstret läggs ut nästa gång det tas upp. 

-1, -1 anger en default position. 

 
<b>GmsX1, GmsY1 resp GmsX2, GmsY2 
Type: pwr_tFloat32
Flags: FixParam
Default value: 0.0, 0.0 resp 100.0, 75.0 

Attributen anger i GMS-koordinat system (World Coordinates) vilken del av 
arbetsytan som ska visas på bildskärmen. 

 
<b>ScreenNo 
Type: pwr_tInt8
Flags: FixParam
Default value: -1 

Attributet är avsett att ange numret på den monitor där fönstret ska visas. (Jfr. 
Server i OpPlace -objektets Display attribut.) 

-1 betyder att fönstret visas på samma monitor som Operator Window. 

Används ej idag. 

<b>RemSubscrWhenIcon 
Type: pwr_tBoolean
Flags: FixParam
Default value: FALSE 

Anger om GMS-grafikbildens prenumerationer ska tas ned eller ej då fönstret 
ikonifieras. FALSE innebär att de inte ska tas ned och TRUE att de ska tas ned 
då fönstret ikonifieras. Finns många fönster ikonifierade, som har 
RemSubscrWhenIcon = TRUE, belastas inte systemet av motsvarande 
prenumerationer. å andra sidan måste prenumerationerna sättas upp varje gång 
motsvarande fönster ska visas. 

<h1>Tips 

Knappen 'Graphic' i operatörsmiljön ger en lista över de Graph och Form 
objekt som finns på den aktuella noden oberoende av användare. 

Användarna 'Host' och 'Process', enligt figur 3-18, kommer att få samma lista 
men genom att gruppera i separata hierarkier kan konstruktören indikera vilka 
som är avsedda för 'Host' resp 'Process'. 

 
Configuration of Graph Objects 

<h1>Se även 

User <link> User

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Gray
Gray
Engelsk text<link> Gray, "", $pwr_exe/pwrb_xtthelp.dat

Graykod ingång. Objektet omvandlar 16-bitars Graykod till decimaltal. 

<h1>Beskrivning 

Den kodning, som för att ändra utsignalen en enhet, alltid kräver att en och 
endast en digital insignal byter värde är Graykoden. 

16 binära positioner ger upplösningen 1 på 2 16 = 65 536. 

<h1>Input Attributes 

<b>Din0, Din1, ..., DinF 
Graph name: di0, di1, ...., diF
Type: pwr_tBoolean
Flags: NoRtdb, OpenParam, NoInvert
Default value: FALSE, FALSE, ..., FALSE 

di0 är minst signifikanta biten och diF mest signifikanta. 

<h1>Output Attributes 

<b>ActVal 
Graph name: OUT
Type: pwr_tFloat32
Flags: Output 

Anger omvandlingens resultat. 

<h1>Internal Attributes 

<b>Inv 
Type: pwr_tBoolean
Flags: Param 

Anger om alla ingångar ska inverteras eller ej. FALSE betyder att ingen ingång 
ska invertera sin insignal; TRUE innebär att alla ingångar ska invertera sin 
resp. insignal. Om t.ex, bara de 4 första ingångarna används, ska de övriga 12 
sättas till TRUE för att unvika fel. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Inc3P
Inc3P
Engelsk text<link> Inc3P, "", $pwr_exe/pwrb_xtthelp.dat

Ink rementell 3 - p unktsutgång med dödzon men utan lägesåterföring. 
Inkrementell syftar på insignalen och trean på att tre diskreta order kan ges 
med innebörden höger/vänster/ 0, upp/ner/0, öka/minska/0 etc. Utgångarna är 
satta under en tid som är proportionell mot storleken på insignalen. 

<h1>Beskrivning 

Insignalen OutChange betraktas som ett reglerfel. Detta fel överförs till en tid 
genom multiplikation med Gain . Produkten adderas till ackumulatorn Acc . 

Om absolut värdet av Acc är större än MinTim sätts någon av utgångarna Open 
eller Close till TRUE. 

Om Acc > MinTim sätts 'öka' signalen (= Open ) så länge som Acc = 0 , om, å 
andra sidan, Acc < - MinTim sätts 'minska' signalen (= Close ) så länge som 
Acc = 0. Vid varje exekvering räknas värdet av Acc ned respektive upp med ett 
tidsbelopp av ScanTime , beroende på om 'öka' eller 'minska' signalen satts. 

För att undvika 'obefogade' styringrepp, som skulle kunna skada ställdon vid 
små reglerfel, måste absolutvärdet av Acc -attributet överstiga värdet på den 
ändringsbara dödzonen MinTim , innan någon reglersignal sätts.

Output Signals from an Inc3P 

S.k. tidsproportionell reglering ('timerstyrning'), också använd av Pos3P.

Precis som för Pos3P är det möjligt att välja mellan att styra direkt med 
utgångarna Open / Close och/eller indirekt med signaler angivna av DoOpen / 
DoClose . Utgångar och signaler kan båda sätts TRUE med en frekvens som 
följer av det aktuella PlcPgm -objektets ScanTime . Men det är endast signaler 
som kan sättas FALSE av timerstyrningen . 

Fördelen med timerstyrning är förbättrad upplösning då det aktuella PLC 
programmet ej kör med PLC-jobbets bascykeltid. Timerstyrningen arbetar 
alltid med PLC-jobbets bascykeltid. Om Inc3P -objektet ingår i ett PlcPgm som 
kör med bascykeltiden, ger timerstyrningen inte denna fördel. 

<h1>Input Attributes 

<b>OutChange 
Graph name: OC
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Styrsignalförändring. Hämtas i praktiken ofta från OutChange i ett Pid -objekt. 

<h1>Output Attributes 

<b>Open 
Graph name: ope
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Anger om utgången ska sättas eller ej. FALSE betyder ingen aktivitet; TRUE 
innebär öppna ( upp, öka, höger eller vad som kan vara relevant i det enskilda 
fallet). 

<b>Close 
Graph name: clo
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Anger om utgången ska sättas eller ej. FALSE betyder ingen aktivitet; TRUE 
innebär stäng ( ned, minska, vänster eller vad som kan vara relevant i det 
enskilda fallet). 

<h1>Internal Attributes 

<b>Gain 
Type: pwr_tFloat32
Flags: Param
Default value: 1.0 

Förstärkning, i sekunder, per styrsignalenhet. 

Ofta ligger styrsignalen i intervallet 0 - 100 %. Antag att gångtiden kan mätas, 
t.ex tiden för att köra en ventil från fullt stängt till fullt öppet. Välj då Gain = 
gångtid / skalområdet; (här är skalområdet = 100 - 0 ). 

<b>MinTim 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Dödzon i sekunder; se beskrivning ovan. Om absolutvärdet av Acc är mindre 
än MinTim sätts ingen av utgångarna TRUE. 

<b>MaxTim 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Maximal löptid i sekunder för integrering utan ingrepp. Om tiden MaxTim har 
förlöpt utan att någon utsignal blivit TRUE nollställs Acc . 

<b>DoOpen 
Type: pwr_tObjid
Flags: CompileSetParam 

Vid timerstyrning anger attributet namn på extern signal, t.ex Do eller Dv ( 
svarande mot Open ); även om DoOpen anger en signal manövreras Open av 
objektet. 

<b>DoClose 
Type: pwr_tObjid
Flags: CompileSetParam 

Vid timerstyrning anger attributet namn på extern signal, t.ex Do eller Dv ( 
svarande mot Close ), även om DoClose anger en signal manövreras Close av 
objektet. 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltid i sekunder. Lagras automatiskt vid kompilering. 

<b>Acc 
Type: pwr_tFloat32
Flags: Intern 

Ackumulerad styrsignal - ingrepp i form av tid. 

<b>AccTim 
Type: pwr_tFloat32
Flags: Intern 

Ackumulerad löptid utan ingrepp. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer. 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timerkön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller, om sådant objekt inte används, på 
TimerDoDum . Efter tiden TimerTime nollställs den av TimerDo angivna 
signalen. 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Intern 

Fördröjning i sekunder. Anger när utgångarna ska sättas FALSE. TimerTime = 
PLC-jobbets bascykeltid. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts då laddfilen skapas. Används i målmiljön. 

<h1>Se även 

Pos3P.<link> Pos3P

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> InitStep
InitStep
Engelsk text<link> InitStep, "", $pwr_exe/pwrb_xtthelp.dat

Första steget i en Grafcet-kedja. 

<h1>Beskrivning 

Minst ett InitStep-objekt ska finnas i varje sekvenskedja. 

Objektet är aktivt när det PLC program som innehåller objektet startar sin 
exekvering allra första gången. 

PlcPgm -objekt har ett attribut, ResetObject , där namnet på ett Di , Do , eller 
Dv objekt anges. Detta attribut används som reset signal i en eller flera 
sekvenskedjor i PLC program enligt följande. Då resetsignalen gör 
övergången: 

0 --> 1 blir samtliga Step , InitStep och Order objekt i PLC programmet 
inaktiva. Lagrade order ( se Order objekt) tas bort. 
1 --> 0 blir PLC programmets InitStep objekt aktiva. 
Erfordras individuella resetsignaler för varje enskild sekvenskedja måste 
antalet sekvenskedjor begränsas till en per PLC program 

De vertikala anslutningarna ansluts till Trans -objekt. 

Till den horisontella anslutningen kan samtidigt kopplas dels en eller flera 
Order -objekt, dels en eller flera Stoxx -, Setxx - eller Resxx objekt.
 
<h1>Attributes 

<b>StatusIn 
Type: pwr_tBoolean
Flags: DevOnly
Default value: TRUE 

Används av PLC Editorn. 

<b>StatusOut 
Type: pwr_tBoolean
Flags: DevOnly
Default value: FALSE 

Används av PLC Editorn. 

<h1>Output Attributes 

<b>Order[0] 
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Anger stegets tillstånd. FALSE betyder att steget är inaktivt och TRUE innebär 
att steget är aktivt. Värdet kan läsas med hjälp av GetDp objekt.
Order [0] används både av Order och objekt. 

Attributet sätts av ett i sekvensen föregående Trans objekt. Om efterföljande 
Trans objekts övergångsvillkor är uppfyllt, kontrolleras både Order [0] och 
Order [1]. Om Order [0] = Order [1] = TRUE kommer Order [0] att sättas 
FALSE av efterföljande steg. 

I pwr_inc:BaseClasses.h betecknas attributet Status[0] vilket är den beteckning 
som ska användas då attributet refereras. 

<b>Order[1] 
Type: pwr_tBoolean
Flags: Output 

Dummy variabel som följer Order [0]. 

I pwr_inc:BaseClasses.h betecknas detta attribut Status[1] vilket är den 
beteckning som ska användas då attributet refereras. 

<h1>Internal Attributes 

<b>ResetOld 
Type: pwr_tBoolean
Flags: Intern 

<b>StatusInit 
Type: pwr_tBoolean
Flags: Intern 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Inv
Inv
Engelsk text<link> Inv, "", $pwr_exe/pwrb_xtthelp.dat

Inverterare. 

<h1>Beskrivning 

Inverterar en logisk signal. 

<h1>Input Attributes 

<b>In 
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Anger den logiska signal som ska inverteras. 

<h1>Output Attributes 

<b>Status 
Type: pwr_tBoolean
Flags: Output 

Anger den inverterade insignalen. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> IOHandler
IOHandler
Engelsk text<link> IOHandler, "", $pwr_exe/pwrb_xtthelp.dat

Innehåller attribut som används av IO-jobbet. 

<h1>Beskrivning 

IO-jobbet hanterar, 

- analoga signaler anslutna till lokalt I/O-system
- analoga, digitala och pulsräknar signaler anslutna till distribuerade I/O-
system 

Objektet konfigureras i utvecklingsmiljön under $Node-objekt som 
representerar process nod. Detta ombesörjs normalt av utvecklingsmiljön i 
samband med konfigurering av $Node objekt. 

Har inget IOHandler objekt konfigurerats kommer PROVIEW vid initiering av 
nodens realtidsmiljö att skapa ett. Attributen kommer då att innehåller 
defaultvärden. 

<h1>Input Attributes - 

<h1>Output Attributes - 

<h1>Internal Attributes 

<b>CycleTimeBus 
Type: pwr_tFloat32
Flags: FixParam
Default value: 0.2 

Anger, i sekunder, med vilken cykeltid Ai och Ao signaler anslutna till lokalt 
I/O-system ska läsas in från hårdvaran och konverteras till ingenjörsvärde resp 
konverteras till råvärde och ställas ut. 

Minsta tillåtna cykeltid är 0.1 sekund. 

<b>CycleTimeSerial 
Type: pwr_tFloat32
Flags: FixParam
Default value: 1.0 

En process nod kan förutom sitt lokala I/O-system under sig ha distribuerade 
I/O-system.
Attributet anger, i sekunder, med vilken cykeltid fysiska signalers (Ai, Ao, Co, 
Di och Do) råvärden ska läsas in från distribuerade I/O-system och omvandlas 
till ingenjörsvärden respektive omvandlas från ingenjörsvärden till råvärden 
och skickas ut till nodens distribuerade I/O-system.
Minsta tillåtna cykeltid är 0.5 sekunder. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> $LibHier
$LibHier
Engelsk text<link> $LibHier, "", $pwr_exe/pwrb_xtthelp.dat

Genom att placera enskilda objekt eller vanligare hela hierarki strukturer under 
$LibHier -objekt kan man i utvecklingsmiljön spara undan både 
anläggningsdelar och delar av nodsystemet som av någon anledning inte ska 
ingå i realtidsdatabasen just nu. 

<h1>Beskrivning 

$LibHier objekt skapas i utvecklingsmiljön med hjälp av Configuration Editor. 
De placeras alltid under 'Plant Configuration'. 

Ett PROVIEW-system kan innehålla flera $LibHier ( Lib rary Hier archy ) 
objekt placerade på den högsta nivån eller under andra $LibHier objekt. 

Objekt placerade under $LibHier objekt ingår inte i det aktuella målsystemet. 
Så kan vara fallet när en ny struktur är under utveckling i ett existerande 
PROVIEW-system, när ett givet PLC program inte ska användas för tillfället 
men kanske senare etc. 

Också hierarki strukturer från 'Node Configuration' kan placeras under 
$LibHier objekt. Men om målet är att hindra en ny nod medlem från att laddas 
till målmiljön, noden kanske är under utveckling, är det bara att avstå från 
'Create Load Files ...' för den aktuella noden 

Objektet innehåller ingen relevant information (=data) i rtdb. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

Description 
Type: pwr_tString80
Flags: Param 

Fri text för att beskriva objektets användning. 

<h1>Tips 

För att flytta en hel hierarki struktur väljs i Cofiguration Editor aktuellt 
toppobjekt. Klicka därefter med MB2 där strukturen ska placeras. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Limit
Limit
Engelsk text<link> Limit, "", $pwr_exe/pwrb_xtthelp.dat

Dubbelsidig begränsare. Begränsar analog signal uppåt/nedåt och signalerar 
om begränsning sker. 

<h1>Beskrivning 

Gränserna Max och Min kan vara externa signaler eller ändringsbara 
parametrar. 

 
Insignalen kan vara konstant medan en eller båda gränserna varierar. 

Om begränsning åt endera hållet inte ska göras kopplas insignalen även till 
denna gräns. 

<h1>Input Attributes 

<b>Max 
Graph name: MAX
Type: pwr_tFloat32
Flags: InRtdb, OpenParam, Access
Default value: 0.0 

Anger aktuellt värde på maxgränsen. 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Anger aktuellt värde på insignalen. 

<b>Min 
Graph name: MIN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam, Access
Default value: 0.0 

Anger aktuellt värde på mingränsen. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

 
<b>High 
Graph name: hl
Type: pwr_tBoolean
Flags: Output 

Anger om begränsning uppåt skett eller ej. FALSE betyder ingen begränsning 
uppåt för ögonblicket; TRUE innebär att utsignalen begränsas uppåt till värdet 
av Max . 

<b>Low 
Graph name: ll
Type: pwr_tBoolean
Flags: Output 

Anger om begränsning nedåt skett eller ej. FALSE betyder ingen begränsning 
nedåt för ögonblicket; TRUE innebär att utsignalen begränsas nedåt till värdet 
av Min . 

<h1>Internal Attributes 

<b>AccMax, AccMin 
Type: pwr_tInt32
Flags: Param
Default value: 0 resp. 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Max resp Min . Om värdena uppdateras av externa signaler saknar manuella 
ändringar mening. Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinmaxC, MaxmaxC 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta och största tillåtna värde vid operatörsändring av Max . 

<b>MinminC, MaxMinC 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta och största tillåtna värde vid operatörsändring av Min . 

<h1>Exempel 

Antag att Max och Min båda är anslutna till signaler på sådant sätt att 
gränserna flyter. Exemplet nedan visar varför det är lämpligt att ansluta 
flytande gränser via ett Maxmin -objekt. 

Antag att Max = 10, Min = 50 och In = 20.
Först kontrolleras In -värdet mot Max -värdet. Eftersom In är större än Max 
tilldelas ActVal värdet av Max (= 10). High = TRUE och Low = FALSE. 
Antag att Max = 10, Min = 50 och In = 0. 
In -värdet kontrolleras mot Max -gränsen. In är mindre än Max . 
Kontroll mot Min -gränsen. In är mindre än Min ==> ActVal = Min och Low = 
TRUE. 
Ny kontroll mot Max -gränsen!
ActVal (=50 ) > Max (=10) ==> ActVal = Max = 10 och High = TRUE. Det 
betyder att både High och Low är TRUE ! 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> ListDescriptor
ListDescriptor
Engelsk text<link> ListDescriptor, "", $pwr_exe/pwrb_xtthelp.dat

Beskriver innehåll i och utseende på enskild lista. 

<h1>Beskrivning 

Hjälpprogrammet PWR_PLC innehåller olika funktioner för att operera på 
arbetsbänken, t.ex för att skapa listor. En given lista innehåller namnet på de 
objekt i arbetsbänken som uppfyller ett bestämt sökvillkor angivet i 
ListDescriptor objekt. 

Information om olika av typer standardlistor finns PROVIEW/R Designer's 
Guide . De flesta standardlistor är sammansatta av flera listor, var och en 
bestämd av sitt ListDescriptor objekt. 

Genom att välja 'Utilities...' i Navigatörens Function-meny kan PWR_PLC 
startas. Genom att därefter välja 'on pwr_plc' i Help-menyn i 'Utilities'-fönstret 
erhålls bl. a. en sammanställning av aktuella kommandon. Hjälpprogrammet 
PWR_PLC kan också startas direkt från DCL prompten: 

> pwr_plc ... och hjälpprogrammet svarar med prompten: 

pwr_plc > 

PROVIEW/R distributionen levereras med några för-konfigurerade 
ListDescriptor objekt (strukturer) för standardlistor. De återfinns i 
Konfigurationseditorns 'Node Configuration' under hierarkin Layout-Lists. 
Kommandon för att skapa listor, vare sig man kör PWR_PLC direkt eller 
indirekt via 'Utilities'-fönstret, använder dessa för-konfigurerade ListDescriptor 
objekt. 

Om något för-konfigurerat ListDescriptor objekt ska ändras bör hierarki 
objektet 'Lists' och hela hierarkin därunder först flyttas så att $System objektet 
blir det nya förälder objektet istället för $Layout objektet. PWR_PLC 
programmet söker nämligen först efter objekt med namnet 'Lists', under 
$System objektet och först om inget hittats fortsätter sökningen efter 'Lists' 
under $Layout objektet. Dessutom, skulle vid nästa byte av PROVIEW/R 
distribution, ett modifierat för-konfigurerat ListDescriptor objekt gå förlorat 
om det inte flyttats enligt ovan. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Title 
Type: pwr_tString80
Flags: DevOnly 

Text som ska skrivas i rubrikdelen.

<b>PageHeader 
Type: pwr_tString80
Flags: DevOnly 

Rubriktext som ska skrivs längst upp på varje sida i utskriften. 

<b>AlphaOrder 
Type: pwr_tUInt8
Flags: DevOnly 

Anger i vilken ordning objektnamnen ska listas. Följande värden finns: 

0 -- Objektnamnen skrivs ut i samma ordning som de påträffas i arbets-
bänkens databas (samma ordning som de visas i t.ex Navigatören).
1 -- Objektnamnen skrivs ut i alfabetisk ordning med hänsyn till
objektnamnets första namnled.
2 -- Objektnamnen skrivs ut i alfabetisk ordning med hänsyn till
objektnamnets sista namnled.
3 -- Objektnamnen skrivs ut i alfabetisk ordning med hänsyn till
refererat objekts namn. 

<b>NoPrint 
Type: pwr_tBoolean
Flags: DevOnly 

Anger om namn på objekt som matchar sökkriteriet ska skrivas ut i ( ordinär 
eller avancerad) lista eller ej. TRUE betyder att objektnamnet inte ska skrivas 
ut; FALSE att det ska skrivas ut. 

Attributet har sin utgångspunkt i situationer där objektnamn används som rena 
söknycklar för underlistor. 

<b>NoPrintIfNoList 
Type: pwr_tBoolean
Flags: DevOnly 

Antag att ett objekt hittats enligt sökkriteriet. NoPrintIfNoList = TRUE betyder 
att objektnamnet skrivs ut i listan enbart om det följs av en icke-tom underlista. 

<b>Landscape 
Type: pwr_tBoolean
Flags: DevOnly 

Anger hur texten vid utskrift ska orienteras på papperet. 

<b>PageBreak 
Type: pwr_tUInt8
Flags: DevOnly 

1 -- Sidbyte före utskrift av namn på nytt objekt. Praktiskt t.ex. när
`förälder' listan innehåller flera underlistor.
2 -- Sidbyte och omstart av sidnumreringen till sid 1 före utskrift av namnet
på nästa objekt. 

<b>RowsToPageBreak 
Type: pwr_tUInt8
Flags: DevOnly 

Anger nr ny sida ska skapas i en utskrift. Sidbyte sker d antalet oskrivna rader, 
rknat frn slutet av sidan, r lika med RowsToPageBreak .


<b>ClearRowsPre, ClearRowsPost 
Type: pwr_tUInt8
Flags: DevOnly 

Anger antal blanka rader före respektive efter objektnamn i listan. 

<b>ClearRowsPreList, ClearRowsPostList 
Type: pwr_tUInt8
Flags: DevOnly 

Anger antal blanka rader i början respektive slutet av listan. 

Table of contents 

TableOfContents 
Type: pwr_tUInt8
Flags: DevOnly 

Anger om listan ska ha innehållsförteckning och i så fall hur den ska se ut. 
Följande värden finns: 

0 -- Ingen innehålsförteckning.
1 -- Namnet på ett objekt som matchar sökkriteriet ingår i innehålls-
förteckning enbart om det också skrivs ut i den egentliga listan.
2 -- Namnet på ett ojekt som matchar sökkriteriet ingår i innhålls-
förteckningen enbart om det inte skrivs ut i den egentliga listan; dvs. om
NoPrintIfNoList är true. 
TCSegments 
Type: pwr_tUInt8
Flags: DevOnly 

Anger hur många av objektens namnled som ska ingå i innehållsförteckningen. 
Namnleden räknas med början från det sista namnledet och framåt. 

<b>TCMarginString 
Type: pwr_tString16
Flags: DevOnly 

Anger antal blanktecken som ska föregå TcSegments . 

Searching criteria 

<b>Hierarchyobject 
Type: pwr_tString80
Flags: DevOnly 

Anger det objekt varifrån sökningen ska utgå. Om attributet lämnas blankt 
kommer alla objekt under 'Plant' och 'Node Configuration' att väljas. 

<b>Name 
Type: pwr_tString80
Flags: DevOnly 

Sökning efter objekt med ett angivet namn bland de objekt som uppfyller 
Hierarchyobject . 'Wildcards' (*) är tillåtet i Name . Om attributet lämnas 
blankt eller om objekt anges, som inte tillhör den mängd Hierarchyobject 
definierar, påverkas inte den av Hierarchyobject utvalda mängden. Se också 
Deep . 

<b>Class 
Type: pwr_tString80
Flags: DevOnly 

Sökning efter objekt som tillhör en bestämd klass eller någon av angivna 
klasser. Sökning utförs bland den mängd objekt som uppfyller Hierarchyobject 
och Name . 

Ange namn på klass/er, t.ex Di, Do, Dv, Ai, Ao, Av, Co. Då mer än en klass 
anges separeras klassnamnen med kommatecken. Se också Deep . 

<b>Deep 
Type: pwr_tBoolean
Flags: DevOnly 

Tilldela Deep värdet TRUE om sökningen ska göras på alla nivåer under 
utgångsobjektet och FALSE om sökningen ska begränsas till första nivån under 
utgångsobjektet. 

<b>Crossreference 
Type: pwr_tBoolean
Flags: DevOnly 

Anger om listan ska innehålla korsreferenser eller inte. En korsreferenslista 
innehåller namn varje objekt som refererar det aktuell signalobjektet eller, med 
andra ord, svarar på frågan -- Vem använder det aktuella signalobjektet? 
Sökningen utförs bland arbetsbänkens alla objekt. 

<b>Externreference 
Type: pwr_tUInt8
Flags: DevOnly 

Anger om listan ska innehålla externa referenser eller inte. Sökningen 
genomförs bland arbetsbänkens samtliga objekt. Antag att ett objekt hittas 
enligt söknyckeln: 

0 Inga externa referenser ska beaktas.

1 Objekt under utgångsobjekt kan referera till objekt/attribut som
varken är signalobjekt eller tillhör den aktuella hierarkin. Ange
"1" för att inkludera sådana objekt placerad i hierarkier utanför
den aktuell men refererade av objekt under utvalt objekt.

2 Signalobjekt refererade från objekt under utgångsobjekt
(vanligtvis Getxxx, Setxxx, Stoxxx etc) skrivs ut. Namnen på
kanalobjekt anslutna till signalobjekten skrivs också ut.

3 Objekt i hierarkier utanför den aktuella kan också referera till
attribut i objekt under utgångsobjektet. Ange "3" för att inklud-
era namn på objekt (signalobjekt undantagna) i andra hierarkier
med denna typ av referens.

<b>Parameter 
Type: pwr_tString80
Flags: DevOnly 

Om värdet på något av de utvalda objektens attribut ska ingå i en 'ordinär' lista 
anges attributets namn här. 

<b>Full 
Type: pwr_tUInt8
Flags: DevOnly 

Bitmask för att styra vilka av de utvalda objektens attribut som ska ingå i en 
'ordinär' utskrift. Olika flaggor får kombineras. Följande värden finns: 

0 Anger att attributet inte ska inverka på utskriften.

1 Alla attributvars värden skiljer sig från original (`template')
objektet ska ingå i utskriften.

2 Objektnamnet ska ingå i utskriften enbart om det modifierats.

4 Ändringar i attribut, som tillhör objektets RtBody (!), ska inte
ingå i utskriften.

8 Ändringar i attribut, som tillhör objektets DvBody (!), ska inte
ingå i utskriften.

16 

32 Ändringar i attribut, som tillhör objektets SysBody (!), ska inte
ingå i utskriften.

64 Tag med Stoxx, Setxx, och Resxx objekt vars ingångar lämnats
öppna och sedan tilldelats värde.

<b>ColumnHeader 
Type: pwr_tBoolean
Flags: DevOnly 

Anger om kolumnrubriker ska skrivas ut eller ej. TRUE betyder att 
P1ColumnHeader , P2ColumnHeader , ... kommer att skrivas ut. 

<b>ColHead_____ 
Type: pwr_tBoolean
Flags: DevOnly 

Anger om kolumnrubrikerna ska strykas under eller ej. TRUE betyder att 
kolumnrubrikerna ska strykas under. 

<b>P1Parameter 
Type: pwr_tString16
Flags: DevOnly 

'Avancerad' utskrift. För objekt som uppfyller sökvillkoret är det möjligt att 
ange vad som ska ingå i listan. Detta gäller både objektet själv och dess 
attribut. 

PrintObjName Det utvalda objektets hela namn ska skrivas ut.

PrintObjClass Det utvalda objektets klass ska skrivas ut.

PrintNode Det utvalda objektets nodtillhörighet skrivs ut.

PrintObjRefPar Utskrift av de objekt och attribut som tillhör andra
hierarkier men som refereras från objekt under
utgångsobjektet.

PrintRefObjPar Utskrift av objekt och attribut, belägna under
utgångsobjektet, där det finns referenser från
objekt utanför utgångsobjektet.

PrintRefObj Utskrift av objekt beläget under utgångsobjektet
som refereras från hierarkier utanför utgångs-
objektet.

PrintRefClass Utskrift av det refererade objektets klass enligt
PrintRefObjPar eller PrintRefObj .

PrintObjSigChan Utskrift av det anslutna objektets namn. Relevant
för signal- och kanalobjekt.

PrintSigChanId Utskrift av Identity. Relevant för kanalobjekt.

PrintWrite Utskrift av Write. Relevant för ExternRef objekt.



<b>P1ColumnHeader 
Type: pwr_tString40
Flags: DevOnly 

<b>P1MarginString 
Type: pwr_tString40
Flags: DevOnly 

Anger tecken som ska föregå PxParameter 

<b>P1PrintParName 
Type: pwr_tBoolean
Flags: DevOnly 

Anger om attributnamnet ska skrivas ut eller ej. TRUE betyder att attributets 
namn skrivs ut. 

<b>P1CarriageRet 
Type: pwr_tBoolean
Flags: DevOnly 

Anger om raden ska avslutas efter denna kolumn eller ej. TRUE betyder att 
detta är radens sista kolumn. 

<b>P1SizeTabs 
Type: pwr_tInt16
Flags: DevOnly 

Anger kolumnbredd uttryckt som antal 'tabbar'. 

<b>P1Segments 
Type: pwr_tInt16
Flags: DevOnly 

Anger hur många av objektets namnled som ska skrivas ut. Namnleden räknas 
med början från det sista namnledet och framåt. 

NB! Kolumn 2 till 15 hanteras på samma sätt som kolumn 1.
 
<h1>Tips 

För att öka kunskapen om ListDescriptor objektens användning kan det vara 
konstruktivt att studera några av de för-konfigurerade ListDescriptor objektens 
(strukturer) som levereras med PROVIEW/R distributionen. 

För att skapa en lista med hjälp av ListDescriptor objekt är det alltid möjligt att 
använda 'Utilities'-fönstret. Välj i kommando-boxens först 'List' och sedan 'List 
Descriptor'. Gör sedan 'insert' på det aktuella ListDescriptor objektet. 

<h1>Se även 

PROVIEW/R Designer's Guide.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Maxmin
Maxmin
Engelsk text<link> Maxmin, "", $pwr_exe/pwrb_xtthelp.dat

Max/Min väljare. 

<h1>Beskrivning 

Maxmin -objektet väljer största respektive minsta värdet bland upp till 8 
insignaler, varav de två första kan vara konstanter. 

De använda ingångarna ska väljas konsekutivt. 

<h1>Input Attributes 

<b>In1, In2 
Graph name: IN1, IN2
Type: pwr_tFloat32
Flags: NoRtdb, OpenParam
Default value: 0.0, 0.0 

Värde på insignal 1 och insignal 2. 

<b>In3, In4 ..., In8 
Graph name: In3 IN4, ..., IN8
Type: pwr_tFloat32
Flags: NoRtdb, OpenNoFunction
Default value: 0.0, 0.0, ..., 0.0 

Värde på insignal 3, insignal 4, ..., insignal 8. 

<h1>Output Attributes 

<b>MaxVal 
Graph name: MAX
Type: pwr_tFloat32
Flags: Output 

Största värde bland insignalerna; dvs Max ( In1 , In2 , ..., In8 ) 

<b>MinVal 
Graph name: MIN
Type: pwr_tFloat32
Flags: Output 

Minsta värde bland insignalerna; dvs. Min( In1 , In2 , ..., In8 ) 

<h1>Internal Attributes 

- 
<h1>Exempel 

Välj ut minsta värdet bland insignalerna AI1, AI2 och konstanten 3.5 

Lösning: - Koppla IN2 och IN3 till Ai- objekten AI1 och AI2.
- Lägg konstanten 3.5 på ingången In1 .
- MAX-utgången används inte varför den inte markeras i `Used'. 
- MIN-utgången innehåller det begärda värdet. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> MessageHandler
MessageHandler
Engelsk text<link> MessageHandler, "", $pwr_exe/pwrb_xtthelp.dat

Objektet innehåller en enskild meddelandehanterares (=mh:s) attribut. 

<h1>Beskrivning 

Varje meddelandehanterare kräver ett MessageHandler objekt. 

 
Message Handler Jobs in Different Nodes with their
MessageHandler Objects 

Om, för en given nod, MessageHandler-objektet inte konfigureras i 
utvecklingsmiljön kommer det likväl att skapas i målmiljön. I det senare fallet 
kommer attributen att få sina respektive standard (= default) värden. Om 
defaultvärdena inte kan accepteras konfigurera explicit ett MessageHandler 
objekt under den aktuella nodens $Node objekt. Ge det namnet 
'MessageHandler' och tilldela attributen önskade värden. 

I samband med konfigurering av $Node objekt ombesörjer utvecklingsmiljön 
normalt att MessageHandler-objektet skapas. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>OutunitServer 
Type: pwr_tBoolean
Flags: ???
Default value: FALSE 

??? 

<b>BlockFile 
Type: pwr_tBoolean
Flags: ???
Default value: FALSE 

??? 

<b>EventLogSize 
Type: pwr_tUint32
Flags: ???
Default value: 0 

??? 

<b>EventListSize 
Type: pwr_tUint32
Flags: ???
Default value: 100 

??? 

<b>MaxApplAlarms 
Type: pwr_tUint32
Flags: RunTimeOnly, FixParam ???
Default value: 50 

Anger max antal samtidigt utestående larm från något tillämpningsprogram. 
Attributet används för att förhindra ett enskilt jobb från att helt lägga beslag på 
meddelandehanterares händelselista. ???????????????? 

<b>DetectTimer 
Type: pwr_tFloat32
Flags: ???
Default value: 1 

??? 

<b>MessageTimer 
Type: pwr_tFloat32
Flags: ???
Default value: 1 

??? 

<b>AlarmFirstIdx 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>AlarmLastIdx 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>AlarmCount 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>AlarmMaxCount 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>BlockFirstIdx 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

BlockLastIdx 
<b>Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>BlockCount 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>BlockMaxCount 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>EventFirstIdx 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>EventLastIdx 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>EventCount 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>EventMaxCount 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>FreeCount 
Type: pwr_tUint32
Flags: ???, Intern 

??? 

<b>MaxNoOfEvents 
Type: pwr_tUint16
Flags: RunTimeOnly, FixParam
Default value: 100 

Anger max antal händelser som nodens meddelandehanterare samtidigt ska 
kunna rymma i sin händelselista, dvs händelsehorisonten. Då NoOfEvents 
överstiger MaxNoOfEvents skapas nytt utrymme i listan genom att den äldsta 
händelsen stryks från listan.

<b>NoOfEvents 
Type: pwr_tUint16
Flags: RunTimeOnly, Intern 

Antal händelser räknat från senaste omstart. 

<b>NoOfAlarms 
Type: pwr_tUint16
Flags: RunTimeOnly, Intern 

Antalet aktiva larm räknat från senaste omstart. 

<h1>Tips 

För information om meddelandehanteraren hänvisas till PROVIEW/R 
Designer's Guide . 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Mode
Mode
Engelsk text<link> Mode, "", $pwr_exe/pwrb_xtthelp.dat

Hanterar val av reglermod (MANUAL / AUTO / CASCADE) och s.k. 
tvångsstyrning åt Pid -objekt. 

<h1>Beskrivning 

Följande reglermoder finns: 

MANUAL -- då operatören själv sätter Pid -objektets styrsignal. 
AUTO -- då operatören väljer börsvärde och Pid -objektet
beräknar styrsignal. 
CASCADE -- utsignalen från ett objekt, t.ex. Pid-objekt, används som 
börvärde av det med Mode-objektet associerade Pid-objektet. 
 

Tvångsstyrning innebär att Pid objektets OutVal baseras på Mode objektets 
attribut XForceVal , inte på PID-algoritmen.

Pid -objektet har två utgångar som båda kan användas som styrsignal. Vilken 
som används i det enskilda fallet beror på hur regleringen är ordnad: 

OUT (attributet OutVal ) innehåller ett värde som kan komma från 
evalueringen av PID-algoritmens 'positional form', från operatören i läge 
MANUAL eller vara ett s.k. tvångsstyrningsvärde. Kunskapen om var 
ställdonet ska stå ligger i detta fall på regulatorsidan eftersom hela värdet 
används. 
OC (attributet OutChange ) anger hur ställdonet ska ändras mellan två 
successiva programcykler. I detta fall talar man om PID-algoritmens 'velocity' 
eller 'incremental form'. 
<h1>Input Attributes 

<b>XSetVal 
Graph name: XSV
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Externt börvärde (= Set point Val ue). Attributet används enbart i läge 
CASCADE och då på så sätt att SetVal = XSetVal . 

<b>ProcVal 
Graph name: PV
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

ärvärde (= Proc ess Val ue). Attributet används i Mode objektets objektbild vid 
visning av ärvärdet. 

<b>XForcVal 
Graph name: XFO
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Externt tvångsstyrningsvärde (= Forc ed Val ue). Attributet används enbart vid 
tvångsstyrning (dvs. Force1 eller Force2 är TRUE) och då på så sätt att 
ForceVal = XForceVal . 

<b>Forc1 
Graph name: fo1
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om ovillkorlig tvångsstyrning valts eller ej.

<b>Forc2 
Graph name: fo2
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO och CASCADE, om tvångsstyrning valts eller ej.

<b>OutVal 
Graph name: OUT
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 

Då reglerkretsen sätts i läge MANUAL skulle processen få en större eller 
mindre stöt ('bump') om värdet på ForcVal inledningsvis avvek från det 
aktuella ärvärdet, ProcVal . 

För att undvika detta gäller följande: Vid omkoppling till läge MANUAL 
initieras internt FOV-utgången med värdet av OutVal . Alltså återstår att se till 
att värdet på OutVal ger 'bumpless transfer'. Detta brukar lösas med en analog 
återkoppling från Pid -objektets OUT -utgång. 

<h1>Output Attributes 

<b>SetVal 
Graph name: SV
Type: pwr_tFloat32
Flags: Output, Access
Default value: 

Anger, i läge AUTO och CASCADE, aktuellt börvärde. Attributet kan i läge 

- MANUAL och AUTO, ändras från Mode objektets objektbild 

- CASCADE, internt tilldelas värdet av XSetVal . 

Ofta ansluts utgången till motsvarande ingång på efterföljande Pid -objekt. 

<b>ForcVal 
Graph name: FOV
Type: pwr_tFloat32
Flags: Output, Access
Default value: 

Normalt ansluts utgången till motsvarande ingång på efterföljande Pid -objekt. 
Värdet på Pid -objektets utgångar OUT och OC kommer att baseras på ForcVal 
i följande fall: 

ovillkorlig tvångsstyrning, dvs Forc1 är TRUE och ForceVal = XForceVal 
villkorlig (= reglermod är AUTO eller CASCADE) tvångsstyrning då Force2 = 
TRUE och ForceVal = XForceVal 
OpMod = MANUAL. ForcVal sätts av operatören, t.ex från Mode -objektets 
objektbild. 

<b>Force 
Graph name: for
Type: pwr_tBoolean
Flags: Output 

Normalt ansluts utgången till motsvarande ingång på efterföljande Pid - objekt. 

Attributet anger för Pid -objektet om värdena till utgångarna OUT och OC ska 
hämtas från algoritmen eller ej. FALSE betyder att AUTO eller CASCADE 
gäller, dvs. värdena baseras på algoritmen. TRUE innebär att tvångskörning 
eller MANUAL gäller och att värdena istället ska bygga på FOV-utgångens 
värde. 

<b>AutMode 
Graph name: aut
Type: pwr_tBoolean
Flags: Output 

Anger om reglermod AUTO valts eller ej. FALSE betyder att annan mode 
gäller; TRUE innebär att AUTO valts. 

Eftersom ett efterföljande Pid -objekt inte behöver skilja mellan AUTO och 
CASCADE används attributet ofta för ren indikering. 

<b>CascMode 
Graph name: cas
Type: pwr_tBoolean
Flags: Output 

Anger om reglermod CASCADE valts eller ej. FALSE betyder att annan mode 
gäller; TRUE innebär att CASCADE valts. 

Eftersom ett efterföljande Pid -objekt inte behöver skilja mellan AUTO och 
CASCADE används attributet ofta för ren indikering. 

<h1>Internal Attributes 

<b>OpMod 
Type: pwr_tInt32
Flags: Param, Access
Default value: 1 

Anger vald reglermod. Attributet kan ändras från Mode -objektets objektbild. 

= 1 MANUAL. Operatören väljer regulatorns styrsignal. Regulatorns
styrsignal tvångsstyrs till angivet värde i ForceVal.

MinOut och MaxOut definierar styrsignalens tillåtna intervall.

= 2 AUTO. Operatören väljer börvärde, Regulatorns börvärde = 
SetVal och styrsignalen räknar regulatorn fram.

MinSet och MaxSet definierar böbrvärdets tillåtna intervall.

= 4 CACSADE. Som i AUTO men regulatorns börvärde = XSetVal. 

 
Illustrates the Connection between Forced Control and
Control Modes 

AccMod 
Type: pwr_tInt32
Flags: Param
Default value: 3 

Anger operatörens behörighet att ändra värde på OpMod . Följande 
behörigheter är möjliga: 

1 -- Bara MANUAL 5 -- CASCADE / MANUAL
2 -- Bara AUTO 6 -- CASCADE / AUTO
3 -- MANUAL / AUTO 7 -- MANUAL / AUTO / CASCADE
4 -- Bara CASCADE

<b>AccOut 
Type: pwr_tInt32
Flags: Param
Default value: 15 

Ej implementerad funktion. Anger operatörens behörighet att ändra ForcVal . 
Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinOut, MaxOut 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0, 100.0} 

Minsta och största tillåtna värde vid operatörsändring av ForcVal . 

I läge MANUAL kan ForcVal ändras från Mode -objektets objektbild. 

<b>AccSet 
Type: pwr_tInt32
Flags: Param
Default value: 15 

Ej implementerad funktion. Anger operatörens behörighet att ändra SetVal . 
Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinSet, MaxSet 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0, 100.0} 

Minsta och största tillåtna värde vid operatörsändring av SetVal . 

I läge MANUAL och AUTO kan SetcVal ändras från Mode -objektets 
objektbild. 

<b>SetMinShow , SetMaxShow 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0, 100.0} 

Undre och övre gräns vid presentation av är-och börvärde i Mode -objektets 
objektbild. Gränserna kan ändras från objektbilden. 

<b>OutMinShow, OutMaxShow 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0, 100.0} 

Undre och övre gräns vid presentation av Pid -objektets OutVal i Mode -
objektets objektbild. Gränserna kan ändras från Mode -objektets MERbild. 

<b>SetEngUnit 
Type: pwr_tString16
Flags: Param
Default value: % 

Anger ingenjörsenheten för SetMinShow / SetMaxShow , t.ex kg. Används i 
Mode -objektets objektbild. 

<b>OutEngUnit 
Type: pwr_tString16
Flags: Param
Default value: % 

Anger ingenjörsenheten för OutMinShow / OutMaxShow , t.ex %. Används i 
Mode -objektets objektbild. 

<b>PidObjDid 
Type: pwr_tObjid
Flags: Param 

Anger fullständigt namn på det med Mode -objektet associerade Pid -objektet. 
Attributet gör det möjligt att via knapp i Mode -objektets objektbild starta 
objektbilden för det associerade Pid -objektet. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Mvalve
Mvalve
Engelsk text<link> Mvalve, "", $pwr_exe/pwrb_xtthelp.dat

Styrning, typ motorventil, med tre lägesverkan samt övervakning av gångtid, 
gränslägesindikeringar och kontaktorsvar. Objektet realiserar öka-minska 
styrning. 

<h1>Beskrivning 

Objektet, som liknar Valve objektet, kan stoppas i pågående driftorder , dvs 3-
lägesverkan. Orderna betecknas här OPEN, STOP och CLOSE men kan tolkas 
som: upp - stopp - ned, höger - stopp - vänster, öka - stopp - minska etc. 

OPEN gäller då OrderOpen är TRUE, CLOSE då OrderClose är TRUE och 
STOP då både OrderClose och OrderOpen är FALSE. 

Med hjälp av gångtidsövervakningen är det möjligt att upptäcka om 
reglerelementets förflyttning mellan två positioner hindras. 

Objektet har tre driftlägen, LOCAL / MANUAL / AUTO, som väljs med hjälp 
av Local och ManMode enligt följande: 

 
I läge AUTO ska AutoOpen / AutoClose -direktiven ligga kvar så länge 
operationen ska fortgå , annars stoppar rörelsen. 

Kontaktorlarmen, Alarm5 och Alarm 6 , stoppar pågående manöver. Ny order 
tar ned larmen och ger nytt startförsök. 

<h1>Input Attributes 

<b>AutoOpen 
Graph name: aop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO, om OPEN ska begäras eller ej. FALSE saknar betydelse 
och TRUE innebär OPEN-begäran. 

<b>AutoClose 
Graph name: acl
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO, om CLOSE ska begäras eller ej. FALSE saknar betydelse 
och TRUE innebär CLOSE-begäran. 

<b>EndOpen 
Graph name: eop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om ändgränsläget för OPEN är påverkat eller ej. FALSE betyder ingen 
påverkan och TRUE innebär att ändgränsläget är påverkat och OrderOpen sätts 
FALSE. 

Attributet används av Alarm1 och Alarm3 . 

<b>EndClose 
Graph name: ecl
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om ändgränsläget för CLOSE är påverkat eller ej. FALSE betyder ingen 
påverkan och TRUE innebär att ändgränsläget är påverkat och OrderClose sätts 
FALSE. 

Attributet används av Alarm2 och Alarm4 . 

<b>ConOpen 
Graph name: cop
Type: pwr_tBoolean
Flags: InRtdb, OpenExtern ( to OrderOpen), NoInvert 

Kontaktorsvar vid OPEN-order. 

Om cop-ingången lämnas öppen används internt värdet på oop-utgången som 
insignal och värdet lagras i ConOpen . FALSE betyder att kontaktorn inte gått 
till, TRUE innebär att kontaktorn dragit inom föreskriven tid. 

<b>ConClose 
Graph name: ccl
Type: pwr_tBoolean
Flags: InRtdb, OpenExtern ( to OrderClose), NoInvert 

Kontaktorsvar vid CLOSE-order. 

Om ccl-ingången lämnas öppen används internt värdet på ocl-utgången som 
insignal och värdet lagras i ConOpen . FALSE betyder att kontaktorn inte gått 
till, TRUE innebär att kontaktorn dragit inom föreskriven tid. 

<b>Local 
Graph name: loc
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om läge LOCAL valts eller ej. FALSE betyder att 'NOT LOCAL' valts 
och ManMode om det då är MANUAL eller AUTO som gäller. TRUE innebär 
att LOCAL valts. 

I praktiken kan signalen komma från t.ex vridomkopplare. 

<b>LocalOpen, LocalClose, LocalStop 
Graph name: lop, lcl, lst
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge LOCAL, om OPEN-, CLOSE- eller STOP-order ska ges. FALSE 
representerar ingen aktivitet. 

LocalOpen = TRUE, betyder OPEN-order och den kommer att kvarstå tills att 
CLOSE eller STOP-order ges. 

LocalClose = TRUE, betyder CLOSE-order och den kommer att kvarstå tills 
att OPEN eller STOP-order ges. 

LocalStop = TRUE, betyder STOP-order och den kommer att kvarstå tills att 
OPEN eller CLOSE-order ges. 

<b>SafeOpen 
Graph name: sop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger säkerhetsförreglingens tillstånd visavi OPEN-order. Förreglingen gäller 
oberoende av driftläge. 

FALSE betyder att förreglingen är inaktiv. TRUE innebär en ovillkorlig 
OPEN-order såvida inte också någon av SafeClose , SafeStop eller Alarm5 är 
TRUE. Om SafeClose , SafeOpen , SafeStop alla är TRUE vinner SafeStop i 
kraft av sin högre prioritet; se ovan 

SafeClose 
Graph name: scl
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger säkerhetsförreglingens tillstånd visavi CLOSE-order. Förreglingen 
gäller oberoende av driftläge. 

FALSE betyder att förreglingen är inaktiv. TRUE innebär en ovillkorlig 
CLOSE-order såvida inte också någon av SafeOpen , SafeStop eller Alarm6 är 
TRUE. Om SafeClose , SafeOpen , SafeStop alla är TRUE vinner SafeStop i 
kraft av sin högre prioritet; se ovan 

<b>SafeStop 
Graph name: sst
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger säkerhetsförreglingens tillstånd visavi STOP-order. Förreglingen gäller 
oberoende av driftläge. 

FALSE betyder att förreglingen är inaktiv. TRUE innebär en ovillkorlig STOP-
order. 

<b>ProdOpen 
Graph name: pop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO och MANUAL, driftförreglingens tillstånd visavi OPEN- 
order. 

FALSE betyder att förreglingen är inaktiv. TRUE innebär en OPEN-order 
såvida inte någon av SafeClose , Safestop , ProdClose , ProdStop , Alarm5 
eller Local är TRUE. 

<b>ProdClose 
Graph name: pcl
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

FALSE betyder att förreglingen är inaktiv. TRUE innebär en CLOSE-order 
såvida inte någon av SafeOpen , SafeStop , ProdStop , Alarms eller Local är 
TRUE. 

<b>ProdStop 
Graph name: pst
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO och MANUAL, driftförreglingens tillstånd visavi STOP- 
order. 

FALSE betyder att förreglingen är inaktiv. TRUE innebär en STOP-order ( 
OrderClose och OrderOpen är FALSE) såvida inte någon av SafeOpen , 
SafeClose , eller Local är TRUE. 

<h1>Output Attributes 

<b>ManMode 
Graph name: man
Type: pwr_tBoolean
Flags: Param
Default: FALSE 

Anger driftläge ( MANUAL eller AUTO) när LOCAL är FALSE. Attributet 
används som en traditionell parameter, dvs man kan skriva/läsa i den från olika 
program. Tanken med att placera attributet som ett utgångsattribut är att 
attributet då enklare kan användas i den grafiska konfigurationen. FALSE 
betyder att AUTO gäller och TRUE att driftläget är MANUAL. 

<b>OrderOpen 
Graph name: oop
Type: pwr_tBoolean
Flags: Output 

Driftsorder. FALSE betyder att ingen OPEN-order gäller och om OrderClose 
också är FALSE betyder det STOP. TRUE innebär OPEN-order. 

<b>OrderClose 
Graph name: ocl
Type: pwr_tBoolean
Flags: Output 

Driftsorder. FALSE betyder att ingen CLOSE-order gäller och om OrderOpen 
också är FALSE betyder det STOP. TRUE innebär CLOSE-order. 

<b>IndOpen 
Graph name: iop
Type: pwr_tBoolean
Flags: Output 

Indikerar, i läge AUTO och MANUAL, huruvida ändgränsläget för OPENED- 
manöver är påverkat och om någon CLOSING-manöver påbörjats eller ej.
Attributet är TRUE om EndOpen = TRUE och IndClosed = OrderClose = 
Local = EndClose = FALSE, annars är attributet FALSE. 

<b>IndClosed 
Graph name: icl
Type: pwr_tBoolean
Flags: Output 

Indikerar, i läge AUTO och MANUAL, huruvida ändgränsläget för CLOSED- 
manöver är påverkat och om någon OPENING-manöver påbörjats eller ej. 

Attributet är TRUE om EndClose = TRUE och IndOpen = OrderOpen = Local 
= EndOpen = FALSE, annars är attributet FALSE. 

<b>Alarm1 
Graph name: al1
Type: pwr_tBoolean
Flags: Output 

Gångtidsövervakning vid OPEN-manöver. 

Anger om OrderOpen varit TRUE under en tid längre än RunTime utan att 
ändgränsläget för 'fullt öppet' ( attributet EndOpen ) påverkats.
FALSE betyder inget larm; TRUE innebär att EndOpen inte påverkats inom 
tidsgränsen RunTim . Driftordern, OrderOpen , påverkas inte av larmet. 

Larmet kvarstår tills att EndOpen blir TRUE eller tills att CLOSE-order ges. 
Larmet påverkas inte av STOP-order.
Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
'Förlång gångtid vid OPEN av xxx ' i övervakningsobjektets DetectText . 

<b>Alarm2 
Graph name: al2
Type: pwr_tBoolean
Flags: Output 

Gångtidsövervakning vid CLOSE-manöver. 

Anger om OrderOpen varit FALSE under en tid längre än RunTime utan att 
ändgränsläget för 'fullt stängt' ( attributet EndClosed ) påverkats. 

FALSE betyder inget larm; TRUE innebär att EndClosed inte påverkats inom 
tidsgränsen RunTim . Driftordern, OrderClose , påverkas inte av larmet. 

Larmet kvarstår tills att EndClosed blir TRUE eller tills att OPEN-order ges. 
Larmet påverkas inte av STOP-order 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlång gångtid vid CLOSE av xxx ' i övervakningsobjektets DetectText . 

<b>Alarm3 
Graph name: al3
Type: pwr_tBoolean
Flags: Output 

övervakning av ändgränsläget för OPEN-manöver. 

Attributet signalerar genom att bli TRUE, om EndOpen indikeringen förloras 
trots avsaknad av CLOSE-order eller om båda gränslägesindikeringarna ( 
EndOpen , EndClose ) samtidigt är påverkade. Driftordern, OrderOpen , 
påverkas inte av larmet. 

Larmet kvarstår tills OrderClose blir TRUE eller EndOpen = TRUE och 
EndClose = FALSE. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlorat 'fullt öppen'-indikeringen på xxx ' i övervakningsobjektets DetectText 
. 

<b>Alarm4 
Graph name: al4
Type: pwr_tBoolean
Flags: Output 

Övervakning av ändgränsläget för CLOSE-manöver. 

Attributet signalerar genom att bli TRUE, om EndClose indikeringen förloras 
trots avsaknad av OPEN-order eller om båda gränslägesindikeringarna ( 
EndOpen , EndClose ) samtidigt är påverkade. Driftordern, OrderClose , 
påverkas inte av larmet. 

Larmet kvarstår tills OrderOpen blir TRUE eller EndClose = TRUE och 
EndOpen = FALSE. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlorat 'fullt stängt'-indikeringen på xxx ' i övervakningsobjektets DetectText 
. 

Om EndClose = EndOpen = TRUE är både Alarm3 och Alarm4 aktiva. 

<b>Alarm5 
Graph name: al5
Type: pwr_tBoolean
Flags: Output 

Övervakning av kontaktorsvar vid OPEN-manöver. 

FALSE betyder inget larm. 

TRUE innebär antingen att kontaktorsvaret vid OPEN-manöver, ConOpen , 
inte kom inom föreskriven tid (= Ctime ) eller också att det därefter föll bort 
under pågående OPEN-order. PROVIEW tar då spontant ned OPEN-ordern. 

Larmet kvarstår tills ny OPEN- eller CLOSE-order ges.
Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlorat kontaktorsvar vid OPEN av xxx ' i övervakningsobjektets DetectText 
. 

<b>Alarm6 
Graph name: al6
Type: pwr_tBoolean
Flags: Output 

Övervakning av kontaktorsvar vid CLOSE-manöver. 

FALSE betyder inget larm. 

TRUE innebär antingen att kontaktorsvaret vid CLOSE-manöver, ConClose , 
inte kom inom föreskriven tid (= Ctime ) eller också att det därefter föll bort 
under pågående CLOSE-order. PROVIEW tar då spontant ned CLOSE-ordern.
Larmet kvarstår tills ny OPEN- eller CLOSE-order ges.
Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlorat kontaktorsvar vid CLOSE av xxx ' i övervakningsobjektets 
DetectText . 

<b>SumAlarm 
Graph name: als
Type: pwr_tBoolean
Flags: Output 

Summalarm. 

Anger om något av objektets interna larm är aktivt eller ej. FALSE betyder att 
inget aktivt internlarm finns; TRUE innebär att minst en av utgångarna al1 , al2 
, .... , al6 är TRUE. Driftorder påverkas ej av larmet.
Koppla ett DSup objekt till utgången om meddelande ska skickas och ange 
DetectText . 

<h1>Internal Attributes 

<b>ManOpen 
Type: pwr_tBoolean
Flags: Operator
Default value: 

Anger, i läge MANUAL, ett OPEN-direktiv. FALSE betyder ingen aktivitet; 
TRUE innebär att OPEN-order ska ges. Sedan den satta flaggan noterats ser 
PROVIEW till att den tas ned. 

<b>ManClose 
Type: pwr_tBoolean
Flags: Operator 

Anger, i läge MANUAL, ett CLOSE-direktiv. FALSE betyder ingen aktivitet; 
TRUE innebär att en CLOSE-order ska ges. Sedan den satta flaggan noterats 
ser PROVIEW till att den tas ned. 

<b>ManStop 
Type: pwr_tBoolean
Flags: Operator 

Anger, i läge MANUAL, ett STOP-direktiv. FALSE betyder ingen aktivitet; 
TRUE innebär att en STOP-order ska ges. Sedan den satta flaggan noterats ser 
PROVIEW till att den tas ned. 

<b>Ctime 
Type: pwr_tFloat32
Flags: Param
Default value: 1.0 

Den, i sekunder, längsta tillåtna tiden för väntan på kontaktorsvar. Om en 
driftorder (OPEN eller CLOSE) gällt under en tid längre än Ctime utan att 
motsvarande kontaktorsvar ( ConOpen , ConClose ) blivit aktivt sätts Alarm5 
eller Alarm6 . Tiden räknas från det att OrderOpen eller OrderClose blir 
TRUE. 

Ctime = PLC-jobbets bascykeltid. 

<b>RunTime 
Type: pwr_tFloat32
Flags: Param
Default value: 60.0 

Den, i sekunder, längsta tillåtna gångtiden. Om en driftorder (OPEN eller 
CLOSE) gällt under en tid längre än RunTime utan att motsvarande 
gränslägesindikering blivit aktivt sätts Alarm1 eller Alarm2 . 

RunTime = PLC-jobbets bascykeltid. 

<b>ManAcc 
Type: pwr_tInt32
Flags: Param
Default value: 15 

Ej implementerad funktion. Anger operatörens behörighet att växla mellan 
driftlägena MANUAL / AUTO. Följande behörigheter är möjliga: 

0 -- Ingen växling tillåten
? 0 -- Växling tillåten. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer. 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller om sådant inte används, på TimerDoDum 
. Efter tiden TimerTime tas den signal, som utpekas av TimerDo , ned. 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Intern 

Väntetid i sekunder. Attributet sätts i målmiljön till Ctime eller RunTime . 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts i samband med 'Create Load Files ...' för 
användning i målmiljön. 

<b>Status 
Type: pwr_tInt32
Flags: Intern 

Följande status värden är möjliga: 

1 eller -1 -- Väntar på OPEN eller CLOSE indikering
2 eller -2 -- OPENING eller CLOSING
3 eller -3 -- OPEN eller CLOSED 

<h1>Exempel 

Vagnsdrift 
 
Vagnen körs endast i läge MANUAL. 

Kontaktorsvar och hastighetsvakt har gemensam övervakningstid. 
Gångtidsövervakningen larmar också. 
 
MValve Object Used in Motor Control 

Reglerventil 
 
Motor Valve Control 

Antag att nivån i en behållare ska regleras med hjälp av en ventil. Ventilen 
styrs av en elektrisk motor som i sin tur styrs av signalerna 'öppna' och 'Stäng' 
enligt konfigurationen i figuren ovan. 

Om nivån i behållaren är sådan att signalen 'LowLow' blir TRUE körs ventilen 
till stängt läge; produktionsförregling. 

Om signalen 'Nödstopp' sätts stoppas all reglering av ventilen; 
säkerhetsförregling. 

Larm vid fel i kontaktorsvar eller lång gångtid. Driftorder bryts vid påverkat 
ändgränsläge. 

<h1>Se även 

Reglerobjektet Pos3P <link> Pos3P

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> $Node
$Node
Engelsk text<link> $Node, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar nod i 'Node Configuration'. 

<h1>Beskrivning 

Konfigureras i utvecklingsmiljön direkt under $NodeHier -objekt eller i nod 
hierarkins topp. Samtidigt skapar utvecklingsmiljön vissa standardobjekt ( 
"ValueBase"-objekt, IOHandler-objekt m. fl. ) som barn till $Node objektet. 

$Node-objektet och alla dess ättlingar kommer att ägas av den nod som 
NodeName och NodeIndex anger. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString80
Flags: Param 

Fri text för att beskriva objektets användning. 

<b>NodeName 
Type: pwr_tString8
Flags: 

Anger nodens namn i nätverksdatabasen.
Använd 'Network Control Program' (NCP) för att visa vilka noder som finns i 
nätverket. Anropa NCP från ett DCL-fönster genom att efter DCL-prompten 
skriva: 

$ mc ncp 

Hjälpprogrammet svarar då med prompten: 

NCP> 

NCP>show known nodes summary This command displays node summary
infornmation for all known nodes.

NCP>show node <NodeName> char Informaiotn is displayed for the node
named <NodeName>

NCP>exit

 

<b>NodeIndex 
Type: pwr_tUInt16
Flags:
Default value: 0 

Varje nod i PROVIEW-systemet ska ha ett unikt index i området 1 - 255. 

0 är inget giltigt NodeIndex . 

Attributet ingår i filnamn.

Vid 'Create Load Files' skapas under $System ett objekt BootVersion . I detta 
objekt använder noderna i PROVIEW-systemet NodeIndex för att referera 
element i olika fält. Om senare för en given nod värdet på NodeIndex ändras 
innebär det att gamla värdet refererar till en ej aktuell laddfil. ändras värdet på 
NodeIndex det därför lämpligt att: 

ta bort nodens NodeVersion -objekt så att inte inaktuella filer kan laddas 
gör en ny 'Create Load Files' 
Värden på NodeIndex och NodeName för olika noder kan hämtas på följande 
sätt: 

Välj 10 i PAMS-meny 
Svara N på frågorna: Re-create this customised subdirectory [Y/N] (N):
Edit the PAMSBOOT.COM startup file [Y/N] (N): 
Svara Y på frågan: Edit the PAMSINIT.TXT file [Y/N] (N): 
I 'PAMS Initialisation File' finns svaren. Lämna filen med quit och svara N på 
resten av frågorna. 

<b>OperatingSystem 
Type: pwr_tUInt32
Flags:
Default value: 1 

Anger vilket operativsystem som ska köras i den aktuella målnoden. Attributet 
används då PLC program ska kompileras. Följande värden är möjliga: 

1 -- VAXELN
2 -- OpenVMS 

<b>ErrLogTerm[132] 
Type: pwr_tString132
Flags:
Default value: 

För VAXELN nod gäller att systemfelloggen, som innehåller 
systemfelmeddelanden, default skickas till konsolen. Ska felloggen skickas till 
annan terminal anges dess namn här. Funktionen ej implementerad. 

Attributet ej aktuellt för OpenVMS nod. 

<b>ErrLogFile[132] 
Type: pwr_tString132
Flags:
Default value: 

För VAXELN nod gäller att systemfelloggen, oberoende av om den skickas till 
terminal eller ej, också kan skickas till här angiven fil. 

Syntax:
<area number>.<node number>::<device>[<directory>] <file 
name>.<extension> 

Exempel: 1.30::pwrp_lis:sys_RTPVAX.log
1.30::sys$login:pwr_VAXELN_RTPVAX.log 

För att särskilja loggar från olika VAXELN noder kan nodnamnet ingå i filens 
namn. I exemplet ovan anger RTPVAX den aktuella noden. Om <area 
number>.<node number>:: utelämnas hamnar filen på bootnoden. Därigenom 
behöver attributet inte ändras även om noden skulle bootas från skilda 
bootnoder.
För OpenVMS nod gäller att systemfelloggen alltid får namnet 
pwr_VMS_'xxx'.log och placeras på den egna nodens sys$login. 'xxx ' 
betecknar nodnamnet. 

<b>BootDnoVersion 
Type: pwr_tUInt32
Flags: RunTimeOnly, Intern 

Mottager ett värde som anger vilken DnoVersion ( D evelopment N ode O 
bjects) som användes då nodens realtidsmiljö senast startades om. Vid 
laddningen användes filen 
pwrp_load:LD_DNO_<NodeIndex>_<BootDnoVersion>.dat 

<b>BootDnoCreTime 
Type: pwr_tTime
Flags: RunTimeOnly, Intern 

Mottager tidpunkten för när den LD_DNO -fil skapades, som användes då 
nodens realtidsmiljö senaste startades om. 

<b>CurrDnoVersion 
Type: pwr_tUInt32
Flags: RunTimeOnly, Intern 

Mottager DnoVersion -numret på den LD_DNO -fil ( D evelopment N ode O 
bjects) som användes vid senaste varm-start. 

<b>CurrDnoCreTime 
Type: pwr_tTime
Flags: RunTimeOnly, Intern 

Mottager tidpunkten för när den LD_DNO -fil skapades, som användes vid 
senaste varm-start. 

<b>LastDnoChgTime 
Type: pwr_tTime
Flags: RunTimeOnly, Intern 

Mottager tidpunkt för senaste PLC-programbyte. Har inget byte skett efter 
omstart anges 17-nov-1858 00:00:00. 

<b>IOReadWriteFlag 
Type: pwr_tBoolean
Flags:
Default value: TRUE 

Anger om den fysiska I/O-hårdvaran ska adresseras eller ej. FALSE betyder att 
ingen fysisk I/O-hårdvara ska adresseras; TRUE innebär att den ska adresseras. 

Om, 

noden har I/O och ska köra 'skarpt' sätts IOReadWriteFlag till TRUE och 
IOSimulFlag till FALSE. 
vill testa program utan att ha tillgång till I/O sätts IOReadWriteFlag till FALSE 
och IOSimuFlag till TRUE. Läsning och skrivning sker i den s.k. I/O-
kopierade arean. WATCH kan användas. 
Saknas I/O betyder det att Av och Dv är de enda signalobjekt som kan 
användas på vanligt sätt. Men för testning kan alla typer av signalobjekt 
användas. 
det vid omstart gällde att IOSimulFlag = TRUE, kan IOReadWriteFlag 
'togglas'. 
Attributet beaktas inte i fallet OperatingSystem = 2, dvs. av OpenVMS-noder. 

<b>IOSimulFlag 
Type: pwr_tBoolean
Flags:
Default value: FALSE 

Anger om den fysiska I/O-hårdvaran ska initieras i samband med omstart eller 
ej. FALSE betyder att I/O:et initieras för läsning / skrivning och TRUE att det 
inte initieras. 

Attributet beaktas inte i fallet OperatingSystem = 2, dvs. av OpenVMS-noder. 

<b>NumberOfDI, NumberOfDO 
Type: pwr_tUInt16
Flags: Intern 

Anger antal konfigurerade Di - resp Do -objekt. 

<b>NumberOfAI, NumberOfAO 
Type: pwr_tUInt16
Flags: Intern 

Anger antal konfigurerade Ai - resp Ao -objekt. 

<b>NumberOfAV, NumberOfDV 
Type: pwr_tUInt16
Flags: Intern 

Anger antal konfigurerade Av - resp Dv -objekt. 

<b>NumberOfCO 
Type: pwr_tUInt16
Flags: Intern 

Anger antal konfigurerade Co -objekt. 

<b>NumberOfTI 
Type: pwr_tUInt16
Flags: Intern 

Ej använd. 

<b>EmergBreakTrue 
Type: pwr_tBoolean
Flags: Intern
Default value: FALSE 

Nödbromsflagga. Flaggan sätts vid 

- upptäckt av hårdvarufel i kortobjekt; ErrorCount > ErrorHardLimit 

- process-eftersläpning eller då övervakat jobb terminerat. Detta görs av
Watchdog -objekt. 

FALSE betyder ingen åtgärd och TRUE att åtgärd enligt EmergBreakSelect 
ska vidtagas. 

<b>EmergBreakSelect 
Type: pwr_tUInt16
Flags:
Default value: 0 

Nödbromsåtgärd. Anger åtgärd som skall vidtagas om EmergBreakTrue blir 
TRUE. Följande värden finns: 

-- 0 Ingen åtgärd.
-- 1 Omstart av målnoden.
-- 2 Utsignaerna sätts till FixedOutValue för resp kanalojekt och
fryses där.
-- 3 Stoppa I/O. Reset av alla utsignaler. Se också ErrorHardLimit i
kortobjekt.

<b>StartPlcWithDebug 
Type: pwr_tBoolean
Flags: FixParam
Default value: FALSE 

För VAXELN nod anger attributet om PLC-jobbet ska laddas med eller utan 
debugger. FALSE innebär att debuggern inte får kontroll över jobbet, dvs det 
kommer att exekvera fullt ut; TRUE betyder att debuggern får kontroll över 
jobbet sedan det startats förutsatt att det är kompilerat och länkat med 
debugger. 

Attributet används ej i fallet OpenVMS nod 

<b>*TimerStart 
Type: pwr_tBoolean
Flags: Intern 

<h1>Tips 

En OpenVMS-nod ( OperatingSystem = 2) har ingen I/O-hårdvara vilket 
innebär att Av och Dv -objekt är de enda signalobjekt som kan användas på 
vanligt sätt. För teständamål kan dock alla typer av signalobjekt användas om 
IOReadWriteFlag sätts FALSE. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> $NodeHier
$NodeHier
Engelsk text<link> $NodeHier, "", $pwr_exe/pwrb_xtthelp.dat

Grupperingsobjekt i 'Node Configuration'. 

<h1>Beskrivning 

Konfigureras i utvecklingsmiljön för att bygga upp nod hierarkin ( 'the Node 
Hier archy' ) till önskad struktur, dvs dess funktion motsvarar $ PlantHier - 
objektets roll i 'Plant Configuration'. Ett PROVIEW-system innehåller vanligen 
många $ NodeHier -objekt. 

Objektet placeras vanligen i nod hierarkins topp eller direkt under annat $ 
NodeHier -objekt. 

Innehåller ingen relevant information (=data) i rtdb. 

Om det vid 'Create Load Files ...' för den aktuella noden saknas en instans med 
namnet $Orphange av klassen $NodeHier kommer den att skapas. Bakgrunden 
är följande: 

I målmiljön kan man dynamiskt skapa objekt. Detta kan ske från 
applikationsprogram genom anrop till systemrutinen gdh_CrateObject(...). 
Skapade objekt måste alltid placeras under förälder objekt, dvs de kan inte 
placeras på rotnivån. Om ett sådant förälder objekt tas bort i samband med 
programbyte skulle de dynamiskt skapade objekten därunder inte längre vara 
tillgängliga. Därför ser PROVIEW till att placera sådana objekt under 
$Orphange. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString80
Flags: Param 

Fri text för att beskriva objektets användning. 

<h1>Tips 

Objektets användbarhet för att förbättra nod strukturen kan kräva eftertanke. I 
ett PROVIEW-system med många noder kan t.ex operatörs- resp process-noder 
samlas under separata $ NodeHier -objekt. 

En nyckeln till att konfigurera överskådliga strukturer ligger i användningen av 
grupperingsobjekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> OpPlace
OpPlace
Engelsk text<link> OpPlace, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar logisk operatörsstation för operatörskommunikation. En logisk 
operatörsstation representerar en arbetsstation, X-terminal e.dyl. 

<h1>Beskrivning 

Objektet, som placeras i utvecklingsmiljön under aktuellt $ Node -objekt, anger 
var bildfiler ska hämtas och på vilken skärm (monitor) de ska visas. 

Flera OpPlace -objekt kan konfigureras under ett $ Node -objekt. Så är fallet då 
t.ex noden innehåller dels en arbetsstation, dels en X-terminal.

Det ska till varje OpPlace -objekt finnas precis en kategori användare, dvs bara 
ett User -objekt. Om en fysiska operatörsstation ska hanteras av olika 
användarkategorier konfigureras ett OpPlace -objekt ( med tillhörande User -
objekt) per kategori. 

Då ett händelsemeddelande som kräver kvittering anländer aktiveras den 
akustiska signalen i enlighet med BellVolume och BellDelay . 

I två olika situationer kan man undvika att ideligen starta den akustiska 
signalen: 

Vid s.k. larmskurar kan man kräva en viss minsta tid från kvittering ( av 
akustisk signal eller larm) tills att en tillkommande , kvitteringskrävande 
händelse tillåts reaktivera den akustiska signalen på normalt sätt. Denna 
blockeringstid anges av TimeBeforeNextBell.

Påminnelse om okvitterade larm. För att påminna operatören, efter en 
kvittering av akustisk signal eller efter en larmkvittering, om existensen av 
okvitterade händelser ges korta akustiska signaler med perioden 
ReactivateBellTime . Efter ett visst antal sådana perioder ( 
ReactivateBellCount anger antalet) löper den s.k. påminnelsetiden ut och den 
akustiska signalen aktiveras åter på normalt sätt. Om det f.n. saknas okvitterade 
händelser och TimeBeforeNextBell > 0 kan ett tillkommande kvitterings-
krävande larm först komma att annonseras genom påminnelsefunktionen. 
<h1>Internal Attributes 

<b>Description 
Type: pwr_tString80
Flags: Param 

Valfri text för att beskriva användarkategorin etc. 

 

<b>OpNumber 
Type: pwr_tInt32
Flags: FixParam
Default value: 0 

De logiska operatörsstationerna ges en unik numrering inom respektive nod. 
Ibland väljer man att göra en numrering för de logiska operatörsstationerna 
inom hela PROVIEW-systemet; t.ex 1, 2, .... 

OpNumber är också ett attribut i User -objekt. Ett OpPlace -objekt och ett User 
-objekt knyts till varandra genom att OpNumber ges samma värde i de båda 
objekten. 

<b>Display 
Type: pwr_tString80
Flags: FixParam 

Anger vilken monitor operatörskommunikationen ska köras mot. 

Om operatörskommunikationen körs på den lokala noden och visning ska ske 
på den egna monitorn ('default display') bör Display attributet lämnas blankt 

Kommandot 

$ show display
visar var operatörsdialogen kommer att ske. Om Transport = Local går trafiken 
mellan operatörskommunikationsjobbet och aktuell monitor inte över DECnet 
varför mindre resurser erfordras. Används inte Local kan mekanismen väljas 
med kommandot: 

$ set display/create/transport=local 

Om 'default display' inte används för operatörsdialogen gäller följande för 
Display attributet: 

Operatörsstationen är en arbetsstation.

Syntax: <DECnets Node name>::<Server>:<Screen>, där Server default är 0.
Noden kan vara försedd med flera bildskärmar. Screen anger då vilken som
avses.

Exempel: PSS1::0.0

Operatörsstationen är en X-terminal. 
Kontrollera / ändra DECterm-fönstrets display adress på följande sätt:
$ show log decw$display eller $ show display
$ set display/create/trans=LAT/node = LAT_.. där LAT_... ersätts med LAT
Host Name enligt Terminal Manager 
Se till att Display attributet är lika med decw$display 
Operatörskommunikationen startas t.ex. med
$ pwr_pop <namn på aktuellt OpPlace-objekt> 
OpWinProgram 
Type: pwr_tString80
Flags: FixParam 

Då GMS-bilder av typen 'code behind' används länkas dessa och placeras i en 
exe-fil vars 'directory' och filnamn ska anges här. 

Finns enbart kodlösa GMS-bilder lämnas attributet blankt varvid pwr_exe:ps- 
cont.exe kommer att exekveras för att hantera Operator Window, formulär och 
GMS-bilder. 

<b>FilePath[0] 
Type: pwr_tString80
Flags: FixParam
Default value: 

Anger (logiskt) namn på sökväg till PROVIEW-distributionens *.frm, *.m1 m. 
fl. filer; t.ex pwr_lang: 

Den effektivaste hanteringen erhålls genom följande förfarande: 

Sätt FilePath[0] till 'pwr_lang:' och lämna övriga FilePath attribut blanka. ( 
lang i pwr_lang kommer från language) 
Sätt upp projektets sökväg till 'pwrp_exe' med kommandot 
$ set deault pwrp_exe 
Operatörskommunikationen startas t.ex med kommandot
$ pwr_pop <namn på aktuellt OpPlace-objekt> 

<b>FilePath[1] 
Type: pwr_tString80
Flags: FixParam
Default value: 

Anger ytterligare sökvägar till *.frm, *.m1 m.fl filer. Om det förfarande som 
anges under FilePath[0] inte används ska det logiska namnet på sökvägen till 
projektets filer anges här, dvs. pwrp_exe: 

<b>FilePath[2],FilePath[3] 
Type: pwr_tString80
Flags: FixParam 

Plats för namn på ytterligare sökvägar. Finns inga lämnas attributen tomma. 

AlarmProcess 
Type: pwr_tUInt8
Flags: FixParam
Default value: TRUE 

Anger om den process som hanterar presentation av larmlista, händelselista, 
blockeringslista och larmgränser ska ingå i operatörsdialogen eller ej. FALSE 
innebär att larmhanteringen inte ska ingå i operatörsdialogen och TRUE att den 
ska ingå. 

Då larmpresentationen ingår i operatörskommunikationen gäller att den körs 
mot separat monitor om AlarmDisplay är definierad, annars mot samma 
bildskärm som den övriga operatörsdialogen. 

<b>AlarmDisplay 
Type: pwr_tString80
Flags: FixParam 

Attributet ger möjlighet att definiera separat monitor för larmdialogen då 
AlarmProcess är TRUE. Syntaxen är den samma som för Display . 

<b>Navigator 
Type: pwr_tBoolean
Flags: FixParam
Default value: TRUE 

Anger om operatören ska ha tillgång till Runtime Navigator eller ej. FALSE 
innebär att knappen för att aktivera Runtime Navigator saknas i Operator 
Window och TRUE att den ingår. 

<b>HistEvent 
Type: pwr_tBoolean
Flags: FixParam
Default value: 0 

Anger om operatören ska ha tillgång till historiska händelselistan eller ej. 
FALSE innebär att knappen för att aktivera historiska händelselistan saknas i 
Operator Window och TRUE att den ingår. 

<b>HistTrend 
Type: pwr_tBoolean
Flags: FixParam
Default value: 0 

Anger om operatören ska ha tillgång till historiska trendkurvor eller ej. FALSE 
innebär att knappen för att aktivera historiska trendkurvor saknas i Operator 
Window och TRUE att den ingår. 

<b>ExitButton 
Type: pwr_tBoolean
Flags: FixParam
Default value: TRUE 

Anger om alternativet 'Exit Operator' ska finnas i den Window Manager meny 
som hör till Operator Window. Genom att välja 'Exit Operator' kan den aktuella 
operatörsmiljön tas ned. 

FALSE innebär att alternativet 'Exit Operator' görs osynligt i Window Manager 
menyn och TRUE att den görs synlig. 

<b>BellVolume 
Type: pwr_tBoolean
Flags: Param
Default value: 7 

Anger styrkan på operatörsstationens akustiska signal. Styrkan anges i skalan 0 
- 10, där 0 innebär avstängd signal. 

Signalen används bl. a. för att fästa uppmärksamhet på ankommande larm. 

<b>BellDelay 
Type: pwr_tUint16
Flags: Param
Default value: 1500 

Anger, i millisekunder, fördröjningen mellan två successiva pip, d.vs två 
akustiska signaler. 

<b>TimeBeforeNextBell 
Type: pwr_tUInt16
Flags: Param
Default value: 0 

Blockeringstiden för den normala akustiska signalen räknat från senaste 
kvittering ( av akustisk signal eller händelse) är TimeBeforeNextBell och anges 
i 1/10 sekunder. Under denna tid kan inte en tillkommande kvitteringskrävande 
händelse aktivera den akustiska signalen på normalt sätt. 

<b>ReactivateBellTime 
Type: pwr_tUInt16
Flags: Param
Default value: 80 

Påminnelse om okvitterade larm under påminnelsetiden. 

Den akustiska signalen kommer att reaktiveras korta ögonblick (betydligt 
kortare än de som normalt används) under påminnelsetiden om, 

det finns okvitterade händelser 
det f.n. saknas okvitterade händelser och TimeBeforeNextBell > 0 men 
kvitteringskrävande larm anländer 
ReactivateBellTime anger perioden för ljudstötarna i 1/10 sekunder. 

Påminnelsetiden är som längst ReactivateBellTime · ReactivateBellCount och 
räknas från det att den akustiska signalen kvitterats eller larmkvittering gjordes. 
Om TimeBeforeNextBell = 0 upphör påminnelsefunktionen direkt så snart en 
kvitteringskrävande händelse anländer. 

<b>ReactivateBellCount 
Type: pwr_tUInt16
Flags: Param
Default value: 10 

Under den s.k. påminnelsetiden ges maximalt ReactivateBellTime korta 
akustiska signaler . Se också ReactivateBellTime . 

<b>MhScanInterval 
Type: pwr_tUInt16
Flags: Param
Default value: 10 

Meddelanden skickas från meddelandehanterare till utenheter inom 
PROVIEW/R systemet. Varje utenhet mottager meddelanden i en kö i enlighet 
med dess Select -attribut. 

Utenheten operatörsdialog representeras av User objekt. 

MhScanInterval anger, i tiondels sekunder, hur ofta denna meddelandekö ska 
tömmas. 

<b>SubscriptionInterval 
Type: pwr_tUInt16
Flags: FixParam
Default value: 10 

Attributet anger, i 1/10 sekunder, uppdateringsperioden för alla 
prenumerationer operatörskommunikationen sätter upp till icke-lokala objekt. 

Prenumerationsperioden bör väljas så att den matchar t.ex UpdateInterval i 
Graph objekten. Tider kortare än 1 sekund rekommenderas inte. 

<b>ANSIQueue 
Type: pwr_tString40
Flags: Param 

Anger namn på printer kö för ANSI-filer, t.ex händelselista, blockeringslista 
och larmstatistik. Print funktionens 'qualifiers' kan användas. 

Exempel: LPS17_ANSI/notify/del 

<b>PostScriptQueue 
Type: pwr_tString40
Flags: Param 

Anger namn på PostScript printer kö för t.ex utskrift av processgrafikbilder. 
Print funktionens 'qualifiers' kan användas. 

Exempel:. LPS17_PS/notify/del 

<b>IsBellOn 
Type: pwr_tBoolean
Flags: Intern 

Attributet följer den akustiska signalen. Genom att övervaka attributets 
tillstånd, t.ex från PLC program, kan den akustiska signalen användas för att 
manövrera ytterligare aktiviteter. FALSE betyder att den akustiska signalen är 
från och TRUE att den är till. 

<b>UnackedAAlarm 
Type: pwr_tBoolean
Flags: Intern 

Attributet anger om det finns okvitterade A-larm eller ej. FALSE betyder att 
det saknas okvitterade A-larm och TRUE att det finns okvitterade, existerande 
eller icke-existerande, A-larm. 

<b>UnackedBAlarm 
Type: pwr_tBoolean
Flags: Intern 

Attributet anger om det finns okvitterade B-larm eller ej. FALSE betyder att 
det saknas okvitterade B-larm och TRUE att det finns okvitterade, existerande 
eller icke-existerande, B-larm. 

<b>UnackedCAlarm 
Type: pwr_tBoolean
Flags: Intern 

Attributet anger om det finns okvitterade C-larm eller ej. FALSE betyder att 
det saknas okvitterade C-larm och TRUE att det finns okvitterade, existerande 
eller icke-existerande, C-larm. 

<b>UnackedDAlarm 
Type: pwr_tBoolean
Flags: Intern 

Attributet anger om det finns okvitterade D-larm eller ej. FALSE betyder att 
det saknas okvitterade D-larm och TRUE att det finns okvitterade, existerande 
eller icke-existerande, D-larm. 

<b>Address 
Type: pwr_tUInt32
Flags: Intern 

Används av Package Handler för att hantera packet. Se vidare PROVIEW/R 
Programmer's Reference Manual . 

<h1>Tips 

På en arbetsstation kan operatörskommunikationen alltid startas från DCL- 
nivån genom kommandot: 

$ pwr_pop <namn på aktuellt OpPlace-objekt> 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Or
Or
Engelsk text<link> Or, "", $pwr_exe/pwrb_xtthelp.dat

ELLER-grind. 

<h1>Beskrivning 

Eller-grind för upp till 8 ingångar. Använda ingångar behöver inte vara 
konsekutivt valda. Ingångarna kan med hjälp av Attribute Editor fås att 
invertera resp. insignal. 

Grundsymbolen har två ingångar. Med Attribute Editor kan antalet ingångar 
ändras. 

Insignalerna används utan föregående lagring. 

<h1>Input Attributes 

<b>In1, In2, ..., In8 
Graph name: -
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Logiska ingångar. 

<h1>Output Attributes 

<b>Status 
Graph name: -
Type: pwr_tBoolean
Flags: Output 

Eller-grindens tillstånd. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Order
Order
Engelsk text<link> Order, "", $pwr_exe/pwrb_xtthelp.dat

Grafcet order. 

<h1>Beskrivning 

Till varje sekvenssteg kan ett eller flera Order -objekt kopplas.
Aktiviteter ( t.ex StoDo , ResDv , And , Or , Wait objekt) knutna till Order - 
objekt kan antingen kopplas direkt till Order-objektets utgång eller placeras i 
ett med Order-objektet associerat s.k. aktivitetsfönster (= a sub-window). Ett 
Order-objekt kan dock inte samtidigt ha både ett aktivitetsfönster och 
direktanslutna objekt. Aktivitetsfönster kan förbättra programmets 
överskådlighet. Objekten i aktivitetsfönstret får ett WindowOrderact objekt 
som förälder objekt. 

NB! Objektets orderlista består antingen av objekten i ett aktivitetsfönster eller 
Stoxx, Setxx, eller Resxx objekt direkt kopplade till Order-objektets utgång. 
Övriga objekt ( And, Or, Wait, etc.) direkt kopplade till Order-objektets utgång 
inkluderas inte i orderlistan. Det betyder att sådana objekt kommer att 
evalueras varje gång PLC programmet exekverar , dvs oberoende av stegets 
eller Order-objektets tillstånd.

Kod i objektets orderlista evalueras däremot så länge steget , till vilket ordern 
hör, är aktivt eller ordern ( om lagrad) är aktiv; dvs orderlistan kan evalueras 
oberoende av Order-objektets tillstånd . Den sista exekveringen av orderlistan 
kommer att ske med inaktivt Order-objekt . Detta betyder, om Order-objektets 
tillstånd, Status[0] är TRUE, när steget gör övergången 1 --> 0 eller då en 
lagrad order tas ned, kommer ytterligare en exekvering av objektets orderlista 
att göras. 

Ett Order -objekts tillstånd kan användas som signal i dess aktivitetsfönster. 
Tillståndet hämtas då med OrderAct -objekt.
Utifrån exekveringssynpunkt behandlas Stoxx , Setxx och Resxx objekt på 
samma sätt vare sig de placerats i ett aktivitetsfönster eller kopplats direkt till 
Order -objektet. 

Till varje order kan s.k. order-attribut (se Attr1 , ...., Attr6 ) knytas med hjälp 
av Attribute Editor. Förekomsten av order-attribut framgår av symbolens 
vänstra fält. Saknas order-attribut gäller att ordern ställs ut (blir aktiv) så länge 
steget är aktivt och upphör när steget blir inaktivt.

'Condition' är ett order-attribut. Man talar om C-order då ett Order -objekt har 
Condition-attribut. En C-orders villkor kan definieras på endera av följande 
sätt. genom direkt anslutning av villkoret till ordersymbolens vertikala 
anslutning. via ett kombinatoriskt nät i ett villkorsfönster . Ett SetCond -objekt 
i villkorsfönstret lagrar villkorets status i Order -objektet. Objekten i fönstret 
får ett WindowCond objekt.

<h1>Input Attributes 

<b>Step 
Type: pwr_tBoolean
Flags: NoRtdb, NoInvert 

Statusingång. Kontrollerar det anslutna stegets status ( InitStep , Step , SubStep 
, SsBegin eller SsEnd -objekt) genom att titta på dess Status [0] och Status [1]. 

<b>Cond 
Type: pwr_tBoolean
Flags: NoRtdb, NoInvert 

Villkorsingång. Ingången kan används för att koppla en binär villkorssignal till 
en C-order.

<h1>Internal Attributes 

<b>Status[0] 
Type: pwr_tBoolean
Flags: Output 

Anger objektets status. FALSE betyder inaktiv order och TRUE innebär aktiv 
order. Värdet kan plockas upp i annat program med hjälp av GetDp objekt.
 
<b>Status[1] 
Type: pwr_tBoolean
Flags: Output 

Attributet hänför sig till stegets status. TRUE betyder att steget, som ordern 
tillhör, är aktivt eller att en lagrad order är aktiv.
Antag en D-order, dvs order med D-attribut. Då steget blir aktivt sätts Status 
[1] till TRUE. Objektets orderlista evalueras med Status [0] = FALSE. Om 
Order -objektet har ett aktivitetsfönster kan värdet på Status [0] hämtas med 
OrderAct -objekt. 

Då fördröjningen löper ut blir Status [0] TRUE och evalueringen av orderlistan 
fortsätter så länge Status [1] = TRUE eller så länge det gäller att Status [0] var 
TRUE vid förra evalueringen. 

<h1>Output Attributes 

<b>Attr1, Attr2, ..., Attr6 
Type: pwr_tChar
Flags: CompileFixParam 

I utgångsläget gäller att Order -objektet blir aktivt då steget blir aktivt och 
inaktivt när steget blir inaktivt. Med de s.k. order-attributen kan detta 
förhållande påverkas. Alternativen, som betecknas med VERSALER, är: 

D = Fördröjd Order-objektet blir aktivt en viss tid efter det att steget
(Delayed) blivit aktivt. AttrTime1, ..., AttrTime6 anger tiden för
motsvarande attribut.

L = Tidsbegränsad Order-objektet blir aktivt samtidigt med steget men detta
(Limited) gäller bara för begränsad tid. AttrTime1, ..., AttrTime6
anger tiden för motsvarande attribut.

P = Puls Ska Order-objektet evalueras med aktiv status precis en 
(Pulse) programcykel ersätts L med P.

C = Villkorlig Order-objektet blir aktivt först när steget är aktivt och
(Conditionally) frigivningsvillkoret uppfyllt; ( Cond eller villkorsfönster)

S = Lagrad Order-objektet blir aktivt samtidigt med steget. Till-
(Stored) kvarstår sedan också efter det att steget blivit inaktivt.
En lagrad order tas ned med Reset_SO-objekt.

Varje order-attribut definierar ett sub-objekt i rtdb. Ett sub-objekt med namnet 
S är av typen S-order osv. Entydigheten kräver att givet order-attribut 
förekommer högst en gång i varje Order -objekt. 

Ett Order -objekt kan ha upp till 5 definierade order-attribut. Order attributens 
sekvens bestämmer funktionen, t.ex. 

En CDS-order lagras ( dvs. tar självhållning) först då det påverkande villkoret 
varit uppfyllt under begärd tid -- förutsatt att steget då fortfarande är aktivt. 
Ordern förblir sedan aktiv tills den tas ned med ett Reset_SO -objekt. 
SDC-order. Uppgiften om att steget är aktivt lagras direkt. Då den begärda 
tiden förlupit kommer orderns tillstånd att följa villkorets. 
DSC-order. Uppgiften om att steget är aktivt lagras först då fördröjningen löpt 
ut -- såvida steget då fortfarande är aktivt. Ordern blir aktiv då villkoret 
uppfylls. Orderns tillstånd kan komma att växla beroende på villkoret. Ordern 
förblir lagrad tills den tas ned med Reset_SO -objekt. 
AttrTime1, AttrTime2, ..., AttrTime6 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0, 0.0, ..., 0.0 

Anger, i sekunder, tiden för D respektive L order-attribut. AttrTime1 hör ihop 
med Attr1 osv. 

<b>ShowAttrTime 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om AttrTime -värdet för D- och L-order ska visas i Order-objektets 
symbol eller ej. FALSE betyder ingen visning och TRUE visning. Enheten är 
sekunder. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> OrderAct
OrderAct
Engelsk text<link> OrderAct, "", $pwr_exe/pwrb_xtthelp.dat

Hämtar, i aktivitetsfönster, Order-objektets tillstånd. 

<h1>Beskrivning 

Används endast i aktivitetsfönster. 

Ett Order -objekts orderlista evalueras så länge steget, till vilket ordern hör, är 
aktiv eller som i fallet med 'lagrad order' tills att ordern tas bort. Sista 
evalueringen sker alltid med inaktivt Order -objekt. 

Ett Order -objekts tillstånd kan användas som signal i dess aktivitetsfönster. 
Tillståndet hämtas då med OrderAct objekt.

Ingen exekverbar kod. Genererar ingen data i rtdb. 

<h1>Internal Attributes 

<b>OrderObject 
Type: pwr_tObjid
Flags: CompileFixParam 

Används av PLC Editorn. Anger Order -objektets fullständiga namn. 

<h1>Output Attributes 

<b>Status 
Type: pwr_tBoolean
Flags: Output 

Anger värdet på Status [0] i associerat Order -objekt. 

<h1>Se även 

Order.<link> Order

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Out2P
Out2P
Engelsk text<link> Out2P, "", $pwr_exe/pwrb_xtthelp.dat

Två-punktsutgång med till/från styrning. En analog insignal konverteras till en 
binär signal. Styrningen utförs antingen som proportionell till/från styrning 
med dödzon eller som till/från styrning med hysteres. 

<h1>Beskrivning 

Siffran 2 i objektnamnet syftar på objektets utgång som har 2-lägesverkan. Två 
diskreta order kan ges med innebörden höger/vänster, upp/ner, öka/minska etc.
Två typer av till/från styrning finns. Vilken typ av styrning som gäller bestäms 
av om dödzon definierats eller ej.
MinOut < MaxOut ger puls-proportionell styrning i dödzonen enligt följande: 

Så länge OutVal < MinOut är Order alltid FALSE och så länge OutVal > 
MaxOut är Order alltid TRUE. 

 
Då MinOut = OutVal = MaxOut är utgången puls-proportionell ('pulsad') med 
cykeltiden Period . 

Vid puls-proportionell till/från styrning gäller att gäller att förhållandet mellan 
till/från bestäms av  

Kvoten uppdateras varje programcykel. Om en period inleds med tillslag 
kommer detta att bestå under tiden,
 · Period 

Därefter kommer frånslaget att sitta resten av perioden; dvs,
 · Period 

MinOut = MaxOut ger till/från-verkan med hysteres, som ett kombinerat 
Compl / Comph objekt. 

 
<h1>Input Attributes 

<b>OutVal 
Graph name: OUT
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Analog insignal, t.ex anslutning till OutChange i Pid -objekt. 

<h1>Output Attributes 

<b>Order 
Graph name: on
Type: pwr_tBoolean
Flags: Output 

Utsignalens uppförande är olika beroende på om MinOut < MaxOut eller 
MinOut = MaxOut . Se ovan. 

<h1>Internal Attributes 

<b>MaxOut, MinOut 
Type: pwr_tFloat32
Flags: Param
Default value: 100.0 resp. 0.0 

Anger dödzonens övre och nedre gräns. Styrningens karaktär beror av om 
MinOut < MaxOut eller MinOut = MaxOut . Se ovan. 

<b>Period 
Type: pwr_tFloat32
Flags: Param
Default value: 60.0 

Pulsperioden, i sekunder, vid puls-proportionell styrning. 

<b>RunTime 
Type: pwr_tFloat32
Flags: Intern 

Ackumulerad tid, i sekunder, sedan senaste till/från-omslag. 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltid i sekunder. Initieras automatiskt vid kompilering. 

<h1>Tips 

Temperaturreglering av elektrisk ugn är exempel på en tillämpning där Out2P 
objekt skulle kunna användas. 

<h1>Se även 

Inc3P.<link> Inc3P

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Pid
Pid
Engelsk text<link> Pid, "", $pwr_exe/pwrb_xtthelp.dat

Implementerar olika former av PID reglering. 

<h1>Beskrivning 

I normalfallet används Pid -objekt tillsammans med Mode -objekt. Mode - 
objekt spelar då rollen av interface till Pid -objekt. Från Mode -objekt är det 
möjligt att välja: 

reglermod (MANUAL / AUTO / CASCADE) 
tvångsstyrning med avseende på styrsignal 
Olika strategier för att beräkna styrsignal har implementerats. PidAlg anger 
vilka. 

Pid -objektet har två utgångar som båda kan användas som styrsignal. Vilken 
som används i det enskilda fallet beror på hur regleringen är ordnad: 

OUT (attributet OutVal ) innehåller ett värde som kan komma från 
evalueringen av den valda algoritmens 'positional form', från operatören i läge 
MANUAL eller vara ett s.k. tvångsstyrningsvärde. Kunskapen om var 
ställdonet ska stå ligger i detta fall s. a. s. på regulatorsidan eftersom hela 
signalvärdet finns där. 
OC (attributet OutChange ) anger hur ställdonet ska ändras mellan två 
successiva exekveringar. I detta fall talar man om algoritmens 'velocity' eller 
'incremental form'. Här är det istället ställdonet som "kommer ihåg" 
inställningen. 
Algoritmens proportionella term respektive derivata term kan baseras antingen 
på ärvärdet eller reglerfelet. 

Derivata termen kan filtreras internt med 1:a ordningens filter. 

En framkopplingssignal, Bias , kan inkluderas i algoritmen. 

Integrationen kan kopplas från/till. 

Utvärdet, OutVal begränsas till intervallet { MinOut , MaxOut }.
Stötfri omkoppling AUTO / MANUAL.
För regulatorns manövrering och inställning finns två objektbilder bl. a. 
innehållande ett tidsdiagram med ärvärde, börvärde och utsignal. 

<h1>Input Attributes 

<b>ProcVal 
Graph name: PV
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

ärvärdet (= P rocess V alue). 

<b>SetVal 
Graph name: SV
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Börvärdet (= S etpoint V alue). Ingången kopplas ofta till motsvarande utgång 
på det associerade Mode -objektet. 

<b>Bias 
Graph name: BIS
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Framkopplingsvärdet ( 'feed forward value'). Attributet kan ändras från Pid - 
objektets MERbild. 

<b>ForcVal 
Graph name: FOV
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Tvångsstyrningsvärdet. Då Force är TRUE sätts OutVal = ForcVal . Ingången 
kopplas ofta till motsvarande utgång på det associerade Mode -objektet. 

<b>Force 
Graph name: for
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om något av alternativen tvångsstyrning / MANUAL gäller eller ej. 
FALSE betyder att inget av dessa alternativ är förhanden; TRUE innebär att 
antingen tvångsstyrning eller MANUAL valts. Ingången kopplas ofta till 
motsvarande utgång på det associerade Mode -objektet. 

<b>IntOff 
Graph name: iof
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om integrationen kopplats bort eller ej. FALSE betyder att 
integrationstermen ska vara med; TRUE innebär att integrationen kopplats 
bort. Attributet kan ändras från Pid -objektets MERbild. 

<h1>Output Attributes 

<b>OutVal 
Graph name: OUT
Type: pwr_tFloat32
Flags: Output 

Regulatorns syrsignal. Värdet baseras på algoritmens 'positional form', från 
operatören i läge MANUAL eller på ett s.k. tvångsstyrningsvärde. 

<b>OutChange 
Graph name: OC
Type: pwr_tFloat32
Flags: Output 

Regulatorns syrsignal baserad på 'incremental form'. 

Attributet avser styrsignalsförändringen mellan två konsekutiva exekveringar; 
dvs. OutVal t - OutVal t-1 . 

<b>ControlDiff 
Graph name: DIF
Type: pwr_tFloat32
Flags: Output 

Reglerfelet (= ProcVal - SetVal ). 

<b>EndMin, EndMax 
Graph name: min, max
Type: pwr_tBoolean
Flags: Output 

Om beräknat värde på OutVal inte tillhör intervallet { MinOut , MaxOut } ska 
begränsning ske till motsvarande intervallgräns. Attributet anger om sådan 
begränsning skett vid den senaste exekveringen eller ej. 

Om begränsning görs mot 

-- MinOut , ska EndMin sättas TRUE
-- MaxOut , ska EndMax sättas TRUE 

annars är de FALSE. 

EndMin / EndMax kan endast sättas i driftläge AUTO och CASCADE. Se 
också EndHys nedan. 

<h1>Internal Attributes 

<b>PidAlg 
Type: pwr_tInt32
Flags: Param
Default value: 3 

Det finns åtskilliga diskreta variationer av PID algoritmen. PidAlg anger det 
aktuella valet. Följande realiseringar finns att välja mellan: 

1 -- I I-regulator. Regulator med endast I-verkan.
Gain används inte.

3 -- I + P Integrerande regulator med proportionell regler-
verkan. P-termen baseras på ärvärdet ProcVal.

6 -- P P-regulator. Ger endast proportionell reglerverkan.

7 -- PI PI-regulator. Regulator som ger proportionell och
integrerande reglerverkan.
P-termen baseras på reglerfelet ControlDiff.

11 -- I + PD Integrerande regulator med proportionell deriverande
reglerverkan.
Både P- och D-termen baseras på ärvärdet ProcVal.

14 -- P + D Proportionell regulator med deriverande reglerverkan.
P baseras på reglerfelet, D på ärvärdet.

15 -- PI + D Proportionell integrerande regulator med deriverande
reglerverkan. P-termen baseras på reglerfelet ControlDiff,
D på ärvärdet value.

30 -- PD PD-regulator. Regulator som ger proportionell och
deriverande reglerverkan.
Både P- och D-termen baseras på reglerfelet.

31 -- PID PID-regulator. Regulator som ger proportionell
integrerande och deriverande reglerverkan. Både P- och
D-termen baseras på reglerfelet.

<b>Gain 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 1.0 

Proportionalitetsfaktorn. Anger förstärkningen; = 0.

Värdet kan ändras från Pid -objektets MERbild. 

<b>IntTime 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 120.0 

Anger, i sekunder, integrationstiden.

Värdet kan ändras från Pid -objektets MERbild. 

<b>DerTime 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 0.0 

Anger deriveringstiden i sekunder.

Normalt gäller att DerTime är större än ScanTime och
1.0 = DerGain <  

<b>DerGain 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 3.0 

Derivatatermens bidrag till styrsignalen kan filteraras i ett 1:a ordningens filter. 
Attributet definierar filtret. Om,
1.0 = DerGain <  , annars ingen filtrering 

DerGain är normalt i storleksordningen 3 till 4. 

Värdet kan ändras från Pid -objektets MERbild. 

<b>Inverse 
Type: pwr_tBoolean
Flags: Param
Default value: TRUE 

Anger om reglerverkan ska ske inverterat eller ej. FALSE betyder att ett vid 
oförändrat börvärde spontant växande ärvärde möts av en ökande styrsignal, 
dvs. omvänd reglerverkan. TRUE är normalfallet, då ett spontant ökande 
ärvärde möts med en minskande styrsignal. 

<b>BiasGain 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 1.0 

Anger framkopplingens förstärkning; faktorn får vara negativ.

Värdet kan ändras från Pid -objektets MERbild. 

<b>MinOut, MaxOut 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0, 100.0} 

I driftläge AUTO och CASCADE ska den utställda styrsignlaen OutVal vara i 
intervallet { MinOut , MaxOut }. Flaggorna EndMin / EndMax används för att 
signalera då begränsning sker.
Om OutVal är större än MaxOut eller mindre än MinOut , begränsas OutVal 
till värdet av motsvarande intervallgräns.
Om MinOut = MaxOut sker ingen begränsning. 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltid i sekunder. Initieras automatiskt vid kompilering. 

<b>AccGain, AccInt 
Type: pwr_tInt32
Flags: Param
Default value: 15 resp. 15 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Gain resp. IntTime . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>AccDer, AccDGain 
Type: pwr_tInt32
Flags: Param
Default value: 15 resp. 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
DerTime resp DerGain . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>AccBias, AccBGain 
Type: pwr_tInt32
Flags: Param
Default value: 15 resp. 15 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Bias resp BiasGain . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinGain, MaxGain 
Type: pwr_tFloat32
Flags: Param
Default value: {0.1, 10.0} 

Minsta och största tillåtna värde vid operatörsändring av Gain . 

<b>MinInt, MaxInt 
Type: pwr_tFloat32
Flags: Param
Default value: 10.0 resp. 600.0 

Minsta och största tillåtna värde vid operatörsändring av IntTim . 

<b>MinDer, MaxDer 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 resp. 20.0 

Minsta och största tillåtna värde vid operatörsändring av DerTim . 

<b>MinBias, MaxBias 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 resp. 100.0 

Minsta och största tillåtna värde vid operatörsändring av Gain . 

<b>MinBGain, MaxBGain 
Type: pwr_tFloat32
Flags: Param
Default value: -100.0 resp. 100.0 

Minsta och största tillåtna värde vid operatörsändring av BiasGain . 

<b>MinDMaxDGain 
Type: pwr_tFloat32
Flags: Param
Default value: -100.0 resp. 100.0 

Minsta och största tillåtna värde vid operatörsändring av DerGain . 

<b>SetMinShow, SetMaxShow 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 resp. 100.0 

Skalområdets nedre och övre gräns vid presentation av ProcVal och SetVal i 
Pid -objektets objektbild. 

Värdena kan ändras från Pid -objektets MERbild. 

<b>OutMinShow, OutMaxShow 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 resp. 100.0 

Skalområdets nedre och övre gräns vid presentation av OutVal i Pid -objektets 
objektbild. 

Värdena kan ändras från Pid -objektets MERbild. 

<b>SetEngUnit 
Type: pwr_tString16
Flags: Param
Default value: % 

Anger ingenjörsenheten på SetMinShow / SetMaxShow , t.ex. meter. Används 
i Pid -objektets objektbild. 

<b>OutEngUnit 
Type: pwr_tString16
Flags: Param
Default value: % 

Anger ingenjörsenheten på OutMinShow / OutMaxShow , t.ex. %. Används i 
Pid -objektets objektbild. 

<b>ModeObjDid 
Type: pwr_tObjid
Flags: Param 

Anger fullständigt namn på det med Pid -objektet associerade Mode -objektet. 
Attributet gör det möjligt att via knapp i Pid -objektets objektbild starta 
objektbilden för det associerade Mode -objektet. 

<b>EndHys 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Anger hysteresen på MinOut och MaxOut i samband med manövreringen av 
EndMin / EndMax flaggorna. 

 
<b>FiltDer 
Type: pwr_tFloat32
Flags: Intern 

Filtrerad derivata sparas till nästa exekevering. 

Function 

Vid P - respektive PD -reglering, dvs. då PidAlg = 6, 14 eller 30, beräknas 
styrsignalen OutVal vid samplingstiden T = ScanTime som, 

OutVal(T) = OutVal t = F term + a · (ControlDiff t + DerTime · FiltDer t ), där 
F term = BiasGain · Bias är framkopplingstermen. 

Derivatan beräknas som, ? = , där
e t = ProcVal t , om D-termen baseras på ProcVal
= ControlDiff t , om D-termen baseras på ControlDiff 

Genom att lågpassfiltrera derivativan undertrycks störningar. 

FiltDer t = a · ? + (1 - a)FiltDer t-1 = FiltDer t + ( ? - FiltDer t-1 ) · a 

Med filterfaktorn a = DerGain ·  blir den filtrerade derivatan,
FiltDer t = FiltDer t-1 + ( ? - FiltDer t ) · DerGain ·  , om
1.0 = DerGain <  

FiltDer t = ? , om DerGain ligger utanför intervallet sker ingen filtrering.
a =  

Sedan OutVal t beräknats kontrolleras den m.a.p MinOut och MaxOut . 

Slutligen beräknas styrsignalsförändringen OutChange = OutVal t - OutVal t-1 

Om det är OutChange snarare än OutVal , som ska mata ställdonet, vill man 
kanske inte riskera att få den begränsad av MinOut / MaxOut . Om, 

MinOut = MaxOut 

sker ingen begänsning av OutVal t . 

Om I-term ska ingå i styrsignalen beräknas först styrsignalsförändringen som, 

OutChange(T) = OutVal t - OutVal t-1 =
F t - F t-1 + a( P t - P t-1 + ß ·  · ControlDiff t + D-term) , där a -faktorn och 
framkopplingstermen F t båda har samma betydelse somvid P- och PD-
reglering. 

För den proportionella termen gäller att:
P t = ProcVal t , om P baseras på ProcVal
= ControlDiff t , om P baseras på ControlDiff 

I-delen kan tillfälligt kopplas bort, t.ex. för att undvika integrering av stora 
eller små ControlDiff (regleravvikelser eller i.s.m. parametertrimmning
ß = 0 , if IntOff is TRUE
= 1 , when IntOff is FALSE 

För derivata termen gäller att:,
D term = DerTime · (FiltDer t - FiltDer t-1 ) , där FiltDer 

beräknas på samma sätt som vid P- och PD-reglering. 

Det nya värdet på OutVal beräknas därefter som, 

OutVal t = OutVal t-1 + OutChange t 

och slutligen kontrolleras att: 

MinOut = OutVal t = MaxOut 

Något krav avseende storleken på OutChange ställs ej.



Regulatorn får en stötfri övergång då tvångsstyrning upphör, och kan ej 
integrera upp utanför tillåtet reglerområde { MinOut , MaxOut }. 

Om P-termen baseras på regleravvikelsen erhålls snabbare inreglering vid 
börvärdesändring. En sådan P-del bör väljas för den 'innre' loopen i en 
kaskadreglering. 

Om P-delen bara verkar på ärvärdet fås långsammare svar vid 
börvärdesändring, men också mindre processtörning till följd av kraftig 
styrsignalförändring. 

Tvångsstyrning ( 'forced control' ) kan användas för manuell inställning, 
nollutställning vid ej drift.

Pid -objektets attribut modifieras enligt följande: 

Insignalen på fo1 -ingången tillsammans med OpMod -attributet i Mode -
objektet bestämer aktuellt driftfall. 

<b>OpMod
OpMod = MANUAL (=1)
Då Mode-objektets for-utgång blir TRUE tvingas Pid-objekt utgång
anta värdet på FOV-ingången.
Vid ändring av driftläge, AUTO --> MANUAL, innehåller ForcVal styr-
signalens ( OutVal ) senaste värde. Detta är ett bra värde att starta
manuella ändringar utifrån.
I detta driftläge kan operatören ändra ForcVal liksom börvärdet SetVal.
MinOut och MaxOut, i Pid-objektet, utgör ingen begränsning i läge
MANUAL. 

OpMod = AUTO (=2)
Operatören sätter flödesbörvärdet SetVal. Värdet ska ligga i intervallet
MinSet till MaxSet. Optimeringsbörvärdet XSetVal ignoreras.
Regulatorns styrsignal, OutVal varierar i intervallet MinOut till
MaxOut.
Mode-objektet avläser Pid-objektets OutVal och lagrar värdet i
utgången ForcVal så länge AUTO gäller. 

OpMod = CASCADE (=4)
Det externa optimeringsbörvärdet i XSetVal kopieras över till SetVal.
Pid-objektet reglerar mot detta börvärde.

Force1 = 1 PUMP STOP
Oberoende av värdet på OpMod tvångsstyrs regulatorns styrsignal till
ForcVal = XForcVal (=0), dvs MinOut och MaxOut utgör ingen
begrgänsning vid tvångsstyrning.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> PiPos
PiPos
Engelsk text<link> PiPos, "", $pwr_exe/pwrb_xtthelp.dat

Översätter pulsräknarvärde till ingenjörsvärde ( position, volym etc.). 

<h1>Beskrivning 

Antag att ingenjörsvärdet är en position. Den aktuell positionen, ActVal , 
beräknas vid varje exekvering med hjälp av den linjära ekvationen 

ActVal = Gain · ( PulsIn - PiCal1 ) + PosCal1 

Positionen beräknas relativt den kända positionen i 'calibration point 1' utifrån 
aktuell pulssignal, PulsIn , sparad pulssignal PiCal1 och sparad position, 
PosCal1 , i 'calibration point 1'. Förstärkningen, Gain , är antingen given eller 
beräknad med hjälp av en andra kalibreringspunkt, 'calibration point 2'. 

 
Hur kalibreringen utförs beskrivs nedan under Calibration . 

<h1>Input Attributes 

<b>PulsIn 
Graph name: PI
Type: pwr_tInt32
Flags: InRtdb, OpenParam 

Pulsräknarvärde ( i form av heltal). T.ex kan pulsvärdet hämtas genom 
anslutning till PI-utgång på Count -objekt, till PI- eller PIX-utgång på GetPi -
objekt. 

NB! Ansluts en analog signal, t.ex Av-signal, blir resultatet felaktigt. 

<b>CalPos1 
Graph name: CP1
Type: pwr_tFloat32
Flags: InRtdb, OpenParam, Access 

Anger positionen i kalibreringspunkt 1. Värdet används vid 
positionskalibrering. 

Attributet kan tilldelas värde utvecklingsmiljön med hjälp av Attribute Editor 
och i målmiljön med t.ex funktion i C eller PLC program. är motsvarande 
ingång ansluten sker uppdatering utifrån kopplad storhet. 

<b>CalOrder1 
Graph name: co1
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

'Calibration order 1'. 

Flaggan anger om kalibrering av position ( se nedan under Calibration ) ska 
initieras eller ej. FALSE betyder ingen kalibrering. 

Övergången FALSE -> TRUE initierar 'calibration in point 1'. Pulsvärdet 
PulsIn avläses och lagras i PICal1 och värdet i CalPos1 kopieras över till 
PosCal1 . 

Lämnas ingången öppen kan attributet sättas t.ex via funktion i C-program. 

Sedan flaggan noterats ser PROVIEW till att den tas ned. 

<b>CalPos2 
Graph name: CP2
Type: pwr_tFloat32
Flags: InRtdb, OpenParam, Access 

Anger positionen i kalibreringspunkt 2. Värdet används vid kalibrering av 
förstärkningen, dvs av Gain . 

Attributet kan tilldelas värde i utvecklingsmiljön med hjälp av Attribute Editor 
och i målmiljön med t.ex funktion i C eller PLC program. är motsvarande 
ingång ansluten sker uppdatering utifrån kopplad storhet. 

<b>CalOrder2 
Graph name: co2
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

'Calibration order 2'. 

Flaggan anger om kalibrering av Gain ( se nedan under Calibration ) ska 
initieras eller ej. FALSE betyder ingen kalibrering. 

Övergången FALSE -> TRUE initierar 'calibration in point 2'. 

Lämnas ingången öppen kan attributet sättas t.ex via funktion i C-program. 

Sedan flaggan noterats ser PROVIEW till att den tas ned. 

<h1>Output Attributes 

<b>ActVal 
Graph name: POS
Type: pwr_tFloat32
Flags: Output 

Aktuell position. Enheten följer av enheten på Gain . Om Gain är i mm / puls 
blir ActVal i mm. 

<h1>Internal Attributes 

<b>Gain 
Type: pwr_tFloat32
Flags: Intern, Param
Default value: 1.0 

Antag att omsättningsfaktorn betecknas Omsfak . Om Omsfak anger antalet 
pulser per enhet, t.ex mm, grader etc. Gain erhålls då som 1 / Omsfak .
Attributets värde är antingen givet eller beräknat; se nedan under Calibration 

<b>PICal1 
Type: pwr_tInt32
Flags: Intern, Param 

Pulsräknarvärde vid senaste positionskalibreringen i 'calibration at point 1'. 
Motsvarande ingenjörsvärde finns i PosCal1 . 

<b>CalOrder1Old, CalOrder2Old 
Type: pwr_tBoolean
Flags: Intern 

Används för flankdetektering. 

<b>PosCal1 
Type: pwr_tFloat32
Flags: Param 

Position vid senaste positionskalibrering enligt 'calibration at point 1'. 
Motsvarande pulsräknarvärde finns i PiCal11 . PosCal1 har samma dimension 
som ActVal . 

<b>PosCal2 
Type: pwr_tFloat32
Flags: Intern 

Position vid senaste positionskalibrering enligt 'calibration at point 2'. 
Motsvarande pulsräknarvärde finns i PiCal12 . PosCal2 har samma dimension 
som ActVal . 

<b>AccCalPos1, AccCalOrder1 
Type: pwr_tInt32
Flags: Param
Default value: 15 resp. 15 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
CalPos1 resp CalOrder1 . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>AccCalPos2, AccCalOrder2 
Type: pwr_tInt32
Flags: Param
Default value: 0 resp. 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
CalPos2 resp CalOrder2 . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinCalPos1, MaxCalPos1 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta och största tillåtna värde vid operatörsändring av CalPos1 . 

<b>MinCalPos2, MaxCalPos2 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Minsta och största tillåtna värde vid operatörsändring av CalPos2 . 

Calibration 

Bestämning av position genom kalibrering med hjälp av 'calibration point 1'. 

Det finns fyra olika sätt att bestämma position: 

Ingen kalibrering. Vid konfigureringen anges pulsvärdet PICal1 när ActVal är 
lika med den kända positionen PosCal1 . Metoden kan användas då pulsvärdet, 
vid konfigureringen, är känt för en bestämd position. 
Operatören kalibrerar. Operatören anger det styrda föremålets position CalPos1 
och initierar därefter kalibreringen genom att sätta CalOrder1 . 
Automatisk kalibrering vid bestämd position. Koppla co1 -ingången till binär 
signal. Ange motsvarande position i CalPos1 . Vid positiv flank på CalOrder1 
avläses pulsvärdet PulsIn och lagras i PICal1 och värdet i CalPos1 kopieras till 
PosCal1 . 
Automatisk kalibrering mot en varierande position. Som i fall 3) men CalPos1 
kopplas också till en signal för den beräknade positionen. Vid positiv flank på 
CalOrder1 avläses pulsvärdet PulsIn och lagras i PICal1 och värdet PosCal1 
uppdateras i enlighet med den externa signalen.
Automatisk kalibrering bör ske vid låg hastighet för att undvika positionsfel 
Bestämning av förstärkningen (= Gain ) genom kalibrering med hjälp av 
'calibration point 2' . 

Ingen kalibrering.
Konstruktören anger Gain ; (= lägesdifferens per puls ). Detta är det normala 
förfarandet då konstruktören vet pulsgivarens karakteristik. Om 
omsättningsfaktorn betecknas Omsfak och Omsfak anger antal pulser per 
enhet, t.ex mm, grader etc. gäller att Gain =1 / Omsfak 
Moment 2- 4 som för positionskalibrering ovan.
Först görs en kalibrering med hjälp av 'calibration point 1'. Därefter görs en 
kalibrering med hjälp av 'calibration point 2', varvid en ny position med 
tillhörande pulsvärde avläses. Därefter beräknas Gain .
Automatisk kalibrering av förstärkningen är förmodligen ovanlig. Däremot kan 
det vara aktuellt med omkalibrering efter byte av pulsgivare eller vid 
förslitning av mäthjul. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper



</topic> **********
<topic> PiSpeed
PiSpeed
Engelsk text<link> PiSpeed, "", $pwr_exe/pwrb_xtthelp.dat

Derivering av pulsräknarsignal. 

<h1>Beskrivning 

Omvandlar pulsgivarsignal för t.ex volym till flöde, sträcka till hastighet etc.
Pulsdifferensen är korrekt också om insignalen har 'overflow'. 

<h1>Input Attributes 

<b>PulsIn 
Graph name: IN
Type: pwr_tInt32
Flags: InRtdb, OpenParam
Default value: 

Pulsräknarvärde (i form av heltal). T.ex kan pulsvärdet hämtas genom 
anslutning till PI-utgång på Count -objekt, till PI- eller PIX-utgång på GetPi -
objekt. 

NB! Ansluts analog signal, t.ex Av-signal, blir resultatet felaktigt. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Ändringshastighet. (Ändring per tidsenhet).
ActVal t = Gain · TimFact ·  , där TimFact är
deriveringstid.

<h1>Internal Attributes 

<b>Gain 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Omsättningsfaktor. Dimension är ingenjörsvärde / puls. 

<b>TimFact 
Type: pwr_tFloat32
Flags:
Default value: 1.0 

Deriveringstid i sekunder. Skalfaktor uttryckt i sekunder / tidsenhet. 

Om Gain är i m / puls ger divisionen m / sek. Med TimFact = 3600 sekunder / 
h blir resultatet i m / h. 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltid i sekunder. Värdet lagras automatiskt vid kompilering. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> $PlantHier
$PlantHier
Engelsk text<link> $PlantHier, "", $pwr_exe/pwrb_xtthelp.dat

Grupperingsobjekt i 'Plant Configuration'. 

<h1>Beskrivning 

Konfigureras i utvecklingsmiljön för att på anläggningssidan bygga upp hela 
hierarkier ( 'the Plant Hier archy' ) eller delar av hierarkier till en överskådlig 
struktur; funktion motsvarar $ NodeHier -objektets roll i 'Node Configuration'. 
Ett PROVIEW-system innehåller vanligen många $ PlantHier -objekt. 

Objektet används dels i anläggningens topp för att representera en särskild 
anläggning i PROVIEW-systemet, dels direkt under annat $ PlantHier -objekt 
för att representera en viss del av anläggningen etc. 

 
Schematic Plant Configuration Showing Two Plants 

Innehåller ingen relevant information (=data) i rtdb.
Objektet konfigureras med hjälp av 'Configuration Editor'. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString80
Flags: Param 

Fri text för att beskriva objektets användning. 

<b>Node 
Type: pwr_tObjid
Flags: CompileFixParam 

Ett $ PlantHier -objekt vars Node -attribut är blankt har rent strukturella 
uppgifter. 

Det första $ PlantHier -objektet i en anläggning eller anläggningsgren, då man 
går uppifrån och ned i anläggningshierarkin, vars Node attribut innehåller 
namnet på ett $ Node -objekt har också en annan uppgift. Det bestämmer 
nodtillhörigheten i målmiljön för objektet själv och alla dess ättlingar. Vilken 
nodtillhörigheten blir framgår $ Node -objektets NodeName . 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> PlcPgm
PlcPgm
Engelsk text<link> PlcPgm, "", $pwr_exe/pwrb_xtthelp.dat

Representerar ett PLC program. 

<h1>Beskrivning 

PlcPgm -objekt konfigureras under $ PlantHier -objekt med hjälp av 
Configuration Editor och dess innehåll, själva PLC programmen, med PLC 
Editorn.
Under PlcPgm -objektet skapas ett WindowPlc objekt, som blir förälderobjekt 
till objekten i PLC programmet. 

PlcPgm -objekten namn fungerar som etiketter på olika PLC program.
PlcPgm -objekt representera både kod och data. 

Olika PlcPgm -objekt med samma värde på ScanTime kommer att exekvera i 
en och samma PLC- subprocess. VAXELN-noder kan innehålla upp till 15 
PLC-subprocesser i ett PLC-jobb och OpenVMS-noder 1 PLC-subprocess i sitt 
PLC-jobb. 

NB! PLC-subprocessen med kortaste cykeltiden, dvs. med högsta frekvensen, 
kallas basefrekvenssubprocessen. Den hanterar också inläsning/utställning av 
Di-, Do-, Dv- och Co-signaler anslutna till nodens lokala I/O-system. De 
övriga subprocesserna benämns gemensamt som delfrekvenssubprocesserna. 

Det betyder att en VAXELN-nod där Di-, Do-, Dv- eller Co-signaler ska 
hanteras men där behov av egentligt PLC program saknas -- ändå behöver ett 
dummy PlcPgm för att klara inläsning/utställning. 

 
<h1>Internal Attributes 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam
Default value: 0.0 

Anger, i sekunder, den nominella tiden mellan två successiva exekveringar av 
PLC programmet. Minsta tillåtna värde på ScanTime är 0.02 sekunder. Vid 
'Create Plc Files ...' erhålls meddelande om ScanTime ? heltalsmultipel av 20 
millisekunder. Lämnas ScanTime blankt kommer det att få värdet 0.02. 

En ändring av ScanTime med hjälp av Configuration Editor eller Utilities 
Window kommer att beaktas utan att PLC programmet omkompileras förutsatt 
att nya 'load files' och ny 'boot file' skapas. 

Eftersom systemklockans upplösning är 10 ms är det lämpligt att ange 
ScanTime med högst 2 decimaler.

ScanTime and Slip 

frekvenssubprocessen och därmed I/O-hanteringen. Praktiska överväganden får 
avgöra detta val; vad klarar I/O:et, vad får det kosta i CPU-last , 
storleksordningen av processens dödtider etc. Vanliga val är 0.02 (=50 Hz) och 
1 (= 1 Hz). 

Basfrekvenssubprocessen arbetar i två steg enligt följande: 

Inläsning och utställning av digitala signaler. Inläsning av Co-signaler. 
Exekverar PlcPgm-kod. 
Dvs under denna cykel beräknade utsignaler ställs ut först vid nästa 
basfrekvenscykel. 

Sätts delfrekvenssubprocessernas ScanTime = 'heltalsmultipel av basperioden' 
kommer delfrekvenssubprocesserna att få 'färska' insignalvärden. Om inte, säg 
t.ex. att basperioden är 60 sek och en delfrekvenssubprocess har ScanTime = 
100 sek, då är de till delfrekvenssubprocessen inlästa signalvärdena drygt 40 
sek gamla när de tidigast börjar användas och signalerna från 
delfrekvenssubprocessen kommer att ställs ut drygt 20 sek efter det att de 
beräknats! 

En ytterligare aspekt till valet av ScanTime är hanteringen av övriga signaler 
mellan hårdvara och I/O-kopierad area. Analoga signaler hanteras med 
frekvensen 5 Hz, räknares ActualValue uppdateras med 1 Hz (av separat 
IO_COMM-jobb). är det fråga om distribuerat I/O av typen RTP spelar också 
konfigureringen av DIOC ( 'Distributed IO Controller') in. (PLC-jobbet är inte 
synkroniserat med IO_COMM-jobbet.) 

<b>ResetObject 
Type: pwr_tObjid
Flags: 

Anger komplett namn på det Di -, Dv - eller Do -objekt som används som 
resetsignal i PLC programmets Grafcet-kedja/or. Vad gäller resetsignalens 
användning.

Saknas behov av att kunna göra reset på Grafcet-kedja lämnas attributet blankt. 

Naturligtvis kan Attribute Editor alltid användas för att ange namn på 
ResetObject . Men i PLC Editorn kan följande metod vara ett alternativ: 

Öppna Edit-menyn under ikonpaletten och välj ShowPlcAttr . Skapa på vanligt 
sätt ett ShowPlcAttr -objekt i PLC programmet. 

Välj nu namnet på önskat ResetObject i Navigator genom att med MB1 klicka 
på det och därefter dubbel-klicka med CTRL/MB1 i Reset-fältet.

<b>ExecuteOrder 
Type: pwr_tInt32
Flags: Intern 

Ej använd. För framtida användning! Tanken är att inom noden kunna styra 
exekveringsordningen mellan olika PlcPgm med samma ScanTime . 

<b>PlcProgram 
Type: pwr_tBuffer
Flags: Intern 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> PlotGroup
PlotGroup
Engelsk text<link> PlotGroup, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar kurvgrupp. 

<h1>Beskrivning 

PlotGroup -objektet sammanför upp till 4 snabb- eller 4 trendkurvor till en 
kurvgrupp genom att motsvarande datalagringsobjekt pekas ut av 
YObjectName . De sammanförda kurvorna, eg. mätstorheterna, kan vara 
samplade med olika frekvenser. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att t.ex beskriva kurvgruppen. 

<b>Trend 
Type: pwr_tBoolean
Flags:
Default value: FALSE 

Anger om kurvgruppen betår av snabb- eller trendkurvor. FALSE betyder 
snabbkurvor och TRUE innebär trendkurvor. 

<b>YObjectName[4] 
Type: pwr_tObjid
Flags: 

Anger namnet på upptill fyra DsTrend - eller DsFast objekt. Vilka 
mätstorheter som ska plottas kan inte ändras från PlotGroup -objektets MER-
bild. 

<b>YUnit[4] 
Type: pwr_tString8
Flags: 

Anger de utritade storheternas ingenjörsenheter. Enheterna kan inte ändras från 
PlotGroup -objektets MER-bild. 

<b>YMinValue[4], YMaxValue[4] 
Type: pwr_tInt32
Flags: Param
Default value: 0,0,..., 0 

Anger, för respektive kurva, den vertikala axelns undre och övre gräns. 

<b>YTickmajor[4], YTickminor[4] 
Type: pwr_tInt32
Flags: Param
Default value: 0,0,..., 0 

Anger, för respektive kurva, den vertikala axelns skalindelning. YTickmajor 
anger avståndet mellan de tjocka strecken och YTickminor avståndet mellan de 
tunna; YTickminor < YTickmajor . 

<b>XMinValue, XMaxValue 
Type: pwr_tInt32 

Ej använd. 

<b>XShiftValue 
Type: pwr_tInt32
Flags: Intern 

Anger om kurvorna ska rullas i samband med uppdatering eller ej. Noll ger 
ingen rullning och ett ger rullning.. 

<b>XTickmajor, XTickminor 
Type: pwr_tInt32
Flags: Param
Default value: 0,0,..., 0 

Anger, för respektive kurva, tidsaxelns skalindelning. XTickmajor anger 
avståndet mellan de tjocka strecken och XTickminor avståndet mellan de 
tunna; XTickminor < XTickmajor . Värdet på XTickmajor bestämmer också 
storleken på maskorna i diagrammets rutnät. 

Attributet kan inte ändras från PlotGroup -objektets MER-bild. 

<b>NumPoints 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Kurvorna plottas som funktion av tiden. Antag att den snabbast samplade 
mätstorheten i en grupp samplats med perioden T. Vid visning gäller då att 
"bredden" på diagrammets tidsfönster initialt blir NumPoints · T. 

Vid plottningen av kurva sker interpolering mellan samplen. Interpoleringen 
för en långsammare samplad signal görs då över relativt längre tider. 

0 < NumPoints = "antal platser i datalagringsobjektets DataBuffer ". Attributet 
kan ändras från PlotGroup -objektets MER-bild. 

<h1>Tips 

Knappen 'Trend' resp 'Fast' i operatörsmiljön ger båda en lista över PlotGroup -
objekt som finns på den aktuella noden oberoende av användare. Vilken lista 
ett visst PlotGroup-objekt placeras i bestäms av Trend . 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Po
Po
Engelsk text<link> Po, "", $pwr_exe/pwrb_xtthelp.dat

Puls utgång ( P ulse O utput) är ett modifierat Do objekt för pulsgenerering. 

<h1>Beskrivning 

Po objekt knyts till ChanDo på samma sätt som Do objekt.

Objektet genererar, då ActualValue gör viss övergång, en puls med 
varaktigheten PulseLength . Vilken övergång hos ActualValue som ska initiera 
puls anges av PosFlank . Om det är en positiv eller negativ puls som ska skapas 
anges av PosPulse . 

 
ActualValue kan manövreras t.ex från applikationsprogram med systemanropet 
gdh_SetObjectInfo 

Om ResetActualValue = TRUE återställer PROVIEW ActualValue efter trigg 
detektering. återställning sker oberoende av om utgången håller på med en puls 
eller ej. Upprepad triggning under pågående puls påverkar inte den befintliga 
pulsen. 

Om EmergBreak är TRUE och EmergBreakSelect = 2 ställs FixedOutValue ut 
och TestValue ställs ut när TestOn är TRUE, dvs i dessa fall sker ingen 
filtrering. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString40
Flags: Param 

Valfri text för att beskriva vilken fysisk signal som representeras; t.ex. 
signalnamn, beskrivande text etc. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: CompileFixParam 

Namn på associerat kanalobjekt. 

<b>ValueIndex 
Type: pwr_tUInt32
Flags: InitSetParam 

Index i DoValue -vektorn hos de Do_Value_Base -objekt som används för bas- 
resp. delfrekvenssampel. Initieras vid start av rs_init. 

<b>*ActualValue 
Type: pwr_tBoolean
Flags: 

Pekare till ärvärdet (= ingenjörsvärdet ActualValue ). 

<b>SigValue 
Type: pwr_tBoolean 

Ej använd. 

<b>DefGraph 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i processbild anges namnet på motsvarande bilds Graph -
objekt här. Därigenom kan den aktuella processbilden enkelt aktiveras från 
'Operator Window'. Som information visas namnet på Graph - objektet i 
signalobjektets MER-bild. 

<b>DefTrend 
Type: pwr_tObjid
Flags: Param 

Förekommer signalen i snabb- eller trendkurvgrupp anges namnet på 
motsvarande PlotGroup -objekt här. Därigenom kan aktuellt kurvdiagram 
enkelt aktiveras från 'Operator Window'. Som information visas namnet på 
PlotGroup -objektet i signalobjektets MER-bild. 

<b>TextWhenValIs0 
Type: pwr_tString16
Flags: Param
Default value: 

Text knuten till signalen då ActualValue = FALSE. Vid presentation av 
signalen då ActualValue = FALSE skrivs den i TextWhenValIs0 angivna 
texten ut; FRÅN är ibland en lämplig text. 

Attributet används i Do -objektets Objekt-bild. 

<b>TextWhenValIs1 
Type: pwr_tString16
Flags: Param
Default value: 

Text knuten till signalen då ActualValue = TRUE. Vid presentation av signalen 
då ActualValue = TRUE skrivs den i TextWhenValIs1 angivna texten ut; TILL 
är ibalnd en lämplig text. 

Attributet används i Do -objektets Objekt-bild. 

<b>PulseLength 
Type: pwr_tFlaot32
Flags: Param
Default value: 0 

Anger pulslängden i sekunder. 

<b>PosFlank 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Anger om objektet ska trigga på positiv eller negativ flank. Triggning kan 
endast ske när objektet befinner sig i sitt "viloläge", dvs ingen pulsgenerering 
pågår. 

- TRUE innebär att objektet triggas då ActualValue gör övergången
FALSE -> TRUE. 

- FALSE betyder att objektet triggas då ActualValue gör övergången
TRUE -> FALSE. 

<b>PosPulse 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Anger om en positiv eller negativ puls ska skapas då objektet triggas. 

- TRUE innebär att en positiv puls skapas då objektet triggas. I
"viloläget" är utsignalen FALSE. 

- FALSE betyder att en negativ puls skapas då objektet triggas. I
"viloläget" är utsignalen TRUE. 

<b>ResetActualValue 
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Anger om PROVIEW ska återställa ActualValue efter detektering eller ej. 

- TRUE innebär att ActualValue sätts: 

FALSE efter triggning, om PosFlank = TRUE 
TRUE efter triggning, om PosFlank = FALSE 
Återställning sker direkt efter detektering oberoende av om utgången då
håller på med en puls eller ej. Upprepad triggning under pågående puls
påverkar inte den befintliga pulsen. 

- FALSE innbär att PROVIEW ej återställer ActualValue . 

<h1>Tips 

Placera i utvecklingsmiljön objektet under $ PlantHier objekt så att det 
kommer att tillhöra samma målnod som dess associerade kanalobjekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Point
Point
Engelsk text<link> Point, "", $pwr_exe/pwrb_xtthelp.dat

Objekt för styrning och sammankoppling av förbindningslinjer. 

<h1>Beskrivning 

Genom att placera Point objekt på lämpliga ställen och förbinda dem kan man: 

styra förbindningslinjernas väg 
skapa förgreningspunkt mellan en utgång och en ingång 
koppla en utgång till en ingång på samma objekt 
<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

- 
<h1>Tips 

Ska en utgång kopplas till en ingång på samma objekt måste det ske via Point 
objekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Posit
Posit 
Engelsk text<link> Posit, "", $pwr_exe/pwrb_xtthelp.dat

Posit ionerare. Används för positionering. 

<h1>Beskrivning 

Positioneringen, som utförs utan hysteres, görs med utgångarna o1 och o2 . 

Två driftlägen finns, MANUAL / AUTO. Driftläge väljs med hjälp av 
ManMode på följande sätt: 

 
För Posit -objekt gäller att styrningen i MANUAL sköts internt på samma sätt 
som i AUTO. Skillnaden mellan MANUAL / AUTO ligger väsentligen i hur 
positioneringen startas/stoppas. 

NB! I andra objekt ( Pid , MValve , Valve , Drive etc) betyder MANUAL att 
operatören direkt betsämmer utsignalen till storlek/riktning eller TRUE/FALSE 
-- men så är det inte i Posit -objekt. 

MANUAL Läge MANUAL är tänkt att hanteras från objektets objektbild. 
Denna
saknas dock f.n. 

Börvärdet anges i SetPos. 
Positioneringen startas då PosOn blir TRUE. 
Olika händeser kan avsluta positioneringen: 
 
- ärvärdet har hållit i sig i dödzonintervallet, dvs. målområdet, under der tid 
som anges av TimerTime.

- PosOn blir FALSE.

- (insignalen) Reset blir TRUE.


Positioneringen begärs vid positiv flank på AutoPos. 
Olika händelser kan avsluta positioneringen: 
- TimerTime > 0. Ärvärdet har hållit i sig i dödzonintervallet, dvs. målområdet, 
under den tid som anges av TimerTime. En ny positionering begärs genom 
positiv flank på AutoPos, dvs. inte på grund av att PosVal är utanför 
målområdet.

TimerTime = 0. Positioneringen avslutas aldrig utan fortsätter följa SetPos tills 
att Reset blir TRUE.

- (insignalen) Reset blir TRUE.


<h1>Input Attributes 

<b>PosVal 
Graph name: PV
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Anger positionens ärvärde; P rocess V alue. 

<b>SetPos 
Graph name: SV
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Anger, oberoende av driftläge, positionens börvärde ( S etpoint V alue). 

<b>AutoPos 
Graph name: pos
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO, om positionering begärts eller ej. FALSE saknar 
betydelse. övergången FALSE -> TRUE betyder att positionering begärs och 
om Reset är FALSE, blir PosOn TRUE och positioneringen startar. 

<b>Reset 
Graph name: res
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, oberoende av driftläge, om positioneringen ska blockeras eller ej. 
FALSE saknar betydelse. Positioneringen stoppas så länge attributet är TRUE. 

<h1>Output Attributes 

<b>ManMode 
Graph name: man
Type: pwr_tBoolean
Flags: Param
Default value: FALSE 

Anger valt driftläge ( MANUAL eller AUTO). Attributet används som en 
traditionell parameter, dvs man kan skriva/läsa i den från olika program. 
Tanken med att placera attributet som ett utgångsattribut är att attributet då 
enklare kan användas i den grafiska konfigurationen. FALSE betyder att 
AUTO gäller och TRUE att driftläget är MANUAL. 

<b>PosOn 
Graph name: pon
Type: pwr_tBoolean
Flags: Output 

Anger om positionering pågår eller ej. FALSE betyder att ingen positionering 
pågår f.n. och TRUE innebär positionering pågår. 

I läge MANUAL startas positioneringen, om Reset är FALSE, genom att 
PosOn sätts TRUE och stoppas då PosOn sätts FALSE. 

<b>Order1 
Graph name: o1
Type: pwr_tBoolean
Flags: Output 

'Backward order', dvs körning så att värdet på PosVal minskar. FALSE betyder 
ingen 'backward order' och TRUE innebär 'backward order' så länge som 
PosVal > SetPos + DeadZone1 och positionering begärs. 

<b>Order2 
Graph name: o2
Type: pwr_tBoolean
Flags: Output 

'Forward order', dvs körning så att värdet på PosVal växer. FALSE betyder 
ingen 'forward order' och TRUE innebär 'forward order' så länge som PosVal < 
SetPos - DeadZone2 och positionering begärs. 

<b>InPlace 
Graph name: inp
Type: pwr_tBoolean
Flags: Output 

Anger om PosVal är i målområdet eller ej. FALSE betyder att så inte är fallet 
TRUE att svaret är ja. 

<b>PosError 
Graph name: ERR
Type: pwr_tFloat32
Flags: Output 

Anger aktuellt positionsfel (= PosVal - SetPos ). 

<h1>Internal Attributes 

<b>DeadZone1, DeadZone2 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 resp.0.0 

Värdena, som ska vara = 0, anger målområdets undre och övre gräns. 

 
<b>TimerTime 
Type: pwr_tFloat32
Flags: Param
Default value: 10.0 

Anger, i sekunder, den tid som PosVal ska ligga i målområdet för att 
positioneringen ska avbrytas. Attributet beaktas enbart i läge AUTO. Se ovan. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts i samband med 'Create Load Files ...' för 
användning i målmiljön. 

<b>TimerAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra TimerTime 
. Följande behörigheter är möjliga: 

0 -- Ingen växling tillåten
? 0 -- Växling tillåten. 

<b>TimerMin, TimerMax 
Type: pwr_tFloat32
Flags: Param 

Anger minsta och största tillåtna värde vid operatörsändring av TimerTime . 

TimerMin = TimerTime = TimerMax 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer. 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller om sådant inte används, på TimerDoDum 
. Efter tiden TimerTime tas den signal, som utpekas av TimerDo , ned. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Pos3P
Pos3P
Engelsk text<link> Pos3P, "", $pwr_exe/pwrb_xtthelp.dat

Tre-lägesregulator, ' Pos itional 3 -step controller', med lägesåterföring och 
dödzon. 'Positional' syftar på insignalen till OUT-ingången och trean på att tre 
diskreta order kan ges med innebörden höger/vänster/ 0, upp/ner/0, 
öka/minska/0 etc. Utgångarna är tidsproportionella mot ingången. 

<h1>Beskrivning 

Precis som för Inc3P är det möjligt att styra med utgångarna ope / clos 
och/eller signaler vars namn finns i DoOpen / DoClose . Utgångarna och 
signalerna kan sättas till TRUE med den frekvens som PlcPgm -objektet anger. 
Men bara signaler kan sättas FALSE genom timerstyrningen . Pulslängden på 
utgångarna, ope och clos , blir en heltalsmultipel PLC programmets cykeltid. 

Objektet har en inbyggd timerstyrning för bättre upplösning vid frånslag 
eftersom tidsstyrningen alltid evalueras med PLC-jobbets bascykeltid. Om 
Pos3P -objektet ingår i ett PlcPgm , som kör med bascykeltiden, ger 
timerstyrningen inte denna fördel. 

Om timerstyrning används är det lämpligt att införa signalerna på ett sätt som 
liknar det som användes för t.ex GetAp -objekt: 

Välj, i 'Navigator', aktuellt PLC program och startan PLC Editorn med hjälp av 
MB3 (= högra knappen på 3-knappars mus). 
Välj i PLC Editorn 'Edit' under Mode-menyn och skapa ett Pos3P -objekt. 
Behåll fönstret med PLC Editorn uppe men välj Navigator-fönstret som aktivt 
fönster vari aktuellt Do -objekt markeras. 
Ctrl/dubbelklicka med MB1 ( vänstra knappen på 3-knappars mus) i -- övre 
delen av Pos3P -symbolen om det är 'öka'-signal och i nedre delen om det 
gäller en 'minska'-signal.

Om en utsignal ska sättas eller ej beror på storleken av reglerfelet OutVal - Pos 
och de separata dödzonerna ErrSo och ErrSta . Dödzonerna gör att en del 
pulser, som i längden skulle kunna skada utrustningen, då reglerelementets läge 
är 'ganska bra' aldrig genereras. 

 
Varaktigheten på DoOpen / DoClose signalerna, pulslängden, är lika med 

Gain · | ( OutVal t - Pos t ) |

Om pulslängden är mindre än PLC programmets cykeltid nollställes DoOpen / 
DoClose av timerstyrningen innan PLC programmets nästa cykel startas. 

Timerstyrning används också av Inc3P objekt.

<h1>Input Attributes 

<b>OutVal 
Graph name: OUT
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Börvärdesposition. Ansluts ofta till OUT-utgången i ett Pid -objekt. 

<b>Pos 
Graph name: POS
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Ärvärdet. Återkoppling av aktuell position. 

<h1>Output Attributes 

<b>Open 
Graph name: ope
Type: pwr_tBoolean
Flags: Output 

Driftsorder. TRUE betyder öppna ( upp, öka, höger eller vad annars som kan 
vara relevant för utgången). FALSE innebär ingen åtgärd. 

<b>Close 
Graph name: clo
Type: pwr_tBoolean
Flags: Output 

Driftsorder. TRUE betyder stäng ( ned, minska, vänster eller vad annars som 
kan vara relevant för utgången). FALSE innebär ingen åtgärd. 

<h1>Internal Attributes 

<b>Gain 
Type: pwr_tFloat32
Flags: Param
Default value: 1.0 

Förstärkning, i sekunder, per styrsignalenhet. Ofta är styrsignalen i området 0 - 
100 %. Antag att gångtiden, tiden för att köra t.ex en ventil från fullt stängt till 
fullt öppet, kan mätas. Välj då Gain som total gångtid dividerat med 
signalområdet; här (100 - 0 ). 

Gain används bara vid timerstyrning av utgångar. 

<b>ErrSta 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Dödzon. Attributet anger det värde som absolutvärdet av reglerfelet, OutVal t - 
Pos t , ska över skrida innan en driftsorder ( Open eller Close ) blir TRUE. 

Det gäller att 0 = ErrSto = ErrSta 

<b>ErrSto 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Dödzon. Attributet anger det värde som absolutvärdet av reglerfelet, OutVal t - 
Pos t , ska under skrida innan en pågående driftsorder tas bort; Open eller 
Close blir FALSE. 

Det gäller att 0 = ErrSto = ErrSta 

<b>DoOpen 
Type: pwr_tObjid
Flags: CompileSetParam 

Namn på extern 'öppna'-signal, t.ex Do - eller Dv -objekt vid timerstyrning. 
även om DoOpen definierats hanterar objektet Open . 

<b>DoClose 
Type: pwr_tObjid
Flags: CompileSetParam 

Namn på extern 'stäng'-signal, t.ex Do - eller Dv -objekt vid timerstyrning. 
även om DoClose definierats hanterar objektet Close . 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer. 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller, om sådant objekt inte används, på 
TimerDoDum . Efter tiden TimerTime nollställs den av TimerDo angivna 
signalen. 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Intern 

Fördröjning i sekunder. Anger när utgångarna ska sättas FALSE. TimerTime = 
PLC-jobbets bascykeltid. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts då laddfilen skapas. Används i målmiljön. 

<h1>Se även 

Inc3P.<link> Inc3P

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Pulse
Pulse
Engelsk text<link> Pulse, "", $pwr_exe/pwrb_xtthelp.dat

Variabel puls. 

<h1>Beskrivning 

Objektet generera, vid positiv flank på insignalen, en puls med varaktigheten 
TimerTime . 

Om insignalen triggar ett Pulse -objekt som redan håller på med en puls, 
kommer den pågående pulsen att förlängas, eftersom pulslängden, TimerTime , 
räknas från insignalens senaste positiva flank. 

 
<h1>Input Attributes 

<b>In 
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Flankövervakad insignal. 

<h1>Output Attributes 

<b>Status 
Graph name: sts
Type: pwr_tBoolean
Flags: Output 

Anger objektets tillstånd. S.k. timersstyrning används. 

<h1>Internal Attributes 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Anger, i sekunder, pulsens varaktighet.

TimerTime = PLC programmets cykeltid. 

<b>ShowTimerTime 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om TimerTime ska visas i Pulse-objektets symbol eller ej. FALSE 
betyder ingen visning och TRUE visning. Enheten är sekunder. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts då laddfilen skapas. Används i målmiljön. 

<b>TimerAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
TimerTime . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>TimerMin, TimerMax 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0, 0.0} 

Anger minsta och största tillåtna värde vid operatörsändring av TimerTime . 

TimerMin = TimerTime = TimerMax 

<b>StatusOld 
Type: pwr_tBoolean
Flags: Intern 

Senaste In-värde. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller, om sådant objekt inte används, på 
TimerDoDum . Efter tiden TimerTime nollställs den av TimerDo angivna 
signalen. 

<h1>Tips 

Om en reset-funktion krävs, istället för en puls med given period, kan pulsen 
realiseras med Wait , And , Or , Edge och ett SR_R -objekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Queue
Queue
Engelsk text<link> Queue, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar kö för mottagning av Package Handler meddelanden. 

<h1>Beskrivning 

Package Handler funktionen, se PROVIEW/R Programmer's Reference 
Manual , används för att skicka meddelanden från operatörsstation till 
tillämpnings program eller mellan två tillämpnings program. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Address 
Type: pwr_tUInt32
Flags: Intern 

Innehåller PAMS adress. 

<b>Global 
Type: pwr_tBoolean 

Används ej. 

<h1>Tips 

Objektet konfigureras i utvecklingsmiljön och placeras i samma nod som det 
program för vilket meddelandet är avsett. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Ramp
Ramp
Engelsk text<link> Ramp, "", $pwr_exe/pwrb_xtthelp.dat

Begränsar en storhets ändringshastighet. 

<h1>Beskrivning 

Separata gränser för att öka respektive minska; RampUp och RampDown . 

Sätt du = RampUp · ScanTime och dn = RampDown · ScanTime . En insignal 
bestämmer utsignalen på följande sätt: 

FeedB + du , om 0 < du < In - FeedB
ActVal = FeedB - dn , om In - FeedB < - dn < 0
In , annars 

En extern signal kan också användas som återkoppling.

<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Värde på insignalen. 

<b>FeedB 
Graph name: FB
Type: pwr_tFloat32
Flags: NoRtdb, OpenExtern ( to ActVal) 

Extern återkoppling. Om ingången lämnas öppen används VAL-utgången som 
intern insignal. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Utsignal; se ovan. 

<h1>Internal Attributes 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltiden (= samplings intervallet), i sekunder, lagras automatiskt vid 
kompilering. 

<b>RampUp 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 0.0 

Anger maximal ökning per sekund. Om RampUp = 0 sker ingen begränsing av 
insignalen uppåt. 

<b>RampDown 
Type: pwr_tFloat32
Flags: Param, Access
Default value: 0.0 

Anger maximal minskning per sekund. Om RampDown = 0 sker ingen 
begränsing av insignalen nedåt. 

<b>AccUp, AccDown 
Type: pwr_tInt32
Flags: Param
Default value: 0 resp. 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
RampUp respektive RampDown . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinUp, MaxUp 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0, 0.0} 

Anger minsta och största tillåtna värde vid operatörsändring av RampUp . 

<b>MinDown, MaxDown 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Anger minsta och största tillåtna värde vid operatörsändring av RampDown . 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> ResDi
ResDi
Engelsk text<link> ResDi, "", $pwr_exe/pwrb_xtthelp.dat

Nollställer värdet på Di-signal ( Res et D igital i nput). 

<h1>Beskrivning 

Om och endast om insignalen är TRUE, nollställes den angivna lokala Di-
signalen, annars sker ingen påverkan. 

Di-objektets fullständiga namn anges; dess sista namnled visas i ResDi -
symbolens högra fält. 

NB! Detta objekt används i samband med I/O-simulering. IOSimulFlag ska 
sättas TRUE och IOReadWriteFlag FALSE i $Node objektet, dvs noden får 
inte använda någon fysisk I/O-hårdvara sammtidigt med detta objekt. 

<h1>Input Attributes 

In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Ingången kopplas till binär signal eller lämnas öppen. I senare fallet är värdet 
på In default TRUE och värdet kan inte ändras i målmiljön varför funktionen 
då blir ovillkorlig. 

Anger om Di-signalen ska nollställas eller ej. FALSE betyder att insignalen 
inte ska påverkas och TRUE innebär att en lokal Di-signal sätts FALSE. 

<h1>Internal Attributes 

<b>DiObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Di -objektets fullständiga namn. 

<b>DiObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Di -objektets namn som ska visas i ResDi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Di -objektet kopplade kanalobjektet ska visas i 
ResDi-objektet eller ej. FALSE betyder ingen visning och TRUE visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i ResDi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Di-objektets fullständiga namn på sätt som anges under 
GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> ResDo
ResDo
Engelsk text<link> ResDo, "", $pwr_exe/pwrb_xtthelp.dat

Nollställer värdet på Do-signal ( Res et D igital o utput). 

<h1>Beskrivning 

Om och endast om insignalen är TRUE, nollställes den angivna lokala Do- 
signalen, annars sker ingen påverkan. 

Di-objektets fullständiga namn anges; dess sista namnled visas i ResDo -
symbolens högra fält. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Ingången kopplas till binär signal eller lämnas öppen. I senare fallet är värdet 
på In default TRUE och värdet kan inte ändras i målmiljön varför funktionen 
då blir ovillkorlig. 

Anger om Do-signalen ska nollställas eller ej. FALSE betyder att insignalen 
inte ska påverkas och TRUE innebär att en lokal Do-signal sätts FALSE. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>DoObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Do -objektets fullständiga namn. 

<b>DoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Do -objektets namn som ska visas i ResDo- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Do -objektet kopplade kanalobjektet ska visas i 
ResDo-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i ResDo-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Do-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> ResDp
ResDp
Engelsk text<link> ResDp, "", $pwr_exe/pwrb_xtthelp.dat

Nollställer värdet på digital parameter ( Res et D igital p arameter). 

<h1>Beskrivning 

Om och endast om insignalen är TRUE, nollställes den angivna lokala binära 
storheten, annars ingen påverkan. Storheten kan avse utsignal från objekt eller 
internt digitalt attribut ( skalär eller element i 1-dimensionell vektor) i 
godtyckligt lokalt objekt. 

Den binära storhetens fullständiga namn anges; dess sista namnled visas i 
ResDp -symbolens högra fält; se nedan. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Ingången kopplas till binär signal eller lämnas öppen. I senare fallet är värdet 
på In default TRUE och värdet kan inte ändras i målmiljön varför funktionen 
då blir ovillkorlig. 

Anger om den binära storheten ska nollställas eller ej. FALSE betyder att 
storheten inte ska påverkas och TRUE innebär att den lokal binära storheten 
ska sätts FALSE. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Object 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger det aktuella objektets kompletta namn. 

<b>ObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
ResDp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: CompileFixParam 

Används av PLC Editorn. Anger parameterns namn. PLC Editorn är 'case 
sensitive' vad gäller detta attribut. Avses ActualValue ska man i Attribute 
Editor skriva ActualValue och inte t.ex ACTUALVALUE. 

<h1>Tips 

Det är lämpligt att ange storheten på sätt som anges under GetAp -objektet, 
steg 1  5.

<h1>Se även 

SetDp.<link> SetDp

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> ResDv
ResDv
Engelsk text<link> ResDv, "", $pwr_exe/pwrb_xtthelp.dat

Nollställer värdet på Dv-signal ( Res et D igital v alue). 

<h1>Beskrivning 

Om och endast om insignalen är TRUE, nollställes den angivna lokala Dv- 
signalen, annars sker ingen påverkan. 

Dv-objektets fullständiga namn anges; dess sista namnled visas i ResDv - 
symbolens högra fält. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Ingången kopplas till binär signal eller lämnas öppen. I senare fallet är värdet 
på In default TRUE och värdet kan inte ändras i målmiljön varför funktionen 
då blir ovillkorlig. 

Anger om Dv-signalen ska nollställas eller ej. FALSE betyder att insignalen 
inte ska påverkas och TRUE innebär att en lokal Dv-signal sätts FALSE. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>DvObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Dv -objektets fullständiga namn. 

<b>DvObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Dv -objektets namn som ska visas i ResDv-
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Dv-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Reset_SO
Reset_SO
Engelsk text<link> Reset_SO, "", $pwr_exe/pwrb_xtthelp.dat

Tar, då ingången är TRUE, bort lagrad Grafcet order. 

<h1>Beskrivning 

Om Order -objektet saknar S-order attribut sker inget. 

Vanligen, placeras Reset_SO i Grafcet program, men det kan också placeras i 
vanligt PLC program. 

Genererar ingen relevant data i rtdb. 

<h1>Input Attributes 

<b>In 
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: FALSE 

Anger om 'reset' på lagrad order ska göras eller ej. FALSE betyder ingen 'reset' 
och TRUE innebär att lagrad order tas bort. 

<h1>Internal Attributes 

<b>OrderObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Order -objektets fullständiga namn. 

<h1>Tips 

Ett sätt att få in Order -objektets namn i Reset_SO -objektet är följande: 

Välj, i Navigator, aktuellt Order -objekt. 
Dubbelklicka med Ctrl/ MB1 (= vänstra knappen på en 3-knappars mus) i 
högra delen av Reset_SO -symbolen. 
Order -objektets sista namnled visas då i symbolen. I figur 3-49 är Order - 
objektets sista namnled ORD1. 
 
Reset of an S-order 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Select
Select
Engelsk text<link> Select, "", $pwr_exe/pwrb_xtthelp.dat

Signalväljare. Väljer en av två analoga signaler. 

<h1>Beskrivning 

Valet av signal styrs av en binär storhet på följande sätt: 

VAL = HIG och NOT = LOW, om con(trol) är TRUE
VAL = LOW och NOT = HIG, om con(trol) är FALSE 

<h1>Input Attributes 

<b>High 
Graph name: HIG
Type: pwr_tFloat32
Flags: NoRtdb, OpenParam, Access
Default value: 0.0 

Värde på 1:a insignalen. 

<b>Low 
Graph name: LOW
Type: pwr_tFloat32
Flags: NoRtdb, OpenParam, Access
Default value: 0.0 

Värde på 2:a insignalen. 

<b>Control 
Graph name: con
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert, Access
Default value: FALSE 

Väljarens värde. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Valt värde hämtas från High , om Control är TRUE, annars från Low . 

<b>NotActVal 
Graph name: NOT
Type: pwr_tFloat32
Flags: Output 

Icke-valt värde hämtas från Low , om Control är TRUE, annars från High . 

<h1>Internal Attributes 

<b>AccCon, AccLow, AccHigh 
Type: pwr_tInt32
Flags: Param
Default value: 0, 0 resp. 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Control , Low respektive High . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinHigh, MaxHigh 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Anger minsta och största tillåtna värde vid operatörsändring av High . 

<b>MinLow, MaxLow 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Anger minsta och största tillåtna värde vid operatörsändring av Low . 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> SetCond
SetCond
Engelsk text<link> SetCond, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar, i associerat Order eller Trans -objekt, status från villkorsfönster. 

<h1>Beskrivning 

Villkorfönster används av Trans -objekt och Order -objekt med C-order 
attribut. Villkorsfönster evalueras varje gång PLC programmet exekverar. 

<h1>Input Attributes 

<b>In 
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam 

Anger den logiska storhet vars värde ska lagras. 

<h1>Internal Attributes 
- 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> SetDi
SetDi
Engelsk text<link> SetDi, "", $pwr_exe/pwrb_xtthelp.dat

Ettställer värdet på Di-signal ( Set D igital i nput). 

<h1>Beskrivning 

Om och endast om insignalen är TRUE, ettställes den angivna lokala Di- 
signalen, annars sker ingen påverkan. 

Di-objektets fullständiga namn ska anges; dess sista namnled visas i SetDi -
symbolens högra fält. 

NB! Detta objekt används i samband med I/O-simulering. IOSimulFlag ska 
sättas TRUE och IOReadWriteFlag FALSE i $Node objektet, dvs noden får 
inte använda någon fysisk I/O-hårdvara sammtidigt med detta objekt. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Ingången kopplas till binär signal eller lämnas öppen. I senare fallet är värdet 
på In default TRUE och värdet kan inte ändras i målmiljön varför funktionen 
då blir ovillkorlig. 

Anger om Di-signalen ska ettställas eller ej. FALSE betyder att insignalen inte 
ska påverkas och TRUE innebär att en lokal Di-signal sätts TRUE. 

<h1>Internal Attributes 

<b>DiObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Di -objektets fullständiga namn. 

<b>DiObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Di -objektets namn som ska visas i SetDi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Di -objektet kopplade kanalobjektet ska visas i 
SetDi-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i SetDi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Di-objektets fullständiga namn på sätt som anges under 
GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> SetDo
SetDo
Engelsk text<link> SetDo, "", $pwr_exe/pwrb_xtthelp.dat

Ettställer värdet på Do-signal ( Set D igital o utput). 

<h1>Beskrivning 

Om och endast om insignalen är TRUE, ettställes den angivna lokala Do-
signalen, annars sker ingen påverkan. 

Do-objektets fullständiga namn anges; dess sista namnled visas i SetDo -
symbolens högra fält. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Ingången kopplas till binär signal eller lämnas öppen. I senare fallet är värdet 
på In default TRUE och värdet kan inte ändras i målmiljön varför funktionen 
då blir ovillkorlig. 

Anger om Do-signalen ska ettställas eller ej. FALSE betyder att insignalen inte 
ska påverkas och TRUE innebär att den lokal Do-signalen sätts TRUE. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>DoObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Do -objektets fullständiga namn. 

<b>DoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Do -objektets namn som ska visas i SetDo- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Do -objektet kopplade kanalobjektet ska visas i 
SetDo-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i SetDo-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Do-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Se även 

ResDo<link> ResDo

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> SetDp
SetDp
Engelsk text<link> SetDp, "", $pwr_exe/pwrb_xtthelp.dat

Ettställer värdet på digital parameter ( Set D igital p arameter). 

<h1>Beskrivning 

Om och endast om insignalen är TRUE, ettställes den angivna lokala binära 
storheten, annars ingen påverkan. Storheten kan avse utsignal från objekt eller 
internt digitalt attribut ( skalär eller element i 1-dimensionell vektor) i 
godtyckligt lokalt objekt. 

Den binära storhetens fullständiga namn anges; dess sista namnled visas i 
SetDp -symbolens högra fält; se nedan. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: TRUE 

Ingången kopplas till binär signal eller lämnas öppen. I senare fallet är värdet 
på In default TRUE och värdet kan inte ändras i målmiljön varför funktionen 
då blir ovillkorlig. 

Anger om den binära storheten ska ettställas eller ej. FALSE betyder att 
storheten inte ska påverkas och TRUE innebär att den lokal binära storheten 
ska sätts TRUE. 

<h1>Internal Attributes 

<b>Object 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger det aktuella objektets kompletta namn. 

<b>ObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
SetDp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: CompileFixParam 

Används av PLC Editorn. Anger parameterns namn. PLC Editorn är 'case 
sensitive' vad gäller detta attribut. Avses ActualValue ska man i Attribute 
Editor skriva ActualValue och inte t.ex ACTUALVALUE. 

<h1>Tips 

Det är lämpligt att ange storheten på sätt som anges under GetAp -objektet, 
steg 1  5.

<h1>Se även 

ResDp<link> ResDp

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> SetDv
SetDv
Engelsk text<link> SetDv, "", $pwr_exe/pwrb_xtthelp.dat

Ettställer värdet på Dv-signal ( Set D igital v alue ). 

<h1>Beskrivning 

Om och endast om insignalen är TRUE, ettställes den angivna lokala Dv- 
signalen, annars ingen påverkan. 

Dv-objektets fullständiga namn anges; dess sista namnled visas i SetDv -
symbolens högra fält. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: FALSE 

Ingången kopplas till binär signal eller lämnas öppen. I senare fallet är värdet 
på In default TRUE och värdet kan inte ändras i målmiljön varför funktionen 
då blir ovillkorlig. 

Anger om Dv-signalen ska ettställas eller ej. FALSE betyder att insignalen inte 
ska påverkas och TRUE innebär att den lokal Dv-signalen sätts TRUE. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>DvObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Dv -objektets fullständiga namn. 

<b>DvObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Dv -objektets namn som ska visas i SetDv- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Dv-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Se även 

ResD. <link> ResD

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> ShowPlcAttr
ShowPlcAttr
Engelsk text<link> ShowPlcAttr, "", $pwr_exe/pwrb_xtthelp.dat

Objekt för att visa värdet på några viktiga PLC program attribut. 

<h1>Beskrivning 

Objektet konfigueras t.ex i ett av PLC programmets Document objekt. 

Objektet är inte dynamiskt. Ändras PLC programmets nodnamn eller cykeltid 
med Attribute Editor slår inte ändringarna igenom i ShowPlcAttr-objektet. För 
att få med ändringarna är det nödvändigt att raderar ShowPlcAttr- objektet och 
därefter skapa en ny instans! 

ResetObject kan i motsatts till nodnamn och cykeltid anges direkt i 
ShowPlcAttr -objektet 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

- 
<h1>Tips 

Skapas ett ShowPlcAttr -objekt i något av PLC programmets Document objekt, 
t.ex det första, kommer utskrifter av PLC programmet också att innehålla 
uppgift om nodnamn, cykeltid och reset objekt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Speed
Speed
Engelsk text<link> Speed, "", $pwr_exe/pwrb_xtthelp.dat

Deriverare. 

<h1>Beskrivning 

Differentiering av insignal. Utsignalen är proportional mot insignalens 
ändringshastighet (derivata). 

<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam 

Värde på insignalen. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

Ändringshastighet. (Ändring per tidsenhet).
ActVal t = TimFact ·  , där TimFact är deriveringstiden

<h1>Internal Attributes 

<b>TimFact 
Type: pwr_tFloat32
Flags: Param
Default value: 1.0 

Deriveringstid i sekunder. Skalfaktor i sekunder per tidsenhet. 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltiden (= samplings intervallet), i sekunder, lagras automatiskt vid 
kompilering. 

<h1>Exempel 

Antag att In är i kg. För att få ActVal i kg/h ska TimFact vara lika med 3600 
sekunder /h. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> SR_R
SR_R, SR_S
Engelsk text<link> SR_R, "", $pwr_exe/pwrb_xtthelp.dat

S et R eset vippor. 

<h1>Beskrivning 

Tar självhållning vid positiv flank på 'set'-ingången. 

Släpper självhållningen vid positiv flank på 'res'-ingången. 

Om både set - och reset -signal finns samtidigt är SR-vippans tillstånd 
odefinierat. Därför finns två versioner av vippan: 

SR_S vippan blir TRUE ( = S et) då båda ingångarna är satta 
SR_R vippan blir FALSE ( = R eset) då båda ingångarna är satta 
 
<h1>Input Attributes 

<b>set 
Graph name: set
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction
Default value: FALSE 

Ingång för 'set'-signalen. 

<b>reset 
Graph name: reset
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction
Default value: FALSE 

Ingång för 'reset'-signalen. 

<h1>Output Attributes 

<b>Status 
Graph name: sts
Type: pwr_tBoolean
Flags: Output, Access
Default value: FALSE 

Anger objektets aktuella tillstånd. 

<h1>Internal Attributes 

<b>Acc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Status . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> SsBegin
SsBegin
Engelsk text<link> SsBegin, "", $pwr_exe/pwrb_xtthelp.dat

Första Grafcet-steget i delsekvenskedja. 

<h1>Beskrivning 

Objektet sätts aktivt då överliggande SubStep -objekt blir aktivt. Jämför med 
SsEnd som är delsekvenskedjans sista steg.

Till den högra utgången kan samtidigt kopplas dels en eller flera Order -objekt, 
dels en eller flera Sto xx, Set xx eller Res xx objekt. Utgången kan också 
lämnas öppen eller användas som generell binär signal.

<h1>Attributes 

<b>StatusIn 
Type: pwr_tBoolean
Flags: DevOnly 

<h1>Output Attributes 

<b>Order[0] 
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Anger stegets tillstånd. FALSE betyder inaktivt steg och TRUE innebär att 
steget är aktivt. Värdet kan plockas upp i annat program med hjälp av en 
GetDp objekt.

NB! I objektets strukturbeskrivning betecknas attributet 'Status[0]'(!) Därför 
måste attributet refereras som 'Status[0]'. 

<b>Order[1] 
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Order [1] är en kopia Order [0]. Trans -objekt tittar i Order [0] och Order [1]. 

NB! I objektets strukturbeskrivning betecknas attributet 'Status[1]'(!) Därför 
måste attributet refereras som 'Status[1]'. 

<h1>Internal Attributes 

<b>StatusOld 
Type: pwr_tBoolean
Flags: Intern 

Används för att upptäcka när överliggande SubStep -objekt blir aktivt. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> SsEnd
SsEnd
Engelsk text<link> SsEnd, "", $pwr_exe/pwrb_xtthelp.dat

Sista Grafcet-steget i delsekvenskedja 

<h1>Beskrivning 

Objektet förblir aktivt tills överliggande SubStep -objekt blir aktivt.
Objektet sätter i överliggande SubStep -objekt Order [1] till TRUE. 

Till den högra utgången kan samtidigt kopplas dels en eller flera Order -objekt, 
dels en eller flera Sto xx, Set xx eller Res xx objekt. Utgången kan också 
lämnas öppen eller användas som generell binär signal.

<h1>Input Attributes 

<b>StatusIn 
Type: pwr_tBoolean
Flags: DevOnly 

<h1>Output Attributes 

<b>Order[0] 
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Anger stegets tillstånd. FALSE betyder inaktivt steg och TRUE innebär att 
steget är aktivt. Värdet kan plockas upp i annat program med hjälp av GetDp 
objekt.

<b>Order[1] 
Type: pwr_tBoolean
Flags: Output 

Order [1] är en kopia av Order [0]. Trans -objekt tittar i Order [0] och Order 
[1]. 

I objektets strukturbeskrivning och vid referenser betecknas attributet 
'Status[1]'. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Step
Step
Engelsk text<link> Step, "", $pwr_exe/pwrb_xtthelp.dat

Vanligt sekvensiellt Grafcet steg. 

<h1>Beskrivning 

Till den högra utgången kan samtidigt kopplas dels en eller flera Order -objekt, 
dels en eller flera Sto xx, Set xx eller Res xx objekt. Utgången kan också 
lämnas öppen eller användas som generell binär signal.

De vertikala anslutningarna ansluts Trans -objekt. 

Samtliga steg i en sekvenskedja kan nollställas med en gemensam reset- signal; 
se vidare under InitStep . 

<h1>Attributes 

<b>StatusIn 
Type: pwr_tBoolean
Flags: DevOnly 

<b>StatusOut 
Type: pwr_tBoolean
Flags: DevOnly 

<h1>Output Attributes 

<b>Order[0] 
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Anger stegets tillstånd. FALSE betyder inaktivt steg och TRUE innebär att 
steget är aktivt. Värdet kan plockas upp i annat program med hjälp av GetDp 
objekt.

<b>Order[1] 
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Order [1] är en kopia av Order [0]. Trans -objekt tittar i Order [0] och Order 
[1]. 

I strukturbeskrivningen och vid referenser betecknas attributet 'Status[1]'. 

Alternative Sequences 

Vid alternativa sekvenser förutsätts att överföringsvillkoren skiljer sig åt på 
något sätt.

De speciella förbindningslinjerna vid alternativa sekvenser (förgrening resp. 
sammanföring) skapas på följande sätt: Välj i PLC Editorn, innan 
anslutningarna görs, i View-menyn 'Connections' och därunder 'Palette'. 
Därefter väljs i den undre delen av Paletten under 'ConGrafcet' 

- 'StepDiv' för förgrening 

- 'StepConv' för sammanföring 

Parallel Sequences 

De speciella förbindningslinjerna vid parallella sekvenser ( förgrening resp. 
sammanföring) skapas på liknande sätt som vid alternativa sekvenser. Välj i 
den undre delen av Paletten under 'ConGrafcet' 

- 'TransDiv' för förgrening 

- 'TransConv' för sammanföring 

varefter förbindningarna skapas på vanligt sätt. Förhållandet att vid parallella 
sekvenser förgreningen utgår från ett Trans-objekt och sammanföring sker till 
ett Trans-objekt återkommer alltså i namnet på motsvarande linjeobjekt. 

<h1>Se även 

InitStep<link> InitStep
SubStep<link> SubStep
SsBegin<link> SsBegin
SsEnd . <link> SsEnd

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> StoAi
StoAi
Engelsk text<link> StoAi, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i Ai-signal ( Sto re A nalog i nput). 

<h1>Beskrivning 

Lagrar analogt värde ( t.ex utsignal av typen pwr_tFloat32) i angivet lokalt Ai-
objekt. Lokal betyder att Ai-objektet exekverar i samma nod som StoAi- 
objektet.
Ai-objektets fullständiga namn anges; dess sista namnled visas i StoAi -
symbolens högra del. 

NB! Detta objekt används i samband med I/O-simulering. IOSimulFlag ska 
sättas TRUE och IOReadWriteFlag FALSE i $Node objektet, dvs noden får 
inte använda någon fysisk I/O-hårdvara sammtidigt med detta objekt. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Attributet anger vilket värde som ska tilldelas Ai-signalen. Ingången kopplas 
till analog signal eller lämnas öppen. I senare fallet är värdet på In default 0.0 
och värdet kan inte ändras i målmiljön. 

<h1>Internal Attributes 

<b>AiObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Ai -objektets fullständiga namn. 

<b>AiObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Ai -objektets namn som ska visas i StoAi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Ai -objektet kopplade kanalobjektet ska visas i 
StoAi-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i StoAi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Ai-objektets fullständiga namn på sätt som anges under 
GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> StoAo
StoAo
Engelsk text<link> StoAo, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i Ao-signal ( Sto re A nalog o utput). 

<h1>Beskrivning 

Lagrar analogt värde ( t.ex utsignal av typen pwr_tFloat32) i angivet lokalt Ao-
objekt.
Ao-objektets fullständiga namn anges; dess sista namnled visas i StoAo - 
symbolens högra del. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Attributet anger vilket värde som ska tilldelas Ao-signalen. Ingången kopplas 
till analog signal eller lämnas öppen. I senare fallet är värdet på In default 0.0 
och värdet kan inte ändras i målmiljön. 

<h1>Internal Attributes 

<b>AoObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Ao -objektets fullständiga namn. 

<b>AoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Ao -objektets namn som ska visas i StoAo-
objektet. Segmenten räknas med början från signalobjektets sista namnled.
0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Ao -objektet kopplade kanalobjektet ska visas i 
StoAo-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i StoAo-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Ao-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> StoAp
StoAp
Engelsk text<link> StoAp, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i analog parameter ( Sto re A nalog p arameter). 

<h1>Beskrivning 

Lagrar analogt värde i angivet flyttals-attribut ( skalär eller element i 1- 
dimensionell vektor av typen pwr_tFloat32) i lokalt objekt. Det mottagande 
attributet får inte avse pekare. 

Parametern kan avse skalär eller element i 1-dimensionell vektor. Antag ett 
objekt som bl. a. innehåller den analoga vektorn Temp[3]. Då gäller att 
Temp[0] refererar 1:a elementet i vektorn, Temp[1] det 2:a o.s.v. 

I StoAp -symbolens högra fält visas dels sista ledet av objektets namn, dels 
parameterns namn. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Attributet anger vilket värde som ska tilldelas parametern. 

Ingången kopplas till analog signal eller lämnas öppen. I senare fallet är värdet 
på In default 0.0 och värdet kan inte ändras i målmiljön. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Object 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLCeditorn. Anger det aktuella objektets fullständiga namn. 

<b>ObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
StoAp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: CompileFixParam 

Används av PLC Editorn. Anger parameterns namn. PLC Editorn är 'case 
sensitive' vad gäller detta attribut. Avses ActualValue ska man i Attribute 
Editor skriva ActualValue och inte t.ex ACTUALVALUE. 

<h1>Tips 

Det är lämpligt att ange storheten på sätt som anges under GetAp -objektet, 
steg 1  5.

<h1>Se även 

CStoAp.<link> CStoAp

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> StoAv
StoAv
Engelsk text<link> StoAv, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i Av-signal ( Sto re A nalog v alue). 

<h1>Beskrivning 

Lagrar analogt värde ( t.ex utsignal av typen pwr_tFloat32) i angivet lokalt Av-
objekt. 

Av-objektets fullständiga namn anges; dess sista namnled visas i StoAv -
symbolens högra fält. 

Objektet används t.ex för att tilldela lokala Av-objekt startvärde i samband med 
initialisation av PLC program. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Attributet anger vilket värde som ska tilldelas Av-signalen. Ingången kopplas 
till analog signal eller lämnas öppen. I senare fallet är värdet på In default 0.0 
och värdet kan inte ändras i målmiljön. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>AvObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Av -objektets fullständiga namn. 

<b>AvObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Av -objektets namn som ska visas i StoAv-
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Av-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Se även 

CStoAv.<link> CStoAv

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> StoDi
StoDi
Engelsk text<link> StoDi, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i Di-signal ( Sto re D igital i nput). 

<h1>Beskrivning 

Lagrar digitalt värde i angivet lokalt Di-objekt. Lokalt betyder att Di-objektet 
exekverar i samma nod som StoDi-objektet. 

Di-objektets fullständiga namn anges; dess sista namnled visas i StoDi -
symbolens högra fält. 

NB! Detta objekt används i samband med I/O-simulering. IOSimulFlag ska 
sättas TRUE och IOReadWriteFlag FALSE i $Node objektet, dvs noden får 
inte använda någon fysisk I/O-hårdvara sammtidigt med detta objekt. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: FALSE 

Attributet anger vilket värde som ska tilldelas Di-objektet. 

Ingången kopplas till digital storhet eller lämnas öppen. I senare fallet är värdet 
på In default FALSE och värdet kan inte ändras i målmiljön. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>DiObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Di -objektets fullständiga namn. 

<b>DiObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Di -objektets namn som ska visas i StoDi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Di -objektet kopplade kanalobjektet ska visas i 
StoDi-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i StoDi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Ai-objektets fullständiga namn på sätt som anges under 
GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> StoDo
StoDo
Engelsk text<link> StoDo, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i Do-signal ( Sto re D igital o utput). 

<h1>Beskrivning 

Lagrar digitalt värde i angivet lokalt Do-objekt. 

Do-objektets fullständiga namn anges; dess sista namnled visas i StoDo -
symbolens högra del. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: FALSE 

Attributet anger vilket värde som ska tilldelas Do-objektet. 

Ingången kopplas till digital storhet eller lämnas öppen. I senare fallet är värdet 
på In default FALSE och värdet kan inte ändras i målmiljön. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>DoObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Do -objektets fullständiga namn. 

<b>DoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Do -objektets namn som ska visas i StoDo- 
objektet. Segmenten räknas med början från signalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Do -objektet kopplade kanalobjektet ska visas i 
StoDo-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i StoDo-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Do-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> StoDp
StoDp
Engelsk text<link> StoDp, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i digital parameter ( Sto re D igital p arameter). 

<h1>Beskrivning 

Lagrar värdet av binär storhet i byte-attribut ( skalär eller element i 1- 
dimensionell vektor av typen pwr_tBoolean) i lokalt objekt. Det mottagande 
attributet får inte avse pekare.
I StoDp -symbolens högra fält visas dels sista ledet av objektets namn, dels 
parameterns namn. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: FALSE 

Attributet anger vilket värde som ska tilldelas parametern. 

Ingången kopplas till digital storhet eller lämnas öppen. I senare fallet är värdet 
på In default FALSE och värdet kan inte ändras i målmiljön. 

<h1>Internal Attributes 

<b>Object 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger det aktuella objektets fullständiga namn. 

<b>ObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
StoDp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger parameterns namn. PLC Editorn är 'case 
sensitive' vad gäller detta attribut. Avses ActualValue ska man i Attribut Editor 
skriva ActualValue och inte t.ex ACTUALVALUE. 

<h1>Tips 

Det är lämpligt att ange storheten på sätt som anges under GetAp -objektet, 
steg 1  5.

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> StoDv
StoDv
Engelsk text<link> StoDv, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i Dv-signal ( Sto re D igital v alue). 

<h1>Beskrivning 

Lagrar binär storhet i angivet lokalt Dv-objekt.
Dv-objektets fullständiga namn anges; dess sista namnled visas i StoDv -
symbolens högra del. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tBoolean
Flags: NoRtdb, OpenCompileFixParam
Default value: FALSE 

Attributet anger vilket värde som ska tilldelas Dv-objektet. 

Ingången kopplas till digital storhet eller lämnas öppen. I senare fallet är värdet 
på In default FALSE och värdet kan inte ändras i målmiljön. 

<h1>Internal Attributes 

DvObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Dv -objektets fullständiga namn. 

<b>DvObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Dv -objektets namn som ska visas i StoDv-
objektet. Segmenten räknas med början från signalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämpligt att ange Dv-objektets fullständiga namn på sätt som anges 
under GetAp -objektet, steg 1  4. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> StoIp
StoIp
Engelsk text<link> StoIp, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar värde i heltalsparameter ( Sto re I nteger p arameter). 

<h1>Beskrivning 

Lagrar, efter avkortning, värdet av analog storhet ( t.ex utsignal av typen 
pwr_tFloat32) i en angiven 32-, 16-, eller 8-bitars heltalsparameter i lokalt 
objekt. 

Storheten kan avse skalär eller element i 1-dimensionell vektor. 

I StoIp -symbolens högra fält visas dels sista ledet av objektets namn, dels 
parameterns namn. 

<h1>Input Attributes 

In 
Graph name -
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0.0 

Attributet anger vilket värde som ska tilldelas parametern. 

Ingången kopplas till analog storhet eller lämnas öppen. I senare fallet är värdet 
på In default 0.0 och värdet kan inte ändras i målmiljön. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Object 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger det aktuella objektets fullständiga namn. 

<b>ObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av det aktuella objektets namn som ska visas i 
StoIp-objektets symbol. Segmenten räknas med början från det aktuella 
objektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<b>Parameter 
Type: pwr_tString80
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger parameterns namn. PLC Editorn är 'case 
sensitive' vad gäller detta attribut. Avses ActualValue ska man i Attribute 
Editor skriva ActualValue och inte t.ex ACTUALVALUE. 

<h1>Tips 

Det är lämpligt att ange storheten på sätt som anges under GetAp -objektet, 
steg 1  5. 

<h1>Se även 

CStoIp.<link> CStoIp

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> StoPi
StoPi
Engelsk text<link> StoPi, "", $pwr_exe/pwrb_xtthelp.dat

Lagrar analogt värde i Co-signal ( Sto re counter i nput). 

<h1>Beskrivning 

Analogt invärde lagras, efter heltalsomvandling, i RawValue i angivet lokalt 
Co-objekt. 

Co-objektets fullständiga namn anges; dess sista namnled visas i StoPi -
symbolens högra del. 

NB! Detta objekt används i samband med I/O-simulering. IOSimulFlag ska 
sättas TRUE och IOReadWriteFlag FALSE i $Node objektet, dvs noden får 
inte använda någon fysisk I/O-hårdvara sammtidigt med detta objekt. 

<h1>Input Attributes 

<b>In 
Graph name -
Type: pwr_tFloat32
Flags: NoRtdb, OpenCompileFixParam
Default value: 0 

Ingången kopplas till analog signal eller lämnas öppen. I senare fallet kommer 
värdet av In att vara föremål för lagring. 

<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>CoObject 
Type: pwr_tObjid
Flags: NoRtdb, CompileFixParam 

Används av PLC Editorn. Anger Co -objektets fullständiga namn. 

<b>CoObjectSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger hur många segment av Co -objektets namn som ska visas i StoPi- 
objektets symbol. Segmenten räknas med början från signalobjektets sista 
namnled. 

0 och 1 ger båda sista namnledet. 

<b>SigChanCon 
Type: pwr_tObjid
Flags: Intern 

Används av PLC Editorn. 

<b>ShowSigChanCon 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om namnet på det till Co -objektet kopplade kanalobjektet ska visas i 
StoPi-objektets symbol eller ej. FALSE betyder ingen visning och TRUE 
visning. 

SigChanConSegments anger antalet namnled som ska visas. 

<b>SigChanConSegments 
Type: pwr_tInt32
Flags: DevOnly
Default 2 

Anger, då ShowSigChanCon = TRUE, hur många segment av det till 
signalobjektet kopplade kanalobjektets namn som ska visas i StoPi-objektets 
symbol. Segmenten räknas med början från kanalobjektets sista namnled. 

0 och 1 ger båda sista namnledet. 

<h1>Tips 

Det är lämligt att ange Co-objektets fullständiga namn på sätt som anges under 
GetAp -objektet, steg 1  4. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> SubStep
SubStep
Engelsk text<link> SubStep, "", $pwr_exe/pwrb_xtthelp.dat

Sekvenssteg för underliggande delsekvenskedja. 

<h1>Beskrivning 

Ur funktionssynpunkt kan SubStep -objektet uppfattas som en substitution av 
en delsekvenskedja.

Delsekvenskedjan editeras i ett till SubStep -objektet underliggande fönster. 
Objekten i fönstret får ett WindowSubStep objekt som förälderobjekt. Ett 
sådant fönster,  Inleds med ett SsBegin -objekt, som blir aktivt när SubStep -
objektet blir aktivt. Avslutas med ett SsEnd -objekt, som blir aktivt då 
delsekvenskedjan och därmed SubStep -objektet exekverat klart. Till den högra 
utgången kan samtidigt kopplas dels en eller flera Order -objekt, dels en eller 
flera Sto xx, Set xx eller Res xx objekt. Utgången kan också lämnas öppen eller 
användas som generell binär signal.

Aktiv status kan inte överföras från SubStep -objektet förrän SsEnd -objektet i 
den underliggande delsekvenskedjan signalera klart och villkoret efter SubStep 
-objektet samtidigt är uppfyllt. När så är fallet överförs aktiv status från 
SubStep -objektet till nästa steg i kedjan. 

NB! Skillnaden i SubStep-symbolens utseende då ett underfönster finns och 
när det inte finns är mindre framträdande. Däremot är konsekvenserna dessto 
större. Ett SubStep-objekt utan underliggande fönster resulterar i att 
exekveringen fastnar i SubStep-objektet! 

En förutsättning för strukturerad konstruktion är möjligheten att konstruera i 
nivåer. Ett SubStep -objekt kan i sin delsekvenskedja innehålla SubStep - 
objekt, som i sina delsekvenskedjor har andra SubStep -objekt osv. 

Attributes 

<b>StatusIn 
Type: pwr_tBoolean
Flags: DevOnly 

<b>StatusOut 
Type: pwr_tBoolean
Flags: DevOnly 

Outputs Attributes 

<b>Order[0] 
Type: pwr_tBoolean
Flags: Output
Default value: FALSE 

Anger stegets tillstånd. FALSE betyder inaktivt steg och TRUE innebär att 
steget är aktivt. Värdet kan plockas upp i annat program med hjälp av GetDp 
objekt.
 
NB! I objektets strukturbeskrivning betecknas attributet 'Status[0]'! Därför 
måste attributet refereras som 'Status[0]'. 

<b>Order[1] 
Type: pwr_tBoolean
Flags: Output 

Anger det underliggande fönstrets tillstånd. FALSE betyder att exekveringen 
av underfönstret inte är avslutad och TRUE innebär att underfönstrets 
exekvering är klar. 

NB! I objektets strukturbeskrivning betecknas attributet 'Status[1]'! Därför 
måste attributet refereras som 'Status[1]'. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Sum
Sum
Engelsk text<link> Sum, "", $pwr_exe/pwrb_xtthelp.dat

Summerare. 

<h1>Beskrivning 

Viktad summering av upptill 8 signaler. De valda ingångarna ska väljas 
konsekutivt med början utifrån In1 , som är den övre ingången. 

Varje ingång har sin egen viktfaktor; FVect 0 , FVect 1 etc. 

Ett konstant värde, Const , kan adderas till summan. 

<h1>Input Attributes 

<b>In1, In2, ...,In8 
Graph name: IN1, IN2, ..., IN8
Type: pwr_tFloat32
Flags: NoRtdb, OpenNoFunction 

Värde insignal 1, insignal 2, ..., insignal 8. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output 

ActVal = Const +  

<h1>Internal Attributes 

<b>Const 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Konstant värde som adderas till summan.

<b>FVect[8] 
Type: pwr_tFloat32
Flags: Param
Default value: 1.0, 1.0, ..., 1.0 

Viktfaktor per signal. 

ActVal = Const + ( Fvect {0} · In1 + ... + Fvect {7} · In8 ) 

<b>AccConst 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
Const . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinConst, MaxConst 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Anger minsta och största tillåtna värde vid operatörsändring av Const . 

<b>AccFact[8] 
Type: pwr_tInt32
Flags: Param
Default value: 0, 0, ..., 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
FVect []. Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>MinFact[8], MaxFact[8] 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0, 0.0, ... 0.0 resp. 0.0, 0.0, ... 0.0 

Anger minsta och största tillåtna värde vid operatörsändring av viktfaktorerna 
Fvect []. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> $System
$System
Engelsk text<link> $System, "", $pwr_exe/pwrb_xtthelp.dat

PROVIEW-systemets nodgemensamma objekt. 

<h1>Beskrivning 

Objektet placeras i utvecklingsmiljön på den högsta nivån i 'Node 
Configuration'. Då 'Create Load System Meta Objects' görs skapas filen 
pwrp_load:LD_RCO_< RcoVersion >.dat. Det är denna fil som bland annat 
innehåller $System -objektet.
SystemName används för att identifiera ett givet PROVIEW-system bland 
andra PROVIEW-system. 

<h1>Internal Attributes 

<b>Description 
Type: pwr_tString80
Flags: Param 

Fri text för att beskriva objektets användning. 

<b>SystemName 
Type: pwr_tString8
Flags: 

Anger PROVIEW-systemets namn eller beteckning. Max. 7 ASCII-tecken.
SystemName används i ladd-datafiler och i utvecklingsmiljön i samband med 
behörigheter. 

<b>RsmoVersion 
Type: pwr_tProjVersion
Flags: RunTimeOnly, Intern 

RsmoVersion ( R untime S ystem M eta O bjects) mottager ett värde som anger 
vilken pwrp_load:LD_RSMO_< RsmoVersion >.dat fil som laddats. 

<b>RsmoCreTime 
Type: pwr_tTime
Flags: RunTimeOnly, Intern 

Mottager tidpunkten för när senast laddade pwrp_load:LD_RSMO_< 
RsmoVersion >.dat fil skapades. 

<b>RpmoVersion 
Type: pwr_tProjVersion
Flags: RunTimeOnly, Intern 

RpmoVersion ( R untime P roject M eta O bjects) mottager ett värde som anger 
vilken pwrp_load:LD_RPMO_< RpmoVersion >.dat som laddats. 

<b>RpmoCreTime 
Type: pwr_tTime
Flags: RunTimeOnly, Intern 

Mottager tidpunkten för när senast laddade pwrp_load:LD_RPMO_< 
RpmoVersion >.dat fil skapades. 

<b>RcoVersion 
Type: pwr_tProjVersion
Flags: RunTimeOnly, Intern 

RcoVersion ( R untime C ommon O bjects) mottager ett värde som anger 
vilken pwrp_load:LD_RCO_< RcoVersion >.dat som laddats. 

<b>RcoCreTime 
Type: pwr_tTime
Flags: RunTimeOnly, Intern 

Mottager tidpunkten för när senast laddade pwrp_load:LD_RCO_< 
RcoVersion >.dat fil skapades. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Table
Table
Engelsk text<link> Table, "", $pwr_exe/pwrb_xtthelp.dat

Ett Curve -objekt interpolerar i en tabell som definierats i Table -objekt. 

<h1>Beskrivning 

Tabellen består av minst 2 och högst 50 talpar (x,y). 

X-värdena ska vara ordnade i växande storleksordning; dock kan två 
konsekutiva x-värden vara lika som i fallet med stegfunktion. 

Flera Curve -objekt kan kopplas till ett och samma Table -objekt. 

Objektet innehåller endast data utan exekverbar kod. 

<h1>Output Attributes 

<b>Tab 
Graph name: TAB
Type: pwr_tFloat32[101]
Flags: Param 

Utgången måste ansluts till Curve -objekt. 

<h1>Internal Attributes 

<b>TabVect[0] 
Type: pwr_tFloat32
Flags: Param
Default value: 2 

Anger aktuellt antal talpar i tabellen. 

<b>TabVect[1], TabVect[2] 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0, 0.0 

Tabellens 1:a talpar {x1, y1} 

<b>TabVect[3], TabVect[4] 
Type: pwr_tFloat32
Flags: Param
Default value: 100.0, 100.0 

Tabellens 2:a talpar {x2, y2} 

.... 
<b>TabVect[99], TabVect[100] 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0, 0.0 

Tabellens 50:e talpar {x50, y50} 

<h1>Se även 

Curve<link> Curve

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Timer
Timer
Engelsk text<link> Timer, "", $pwr_exe/pwrb_xtthelp.dat

Fördröjt frånslag 

<h1>Beskrivning 

Då insignalen blir: 

TRUE blir utgången också TRUE. 
FALSE startas timern. Efter tiden TimerTime blir utgången också FALSE. 
 
Jämför funktionen hos Wait -objekt. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Insignal. 

<h1>Output Attributes 

<b>Status 
Graph name: sts
Type: pwr_tBoolean
Flags: Output 

Anger objektets aktuella tillsånd. 

<h1>Internal Attributes 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Anger, i sekunder, frånslagsfördröjningen. 

TimerTime = PLC programmets cykeltid. 

ShowTimerTime 

<b>Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om TimerTime ska visas i Timer-objektets symbol eller ej. FALSE 
betyder ingen visning och TRUE visning. Enheten är sekunder. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts då laddfilen skapas. Används i målmiljön. 

<b>TimerAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
TimerTime . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>TimerMin, TimerMax 
Type: pwr_tFloat32
Flags: Param
Default value: 

Anger minsta och största tillåtna värde vid operatörsändring av TimerTime . 

TimerMin = TimerTime = TimerMax 

<b>StatusOld 
Type: pwr_tBoolean
Flags: Intern 

Senaste In - värde . 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller, om sådant objekt inte används, på 
TimerDoDum . Efter tiden TimerTime nollställs den av TimerDo angivna 
signalen. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Timint
Timint
Engelsk text<link> Timint, "", $pwr_exe/pwrb_xtthelp.dat

Tidsintegrator ( Tim e int egrator). 

<h1>Beskrivning 

Då en signal enligt kurvan f(t) nedan läggs på 'IN'-ingången till ett Timint -
objekt kommer värdet på utången att variera med storlek och varaktighet på 
insignalen. Kurva f(t) approximeras av ett stort antal rektangelformade ytor, 
var och en med bredden ScanTime och höjden In t Utsignalen blir proportionell 
med tidsintegralen av insignalen. 

ActVal t = ActVal t-1 +  · In t · ScanTime 

där  är integreringstiden. 

Med 'z'-ingången kan integratorn nollställas. 

 
<h1>Input Attributes 

<b>In 
Graph name: IN
Type: pwr_tFloat32
Flags: InRtdb, OpenParam
Default value: 0.0 

Signal som ska integreras. Dess dimension antages var någonting per tidsenhet. 

<b>Clear 
Graph name: z
Type: pwr_tBoolean
Flags: InRtdb, OpenNoFunction, NoInvert 

En positiv flank på signalen betyder att OldAcc sätts lika med ActVal t-1 
varefter ActVal t-1 = 0. 

<h1>Output Attributes 

<b>ActVal 
Graph name: VAL
Type: pwr_tFloat32
Flags: Output, Access 

Utsignal.
ActVal t = ActVal t-1 +  · In t · ScanTime 

<h1>Internal Attributes 
<b>TimFact 
Type: pwr_tFloat32
Flags: Param
Default value: 1.0 

Tidsfaktor uttryckt i sekunder / tidsenhet.
 är deriveringstiden, dvs den tid det tar för utsignalen att stiga från
0 till In , om In är ett konstant värde. 

<b>ScanTime 
Type: pwr_tFloat32
Flags: CompileSetParam 

Programcykeltid i sekunder, lagras automatiskt vid kompilering. 

<b>AccVal 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
ActVal . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>OldAcc 
Type: pwr_tFloat32
Flags: Intern 

Anger värdet på utsignalen, ActVal , då integratorn senast nollställdes. 

<h1>Exempel 

Antag att In är i liter/min. Om ActVal ska vara i liter måste TimFact = 60 
sekunder /min. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Trans
Trans
Engelsk text<link> Trans, "", $pwr_exe/pwrb_xtthelp.dat

Övergångsvillkor. 

<h1>Beskrivning 

Till symbolens vertikala linje ansluts stegobjekt. Då aktiv status överförs sker 
det alltid från steg som föregår Trans -objektet till steg som följer på Trans -
objektet. 

Det finns två typer av övergångsvillkor: 

Cond , som är det ordinarie övergångsvillkoret, definieras på ett av följande 
sätt:
- ett underliggande villkorsfönster . Objekten i fönstret får ett Window
Cond objekt som förälderobjekt. För att lagra villkors-
fönstrets tillstånd i Trans -objektet används SetCond -objekt.
- direkt i ett kombinatoriskt nät anslutet till symbolens vänstra horisontella arm 
- villkoret anges vid konfigureringen som ständigt TRUE ( Cond = 1 )
eller ständigt FALSE ( Cond = 0 ). 
OpCond avser ett manuellt villkor 
Om det är driftvillkoret Cond eller det manuella villkoret OpCond som ska 
beaktas styrs av Man -flaggan.

Om aktuellt övergångsvillkor är uppfyllt och samtliga ovanförliggande till 
Trans -objektet direkt anslutna steg (dvs. objekt av typen Step , InitStep , 
SubStep m.fl. ) är aktiva, överförs aktiv status till samtliga efterföljande steg 
direkt anslutna till Trans -objektetets utgång. Därvid kommer ovanförliggande 
steg att bli inaktiva.

Genom att sätta Man = 1 kan operatören manuellt styra med Trans -objektets 
manuella övergångsvillkor Opcond . Därvid exekveras fortfarande 
villkorsfönstret, men det är det manuella övergångsvillkoret som gäller. Sedan 
en manuellt initierad övergång skett ser PROVIEW till att OpCond -flaggan tas 
ned. På så sätt tvingas operatören sätta flaggan varje gång en övergång ska 
triggas. Man -flaggan förblir satt tills operatören tar ned den. 

Vid reset av sekvenskedjan ( se under InitStep), nollställs varken Man - eller 
OpCond -flaggan 

<h1>Input Attributes 

<b>InStep 
Type: pwr_tBoolean
Flags: DevOnly 

<b>Cond 
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 
Default value: TRUE 

Anger det ordinarie övergångsvillkorets tillstånd. FALSE betyder att villkoret 
inte är uppfyllt och TRUE att det är uppfyllt. Flaggan sätts på ett av följande 
sätt: 

av SetCond-objekt i ett underliggande villkorsfönster 
genom direkt anslutning från grindnät som realiserar villkoret 
permanenti samband med konfigureringen 
<h1>Output Attributes 

<b>OutStep 
Type: pwr_tBoolean
Flags: DevOnly 

<h1>Internal Attributes 

<b>ActOld 
Type: pwr_tBoolean
Flags: Intern 

Sparar status om föregående steg. Används för att begränsa antalet övergångar 
per sekvenskedja och exekvering till maximalt en. 

<b>Man 
Type: pwr_tBoolean
Flags: Param, Access
Default value: FALSE 

Anger om det manuella övergångsvillkoret gäller eller ej. FALSE betyder att 
Cond beaktas och TRUE att det manuella övergångsvillkoret OpCond gäller. 

<b>OpCond 
Type: pwr_tBoolean
Flags: Param 

Anger det manuella övergångsvillkorets tillstånd. övergång kan ske när 
OpCond och Man båda är TRUE. OpCond -flaggan tas ned av PROVIEW efter 
en övergång. 

<b>Acc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att initiera 
övergången manuellt. Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> User
User
Engelsk text<link> User, "", $pwr_exe/pwrb_xtthelp.dat

Konfigurerar operatörsstations användarkategori. 

<h1>Beskrivning 

Konfigurerar en användarkategori under ett OpPlace -objekt. User -objektet 
och OpPlace -objektet bildar ett par om deras respektive OpNumber har samma 
värde. 

<h1>Internal Attributes 

<b>UserName 
Type: pwr_tString16
Flags: 

Attributet används som signatur för att ange vem som kvitterat 
larmmeddelande respektive blockerat/deblockerat alarmnivå. 

<b>PassWord 
Type: pwr_tString16
Flags: 

Sätts idag ovillkorligen till '*'. 

<b>OpNumber 
Type: pwr_tInt32
Flags:
Default value: 0 

De logiska operatörsstationerna i ett PROVIEW-system numreras med hjälp av 
OpPlace -objektets OpNumber.

Genom att här ange OpNumber för aktuellt OpPlace -objekt knyts User - 
objektet till ett bestämt OpPlace -objekt. 

<b>MaxNoOfEvents 
Type: pwr_tUInt16
Flags:
Default value: 0 

Anger max antal samtidiga händelser i användarens händelselista, dvs 
händelsehorisonten. Då antalet händelser överstiger MaxNoOfEvents stryks de 
äldsta ur listan.
Till denna lista skickas händelser från respektive nods meddelandehanterare 
(=mh). I varje nod har meddelandehanteraren sin egen händelsehorisont (också 
betecknad MaxNoOfEvents ) definierad i ett MessageHandler -objekt. I princip 
bör User -objektets händelshorisont väljas som S MaxNoOfEvents , summerat 
över MaxNoOfEvents -attributen i PROVIEW-systemets alla MessageHandler 
-objekt eller gör det enkelt och sätt attributet till t.ex 200. 

<b>SelectList[0], SelectList[1], ...., SelectList[19] 
Type: pwr_tString80
Flags: 

Meddelanden initierade av ASup - eller DSup -objekt får samma identitet som 
övervakat objekt. För meddelanden genererade i tillämpningsprogram av 
mh_ApplMessage ( se PROVIEW/R Programmer's Reference Manual ) 
bestämms identiteten av anropsparametern EventName .
I SelectList anges från vilka anläggningshierarkier användarkategorin ska 
erhålla meddelanden. Upp till 20 hierarkier kan anges.
Önskas meddelanden från en nods Watchdog -objekt anges nodens namn här. 

NB! Lämnas SelectList blank skickas 'inga' meddelanden till 'användaren'. 

<b>FastAvail[0], FastAvail[1], ..., FastAvail[14] 
Type: pwr_tObjid
Flags: 

Varje attribut anger det fullständiga namnet på ett Form - eller Graph -objekt 
som ska kunna startas med hjälp av funktionsknapp i 'Operator Window'. 
Namnen fylls i konsekutivt med början på FastAvail[0] , som representerar den 
första funktionsknappen i första raden. 

<b>NoFastAvail 
Type: pwr_tInt32
Flags:
Default value: 0 

Anger antalet definierade FastAvail []-attribut och därmed antalet synliga 
bildknappar i 'Operator Window'. Attributet ska vara i området 0 - 15. 

NavigatorWritePriv 
Type: pwr_tBoolean
Flags: InitSetParam
Default value: FALSE 

Från Runtime Navigator kan operatören starta Attribute Editor för olika objekt. 
NavigatorWritePriv avser operatörens behörighet att skriva i förekommande 
attribut från Attribute Editor. FALSE betyder att operatören endast kan titta på 
attributen och TRUE innebär dessutom skrivrättighet. 

NoOfAlarms, MaxNoOfAlarms, NoOfEvents 
Type: pwr_tUInt16, pwr_tUInt16, pwr_tUInt16 

Ej använda. 

<b>PrivObjList[ ] 
Type: pwr_tString80 

Ej använd. 

<b>PrivList[ ] , NoPriv 
Ej använda. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Valve
Valve
Engelsk text<link> Valve, "", $pwr_exe/pwrb_xtthelp.dat

Styrning, typ magnetventil, med två lägesverkan och övervakning av gångtid. 
Objektet realiserar till-från styrning. 

<h1>Beskrivning 

Driftordern OrderOpen är antingen TRUE eller FALSE. Orderna betecknas här 
OPEN och CLOSE med den generella innebörden till/från. 

Med hjälp av gångtidsövervakningen är det möjligt att upptäcka om 
reglerelementets förflyttning hindras; t.ex vid övergången fullt stängt --> fullt 
öppet 

Objektet har tre driftlägen, LOCAL / MANUAL / AUTO, som väljs med hjälp 
av Local och ManMode enligt följande: 

 
LOCAL Används då manövreringen sker från yttre pulpet, manövrerskåp e.dyl. 

Enbart säkerhetsförreglingen, SafeOpen och SafeClose, beaktas. 
LocalOpen har återfjädrande tryckknappsfunktioner för OPEN. LocalOpen 
påverkad medför att OrderOpen sätts TRUE varefter LocalOpen tas ned. 
LocalClose har återfjädrande tryckknappsfunktioner för OPEN. LocalClose 
påverkad medför att OrderOpen sätts TRUE varefter LocalClose tas ned 
Vid övergången, 
- LOCAL --> AUTO bestäms driftordern av AutoOpen.

- LOCAL --> MANUAL påverkas inte driftordern OrderOpen.


 
Både drifts- och säkerhetsförreglingen beaktas. 
Larmen är indikeringar som inte påverkar styrningen med mindre än att de 
används som förreglingssignal. 
I läge 
- MANUAL hanteras OPEN/CLOSE order av operatören
med hjälp av direktiven ManOpen och ManClose.

- AUTO begärs OPEN så länge AutoOpen är TRUE, CLOSE
begärs då AutoOpen är FALSE, dvs det är nivåerna -- inte
flankerna som styr.

Vid övergången, 
- AUTO -> MANUAL, påverkas inte driftordern OrderOpen.

- MANUAL -> AUTO gäller att om driftordern var OPEN i läge MANUAL 
och AutoOpen är TRUE kommer driftordern att kvarstå efter övergången, 
annars inte.

 

 

Styrdirektiven har olika prioritet. Skulle en konflikt uppstå genom att flera 
sinsemellan motstridiga direktiv samtidigt är förhanden vinner det som har 
högst prioritet.

 
<h1>Input Attributes 

<b>AutoOpen 
Graph name: aop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO, om OPEN-order ska ges eller ej. FALSE betyder 
CLOSE- order och TRUE en OPEN-order. 

<b>EndOpen 
Graph name: eop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om ändgränsläget för OPEN-manöver är påverkat eller ej. FALSE 
betyder ingen påverkan och TRUE innebär att ändgränsläget är påverkat. 

Attributet används av Alarm1 och Alarm3 . 

<b>EndClosed 
Graph name: ecl
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om ändgränsläget för CLOSE-manöver är påverkat eller ej. FALSE 
betyder ingen påverkan och TRUE innebär att ändgränsläget är påverkat. 

Attributet används av Alarm1 och Alarm3 . 

<b>Local 
Graph name: loc
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger om läge LOCAL valts eller ej. FALSE betyder att 'NOT LOCAL' valts 
(och ManMode om det är MANUAL eller AUTO som gäller). TRUE innebär 
att LOCAL valts. 

<b>LocalOpen 
Graph name: lop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge LOCAL, om OPEN-order ska ges eller ej. TRUE betyder OPEN- 
order och den kommer att kvarstå tills nästa CLOSE-order ges. FALSE 
representerar ingen aktivitet. 

<b>LocalClose 
Graph name: lcl
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge LOCAL, om CLOSE-order ska ges eller ej. TRUE betyder 
CLOSE- order och den kommer att kvarstå tills nästa OPEN-order ges. FALSE 
representerar ingen aktivitet. 

<b>SafeOpen 
Graph name: sop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger säkerhetsförreglingens tillstånd visavi OPEN-order. Förreglingen gäller 
oberoende av driftläge. 

FALSE betyder att förreglingen är inaktiv. TRUE innebär en ovillkorlig 
OPEN-order såvida inte också SafeClose är TRUE. Om både SafeClose och 
SafeOpen är TRUE vinner SafeClose i kraft av sin högre prioritet; se ovan 

<b>SafeClose 
Graph name: scl
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger säkerhetsförreglingens tillstånd visavi CLOSE-order. Förreglingen 
gäller oberoende av driftläge. 

FALSE betyder att förreglingen är inaktiv. TRUE innebär en ovillkorlig 
CLOSE-order. 

<b>ProdOpen 
Graph name: pop
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO och MANUAL, driftförreglingens tillstånd visavi OPEN- 
order.
FALSE betyder att förreglingen är inaktiv. TRUE innebär en OPEN-order 
såvida inte någon av SafeClose , ProdClose eller Local är TRUE. 

<b>ProdClose 
Graph name: pcl
Type: pwr_tBoolean
Flags: InRtdb, OpenParam, NoInvert 

Anger, i läge AUTO och MANUAL, driftförreglingens tillstånd visavi 
CLOSE-order.
FALSE betyder att förreglingen är inaktiv. TRUE innebär en CLOSE-order 
såvida inte någon av SafeOpen eller Local är TRUE. 

<h1>Output Attributes 

<b>ManMode 
Graph name: man
Type: pwr_tBoolean
Flags: Param
Default: FALSE 

Anger driftläge ( MANUAL eller AUTO) när LOCAL är FALSE. Attributet 
används som en traditionell parameter, dvs man kan skriva/läsa i den från olika 
program.Tanken med att placera attributet som ett utgångsattribut är att 
attributet då enklare kan användas i den grafiska konfigurationen. FALSE 
betyder att AUTO gäller och TRUE att driftläget är MANUAL. 

<b>OrderOpen 
Graph name: oop
Type: pwr_tBoolean
Flags: Output 

Driftsorder. FALSE tolkas här som CLOSE-order och TRUE som en OPEN-
order. 

<b>IndOpen 
Graph name: iop
Type: pwr_tBoolean
Flags: Output 

Indikerar, i läge AUTO och MANUAL, huruvida ändgränsläget för OPENED- 
manöver är påverkat och OPEN-ordern kvarstår eller ej. 

Attributet är TRUE om det finns en OPEN-order, ändgränsläget EndOpen är 
påverkat och EndClosed = Local = FALSE , annars är attributet FALSE. 

<b>IndClose 
Graph name: icl
Type: pwr_tBoolean
Flags: Output 

Indikerar, i läge AUTO och MANUAL, huruvida ändgränsläget för CLOSED- 
manöver är påverkat och CLOSE-ordern kvarstår eller ej. 

Attributet är TRUE om det finns en CLOSE-order, ändgränsläget EndClosed är 
påverkat och EndOpen = Local = FALSE , annars är attributet FALSE. 

<b>Alarm1 
Graph name: al1
Type: pwr_tBoolean
Flags: Output 

Övervakning av gångtid vid OPEN-manöver.
Anger om OrderOpen varit TRUE under en tid längre än TimerTime utan att 
ändgränsläget för 'fullt öppet' ( attributet EndOpen ) påverkats. 

FALSE betyder inget larm; TRUE innebär att EndOpen inte påverkats inom 
tidsgränsen TimerTim . Driftordern, OrderOpen , påverkas inte av larmet. 
Larmet kvarstår tills att EndOpen blir TRUE eller tills att en CLOSE-order ges. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlång gångtid vid OPEN av xxx ' i övervakningsobjektets DetectText . 

<b>Alarm2 
Graph name: al2
Type: pwr_tBoolean
Flags: Output 

Övervakning av gångtid vid CLOSE-manöver. 

Anger om OrderOpen varit FALSE under en tid längre än TimerTime utan att 
ändgränsläget för 'fullt stängt' ( attributet EndClosed ) påverkats. 

FALSE betyder inget larm; TRUE innebär att EndClosed inte påverkats inom 
tidsgränsen TimerTim . Driftordern, OrderOpen , påverkas inte av larmet. 
Larmet kvarstår tills att EndClosed blir TRUE eller tills att en OPEN-order ges. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlång gångtid vid CLOSE av xxx ' i övervakningsobjektets DetectText . 

<b>Alarm3 
Graph name: al3
Type: pwr_tBoolean
Flags: Output 

Övervakning av ändgränsläget för OPEN-manöver. 

Attributet signalerar genom att bli TRUE, om EndOpen indikeringen förloras 
trots en kvarstående OPEN-order eller om båda gränslägesindikeringarna ( 
EndOpen , EndClosed ) samtidigt är påverkade. Driftordern, OrderOpen , 
påverkas inte av larmet. Larmet kvarstår så länge larmläget existerar. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlorat 'fullt öppen'-gränslägesindikering på xxx trots kvarstående OPEN ' i 
övervakningsobjektets DetectText . 

<b>Alarm4 
Graph name: al4
Type: pwr_tBoolean
Flags: Output 

Övervakning av ändgränsläget för CLOSE-manöver. 

Attributet signalerar genom att bli TRUE, om EndClosed indikeringen förloras 
trots en kvarstående CLOSE-order eller om båda gränslägesindikeringarna ( 
EndOpen , EndClosed ) samtidigt är påverkade. Driftordern, OrderOpen , 
påverkas inte av larmet. Larmet kvarstår så länge larmläget existerar. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange t.ex 
' Förlorat 'fullt stängt'-gränslägesindikering på xxx trots kvarstående OPEN ' i 
övervakningsobjektets DetectText . 

Om EndClose = EndOpen = TRUE är både Alarm3 och Alarm4 aktiva. 

<b>SumAlarm 
Graph name: als
Type: pwr_tBoolean
Flags: Output 

Summalarm. 

Anger om något av objktets interna larm är aktivt eller ej. FALSE betyder att 
inget aktivt internlarm finns; TRUE innebär att minst en av utgångarna al1 , al2 
, al3 eller al4 är TRUE. Driftordern påverkas ej av larmet. 

Koppla ett DSup objekt till utgången om meddelande ska skickas och ange 
DetectText . 

<h1>Internal Attributes 

<b>ManOpen 
Type: pwr_tBoolean
Flags: Operator 

Anger, i läge MANUAL, ett OPEN-direktiv. FALSE betyder ingen aktivitet; 
TRUE innebär att OPEN-order ska ges. Sedan den satta flaggan noterats ser 
PROVIEW till att den tas ned. 

<b>ManClose 
Type: pwr_tBoolean
Flags: Operator 

Anger, i läge MANUAL, ett CLOSE-direktiv. FALSE betyder ingen aktivitet; 
TRUE innebär att CLOSE-order ska ges. Sedan den satta flaggan noterats 
ombesörjer PROVIEW att den tas ned. 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Param
Default value: 10.0 

Den, i sekunder, längsta tillåtna gångtiden. Om en driftorder (OPEN eller 
CLOSE) gällt under en tid längre än TimerTime utan att motsvarande 
gränslägesindikering blivit aktiv sätts Alarm1 eller Alarm2 . 

TimerTime = PLC-jobbets bascykeltid. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts i samband med 'Create Load File' för användning i 
målmiljön. 

<b>ManAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att växla mellan 
driftlägena MANUAL / AUTO. Följande behörigheter är möjliga: 

0 -- Ingen växling tillåten
? 0 -- Växling tillåten. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer. 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller om sådant inte används, på TimerDoDum 
. Efter tiden TimerTime tas den signal som utpekas av TimerDo ned. 

<b>Status 
Type: pwr_tInt32
Flags: Intern 

Följande status värden är möjliga: 

1 eller -1 -- Väntar på OPEN eller CLOSE indikering
2 eller -2 -- OPENING eller CLOSING
3 eller -3 -- OPEN eller CLOSED 

<h1>Se även 

MValve<link> MValve

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Wait
Wait
Engelsk text<link> Wait, "", $pwr_exe/pwrb_xtthelp.dat

Fördröjt tillslag. 

<h1>Beskrivning 

Länkas in i timerkön vid positiv flank på insignalen. 

Då fördröjningen TimerTime löpt ut, och om insignalen fortfarande är TRUE 
blir utgången TRUE. Utgången blir FALSE då insignalen blir FALSE. 

 
Jämför med Waith.

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Signal som ska fördröjas. 

<h1>Output Attributes 

<b>Status 
Graph name: sts
Type: pwr_tBoolean
Flags: Output 

Fördröjd signal. S. k. timerstyrning används. 

<h1>Internal Attributes 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Anger, i sekunder, tillslagsfördröjningen. 

TimerTime = PLC programmets cykeltid. 

<b>ShowTimerTime 
Type: pwr_tBoolean
Flags: DevOnly
Default TRUE 

Anger om TimerTime ska visas i Wait-objektets symbol eller ej. FALSE 
betyder ingen visning och TRUE visning. Enheten är sekunder. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts då laddfilen skapas. Används i målmiljön. 

<b>TimerAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
TimerTime . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

TimerMin, TimerMax 
Type: pwr_tFloat32
Flags: Param
Default value: {0.0 , 0.0} 

Anger minsta och största tillåtna värde vid operatörsändring av TimerTime . 

TimerMin = TimerTime = TimerMax 

<b>StatusOld 
Type: pwr_tBoolean
Flags: Intern 

Senaste In -värde. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller, om sådant objekt inte används, på 
TimerDoDum . Efter tiden TimerTime nollställs den av TimerDo angivna 
signalen. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

 

 
</topic> **********
<topic> Waith
Waith
Engelsk text<link> Waith, "", $pwr_exe/pwrb_xtthelp.dat

Fördröjt tillslag med håll-funktion. 

<h1>Beskrivning 

Fördröjningen, TimerTime , räknas från positiv flank på 'in'-ingången och mäts 
med räknare.
Fördröjningen kan utsträckas genom att tidnedräkningen stoppas då h(o)ld- 
signalen är TRUE . Om 'in'-ingången är TRUE nollställs räknaren oberoende 
av hld-ingången.
Då tiden gått ut, och om insignalen fortfarande är TRUE blir utgången TRUE. 
Utgången blir FALSE då insignalen blir FALSE. 

<h1>Input Attributes 

<b>In 
Graph name: in
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Signal som ska fördröjas. 

<b>hld 
Graph name: hld
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

Anger om håll-funktionen ska användas eller ej. FALSE betyder att tidned 
räkning ska göras och TRUE att tidnedräkningen ska stoppas; dvs pausläge. 

<h1>Output Attributes 

<b>Status 
Graph name: sts
Type: pwr_tBoolean
Flags: Output 

Fördröjd signal. S. k. timerstyrning används. 

<h1>Internal Attributes 

<b>TimerTime 
Type: pwr_tFloat32
Flags: Param
Default value: 0.0 

Anger, i sekunder, tillslagsfördröjningen. 

TimerTime = PLC programmets cykeltid. 

<b>TimerDoDum 
Type: pwr_tBoolean
Flags: Intern 

Dummy. Om TimerDoDum inte pekar på ett Do eller Dv objekt pekar det hit. 

<b>TimerObjid 
Type: pwr_tObjid
Flags: Intern 

Detta objekts identitet. Sätts då laddfilen skapas. Används i målmiljön. 

<b>TimerAcc 
Type: pwr_tInt32
Flags: Param
Default value: 0 

Ej implementerad funktion. Anger operatörens behörighet att ändra värde på 
TimerTime . Följande behörigheter är möjliga: 

0 -- Ingen ändring tillåten
? 0 -- ändring tillåten. 

<b>TimerMin; TimerMax 
Type: pwr_tFloat32
Flags: ParamDefault
value: {0.0 , 0.0} 

Anger minsta och största tillåtna värde vid operatörsändring av TimerTime . 

TimerMin = TimerTime = TimerMax 

<b>StatusOld 
Type: pwr_tBoolean
Flags: Intern 

Senaste In -värde. 

<b>TimerFlag 
Type: pwr_tBoolean
Flags: Intern 

Markerar aktiv timer 

<b>*TimerNext 
Type: pwr_tBoolean
Flags: Intern 

Pekar på nästa element i timer kön. 

<b>TimerCount 
Type: pwr_tUInt32
Flags: Intern 

Antal återstående ticks. ( 1 tick = PLC-jobbets bascykeltid.) 

<b>*TimerDo 
Type: pwr_tBoolean
Flags: Intern 

Pekar på ett Do eller Dv objekt eller, om sådant objekt inte används, på 
TimerDoDum . Efter tiden TimerTime nollställs den av TimerDo angivna 
signalen. 

<b>CountOld 
Type: pwr_tInt32
Flags: Intern 

Räknarvärde vid blockerad nedräkning; dvs. då hld blir TRUE. 

<h1>Se även 

Wait<link> Wait

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> WindowPlc
WindowPlc
Engelsk text<link> WindowPlc, "", $pwr_exe/pwrb_xtthelp.dat

Objektet är förälderobjekt till alla objekt i underfönster både till PlcPgm och 
CSub objekt. 

<h1>Beskrivning 

Objeket konfigureras automatiskt av utvecklingsmiljön direkt under 

PlcPgm objekt då PLC Editor tar upp motsvarande 'PLC fönster' första gången. 
CSub objekt då motsvarande underfönster öppnas. 
Genom att välja 'Delete Window' i PLC Editorns rullgardinsmeny 'Files' 
raderas fönstrets alla objekt i rtdb liksom själva fönstret. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Modified 
Type: pwr_tTime
Flags: DevOnly 

Då 'Save' väljs i motsvarande fönster fylls aktuell tid i av utvecklingsmiljön. På 
så sätt kommer attributet att ange när fönstret senast sparades.
Attributet används internt av hjälpprogrammet pwr_plc i bl. a. följande fall: 

Kommandot ShowModules i 'Utilities...' används för att visa när aktuella 
fönster sparades resp. kompilerades. Därigenom är det möjligt att kontrollera 
om något fönster inte kompilerats efter det att det ändrats. 
Kommandot Compile med tillvalet Modified i 'Utilities...' används för att 
kompilera fönster som ändrats efter senaste kompileringen. 

<b>ScanOff 
Type: pwr_tBoolean
Flags: RunTimeOnly
Default value: FALSE 

Anger om PLC objekten i motsvarande fönster såväl som underliggande 
fönster ska tillåtas exekvera eller ej. FALSE innebär att de aktuella objekten 
tillåts exekvera som vanligt och TRUE att de tillsvidare inte tillåts exekvera. 

Attributet manövreras manuellt. 

<b>Trace 
Type: pwr_tBoolean
Flags: RunTimeOnly 

Används ej. 

<h1>Tips 

Möjligheten att vid modultest stänga av enskilda modulers exekvering bör 
beaktas, t.ex kan det handla om att lokalisera vilken modul som svarar för att 
en viss storhet ständigt antar visst värde. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> WindowSubStep
WindowSubStep 
Engelsk text<link> WindowSubStep, "", $pwr_exe/pwrb_xtthelp.dat

Förälderobjekt till alla objekt i SubStep objekts underfönster. 

<h1>Beskrivning 

Objeket konfigureras automatiskt av utvecklingsmiljön direkt under SubStep 
objektet då motsvarande underfönster öppnas.
Genom att välja 'Delete Window' i PLC Editorns rullgardinsmeny 'Files' 
raderas fönstrets alla objekt i rtdb liksom själva fönstret. 

<h1>Input Attributes 

- 
<h1>Output Attributes 

- 
<h1>Internal Attributes 

<b>Modified 
Type: pwr_tTime
Flags: DevOnly 

Då 'Save' väljs i motsvarande fönster fylls aktuell tid i av utvecklingsmiljön. På 
så sätt kommer attributet att ange när fönstret senast sparades.
Attributet används internt av hjälpprogrammet pwr_plc i bl. a. följande fall: 

Kommandot ShowModules i 'Utilities...' används för att visa när aktuella 
fönster sparades resp. kompilerades. Därigenom är det möjligt att kontrollera 
om något fönster inte kompilerats efter det att det ändrats. 
Kommandot Compile med tillvalet Modified i 'Utilities...' används för att 
kompilera fönster som ändrats efter senaste kompileringen. 

<b>ScanOff 
Type: pwr_tBoolean
Flags: RunTimeOnly
Default value: FALSE 

Anger om PLC objekten i motsvarande fönster såväl som underliggande 
fönster ska tillåtas exekvera eller ej. FALSE innebär att de aktuella objekten 
tillåts exekvera som vanligt och TRUE att de tillsvidare inte tillåts exekvera. 

Attributet manövreras manuellt. 

<b>Trace 
Flags: RunTimeOnly 

Används ej. 

<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper




</topic> **********
<topic> Xor
Xor
Engelsk text<link> Xor, "", $pwr_exe/pwrb_xtthelp.dat

Antingen-eller ( E x clusive Or )-grind. 

<h1>Beskrivning 

Utgången blir blir FALSE när ingångarna är lika och TRUE då ingångarna är 
olika, dvs utgången blir TRUE om och endast om antigen den ena eller den 
andra ingoången är TRUE. 

<h1>Input Attributes 

<b>In1, In2 
Graph name: in1, in2
Type: pwr_tBoolean
Flags: NoRtdb, OpenNoFunction 

De båda instorheterna. 

<h1>Output Attributes 

<b>Status 
Graph name: -
Type: pwr_tBoolean
Flags: Output 

Anger objektets aktuella tillstånd. 

</topic> **********

************************************************
*********** I/O SSAB ****************************
************************************************

<topic> Rack_SSAB
Rack__SSAB

<h1>Beskrivning

Konfigurerar ett PSS7000 rack. Rackobjektet läggs under det $Node objekt 
som PSS9000 racken är kopplad till och har kortobjekten respektive kort som 
ingår i racken som barn. Rack-objekten ska namnges R1, R2, R3... enligt 
SSAB's standard.

<h1>Attributes

<b>IOSysType
Anger typ av io-system. 1 markerar PSS700.
Default 1.

<b>Description
Beskrivning av racken (40 tecken).

<b>MaxNoOfCards
Maximalt antal kort som kan hanteras av racken.




</topic> **********
<topic> Di_DIX2
Di_DIX2

<h1>Beskrivning

Konfigurering av ett PSS9000 digitalt ingångskort. Di korten ska namnges 
DIxx där xx anger kortplatsen i racken. Kortnamnet bör överensstämma med 
kortnamnet i ebuild-filen.


<h1>Attributes

<b>IOSysType
Används ej längre.

<b>Description
Beskrivning av kortet (40 tecken).

<b>DevName
Namn på kortet. 
I ELN-system måste namnet överensstämma med namnet i ebuild-filen och bör 
överensstämma med objektsnamnet.

<b>DevNumber
Numrering av kortet som hanteras internt av io-hanteringen.

<b>ErrorCount
Felräknare som räknar upp för varje misslyckad läsning på kortet. När 
felräknaren här nått upp till ErrorSoftLimit skrivs ett meddelande ut på 
konsolloggen, när ErrorHardLimit har nåtts stoppas io-hanteringen.

<b>ErrorSoftLimit
Värde på felräknaren ErrorCount då ett meddelande på konsolloggen ska ges.

<b>ErrorHardLimit
Värde på felräknaren ErrorCount då io-hanteringen ska stoppas.

<b>ConvMask1
Konvertering mask som anger vilka kanaler som läsning ska ske på. Om bit 1 i 
masken är sann sker läsning på kanal 1 osv. Om biten för en kanal är falsk kan 
värdet på kanalen sättas från rtt el dyl. ConvMask1 hanterar kanal 1 - 16. 
ConvMask ändras enklast genom rtt-kommandot 'set converson /on' resp 'set 
conversion /off'.

<b>ConvMask2
Funktionen är samma som ConvMask1, men ConvMask2 hanterar kanal 17 - 
32.

<b>InvMask1
Inverterings mask som anger vilkan kanaler som ska inverteras vid läsningen. 
Om bit 1 i masken är sann kommer kanal 1 att inverteras osv. InvMask1 
hanterarkanal 1 - 16. InvMask ändras enklast genom rtt-kommadot 'set invert 
/on' resp 'set invert/off'.

<b>InvMask2
Funktionen är samma som InvMask1, men InvMask2 hanterar
kanal 17 - 32.

<b>MaxNoOfChannel
Maximal antal kanaler på kortet.

<b>RegAddress
Register adress.

För Lynx-system måste adressen anges. Observera att den ska matas in i 
decimal form.

För ELN-system används adressen enbart för utskrift i kanallistan. Attributet är 
decimalt men för att lättare kunna läsa signallistan brukar addressen anges 
oktalt.

Registeradressen som systemet använder ligger i ebuild-filen och måste 
överensstämma med strappningen på kortet.

Addressen för di-korten ska vara (se PSS7000-pärmen) :

176100 för di-kort 1
176104 för di-kort 2
176110 för di-kort 3
...
176174 för di-kort 16

<b>VectAddress
Vektor address. Värdet här används enbart för utskrift i kanallistan. Attributet 
är decimalt men för att lättare kunna läsa signallistan brukar addressen anges 
oktalt.

Vektoraddressen som systemet använder ligger i ebuild-filen och används 
egentligen inte men måste finna för att ELN-systemet ska kunna skapa ett 
device.

Vektor addressen kan börja på 200  ? och 8 bytes ska allokeras för varje kort 
oavsett korttyp. Serien kan alltså se ut 200, 210, 220, 230, 240, 250, 260, 270, 
300, 310 osv (serien gäller samtliga io-kort i systemet).




</topic> **********
<topic> Do_HVDO32
Do_HVDO32

<h1>Beskrivning

Konfigurering av ett PSS7000 digitalt utgångskort. Do korten ska namnges 
DOxx där xx anger kortplatsen i racken. Kortnamnet bör överensstämma med 
kortnamnet i ebuild-filen.

Om mjuk omstart av systemet ska kunna göras ska Description-Attributet för 
stall-kortet ska inledas med "STALL" (programmet ssab_exe:rs_stall.exe_eln 
som läser på stallkortet för att undvika att stall utlöses kräver detta).

<h1>Attributes

<b>IOSysType
1 anger att kortet tillhör io-systemet PSS7000.

<b>Description
Beskrivning av kortet (40 tecken). För stall-kortet ska texten inledas med 
"STALL".

<b>DevName
Namn på kortet. Namnet måste överensstämma med namnet i ebuild-filen och 
bör överensstämma med objektsnamnet.

<b>DevNumber
Numrering av kortet som hanteras internt av io-hanteringen.

<b>ErrorCount
Felräknare som räknar upp för varje misslyckad läsning på kortet. När 
felräknaren här nått upp till ErrorSoftLimit skrivs ett meddelande ut på 
konsolloggen, när ErrorHardLimit har nåtts stoppas io-hanteringen.

<b>ErrorSoftLimit
Värde på felräknaren ErrorCount då ett meddelande på konsolloggen ska ges.

<b>ErrorHardLimit
Värde på felräknaren ErrorCount då io-hanteringen ska stoppas.

<b>ConvMask1
Konvertering mask som anger vilka kanaler som läsning ska ske på. Om bit 1 i 
masken är sann sker läsning på kanal 1 osv. Om biten för en kanal är falsk kan 
värdet på kanalen sättas från rtt el dyl. ConvMask1 hanterar kanal 1 - 16. 
ConvMask ändras enklast genom rtt-kommandot 'set converson /on' resp 'set 
conversion /off'.

<b>ConvMask2
Funktionen samma som ConvMask1, men ConvMask2 hanterar kanal 17 - 32.

<b>InvMask1
Inverterings mask som anger vilkan kanaler som ska inverteras vid läsningen. 
Om bit 1 i masken är sann kommer kanal 1 att inverteras osv. InvMask1 
hanterar kanal 1 - 16. InvMask ändras enklast genom rtt-kommadot 'set invert 
/on' resp 'set invert/off'.

<b>InvMask2
Funktionen samma som InvMask1, men InvMask2 hanterar kanal 17 - 32.

<b>TestMask1
Test mask som anger att en värdet på en kanal inte hämtas från signalvärdet 
utan från värdet i attributet TestValue. Om bit 1 i masken är sann läggs 
testvärdet ut på kanal 1 osv. TestMask1 hanterar kanal 1 - 16.

<b>TestMask2
Funktionen är samma som TestMask1, men TestMask2 hanterar kanal 17 - 32.

<b>TestValue1
Bitmask som läggs ut på de kanaler som har angetts i AttributetTestMask. Ex: 
För att lägga ut värdet 1 på kanal 3 ska bit 3 i TestMask1 sättas och bit 3 i 
TestValue.

<b>TestValue2
Funktionen är samma som TestValue1, men TestValue2 hanterar kanal 17 - 32.

<b>FixedOutValue1
Bitmask som läggs ut på kanal 1 till 16 vid nödstopp av io (ErrorHardLimit har 
överskridits på något kort el dyl). Systemet bör konstrueras så att 
FixedOutValue kan vara 0 eftersom detta värde fås vid spänningbortfall.

<b>FixedOutValue2
Funktionen är samma som FixedOutValue1, men FixedOutValue2 hanterar 
kanal 17 - 32.

<b>MaxNoOfChannel
Maximal antal kanaler på kortet.

<b>RegAddress
Register address. Värdet här används enbart för utskrift i kanallistan. 
Attributetär decimalt men för att lättare kunna läsa signallistan brukar 
addressen anges oktalt.

Registeraddressen som systemet använder ligger i ebuild-filen och måste 
överensstämma med strappningen på kortet. Addressen för do-korten ska vara 
(se PSS7000-pärmen) :

176000 för do-kort 1
176004 för do-kort 2
176010 för do-kort 3
...
176074 för do-kort 16

<b>VectAddress
Vektor address. Värdet här används enbart för utskrift i kanallistan. Attributet 
är decimalt men för att lättare kunna läsa signallistan brukar addressen anges 
oktalt.

Vektoraddressen som systemet använder ligger i ebuild-filen och används 
egentligen inte men måste finna för att ELN-systemet ska kunna skapa ett 
device.

Vektor addressen kan börja på 200 ? och 8 bytes ska allokeras för varje kort 
oavsett korttyp.




</topic> **********
<topic> Ai_HVAI32
Ai_HVAI32

<h1>Beskrivning

Konfigurering av ett PSS7000 analogt ingångskort. Ai korten ska namnges 
AIxx där xx anger kortplatsen i racken. Kortnamnet bör överensstämma med 
kortnamnet i ebuild-filen.

<h1>Attributes

<b>IOSysType
1 anger att kortet tillhör io-systemet PSS7000.

<b>Description
Beskrivning av kortet (40 tecken).

<b>DevName
Namn på kortet. Namnet måste överensstämma med namnet i ebuild-filen och 
bör överensstämma med objektsnamnet.

<b>DevNumber
Numrering av kortet som hanteras internt av io-hanteringen.

<b>ErrorCount
Felräknare som räknar upp för varje misslyckad läsning på kortet. När 
felräknaren här nått upp till ErrorSoftLimit skrivs ett meddelande ut på 
konsolloggen, när ErrorHardLimit har nåtts stoppas io-hanteringen.

<b>ErrorSoftLimit
Värde på felräknaren ErrorCount då ett meddelande på konsolloggen ska ges.

<b>ErrorHardLimit
Värde på felräknaren ErrorCount då io-hanteringen ska stoppas.

<b>DevPolyType
Typ av konverterings funktion för omräkning från råvärdet på kortet till 
signalvärde. Endast förstagradspolynom implementerat ( 1). 
Förstagradspolynomet specificeras med koefficienterna DevPolyCoef0 och 
DevPolyCoef1 enligt

signalvärde = DevPolyCoef0 + DevPolyCoef1 * råvärde

DevPolyCoef0 = 20.47 och DevPolyCoef1 = -0.01 ger 0-20 mA.
DevPolyCoef0 = 5.0  och DevPolyCoef1 = -0.002441 ger 0-5 V.

Default 1.

<b>DevPolyCoef0
Koefficient i konverteringsfunkionen, se DevPolyType ovan.

<b>DevPolyCoef1
Koefficient i konverteringsfunkionen, se DevPolyType ovan.

<b>MaxNoOfChannel
Maximal antal kanaler på kortet.

<b>RegAddress
Register address. Värdet här används enbart för utskrift i kanallistan. Attributet 
är decimalt men för att lättare kunna läsa signallistan brukar addressen anges 
oktalt.

Registeraddressen som systemet använder ligger i ebuild-filen och måste 
överensstämma med strappningen på kortet. Addressen för ai-korten ska vara 
(se PSS7000-pärmen) :

176400 för ai-kort 1
176402 för ai-kort 2
176404 för ai-kort 3
...
176412 för ai-kort 6

<b>VectAddress
Vektor address. Värdet här används enbart för utskrift i kanallistan. Attributet 
är decimalt men för att lättare kunna läsa signallistan brukar addressen anges 
oktalt.

Vektoraddressen som systemet använder ligger i ebuild-filen och används 
egentligen inte men måste finna för att ELN-systemet ska kunna skapa ett 
device. 

Vektor addressen kan börja på 200 ? och 8 bytes ska allokeras för varje kort 
oavsett korttyp. Serien kan alltså se ut 200, 210, 220, 230, 240, 250, 260, 270, 
300, 310 osv (serien gäller samtliga io-kort i systemet).




</topic> **********
<topic> Ao_HVAO4
Ao_HVAO4

<h1>Beskrivning

Konfigurerar ett PSS7000 analogt utgångskort. Ao korten ska namnges AOxx 
där xx anger kortplatsen i racken. Kortnamnet bör överensstämma med 
kortnamnet i ebuild-filen.

<h1>Attributes

<b>IOSysType
1 anger att kortet tillhör io-systemet PSS7000.

<b>Description
Beskrivning av kortet (40 tecken).

<b>DevName
Namn på kortet. Namnet måste överensstämma med namnet i ebuild-filen och 
bör överensstämma med objektsnamnet.

<b>DevNumber
Numrering av kortet som hanteras internt av io-hanteringen.

<b>ErrorCount
Felräknare som räknar upp för varje misslyckad läsning på kortet. När 
felräknaren här nått upp till ErrorSoftLimit skrivs ett meddelande ut på 
konsolloggen, när ErrorHardLimit har nåtts stoppas io-hanteringen.

<b>ErrorSoftLimit
Värde på felräknaren ErrorCount då ett meddelande på konsolloggen ska ges.

<b>ErrorHardLimit
Värde på felräknaren ErrorCount då io-hanteringen ska stoppas.

<b>DevPolyType
Typ av konverterings funktion för omräkning från signalvärde till till råvärde. 
Endast förstagradspolynom implementerat ( 1). Förstagradspolynomet 
specificeras med koefficienterna DevPolyCoef0 och DevPolyCoef1 enligt

råvärde = DevPolyCoef0 + DevPolyCoef1 * signalvärde

DevPolyCoef0 = 0.0 och DevPolyCoef1 = 102.375 ger signalvärde 0-20 mA.

Default 1.

<b>DevPolyCoef0
Koefficient i konverteringsfunkionen, se DevPolyType ovan.

<b>DevPolyCoef1
Koefficient i konverteringsfunkionen, se DevPolyType ovan.

<b>MaxNoOfChannel
Maximal antal kanaler på kortet.

<b>RegAddress
Register address. Värdet här används enbart för utskrift i kanallistan. 
Attributetär decimalt men för att lättare kunna läsa signallistan brukar 
addressen anges oktalt. 

Registeraddressen som systemet använder ligger i ebuild-filen och måste 
överensstämma med strappningen på kortet. Addressen för ao-korten ska vara 
(se PSS7000-pärmen) :

176210 för ao-kort 1
176220 för ao-kort 2
176230 för ao-kort 3
...
176270 för ao-kort 7

<b>VectAddress
Vektor address. Värdet här används enbart för utskrift i kanallistan. Attributet 
är decimalt men för att lättare kunna läsa signallistan brukar addressen anges 
oktalt.

Vektoraddressen som systemet använder ligger i ebuild-filen och används 
egentligen inte men måste finna för att ELN-systemet ska kunna skapa ett 
device.

Vektor addressen kan börja på 200 ? och 8 bytes ska allokeras för varje kort 
oavsett korttyp. Serien kan alltså se ut 200, 210, 220, 230, 240, 250, 260, 270, 
300, 310 osv (serien gäller samtliga io-kort i systemet).




</topic> **********
<topic> Co_PI24BO
Co_PI24BO

<h1>Beskrivning

Konfigurering av ett PSS7000 pulsgivarkort av typen PI24D. Pulsgivarkorten 
ska namnges COxx där xx anger kortplatsen i racken. Kortnamnet bör 
överensstämma med kortnamnet i ebuild-filen.

<h1>Attributes

<b>IOSysType
1 anger att kortet tillhör io-systemet PSS7000.

<b>Description
Beskrivning av kortet (40 tecken).

<b>DevName
Namn på kortet. Namnet måste överensstämma med namnet i ebuild-filen och 
bör överensstämma med objektsnamnet.

<b>DevNumber
Numrering av kortet som hanteras internt av io-hanteringen.

<b>ErrorCount
Felräknare som räknar upp för varje misslyckad läsning på kortet. När 
felräknaren här nått upp till ErrorSoftLimit skrivs ett meddelande ut på 
konsolloggen, när ErrorHardLimit har nåtts stoppas io-hanteringen.

<b>ErrorSoftLimit
Värde på felräknaren ErrorCount då ett meddelande på konsolloggen ska ges.

<b>ErrorHardLimit
Värde på felräknaren ErrorCount då io-hanteringen ska stoppas.

<b>ConvMask
Konvertering mask som anger vilka kanaler som läsning ska ske på. Om bit 1 i 
masken är sann sker läsning på kanal 1 osv. Om biten för en kanal är falsk kan 
värdet på kanalen sättas från rtt el dyl. ConvMask1 hanterar kanal 1 - 16. 
ConvMask ändras enklast genom rtt-kommandot 'set converson /on' resp 'set 
conversion /off'.

<b>MaxNoOfCounters
Maximalt antal kanaler på kortet. 

<b>COAbsFlag
Absolutvärde beräknas och lagras.

<b>NoOfBits
Antal bitar, 16 eller 24.

<b>COWrFlag
Intern flagga

<b>MulCount

- V2.7
Enkanals-kort: 1 ger multiplikation av antal pulser med 4, annat värde ger 
multiplikation med 2. Flerkanals-kort: 1 ger multiplikation med 2, annat värde 
ger multiplikation med 4.

V3.3 
Enkanals-kort: 2 ger multiplikation med 4, annat värde ger multiplikation med 
2. Flerkanals-kort: 2 ger multiplikation med 2, annat värde ger multiplikation 
med 4.

<b>DivCount
Flerkanals-kort: 16 ger division med 16 efter multiplikation angiven i 
MulCount.

<b>SpeedMeasurement
Flerkanals-kort: 1 ger hastighetsmätning (pulser/sekund).

Om både SpeedMeasurement och LengthMeasurement är 1 räknas bara åt ett 
håll (används för att mäta max/min utslag t ex ).

<b>LengthMeasurement
Flerkanals-kort: 1 ger längdmätnng styrd av signal på grovsynk (antal pulser). 
Längdmätningen startar vid positiv flank på grovsynk och stoppar vid negativ 
flank. Om CopWrRough är 1 nollställs räknaren vid start av längdmätning. Om 
CopWrRough är 0 forsätter räkningen från föregående mätning.

<b>CopWrRough
1 ger kopiering av skrivregistret till räknaren med grovsynk.

<b>CopWrFine
1 ger kopiering av skrivregistret till räknaren med finsynk.

<b>LoadWrReg
0: Ladda skrivregistret.
1: Ladda skrivregistret och räknare.

<b>SyncRawValue
Läggs in i skrivregistret vid initiering och kopieras till räknaren beroende på 
grov och finsynkflaggorna.

<b>RegAddress
Register address. Värdet här används enbart för utskrift i kanallistan. Attributet 
är decimalt men för att lättare kunna läsa signallistan brukar addressen anges 
oktalt. 

Registeraddressen som systemet använder ligger i ebuild-filen och måste 
överensstämma med strappningen på kortet. Addressen för do-korten ska vara 
(se PSS7000-pärmen) :

176300 för co-kort 1
176304 för co-kort 2
176310 för co-kort 3
...
176374 för co-kort 16

<b>VectAddress
Vektor address. Värdet här används enbart för utskrift i kanallistan. Attributet 
är decimalt men för att lättare kunna läsa signallistan brukar addressen anges 
oktalt. 

Vektoraddressen som systemet använder ligger i ebuild-filen och används 
egentligen inte men måste finna för att ELN-systemet ska kunna skapa ett 
device. Vektor addressen kan börjapå 200 ? och 8 bytes ska allokeras för varje 
kort oavsett korttyp.

</topic> **********

************************************************
************ SSAB NMPS *************************
************************************************

<topic> NMpsCell
NMpsCell

<h1>Beskrivning

Ett NMpsCell objekt är en förvaringscell för data objekt.

Cellen innehåller ett antal positioner för att lagra referenser till dataobjekten. 
Positionerna är indexerade från ett och uppåt. Varje position innehåller en 
pekare till dataobjektet, objid för dataobjektet, två Boolean som markerar om 
bakkant resp framkant befinner sig i cellen, samt slutligen dlid.

Första dataobjektet som läggs in i en cell hamnar alltid på index 1. När flera 
objekt matas in läggs det senaste objektet på index 1 och de övriga objekten 
förskjuts ett index.

Dataobjekten kan läggas in på två sätt i cellobjektet:

-mha ett trp objekt (NMpsTrp, NMpsTrpRR eller NMpsTrpFF) som lägger in 
ett dataobjekt först eller sist i cellen.

-mha externfunktionen kan ett dataobjekt läggas in på valfri plats i cellen från 
ett applikationsprogram (eller från rtt).

<h1>Underfönster
Ett underfönster till en NMpsCell används om samma operationer ska utföras 
för samtliga dataobjekt i cellen. Koden i underfönstret kommer under ett plc 
scan, först att exekveras en gång för att kunna initiera variabler i fönstret, och 
sedan en gång för varje dataobjekt i cellen. Dataobjekten refereras med 
CurrentData.

Om man vill separera dataobjeken kan man använda objektet CurrentIndex 
som anger vilket index i cellobjektet som aktuellt dataobjekt ligger på. Under 
initierings-exekveringen är  CurrentData och CurrentIndex lika med noll.

Eftersom fönstret exekveras flera gånger i samma scan får det ej innehålla 
objekt med tillståndsattribut. Följande
är tillåtna And, Or, ...

<h1>Attribut

<b>In
Koppling till ett NMpsTrp objekt.

<b>Out
Koppling till ett NMpsTrp objekt.

<b>MaxSize
Maximalt antal dataobjekt som ska rymmas i cellen (maxvärde 30).

<b>Function
Speciella funktioner hos cellobjektet.
Function är en bitmask och olika funktioner kan kombineras.

<b>4
Om ett objekt tas bort ur cellen med externfunktionen (ExternOpType = 2, 3 el 
4) tas dataobjektet även bort ur rtdb.
<b>8
När cellen återställs genom att resetobjektet, sätts tas dataobjektet även bort ur 
rtdb.

<b>LastIndex
Antal dataobjekt som cellen för närvarande innehåller.

<b>CellFull
Markerar att cellen är full (dvs aktuellt antal dataobjekt är lika  med MaxSize).

<b>FrontNew
FrontNew är true under en scantid om ett dataobjekt transporterats in i cellen 
genom In, eller med extern operation 1.

<b>RearNew
RearNew är true under en scantid om ett dataobjekt transporterats in i cellen 
genom Out.

<b>ExternObjId
Objid för ett dataobjekt som ska läggas in eller tas bort från cellen från ett 
externt program.

<b>ExternOpType

Typ av extern operation:
<b>0
Lägger in ExternObjId på index 1 i cellen.
<b>1
Lägger in ExternObjId på index angivits i ExternIndex i cellen.
<b>2
Tar bort dataobjekt på index 1 i cellen.
<b>3
Tar bort dataobjekt på index angett i ExternIndex i cellen.
<b>4
Tar bort dataobjekt med objid som angivits med ExternObjId från cellen.
<b>8
Flytta dataobjekt med objid som angivits med ExternObjid framåt i cellen.
<b>9
Flytta dataobjekt med objid som angivits med ExternObjid bakåt i cellen.
<b>10
Tar bort dataobjekt med objid som angivits med ExternObjId från cellen. 
Dataobjektet tas inte bort ur databasen även om Function för cellen är 4.


<b>ExternFlag
Markerar att en externfunktion ska utföras. Externflag nollställs av cellobjektet 
när operationen är utförd.

Externflag ska sättas sist av externt pgm. Om det finns risk för kollisioner 
mellan externa program bör man kontrollera att Exterflag inte är satt.

<b>ExternIndex
Index i cellen där objekt ska läggas in eller tas bort (vid ExternOpType 1 och 
3).

<b>ExternStatus
Resultat av senaste externoperation.

<b>DataLast_Pointer
Innehåller referens till dataobjekt med högsta index, dvs som närmast till att 
transporteras ut genom Out.

<b>DataLast_ObjId
Objid för dataobjekt med högsta index i cellen.

<b>DataLast_Front
True om dataobjektet med högsta index  i cellen har sin framända  inne i cellen.

<b>DataLast_Back
True om dataobjektet med högsta index i cellen har sin bakända  inne i cellen.

<b>DataX_Pointer
Referens till dataobjekt på index X i cellen.

<b>DataX_ObjId
Objid för dataobjekt på index X.

<b>DataX_Front
True om dataobjektet på index X har sin framända  inne i cellen.

<b>DataX_Back
True om dataobjektet på index X har sin bakända  inne i cellen.




</topic> **********
<topic> NMpsOutCell
NMpsOutCell

<h1>Beskrivning

NMpsOutCell objekt fungerar som slutstation i en NMps sekvens. Ett objekt 
som transporteras in i ett NMpsOutCell objekt tas bort ur sekvensen. 
NMpsOutCell objektet hanterar inte fram och bak-kant, dvs NMpsTrp objektet 
som kopplas till In attributet ska ha Function 1 eller 2.


<h1>Attribut

<b>In
Koppling till ett NMpsTrp objekt.

<b>Function
Speciella funktioner hos cellobjektet.

<b>0
NMPS tar bort sin direktlänkning av dataobjektet, men objektet tas ej bort ur 
databasen.
<b>4
Objektet tas bort ur databasen.




</topic> **********
<topic> NMpsStoreCell
NMpsStoreCell

<h1>Beskrivning

NMpsStoreCell fungerar i stort som en NMpsCell. Skillnaden ligger i att 
NMpsStoreCell innehåller ett utvals attribut för varje dataobjekt. Vid en 
transport kommer det senast utvalda objektet att transporteras. Är inte något 
dataobjekt utvalt flyttas det äldsta objektet, som i NMpsCell.

Ett dataobjekt väljs ut genom att Select attributet sätts på det index där objektet 
ligger. Detta kan göras från applikations program eller från en operatörsbild. 
Man kan även välja ut ett dataobjekt med externfunktionen genom att ange 
objid för dataobjektet. 

Man kan begränsa antalen utvalda objekt till högst ett, eller till exakt ett mha 
attributet Function.

<h1>Attribut

<b>In
Koppling till ett NMpsTrp objekt.

<b>Out
Koppling till ett NMpsTrp objekt.

<b>MaxSize
Maximalt antal dataobjekt som ska rymmas i cellen (maxvärde 30).

<b>Function
Speciella funktioner hos cellobjektet. Function är en bitmask och olika 
funktioner kan kombineras.

Function
<b>0
Inga begränsningar på antal utvalda objekt.
<b>1
Högst ett objekt är utvalt. Om det finns ett utvalt objekt, och ett nytt väljs ut 
kommer det tidigare utvalda att återställas.
<b>2
Exakt ett objekt är utvalt (om det finns objekt i cellen).
 Om det finns ett utvalt objekt, och ett nytt väljs ut kommer det tidigare utvalda 
att återställas.
Om det utvalda objektet transporteras ut ur cellen, eller om utval tas bort på 
annat sätt, kommer det objekt med högsta index att väljas ut.
<b>4
Om ett objekt tas bort ur cellen med externfunktionen (ExternOpType = 2, 3 el 
4) tas dataobjektet även bort ur rtdb. Detta funktion bör ej användas i de fall ett 
dataobjekt kan befinna sig i flera celler samtidigt (Function 0 hos 
transportobjektet).
<b>8
När cellen återställs genom att resetobjektet sätts, tas dataobjektet som finns i 
cellen även bort ur databasen.

<b>LastIndex
Antal dataobjekt som cellen för närvarande innehåller.

<b>CellFull
Markerar att cellen är full (dvs aktuellt antal dataobjekt är lika  med MaxSize).

<b>FrontNew
FrontNew är true under en scantid om ett dataobjekt transporterats in i cellen 
genom In, eller med extern operation 1.

<b>RearNew
RearNew är true under en scantid om ett dataobjekt transporterats in i cellen 
genom Out.

<b>ExternObjId 
Objid för ett dataobjekt som ska läggas in eller tas bort från cellen från ett 
externt program.

<b>ExternOpType

Typ av extern operation:
<b>0
Lägger in ExternObjId på index 1 i cellen.
<b>1
Lägger in ExternObjId på index angett i ExternIndex i cellen.
<b>2
Tar bort dataobjekt på index 1 i cellen.
<b>3
Tar bort dataobjekt på index angett i ExternIndex i cellen.
<b>4
Tar bort dataobjekt med objid som angetts med ExternObjId från cellen.
<b>5
Väljer ut dataobjekt med objid angett i ExternObjId.
<b>6
Lägger in ExternObjId på index 1 i cellen och väljer ut det.
<b>7
Tar bort utval på objekt angivet i ExternObjId.
<b>8
Flytta dataobjekt med objid som angivits med ExternObjid framåt i cellen.
9<b>
Flytta dataobjekt med objid som angivits med ExternObjid bakåt i cellen.
10<b>
Tar bort dataobjekt med objid som angivits med ExternObjId från cellen. 
Dataobjektet tas inte bort ur databasen även om Function för cellen är 4.

<b>ExternFlag

Markerar att en externfunktion ska utföras. Externflag nollställs av cellobjektet 
när operationen är utförd. Externflag ska sättas sist av externt pgm. Om det 
finns risk för kollisioner mellan externa program bör man kontrollera att 
Exterflag inte är satt.

<b>ExternIndex
Index i cellen där objekt ska läggas in eller tas bort (vid ExternOpType 1 och 
3).

<b>ExternStatus
Resultat av senaste externoperation.

<b>DataLast_Pointer
Innehåller referens till dataobjekt med högsta index, dvs objektet som ligger 
närmast till för att transporteras ut genom Out.

<b>DataLast_ObjId
Objid för dataobjekt med högsta index i cellen.

<b>DataLast_Front
True om dataobjektet med högsta index  i cellen har sin framända  inne i cellen.

<b>DataLast_Back
True om dataobjektet med högsta index i cellen har sin bakända  inne i cellen.

<b>DataLast_Select
True om dataobjektet är utvalt.

<b>DataX_Pointer
Referens till dataobjekt på index X i cellen.

<b>DataX_ObjId
Objid för dataobjekt på index X.

<b>DataX_Front
True om dataobjektet på index X har sin framända  inne i cellen.

<b>DataX_Back
True om dataobjektet på index X har sin bakända  inne i cellen.

<b>DataX_Select
True om dataobjektet är utvalt. Kan sättas och återställas från 
applikationsprogram och operatörsbilder.




</topic> **********
<topic> NMpsCellMir
NMpsCellMir

<h1>Beskrivning

NMpsCellMir speglar innehållet i en eller att antal andra celler. De speglade 
cellerna kan ligga på samma nod eller på en annan nod. Även dataobjekt och 
valda delar av innehållet i dataobjekt kan speglas. Se beskrivning av objektet 
NMpsMirrorConfig för konfigurering av NMpsMirror funktionen.

<h1>Attribut

<b>CellObjects
De cellobjekt som ska speglas. Cellobjekten kan ligga på samma eller på en 
annan nod.

<b>NumberOfCellObj
Antal cellobjekt angivna i attributet 'CellObjects'.

<b>DataCollect
Anger att konverterade dataobjekt vars ursprungliga objekt har försvunnit ut ur 
de speglade cellerna, ska samlas upp i en cell.

<b>CollectCell
Cell som borttagna konverterade dataobjekt samlas upp i.

DataObjConv
Anger att dataobjekt i original cellerna ska speglas.

<b>ConvConfig
Konfigurationsobjekt som specificerar spegling och konvertering av dataceller.

<b>ReleaseTime
Tid i sekunder som ett försvunnet objekt ska hållas kvar av 
speglingsfunktionen. Vid spegling mellan noder kan ett dataobjekt en kort 
stund försvinna t ex vid en förflyttning mellan två celler. Genom att det 
konverterade objektet sparas en viss tid återknyts kontakten med detta när 
originalobjektet dyker upp igen.

<b>MaxSize
Maximalt antal dataobjekt som ska rymmas i cellen (maxvärde 30).

<b>Function
Ej implementerat.

<b>LastIndex
Antal dataobjekt som cellen för närvarande innehåller.

<b>CellFull
Markerar att cellen är full (dvs aktuellt antal dataobjekt är lika  med MaxSize).

<b>DataLast_Pointer
Innehåller referens till dataobjekt med högsta index, dvs som närmast till att 
transporteras ut genom Out.

<b>DataLast_ObjId
Objid för dataobjekt med högsta index i cellen.

<b>DataX_Pointer
Referens till dataobjekt på index X i cellen.

<b>DataX_ObjId
Objid för dataobjekt på index X.




</topic> **********
<topic> NMpsTrp
NMpsTrp

<h1>Beskrivning

Transporterar ett dataobjekt mellan två celler. Transporten kan ske på olika 
sätt:

-Vid en trigg transporteras hela objektet mellan cellerna.

-Ett objekt flyttas successivt mellan cellerna med framkant först och  bakkant 
sedan (eller vice versa). Vid en trigg flyttas samtliga dataobjekt från en cell till 
nästa cell.Vid en trigg flyttas samtliga dataobjekt till nästa cell under 
förutsättning  att destinationscellen är tom.

<h1>Attribut

<b>In
Kopplas till Out attributet på ett cellobjekt.

<b>Out
Kopplas till In attributet på ett cellobjekt.

<b>Function
Anger vilken typ av transport som transportobjektet ska utföra.

Function:
<b>0
Ett objekts flytta successivt mellan cellerna med framkant först och bakkant 
sedan (eller vice versa). 
Vid en positiv flank på TriggForwFront flyttas framkanten på dataobjektet från 
In till Out.
Vid en positiv flank på TriggForwBack flyttas bakkanten från In till Out.
Vid en positiv flank på TriggReverseFront flyttas framkanten från Out till In.
Vid en positiv flank på TriggReverseBack flyttas bakkanten från Out till In.
<b>1
Ett objekt flyttas mellan cellerna. Endast Trigg...Front ingångarna ska 
användas för att trigga en transport.
Vid en positiv flank på TriggFrowFront flyttas objektet från In till Out.
Vid en positiv flank på TriggReverseFront flyttas objektet från Out till In.
<b>2
Samtliga objekt i sändcellen flyttas.
Vid en positiv flank på TriggForwFront flyttas samtliga dataobjekt i cellen 
kopplad till In, till cellen kopplad till Out. Vid en positiv flank på 
TriggReverseFront flyttas samtliga dataobjekt i cellen kopplad till Out, till 
cellen kopplad till In.
<b>4
Samma funktion som 2 med undantaget att flyttningen endast sker  om 
mottagarcellen är tom.
<b>8
Återställer trigg-ingångar (om dessa ej är kopplade).
<b>16
Trigga på nivå istället för positiv flank.

<b>TriggForwFront
Flyttar ett dataobjekt från In till Out vid positiv flank.
Flyttar samtliga objekt, ett objekt, eller endast framkanten av ett objekt 
beroende på Function.

<b>TriggReverseFront
Flyttar ett dataobjekt från Out till In vid positiv flank.
Flyttar samtliga objekt, ett objekt, eller endast framkanten av ett objekt 
beroende på Function.

<b>TriggForwBack
Flyttar bakkanten av ett dataobjekt från In till Out vid positiv flank. Kräver att 
Function = 0.

<b>TriggReverseBack
Flyttar bakkanten av ett dataobjekt från Out till In vid positiv flank.

<b>Status
Är true om en förflyttning misslyckas beroende på någon av följande faktorer:

<t>-Det finns inget dataobjekt i sändcellen
<t>-Mottagarcellen är full.
<t>-En framkants trigg kommer när en bakkantstrigg borde komma.
<t>-En bakkantstrigg kommer när en framkantstrigg borde komma.




</topic> **********
<topic> NMpsTrpRR
NMpsTrpRR

<h1>Beskrivning

Förflyttar dataobjekt från en utgång på ett cellobjekt till en utgång på ett annat 
cellobjekt. Funktionen är i övrigt identisk med ett NMpsTrp objekt Function = 
0 bör ej användas (dvs Trp objektet ska hantera fram och bakkant) Om den 
används kommer objektet att vändas av trp objektet eftersom framkanten måste 
ligga före bakkanten i cell objekten. Dvs framkanten kommer att befinna sig 
samtidigt i båda cellerna.

<h1>Attribut

Se NMpsTrp.




</topic> **********
<topic> NMpsTrpFF
NMpsTrpFF

<h1>Beskrivning

Förflyttar dataobjekt från en ingång på ett cellobjekt till en ingång på ett annat 
cellobjekt. Funktionen är i övrigt identisk med ett NMpsTrp objekt Function = 
0 bör ej användas (dvs Trp objektet ska hantera fram och bakkant) Om den 
används kommer objektet att vändas av trp objektet eftersom framkanten måste 
ligga före bakkanten i cell objekten. Dvs bakkanten kommer att befinna sig 
samtidigt i båda cellerna.

<h1>Attribut

Se NMpsTrp.




</topic> **********
<topic> GetData
GetData

<h1>Beskrivning

Hämtar upp referens till ett dataobjekt. Dynamiska objekt hanteras ej av 
GetData.

<h1>Attribut

<b>Out
Kopplas till ett en dataingång på tex DataArithm, DataCopy, DataReset.

<b>DataObjid
Dataobjekt som ska refereras.



</topic> **********
<topic> DataArithm
DataArithm

<h1>Beskrivning

DataArithm objektet gör det möjligt att komma åt innehållet i dataobjekt, 
analoga och digital signaler och parametrar i c-kod.

Objektet innehåller
<t>-fyra dataingångar.
<t>-sex digitala ingångar.
<t>-sex analoga ingångar.
<t>-fyra datautgångar.
<t>-sex digitala utgångar.
<t>-sex analoga utgångar.

Funktionen för digitala och analoga signaler är i densamma som för CArithm, 
men DataArithm kan dessutom hantera dataobjekts referenser.

Ett dataobjekt kan kopplas till en dataingång (antingen från en GetData eller 
från ett NMpsCell objekt). I koden hanteras den som  en c-struct.

<h1>Attribut

<b>DataIn1-DataIn4
Dataingångar som kopplas till en datareferens utgång, dvs GetData, NMpsCell 
eller DataArithm.
Ingångarna refereras i koden som Da1, Da2, Da3 resp Da4.

<b>AIn1-AIn6
Analoga ingångar. Ingångarna refereras A1 - A6 i c-koden.

<b>DIn1-DIn6
Digitala ingångar. Ingångarna refereras d1 - d6 i c-koden.

<b>OutData1-OutData4
Datautgångar. Utgångarna refereras ODa1 - ODa4 i c-koden, och kan tilldelas 
värdet av en dataingång.

<b>OutA1-OutA6
Analoga utgångar. Refereras OA1- OA6 i koden.

<b>OutD1-OutD6
Digitala utgångar. Refereras od1- od6 i koden.

<h1>Code
C-kod.

<b>Syntaxregler

Digitala och analoga in och utgångar hanteras på samma sätt som i ett CArithm 
objekt. Man kan ge ett aliasnamn till en in- eller utgång mha 'aliasdef' (för 
dataingångar invändes 'classdef'). 

<b>Exempel

aliasdef d1 StartaMotor, od1 StoppaMotor;
aliasdef A1 Temperatur;

if ( Temperatur > 200)
  StoppaMotor = 1;

<h1>Dataingångar

En Dataingång som används i koden måste klass definieras med en classdef 
sats. Classdef satsen innehåller ordet classdef, dataingång och klassen på det 
dataobjekt som ska hanteras.
Man kan även ge ett aliasnamn i classdef deklarationen.

<b>Exempel

classdef Da1 plate;
classdef Da2 plate FrämstaPlåt;
classdef Da3 vdata Värningsdata, Da4 data SistaPlåt;

Dataingångarna hanteras som en pekare på angiven klass.
Antag att klassen data innehåller attributet Width.
Attributet i dataobjektet refereras då med Da1->Width.

<b>Exempel

if ( d1)
  Da1->Width = 55.;
else
  Da1->Width = 66.;

 if  ( FrämstaPlåt->Temperatur > SistaPlåt->Temperatur)
  od1 = 1;

Om dataingången är kopplad till ett NMpsCell objekt är datapekaren noll om 
refererad plats i cellen inte innehåller något dataobjekt. I detta fall måste man 
först testa om pekaren är noll innan den används. Plcprogrammet kommer 
annars att drabbas av access violation...

<b>Exempel      

if ( Da1 != 0)
{
  if ( d1)
    Da1->Width = 55.
  else
    Da1->Width = 66.
}

Om dataingången är kopplad till ett cellobjekt kan man komma åt 
informationen om fram och bakkant genom Da1Front, Da1Back, Da2Front, ...

<h1>Datautgångar

En datautgång kan tilldelas värdet av en dataingång

<b>Exempel

if ( d1)
  ODa1 = Da1;
else
  ODa1 = Da2;




</topic> **********
<topic> DataCopy
DataCopy

<h1>Beskrivning

Kopierar innehållet i ett dataobjekt till ett annat dataobjekt. För närvarande 
måste ett av objekten vara refererat med en GetData.

<h1>Attribut

<b>DataFrom
Kopplas till en datareferens utgång. 

<b>DataTo
Kopplas till en datareferens utgång. 

<b>Condition
Om condition är true kommer kopieringen att ske, annars inte.




</topic> **********
<topic> DataReset
DataReset

<h1>Beskrivning

Nollställer innehållet i ett dataobjekt, dvs sätter samtliga attribut till binärt noll.
För närvarande måste objektet refereras med en GetData.

<h1>Attribut

<b>Data
Kopplas till en GetData.

<b>Condition
Om condition är true kommer nollställningen att ske, annars inte.




</topic> **********
<topic> CurrentData
CurrentData

<h1>Beskrivning

Objektet används i ett NMpsCell underfönster. Underfönstret kommer att 
exekveras för varje dataobjekt som befinner sig i cellen och referenser till 
dataobjekten i cellen sker med ett CurrentData objekt.

<h1>Attribut

<b>dataCurrent_Pointer
Kopplas till en datareferens ingång.




</topic> **********
<topic> CurrentIndex
CurrentIndex

<h1>Beskrivning

Objektet används i ett NMpsCell underfönster. Objektet hämtar upp index för 
det dataobjekt som exekveras just nu.

<h1>Attribut

<b>dataCurrent_Index
Innehåller index för det dataobjekt som exekveras.




</topic> **********
<topic> DataCollect
DataCollect

<h1>Beskrivning

Samlar i hop ett antal dataobjekt (max 24 st), och placerar pekare till objekten i 
en array. Detta gör det möjligt att komma åt dataobjekten i en DataArithm.

Normalt kan endast 4 dataobjekt hanteras i en DataArithm, men genom att 
utnyttja DataCollect kan upp till 96 st hanteras. Dessutom är det ofta bekvämt 
att ha dataobjekten ordnade i en array för att kunna använda loopar i c-koden.

I MaxIndex ska antalet dataingångar som används i DataCollect objektet anges. 
Samtliga dataingångar mellan 1 och MaxIndex måste vara kopplade.

<h1>Attribut

<b>MaxIndex
Antal kopplade ingångar. Måste datasättas i attributeeditorn (eller i runtiime).

<b>Da1 - Da24
Dataingångar som kopplas till GetData, NMpsCell objekt el dyl.

<b>DataP
Array med 24 element som innehåller pekare till de objekt som är kopplade till 
DataCollekt objektet.

<b>DataOut
Datautgång som kan kopplas till ett DataArithm objekt (eller annan 
dataingång).

<b>Exempel
Här följer ett exempel på koden i en DataArithm som har DataCollect objektet 
kopplat till Da1 ingången. Ett antal objekt av klassen Mtrl är kopplade till 
DataCollect objektet.

classdef Da1 DataCollect
int i;

OA1 = 0;
for ( i = 0; i < Da1->MaxIndex; i++)
  if ( ((pwr_sClass_Mtrl *)(Da1->DataP[i]))->Length > 10.0)
    OA1++;




</topic> **********
<topic> DpCollect
DpCollect

<h1>Beskrivning

Samlar i hop ett antal attribut av typen Boolean (max 24 st), och placerar 
värdet i en vektor. Detta gör det möjligt att komma åt värdet i en DataArithm. 
Normalt kan endast 6 digital attribut hanteras i en DataArithm, men genom att 
utnyttja DpCollect kan upp till 96 st hanteras. 

Dessutom är det ofta bekvämt att ha värdena ordnade i en vektor för att kunna 
använda loopar i c-koden.

I MaxIndex ska antalet ingångar som används i DpCollect objektet anges. 
Ingångarna behöver ej vara kopplade utan kan datasättas i attributeditorn eller i 
runtime.

<h1>Attribut

<b>MaxIndex
Antal kopplade ingångar. Måste datasättas i attributeditorn (eller i runtime).

<b>Dp1 - Dp24
Ingångar av typen Boolean.

<b>Dp
Array med 24 element som innehåller värdet av kopplade attribut.

<b>DataOut
Datautgång som kan kopplas till ett DataArithm objekt (eller annan 
dataingång).

<b>Exempel
Här följer ett exempel på koden i en DataArithm som har DpCollect objektet 
kopplat till Da1 ingången.

classdef Da1 DpCollect;
int i;

OA1 = 0;
for ( i = 0; i < Da1->MaxIndex; i++)
  if ( Da1->Dp[i])
    OA1++;




</topic> **********
<topic> DpDistribute
DpDistribute

<h1>Beskrivning

Distribuerar en vektor med boolean till ett antal attribut av typen Boolean (max 
24 st). Vektorn deklareras i en DataArithm, och adressen till vektorn läggs ut 
på en datautgång, till vilken dataingången på DpDistribute-objektet kopplas. 
Elementen i vektorn läggs ut på dp-utgångarna i DpDistribute-objektet. 
Normalt kan endast 6 digital attribut hanteras i en DataArithm, men genom att 
utnyttja DpDistribute kan upp till 96 st hanteras.

I MaxIndex ska antalet utgångar som används i DpDistribute objektet anges.

Vektorn ska vara en static deklarerad array av pwr_tBoolean med antal element 
större eller lika med MaxIndex. I fösta hand ska typen nmps_sDpDistr 
användas, en array av pwr_tBoolean med 24 element som finns deklarerad i 
ssab_inc:rs_plc_macro_nmps.h.


<h1>Attribut

<b>MaxIndex
Antal använda utgångar. Måste datasättas i attributeditorn (eller i runtiime).

<b>Dp1 - Dp24
Utgångar av typen Boolean.

<b>DataIn
Dataingång som kopplas till en datautgång på ett DataArithm objekt. I koden i 
dataartithm-objektet måste datautgången tilldelas adressen till en vektor.

<b>Exempel
Här följer ett exempel på koden i en DataArithm som har
DpDistribute objektet kopplat till ODa1 utgången.

static nmps_sDpDistr vect;
int i;

ODa1 = vect;
for ( i = 0; i < 24; i++)
{
  if (d1)
    vect[i] = 1;
  else
    vect[i] = 0;
}




</topic> **********
<topic> ApCollect
ApCollect

<h1>Beskrivning

Samlar i hop ett antal analoga attribute (max 24 st), och placerar värdet i en 
vektor. Detta gör det möjligt att komma åt värdet i en DataArithm. Normalt 
kan endast 6 analoga attribut hanteras i en DataArithm, men genom att utnyttja 
DpCollect kan upp till 96 st hanteras. 

Dessutom är det ofta bekvämt att ha värdena ordnade i en vektor för att kunna 
använda loopar i c-koden.

I MaxIndex ska antalet ingångar som används i ApCollect objektet anges. 
Ingångarna behöver ej vara kopplade utan kan datasättas i attributeditorn eller i 
runtime.


<h1>Attribut

<b>MaxIndex
Antal kopplade ingångar. Måste datasättas i attributeeditorn (eller i runtiime).

<b>Ap1 - Ap24
Analoga ingångar.

<b>Ap
Array med 24 element som innehåller värdet av kopplade attribut.

<b>DataOut
Datautgång som kan kopplas till ett DataArithm objekt (eller annan 
dataingång).

<b>Exempel
Här följer ett exempel på koden i en DataArithm som har ApCollect objektet 
kopplat till Da1 ingången.

classdef Da1 ApCollect
int i;

OA1 = 0;
for ( i = 0; i < Da1->MaxIndex; i++)
  if ( Da1->Ap[i] > 10.0)
    OA1++;




</topic> **********
<topic> ApDistribute
ApDistribute

<h1>Beskrivning

Distribuerar en vektor med float till ett antal attribut av typen Float (max 24 st). 
Vektorn deklareras i en DataArithm, och adressen till vekorn läggs ut på en 
datautgång, till vilken dataingången på ApDistribute-objektet kopplas. 
Elementen i vektorn läggs ut på Ap-utgångarna i ApDistribute-objektet. 
Normalt kan endast 6 float-attribut hanteras i en DataArithm, men genom att 
utnyttja ApDistribute kan upp till 96 st hanteras.

I MaxIndex ska antalet utgångar som används i ApDistribute objektet anges.

Vektorn ska vara en static deklarerad array av pwr_tFloat32 med antal element 
större eller lika med MaxIndex. I fösta hand ska typen nmps_sApDistr 
användas, en array av pwr_tFloat32 med 24 element som finns deklarerad i 
ssab_inc:rs_plc_macro_nmps.h.


<h1>Attribut

<b>MaxIndex
Antal använda utgångar. Måste datasättas i attributeditorn (eller i runtime).

<b>Ap1 - Ap24
Utgångar av typen float.

<b>DataIn
Dataingång som kopplas till en datautgång på ett DataArithm objekt. I koden i 
dataartithm-objektet måste datautgången tilldelas adressen till en vektor.

<b>Exempel

Här följer ett exempel på koden i en DataArithm som har ApDistribute objektet 
kopplat till ODa1 utgången.

static nmps_sApDistr vect;
int i;

ODa1 = vect;
for ( i = 0; i < 24; i++)
    vect[i] = 0.1 * i;




</topic> **********
<topic> DataSelect
DataSelect

<h1>Beskrivning

Väljer en dataingång beroende på index.
Upp till sexton dataobject kan kopplas till SelectData, och en av dessa läggs ut 
på utgången. Dataobjekten kan kopplas genom en GetData eller från en 
NMpsCell el dyl. 

Om Index < 1 väljs Da1, om Index > MaxIndex väljs den MaxIndex'te 
ingången.

I MaxIndex ska antalet dataingångar anges som SelectData ska välja mellan. 

Samtliga dataingångar mellan 1 och MaxIndex måste vara kopplade.

<h1>Attribut

<b>Index
Styr vilken dataingång som slussas över till utgången. Om Index = 1 väljs den 
första dataingången etc.

<b>MaxIndex
Antalet dataingångar som DataSelect objektet väljer mellan.

<b>Da1 - Da16
Dataingångar som kopplas till GetData, NMpsCell objekt el dyl.

<b>Out
Datautgång som innehåller referens till utvalt data.




</topic> **********
<topic> CLoop
CLoop

<h1>Beskrivning

CLoop objektet innehåller ett underfönster som exekveras ett antal gånger 
under ett plcpgm-exekveringsvarv. Antalet gånger exekveringen sker bestäms 
av attributen

StartIndex, StopIndex och Increment. Aktuellt loop index kan hämtas upp i 
underfönstret med ett CurrentIndex objekt.


<h1>Attribut

<b>StartIndex
Index vid vilket loopen startar.

<b>StopIndex
Loopen fortsätter tills loop index är mindre eller lika med StopIndex.

<b>Increment
Värde som adderas till loop index vid varje varv.

<b>CurrentIndex
Innehåller loopindex under loopen. CurrentIndex kan nås från underfönstret 
med objektet CurrentIndex.




</topic> **********
<topic> Func
Func

<h1>Beskrivning

Func gör det möjligt att använda samma kod på flera olika ställen i ett system. 
Om originalkoden ändras distribueras ändringen till respektive instans vid 
nästa kompilering av denna.

Func objektet pekar på ett PlcPgm objekt under en $LibHier. I detta PlcPgm 
ligger orginalkoden. Vid kompilering skapas en kopia av originalkoden som ett 
underfönster till Func objektet. Till ett original PlcPgm kan knytas ett 
godtyckligt antal Func objekt. In- och utgångar definieras i originalkoden 
genom FuncInput och FuncOutput.

Originalkoden ska inte kompileras. Om en ändring görs i originalkoden ska 
samtliga fönster som innehåller ett Func objekt som refererar till denna kod 
kompileras om.

Func objektet innehåller 8 analoga och 8 digital in- och utgångar. Om detta 
antal inte räcker till kan man utöka dem med ett FuncExtend objekt (och fler 
FuncInput och FuncOutput objekt i originalkoden).

När man har skapat ett Func objekt och kopplat detta till ett PlcPgm kan man 
efter kompilering öppna Func-objektets underfönster. View och Trace mod är 
tillåten i detta fönster, editeringar ska göras i original-fönstret.

Referenser till objekt i underfönstret kan endast göras via objektsnamnet, ej via 
objekts identiteten. Detta beror på att originalfönstret kopieras vid varje 
kompilering och objekten byts ut. Referenser från prooper, 
appilkationsprogram, rtt fungerar, dock ej t ex GetAp, GetDp, StoAp och 
StoDp i plceditorn.

Kompilering av underfönstret sker automatiskt i samband med kompilering av 
Func objektet. Underfönstret ska inte kompileras separat.

Om man vill ta bort ett Func objekt som har kompilerats och fått ett 
underfönster måste man göra på ett lite speciellt sätt. Ta eventuellt en backup. 
Gå in i plceditorn och ta bort alla kopplingar till Func-objektet. Gör save och 
gå ur plceditorn. Ta upp konfiguratören och leta upp Func-objektet där. Gör 
delete på objektet och det underliggande trädet.

<h1>Attribut

<b>Condition
Exekveringen av koden kan styras av Condition. Om Condition är 1 kommer 
koden att exekveras, annars inte.

<b>A1-A8
Analoga ingångar. Ingångarna kan kopplas eller datasättas från attributeditorn.

<b>d1-d8

Digitala ingångar. Ingångarna kan kopplas eller
datasättas från attributeditorn.

<b>OA1-OA8
Analoga utgångar.

<b>od1-od8
Digitala utgångar.

<b>Function
Namn på det PlcPgm objekt under vilket originalkoden ligger. Sista segmentet 
av namnet visas grafiskt i objektet.




</topic> **********
<topic> FuncExtend
FuncExtend

<h1>Beskrivning

Om antal in- eller utgångar i ett Func objekt ej räcker till kan man utöka dessa 
med ett eller flera FuncExtend objekt. FuncExtend objektet kopplas till Func 
objektet genom att Func objektets namn anges i attributet 'FuncObject'.

Till varje FuncExtend ska höra ett FuncInput/FuncOutput-par i originalfönstret. 
Genom att ange samma index i alla tre objekten knyter dem till varandra. Man 
kan utelämna FuncInput eller FuncOutput objekt om det endast behövs fler 
utgångar resp ingångar. 

Det första FuncExtend objektet bör ha index 1, det andra index 2, osv. Index 0 
är reserverat för Func objektet.


<h1>Attribut

<b>A1-A8
Analoga ingångar. Ingångarna kan kopplas eller datasättas från attributeditorn.

<b>d1-d8
Digitala ingångar. Ingångarna kan kopplas eller datasättas från attributeditorn.

<b>OA1-OA8
Analoga utgångar.

<b>od1-od8
Digitala utgångar.

<b>FuncObject
Namn på det Func objekt som ska utökas.

<b>Index
Index som anger vilket FuncInput/FuncOuput-par FuncExtend-objektet ska 
kopplas till. Det första FuncExtend objektet ska ha index 1, det andra index 2 
osv.




</topic> **********
<topic> FuncInput
FuncInput

<h1>Beskrivning

Mha FuncInput objektet anger man vilka kopplingar i ett Func fönster som ska 
hämtas från Func objektets ingångar (eller ett FuncExtend-objekts ingångar).

<h1>Attribut

<b>A1-A8
Analoga utgångar från FuncInput objektet som kopplas till analoga ingångar i 
ett Func eller FuncExtend objekt.

<b>d1-d8
Digitala utgångar från FuncInput objektet som kopplas till digitala ingångar i 
ett Func eller FuncExtend objekt.

<b>Index
Index som ska anger vilket Func eller FuncExtend objekt ingångarna ska 
kopplas till. Index 0 innebär att de kommer att kopplas till Func objektet, index 
> 0 att de kommer att kopplas till ett FuncExtend-objekt med samma index.




</topic> **********
<topic> FuncOutput
FuncOutput

<h1>Beskrivning
Mha FuncOutpu objektet anger man vilka kopplingar i ett Func fönster som ska 
läggas i Func objektets utgångar (eller ett FuncExtend-objekts utgångar).


<h1>Attribut

<b>OA1-OA8
Analoga ingångar från FuncOutput objektet som kopplas till analoga utgångar i 
ett Func eller FuncExtend objekt..

<b>od1-od8
Digitala ingångar från FuncInput objektet som kopplas till digitala utgångar i 
ett Func eller FuncExtend objekt.

<b>Index
Index som ska anger vilket Func eller FuncExtend objekt utgångarna ska 
kopplas till. Index 0 innebär att de kommer att kopplas till Func objektet, index 
> 0 att de kommer att kopplas till ett FuncExtend-objekt med samma index.




</topic> **********
<topic> NMpsMirrorConfig
NMpsMirrorConfig

<h1>Beskrivning
Konfigurering av NMpsMirror funktionen, dvs spegling av celler och data 
objekt.

<h1>Attribut

<b>ScanTime
Cykeltid för rs_nmps_mirror.

<b>MirrorCellCount
Visar antal funna NMpsCellMir objekt.

<b>MirrorCellInitCount
Visar antal initierade NMpsCellMir objekt.

<b>OrigCellCount
Visar antal funna cellobjekt som ska speglas.

<b>RemoteOrigCellCount
Visar antal funna cellobjekt som ska speglas från en annan
nod.

<b>DataObjectCount
Visar antal dataobjekt som NmpsMirror funktionen för närvarande hanterar.

<b>ConvertDataCount
Visar antal dataobjekt som konverteras.

<b>RemoteDataCount
Visar antal dataobjekt som speglas från en annan nod.

<b>RemoteDataDownCount
Visar antal dataobjekt som speglas från en nod som man fn ej har kontakt med..

<b>PendingRemoveCount
Visar antal dataobjekt som är borttagen ur cellen men hålls kvar pga att 
ReleaseTime i NMpsCellMir objektet ej ännu har uppnåtts. 

<b>RemoveCount
Visar antal dataobjekt som har tagits bort ur speglings funktionen.

<b>CreateDataCount
Visar antal dataobjekt som har skapats i rtdb av speglingsfunktionen.

<b>DeleteDataCount
Visar antal dataobjekt som har tagits bort ur rtdb av speglingsfunktionen.

<b>ReconnectDataCount
Visar antal objekt som speglingsfunktionen har återknutit kontakten med.

<b>LoopCount
Visar antal varv speglings jobbet har gått.

<b>Initialize
Detta attribut kan sättas i runtim och medför ett en ny initiering av 
speglingsfunktionen kommer att genomföras. Detta kan behövas t ex vid mjuk 
omstart med ändringar i speglings funktionen.




</topic> **********
<topic> NMpsConvConfig
NMpsConvConfig

<h1>Beskrivning
Konfigurering av spegling och konvertering av dataobjekt..


<h1>Attribut

<b>InDataClass
Klass på dataobjekt i de celler från vilken dataobjekt ska speglas.

<b>OutDataClass
Klass på de objekt som skapas av speglings funktionen.

<b>OutDataParent
Objekt under vilket skapade dataobjekt kommer att placeras.

<b>CopyOffset
Start offset i det ursprungliga dataobjektet på den dataarea som ska kopieras till 
det nya objektet.

<b>PasteOffset
Offset i det nya objektet där den kopierade dataarean ska placeras.

<b>CopySize
Storlek i bytes på den dataarea som ska kopieras.

<b>UpdateTime
Ej implementerat




</topic> **********
<topic> RemTransSend
RemTransSend

<h1>Beskrivning
Objektet markerar ett objekt av typ RemTrans för sändning. I ett underfönster 
kan läggas kod för ifyllnad av sändbuffer. Objektet exekverar först 
underfönstret och sätter sedan DataValid i RemTrans objektet. Statusflaggor 
från RemTrans-objektet läggs ut på utgångar i RemTransSend objektet.

<h1>Attribut

<b>RemTrans
Dataingång som kopplas till en GetData som pekar på RemTrans objektet.

<b>Send
Sändning av data sker på positiv flank. Underfönstret exekverar och DataValid 
sätts i RemTrans objektet.

<b>Occupied
Markerar att RemTrans objektet inte kan hantera fler sändningar för tillfället, 
beroende på att den senaste transen ännu inte har sänts, eller att om transarna 
buffras, samtliga buffrar är upptagna.

<b>Buffer
Markerar att det finns buffrade transar.

<b>Error
Senaste sändningen resulterade i felstatus.




</topic> **********
<topic> RemTransRcv
RemTransRcv

<h1>Beskrivning

Objektet övervakar ett objekt av typ RemTrans för mottagning av transar. I ett 
underfönster kan läggas kod för uppackning av mottagningsbuffer. När en trans 
har mottagits exekveras underfönstret och markerar med utgången Recieved att 
en trans har mottagits.


<h1>Attribut

<b>RemTrans
Dataingång som kopplas till en GetData som pekar på RemTrans objektet.

<b>Received
Data har mottagits. DataValid i RemTrans objektet var satt och underfönstret 
har exekverats. Received är sann i en cykel.




</topic> **********
<topic> NMpsBackupConfig
NMpsBackupConfig

<h1>Beskrivning
Konfigurering av backup av celler och dataobjekt. Backup av NMps sker på 
cell objekt med backup-biten satt i Function attributet, samt på de data objekt 
som ligger i dessa celler. Av dataobjekten sker en cyklisk backup, av 
cellobjekten en cyklisk och en händelsestyrd backup.

Följande saker krävs för att få backup på NMps:

<t>-Ett NMpsBackupConfig objekt ska finnas på noden.

<t>-Programmet ssab_exe:rs_nmps_bck.exe läggs in iett 
<t>$Appl objekt (VMS) eller  ssabb_root:<vax_eln.exe>
<t>rs_nmps_bck.exe_eln läggs in i systemet mha EBUILD (ELN).

<t>-Backup biten sätts i Function-attributet i de cellobjekt som ska backas upp.

Backupen lagras i två olika filer med extention .bck1 resp .bck2. Backupjobbet 
alternerar mellan dessa två filer för att säkerställa att det alltid finns en läsbar 
fil.

<h1>Attribut

<b>FullCycleTime
Tid i sekunder för tiden mellan två fullständiga backuper.

<b>IncrementCycleTime
Scantid i sekunder för den händelsestyrda backupen.

<b>BackupFile
Filnamn för backupfilen. Extention ska ej finnas med i filnamnet (filerna får 
extention.bck1 och .bck2). Ska backupfilen finnas på en disk på en annan node 
ska nodnummer eller nodnamn anges.

<b>BackupOn
1 om backupen ska i drift.

<b>NoRead
Denna sätts till 1 för att undvika inläsning av backupfilen vid systemstart (kan 
sättas i pwrp_alias.dat). 

<b>ReloadFailure
Sätt till 1 om inläsningen av backupen vid systemstart skulle misslyckas.

<b>ForceFullBackup
Om denna sätts till 1 kommer en fullständig backup att ske. ForceFullBackup 
återställs av rs_nmps_bck jobbet.




</topic> **********
<topic> DataRequest
DataRequest

<h1>Beskrivning

DataRequest sänder en förfrågan med en nyckel och tar emot en data trans.
Förfrågan sker genom att en nyckel läggs in i objektets Key- eller KeyStr-
attribut. Man kan välja på heltalsnyckel eller ascii nyckel. Triggning av 
förfrågan kan väljas att ske vid följande tillfällen:

<t>-värdet i nyckelattributet har ändrats
<t>-Trigg-ingången är sätt
<t>-OpTrigg-attributet sätts.

Om svaret inte har kommit inom timeout-tiden, meddelas operatören.

Data i svaret kan hanteras på olika sätt beroende på Function-attributet.
<b>1
Data kopieras via DataConvert funktionen till ett statiskt objekt (dvs ett objekt 
skapat i utvecklingsmiljön). Data i objektet kan visas upp i bilder, och 
validering i plc-och applikations-program kan utföras.
<b>2
Ett dynamisk objekt skapas med samma namn som nyckeln, och data kopieras 
till objektet via DataConvert funktionen. Objektet läggs in i en NMpsCell.
<b>3
Data kopieras till ett statiskt objekt, och väntar på acceptans från operatör 
och/eller applikationen. När data accepterats skapas ett dynamisk objekt som 
läggs in i en NMpsCell.

Acceptansen i tredje alternativet kan ske på tre olika sätt:
<b>1
Operatören accepterar data genom att sätta OpAccept attributet.
<b>2
Applikationen accepterar data genom att sätta Accept-ingången.
<b>3
Både operatören och applikationen måste ha accepterat data innan acceptansen 
är komplett.

Om data ej accepteras sker återställning genom att Reset-ingången sätts eller 
genom att OpReset-attributet sätts.

Förfrågan innehåller nyckel (string40) och ett statusord (int32).

Förfrågan och mottagning sker via RemTrans-objekt.


<h1>Attribut

<b>Out
Utgången kan kopplas till en NMpsCell. Kopplingen är enbart grafisk, den 
verkliga kopplingen sker genom CellObject-attributet. Kopplingen ska göras 
med en AnalogFeedback-koppling.

<b>Trigg
Triggar förfrågan på positiv flank. Function ska inte ha Change-biten satt för 
att triggning ska ske med Trigg-ingången.

<b>Accept
Applikationen accepterar data i visnings-objektet och skapar ett dynamiskt 
objekt som läggs i en cell. Accept och Cell bitarna i Function ska vara satt. Om 
AcceptBoth biten är satt måste dessutom operatören ha accepterat i OpAccept 
innan data accepteras.

<b>Reset
Väntan på acceptans återställs på positiv flank.

<b>Error
Utgång som indikerar att ett fel har registrerats. Error-utgången tas ner efter ett 
scan.

<b>Key
Nyckel för data som efterfrågas, om nyckeln är ett heltal. IntKey-biten i 
Function-attributet ska vara satt.

<b>KeyStr
Nyckel för data som efterfrågas, om nyckeln är en sträng. IntKey-bitet i 
Function-attributet ska inte vara satt.


<b>Function

Anger vilken funktion som ska användas. En bitmask.

Bit, Namn, Funktion
<b>1
DisplayObject
Mottaget data kopieras till ett statiskt objekt, angivet i attributet DisplayObjekt.
<b>2
Accept
Innan ett dynamisk objekt skapas väntas på accept från operatör och/eller 
applikation.
<b>4
CellInsert
Ett dynamisk objekt, namngivet efter nyckeln, skapas och läggs in i en cell.
<b>8
Change
Triggning av förfrågan sker genom att värdet i Key, eller KeyStr ändras. 
Triggning sker ej om värdet är 0 eller en NULL-string. Om biten ej är satt sker 
triggning med Trigg-ingången eller OpTrigg attributet.
<b>16
AcceptBoth
För att data ska accepteras, måste både Accept-ingången och OpAccept-
attributet ha satts.
<b>32
DisplayReset
Vid återställning nollställs visningsobjektet.
<b>64
IntKey
Nyckeln är ett heltal som läggs i attributet Key. Om biten ej är satt är nyckeln 
en sträng i KeyStr.

<b>TimeoutTime
Timeout tid för en förfrågan. Om svar ej har erhållits inom tiden skickas ett 
meddelande till operatören. Texten hämtas från AlarmText[0], om denna är 
ifylld.

<b>AlarmText
Meddelande som skickas tilll operatören när något går snett. Meddelandet 
sänds som B-larm.

AlarmText[0]    Meddelande vid timeout.
AlarmText[1]    Cellen som det skapade objektet ska läggas i är full.
AlarmText[2]    Acceptans-begäran detekterad utan att objektet väntar på 
acceptans.
AlarmText[3]    Fatalt fel, ytterligare info finns på konsolloggen.
AlarmText[4]    Det dynamiska objektet som ska skapas finns redan.
AlarmText[5]    Reserv.

<b>ReturnStatus
Om status-ordet i mottagar-transen matchar ett värdet i ReturStatus, sänds ett 
meddelande till operatören. Texten hämtas från ReturnStatusText (med samma 
index).

<b>ReturnStatusText
Larmtext som skickas vid olika ReturStatus.

<b>DisplayObject
Visningsobjekt. Data i transen kopieras till objektet vi DataConvert funktionen.
Vid acceptans kopieras det vidare till ett dynamiskt objekt, om så önskas.

<b>SendRemTrans
RemTrans-objekt som används för att sända förfrågan.

<b>RcvRemTrans
RemTrans-objekt som används för att ta emot data.

<b>CellObject
NMpsCell-objekt som det skapade objektet ska läggas in i.

<b>DataClass
Klass för objekt som skapas.

<b>DataParent
Plats i hierarkin under vilken skapade objekt ska läggas.

<b>ToConvdef...

<b>FromConvDef...
Se DataCnv objektet.

<b>OpTrigg
Triggning från operatören. OpTrigg återställs automatiskt efter att triggningen 
registrerats.

<b>OpAccept
Acceptans från operatören. OpAccept återställs automatisk efter att 
acceptansen registrerats.

<b>OpReset
Reset från operatören. OpReset återställs automatiskt efter att OpReset har 
registrerats.




</topic> **********
<topic> DataRcv
DataRcv

<h1>Beskrivning
DataRcv tar emot en trans.

Data i svaret kan hanteras på olika sätt beroende på Function-attributet:
<b>1
Data kopieras via DataConvert funktionen till ett statiskt objekt (dvs ett objekt 
skapat i utvecklingsmiljön). Data i objektet kan visas upp i bilder, och 
validering i plc-och applikations-program kan utföras.
<b>2
Ett dynamisk objekt skapas med samma namn som nyckeln, och data kopieras 
till objektet via DataConvert funktionen. Objektet läggs in i en NMpsCell.
<b>3
Data kopieras till ett statiskt objekt, och väntar på acceptans från operatör 
och/eller applikationen. När data accepterats skapas ett dynamisk objekt som 
läggs in i en NMpsCell.

Acceptansen i tredje alternativet kan ske på tre olika sätt:
<b>1
Operatören accepterar data genom att sätta OpAccept attributet.
<b>2
Applikationen accepterar data genom att sätta Accept-ingången.
<b>3
Både operatören och applikationen måste ha accepterat data innan acceptansen 
är komplett.

Om data ej accepteras sker återställning genom att Reset-ingången sätts, eller 
genom att OpReset-attributet sätts.

Kvittens kan skickas till sändaren. Förfrågan och mottagning sker via 
RemTrans-objekt.

<h1>Attribut

<b>Out
Utgången kan kopplas till en NMpsCell. Kopplingen är enbart grafisk, den 
verkligakopplingen sker genom CellObject-attributet. Kopplingen ska göras 
med en AnalogFeedback-koppling.

<b>Accept
Applikationen accepterar data i visnings-objektet och skapar ett dynamiskt 
objekt som läggs i en cell. Accept och Cell bitarna i Function ska vara satt. Om 
AcceptBoth biten är satt måste dessutom operatören ha accepterat i OpAccept 
innan acceptansen är komplett.

<b>Reset
Väntan på acceptans återställs på positiv flank.

<b>Error
Utgång som indikerar att ett fel har registrerats.
Error-utgången tas ner efter ett scan.

<b>Key
Nyckel för data som efterfrågas. Key används om  nyckeln är ett heltal. 
IntKey-biten i Function-attributet ska vara satt.

<b>KeyStr
Nyckel för data som efterfrågas. KeyStr används om nyckeln är en sträng. 
IntKey-biten i Function-attributet ska inte vara satt.

<b>Function

Anger vilken funktion som ska användas. En bitmask.

Bit, Namn, Funktion
<b>1
DisplayObject
Mottaget data kopieras till ett statiskt objekt, angivet i attributet DisplayObjekt.
<b>2
Accept
Innan ett dynamisk objekt skapas väntas på accept från operatör och/eller 
applikation.
<b>4
CellInsert
Ett dynamisk objekt, namngivet efter nyckeln, skapas och läggs in i en cell.
<b>8
Ack
Kvittens skickas till sändaren. Kvittensen skickas med remtrans-objektet 
angivet i SendRemTrans.
<b>16
AcceptBoth
För att data ska accepteras, måste både Accept-ingången och OpAccept-
attributet ha satts.
<b>32
DisplayReset
Vid återställning nollställs visningsobjektet.
<b>64
Header
Mottagen trans antas innehålla en header med nyckel (string40) och status 
(int32). Om motsvarande bit sätts i sändande DataSend-objekts Function-
attribut kommer en header att läggas i transen. En header erfordras om ett 
dynamiskt objekt ska skapas.
<b>128
AckOther
Mottagningen av data fungerar samtidigt som en kvittens för en tidigare 
sändning från ett DataSend-objekt. Den nyckel som DataSend-objektet skickar 
måste finnas i den mottagna transen.

<b>AlarmText
Meddelande som skickas tilll operatören när något går snett. Meddelandet 
sänds som B-larm.

AlarmText[0]    Reserv.
AlarmText[1]    Cellen som det skapade objektet ska läggas i är full.
AlarmText[2]    Acceptans-begäran detekterad utan att objektet väntar på 
acceptans.
AlarmText[3]    Fatalt fel, ytterligare info finns på konsolloggen.
AlarmText[4]    Det dynamiska objekt som ska skapas finns redan i rtdb.
AlarmText[5]    Reserv.

<b>DisplayObject
Visningsobjekt. Data i transen kopieras till objektet vi DataConvert funktionen. 
Vid acceptans kopieras det vidare till ett dynamiskt objekt, om så önskas.

<b>SendRemTrans
RemTrans-objekt som används för att sända kvittens.

<b>RcvRemTrans
RemTrans-objekt som används för att ta emot data.

<b>CellObject
NMpsCell-objekt som det skapade objektet ska läggas in i.

<b>DataClass
Klass för objekt som skapas.

<b>DataParent
Plats i hierarkin under vilken skapade objekt ska läggas.

<b>ToConvdef...

<b>FromConvDef...
Se DataCnv objektet.

<b>OpAccept
Acceptans från operatören. OpAccept återställs automatisk efter det 
acceptansen registrerats.

<b>OpReset
Reset från operatören. OpReeset återställs automatiskt efter att OpReset har 
registrerats.




</topic> **********
<topic> DataSend
DataSend

<h1>Beskrivning

DataSend sänder en trans och väntar ev på kvittens.
Om kvittensen inte har kommit inom timeout-tiden, meddelas operatören.

Sändning och mottagning av kvittens sker via RemTrans-objekt.

Transen kan innehålla en header med bl a objektsnamn, om t ex motsvarande 
objekt ska skapas i mottagaränden.

<h1>Attribut

<b>DataIn
Ingång som kopplas till en data utgång. Objektet som ingången pekar på 
kommer att konverteras och läggas i transen. En header som innehåller bl a 
objektsnamn kan läggas i transen om t ex motsvarande objekt ska skapas i 
mottagarnoden.

<b>Trigg
Triggar sändning på positiv flank.

<b>DataSent
Markerar att data har sänts. Om kvittens har begärts sätts DataSent när 
kvittensen har anlänt. DataSent återställs efter ett scan.

<b>Error
Utgång som indikerar att ett fel har registrerats.
Error-utgången tas ner efter ett scan.

<b>Function

Anger vilken funktion som ska användas. En bitmask.

Bit, Namn, Funktion:
<b>8
Ack
En kvittens förväntas komma genom RcvRemTrans objektet inom Timout 
tiden. DataSent flaggan sätts inte förrän kvittensen har anlänt.
<b>64
Header
En header läggs först i transen innehållande objektsnamn (string40) och status 
(int32).
<b>128
AckOther
En kvittens förväntas komma till ett godtyckligt DataRcv-objekt, dvs 
kvittensen kan innehålla data. Function för DataRcv-objektet ska också vara 
AckOther. DataSent flaggan sätts vid sändningen och ej när kvittensen 
kommer.

<b>TimeoutTime
Timeout tid för en sändning. Om kvittens ej har erhållits inom tiden skickas ett 
meddelande till operatören (om AlarmText[0] är ifylld). Kvittens biten i 
Function attributet måste vara satt.

<b>AlarmText
Meddelande som skickas till operatören när något går snett. Meddelandet sänds 
som B larm.

AlarmText[0]    Meddelande vid timeout.
AlarmText[1]    DataIn pekar ej på något dataobjekt. Triggning kan ej utföras.
AlarmText[2]    Reserv.
AlarmText[3]    Fatalt fel, ytterligare info finns på konsolloggen.
AlarmText[4]    Reserv.
AlarmText[5]    Reserv.

<b>ReturnStatus
Om status-ordet i kvittens-transen matchar ett värdet i ReturStatus sänds ett 
meddelande till operatören med texten i ReturnStatusText med samma index.

<b>ReturnStatusText
Larmtext som skickas vid olika ReturStatus.

<b>SendRemTrans
RemTrans-objekt som används för att sända data.

<b>RcvRemTrans
RemTrans-objekt som används för att ta emot kvittens

<b>ToConvdef...

<b>FromConvDef...
Se DataCnv objektet.




</topic> **********
<topic> DataCnv
DataCnv

<h1>Beskrivning

DataCnv konverterar data i ett objekt och lägger resultatet i ett annat objekt. In- 
och ut-objekt anges med grafiska kopplingar.

Konverteringen definieras med två konverterings definitioner. Dessa anger hur 
data i in- resp ut-objektet är strukturerat.

Konverteringen sker genom att attribut i de båda konverteringsdefinitionerna 
paras ihop om de har samma namn. Om ett attribut har samma typ i båda 
definitionerna kommer det att resultera i en memcpy, annars sker en 
konvertering.

Datastrukturen definieras i objekt av klasses ConvDef. I detta objekt 
specificerar man typ, namn och eventuellt storlek och format för elementen i 
datastrukturen. En rad i ConvDef objektet innehåller två argument: typ och 
namn, samt i vissa fall ett tredje: storlek, format el dyl.

<b>Typ
Beskrivning
Kommentar

<b>Char
8-bitars Character<t>
<b>Boolean
Boolean
<b>Int8
8-bitars int
<b>Uint8
8-bitars unsigned int
<b>Int16
16-bitars int
<b>UInt16
16-bitars unsigned int
<b>Int32
32-bitars int
<b>UInt32
32-bitars unsigned int
<b>Float32
32-bitars float
Om konvertering till String eller Ascii anges format i tredje argumenet (c-
sytax, t ex "%8.2f").
<b>Float64
64-bitars float
<b>String
Null-terminerad sträng
Elementets storlek ska specifieras i tredje argumentet (antal byte).
<b>Ascii
Sträng utfylld med space
Elementets storlek ska specifieras i tredje argumentet (antal byte).
<b>Binary
Binärt eller ospecificerat element
Elementets storlek ska specifieras i tredje argumentet (antal byte).
<b>Unknown
Okänt element
Elementets storlek ska specifieras i tredje argumentet (antal byte).


Implementerade konverteringar:

<b>Från<t>Till
Char<t>String
Int16<t>Int32
Int32<t>Int16
Float32
String
Float32<t>Int32
String
Ascii
String<t>Int32
Float32
Ascii<t>Int32
Float23

<h1>Attribut

<b>DataFrom
Ingång som kopplas till en data utgång. Data i objektet
som ingången pekar på kommer att konverteras och läggas i objektet som 
DataTo pekar på.

<b>DataTo
Ingång som kopplas till en data utgång. Konverterad data
läggs i objektet som ingången pekar på.

<b>Condition
När Condition är sann sker konvertering. Om Condition ej
kopplas sker alltid konvertering.

<b>ToConvdefType
Anger vilken typ av konverterings-definition som används.

ConvDefType, Namn, Funktion:
<b>0
Object
Konverteringen definieras av ett objekt av klassen ConvDef. Attributet 
ToConvDef innehåller ConvDef objektet.
<b>1
File
Konverteringen definieras av en fil.
<b>2
Class
Konverteringen definieras av en klass.

<b>ToConvdef
Objekt av klassen ConvDef eller en klass som specificerar datastrukturen i 
DataFrom objektet.

<b>ToConvdefFile
Filspecifiktation som på en fil som specificerar datastrukturen i DataFrom 
objektet.

<b>FromConvdefType
Se ToConvdefType. Motsvarande funktion för DataFrom objektet.

<b>FromConvdef
Se ToConvdef. Motsvarande funktion för DataFrom objektet.

<b>FromConvdefFile
Se ToConvdefFile. Motsvarande funktion för DataFrom objektet.




</topic> **********
<topic> CellDisp
CellDisp

<h1>Beskrivning
CellDisp används för att visa innehållet i de data-objekt som ligger i 
NMpsCell-objekt i operatörsbilder. Det ger också möjlighet åt operatören att ta 
bort data-objekt, flytta data-objekt bakåt eller framåt i en cell, välja ut ett 
dataobjekt för att visa mer information om objektet.

CellDisp-objektet gör det möjligt att visa en tabell över data-objekten i en cell, 
med objektsnamn och ett antal utvalda attribut. CellDisp-objektet innehåller ett 
antal vektorer dit valda attribut i data-objekten i cellerna kopieras. Vektorerna 
kan sedan visas i en operatörsbild.

Det finns även en utvalsfunktion med vilken ett objekt kan väljas ut. Det 
utvalda objektet kopieras till ett visningsobjekt, dvs ett permanent objekt av 
samma klass som de dataobjekt som finns i cellen. Om man i en operatörsbild 
visar innehållet i visningsobjektet kommer detta alltid att spegla det utvalda 
objektet.

Om man har flera tabeller i samma bild, men vill ha en gemensam 
utvalsfunktion, kopplar man samman ett antal CellDisp-objekt mha ett 
DispLink-objekt. DispLink-objektet ser till att högst ett objekt är utvalt 
samtidigt. I DispLink-objektet finns dessutom funktioner för att ta bort det 
utvalda objektet, flytta det utvalda objektet ett steg framåt eller bakåt i cellen.

Utvalet sker antingen genom att varje tabellrad förses med en utvals-
tryckknapp, eller med  SelectNext/SelectPrevious funktion som finns i 
DispLink objeket. Genom SelectNext/SelectPrevious kan utvalet ske mha 
funktionstangenter i de fall detta är att föredra framför mus-klickningar. 

En tabell kan visa objekten i upp till 10 celler. I CellDisp-objektet finns det 
plats för 5 attribut av typen float, 5 integer och 5 boolean. Dessutom finns en 
vektor som innehåller objid för data-objekten.

Max antal dataobjekt som kan visas i samma tabell är 60.
Samma CellDisp kan hämta in dataobjekt från upp till 10 cell-objekt.
Cell objektet kan vara av klassen NMpsCell eller NMpsStoreCell.
Ett DispLink-objekt kan länka ihop ett obegränsat antal CellDisp-objekt.
Utvalsfunktionen är tv ej kopplad till urvalsfunktionen i NMpsStoreCell-
objeket.

<h1>Attribut

<b>Cell1-Cell10
Kopplas till GetData-objekt som refererar objekt av klassen NMpsCell eller 
NMpsStoreCell.

<b>Link
Kopplas till utgången på ett DispLink-objekt. Används för att länka 
urvalsfunktionen med andra CellDisp-objekt, eller för att utnyttja funktioner 
för att ta bort objekt ur cellen, flytta objekt framåt eller bakåt i cellen, välja ut 
nästa eller föregående. 

<b>DisplayObject
Kopplas till GetData-objekt som refererar ett visnings-objekt av samma klass 
som de dataobjekt som hanteras i cellerna. DisplayObject gör det möjligt att 
visa upp mer detaljerad information om det utvalda objektet genom att 
innehållet i utvalt objekt kommer att kopieras till visnings-objektet.

<b>DataClass
Klassen på de dataobjekt som hanteras i cellerna.

<b>Function

Function:
0<t>Normal funktion.
1<t>Data-objekten läggs i omvänd ordning i CellDisp-objektet.

<b>Number
Om utvals-funktionen ska vara gemensam med andra DispCell-objekt måste 
det finnas en ordning mellan objekten, som bestämmer i vilken ordning utvalet 
hoppar mellan olika DispCell-tabeller. DispCell-objekten som är kopplade till 
ett gemensamt DispLink-objekt numreras från ett och uppåt. Numret för varje 
DispLink-objekt som tillhör en länk måste vara unikt, och det får inte finnas 
något hopp i nummerserien.

<b>MaxSize
Storlek på den tabell som visas upp (antal rader). MaxSize kan inte vara större 
än 60.

<b>SelDirection
SelDirection ändrar utvals-riktningen, dvs man får omvänd funktion för 
funktionerna SelectNext /SelectPrevious och MoveForward/MoveBackward. 
Detta kan vara användbart om man har länkat ihop flera CellDisp-objekt, och 
en del tabeller visar dataobjekten i rättvänd ordning, andra i omvänd ordning. 
Betydelsen av Next och Previous är då inte entydig.

SelDirection 0 innebär att Next och Forward syftar mot högre index i cellen, 
SelDirection 1 att Next och Forward syftar mod lägre index.

<b>FloatAttr
Vektor pwr_tString32 med 5 element. Här anges namnet på de attribut 
dataobjekten av typen float som ska visas i tabellen. Max 5 attribut kan anges. 
Attributet i FloatAttr[0] kommer att kopieras till F1, FloatAttr[1] till F2 osv.

<b>BooleanAttr
Vektor pwr_tString32 med 5 element. Här anges namnet på del attribut i 
dataobjekten av typen boolean som ska visas i tabellen. Max 5 attribut kan 
anges. Attributet i BooleanAttr[0] kommer att kopieras till B1, BooleanAttr[1] 
kommer att kopieras till B2 osv. 

<b>IntAttr
Vektor pwr_tString32 med 5 element Här anges namnet på del attribut i 
dataobjekten av typen integer som ska visas i tabellen. Max 5 attribut kan 
anges. Attributet i IntAttr[0] kommer att kopieras till I1, IntAttr[1] kommer att 
kopieras till I2 osv.

<b>Select
Vektor pwr_tBoolean med 60 element. Ett objekt på rad i väljs ut genom att 
Select[i] sätts. Select[n] kopplas i operatörsbilden till en tryckknapp för rad n i 
tabellen.  OBS! pwr_SetDig kan ej användas i gms eftersom den ej hanterar 
vektorer, använd pwr_SetValue istället.

<b>Objid
Vektor pwr_tObjid med 60 element. Innehåller objid för dataobjekt i cellen. 

<b>F1-F5
Vektorer pwr_tFloat32 med 60 element. Innehåller värde i attributen angivet i 
FloatAtt för respektive dataobjekt i cellen.

<b>B1-B5
Vektorer pwr_tBoolean32 med 60 element. Innehåller värde i attributen 
angivet i BooleanAtt för respektive dataobjekt i cellen.

<b>I1-I5
Vektorer pwr_tInt32 med 60 element. Innehåller värde i attributen angivet i 
IntAtt för respektive dataobjekt i cellen.




<topic> DispLink
DispLink

<h1>Beskrivning

Ett DispLink-objekt kopplas till ett eller flera CellDisp för att samordna 
utvalsfunktionen i CellDisp-objeketen, samt för att hantera bortagning och 
omflyttning av objeket i cellerna.

<h1>Attribut

<b>MoveForward
Flyttar utvalt objekt ett steg framåt (till närmast högre index) i cellen. 
Förflyttning kan endast ske inom en cell.

<b>MoveBackward
Flyttar utvalt objekt ett steg bakåt (till närmast lägre index) i cellen. 
Förflyttning kan endast ske inom en cell. 

<b>Remove
Ta bort utvalt objekt.
Objektet tas bort ur cellen mha cellens extern funktion. Eventuellt (beroende på 
Function i cellen) tas även objektet bort ur databasen.

<b>SelectNext
Väljer ut nästa objekt, dvs objektet som ligger på närmast högre index relativt 
utvalt objekt. Om det inte finns något objekt på högre index i cellen, väljs 
objektet på index 0 i cellen med närmast högre Number.
Om det inte finns en cell med högre Number väljs objektet på index 0 i cellen 
med Number 1.

<b>SelectPrevious
Väljer ut föregående objekt, dvs objektet som ligger på närmast lägre index 
relativt utvalt objekt. Om det inte finns något objekt på lägre index i cellen, 
väljs objektet med högsta index i cellen med närmast lägre Number.
Om det inte finns en cell med lägre Number väljs objektet med högsta index i 
cellen med högst Number.

<b>SelectObjid
Innehåller objid för utvalt objekt. Härifrån kan utvalt objekt hämtas från t ex ett 
applikationsprogram. 




</topic> **********
<topic> nmpsappl_Mirror
nmpsappl_Mirror

<h1>Beskrivning

nmpsappl_Mirror speglar innehållet i en eller flera celler till ett 
applikationsprogram. Funktionen hanterar direktlänkning av celler och 
dataobjekt och returnerar ej lista på dataobjekt till applikationen, tillsammans 
med information om bakkant, framkant, utval, vilka objekt som är nya eller har 
försvunnit, vilken cell ett objekt tillhör.  Applikationen förses även med pekare 
till dataobjekten.

Man initierar en spegling genom att anropar rutinen nmpsappl_MirrorInit. Som 
argument skickar man med en lista på de celler som ska speglas. Sedan anropas 
nmpsappl_Mirror cykliskt för att få information om vilka dataobjekt som ligger 
i cellerna. Alla dataobjekt som finns i den angivna cellerna bakas ihop i en 
vektor, och ordningen bestämms av den ordning man angivit cellerna till 
nmpsappl_MirrorInit. 

Flera speglingar (max 32 st) kan hanteras i samma program, och varje spegling  
omfattar maximalt 32 celler. Samma cell kan tillhöra flera speglingar. Man kan 
t ex spegla samtliga celler i systemet i en array, samtidigt som man speglar 
enstaka celler, eller urval av celler i andra arrayer.

<h1>Anrop

pwr_tStatus nmpsappl_Mirror

(nmpsappl_t_ctx<t>applctx,
int<t>*data_count,
nmpsappl_t_datainfo<t>**datainfo)

<h1>Beskrivning

nmpsappl_Mirror anropas cykliskt för att uppdatera speglingen. Rutinen fyller i 
en lista på samtliga dataobjekt som finns i cellerna. Listan är av typen 
nmpsappl_t_datainfo som beskrivs av följande struct

typedef struct
{
pwr_tObjid<t>objid;
pwr_tString80<t>name;
pwr_tAddress<t>object_ptr;
pwr_tBoolean<t>select;
pwr_tBoolean<t>front;
pwr_tBoolean<t>back;
pwr_tBoolean<t>new;
pwr_tBoolean<t>removed;
unsigned long<t>cell_mask;
} nmpsappl_t_datainfo;

<b>Element<t>Beskrivning
objid<t>dataobjektets objid.
name<t>dataobjektet namn (sista namnledet).

<b>object_ptr
pekare till dataobjektet.
<b>select
select-attributet för dataobjektet i cell-objektet. Om ett dataobjekt ligger i flera 
celler, sätts select om objektet är utvalt i minst en av cellerna.
<b>front
front-attributet för dataobjektet i cell-objektet. Om ett dataobjekt ligger i flera 
celler, sätts front om front-flaggen är satt i en av cellerna.
<b>back
back-attributet för dataobjektet i cell-objektet. Om ett dataobjekt ligger i flera 
celler, sätts back om back-flaggen är satt i en av cellerna.
<b>new
markerar att ett dataobjekt är nytt sedan senaste speglingen.
<b>Removed
markerar att dataobjektet har försvunnit sedan senaste speglingen. Kräver att 
nmpsappl_mOption_Remove har angetts i options
<b>cell_mask
anger vilken eller vilka celler dataobjektet befinner sig i.
cell_mask är en bitmask där första biten anger första cellen (dvs den som 
angivits först i listan till nmpsappl_mirror_init), osv.

<h1>Argument

<b>ctx

Typ
nmpsappl_t_applctx

Funktion
En kontext-pekare som erhölls vid anrop till nmpsappl_mirror_init.

<b>data_count

Typ
pekare på en int

Funktion
Antal dataobjekt i dataobjekts-listan


<b>datainfo

Typ 
pekare till en vektor av typen nmpsappl_t_datainfo.

Funktion
Lista på dataobjekten i cellerna.




</topic> **********
<topic> nmpsappl_MirrorInit
nmpsappl_MirrorInit

<h1>Anrop

pwr_tStatus  nmpsappl_MirrorInit

(pwr_tString<t>*cell_array,
unsigned long<t>options,
nmpsappl_t_ctx  *ctx)

<h1>Beskrivning

Med nmpsappl_MirrorInit initierar man en spegling genom att ange de celler 
som ska speglas. Man för till baka en context som används för att skilja olika 
speglingar åt. Efter initieringen anropas nmpsappl_Mirror cykliskt för att få 
information om cellinnehållet.

<h1>Argument

<b>cellarray

Typ
Pekare på en vektor pwr_tString80[]

Funktion
En vektor som innehåller namnet på de celler som ska speglas. De speglade 
dataobjekten ordnas i den ordning cellerna anges i vektorn. En NULL-string 
markerar sista cellnamnet.

<b>Options

Typ
unsigned int

Funktion
Options är en bitmask. Bitarna anger olika funktioner för nmpsappl_mirror.

nmpsappl_mOption_Remove
Dataobjekt som har försvunnit från de angivna cellerna sedan senaste anropet 
läggs med i dataobjektlistan med remove-flaggan satt.

nmpsappl_mOption_NamePath
Namnfältet i den datastruktur som returneras för ett dataobjekt  på dataobjektet 
innehåller hierarkinamnet.

        
<b>ctx

Typ
nmpsappl_t_ctx

Funktion
En kontext-pekare som skickas med till nmpsappl_mirror rutinen.





</topic> **********
<topic> nmpsappl_RemoveData
nmpsappl_RemoveData

<h1>Anrop
pwr_tStatus nmpsappl_RemoveData(
<t>nmpsappl_t_ctx<t>ctx,
<t>pwr_tObjid<t>objid)

<h1>Beskrivning

nmpsappl_DataRemove tar bort ett dataobjekt ur de celler som speglas.

<h1>Argument

<b>ctx

Typ     
nmpsappl_t_applctx

Funktion
Kontext-pekare som erhölls vid anrop till nmpsappl_mirror_init.

<b>Objid

Typ
pwr_tObjid

Funktion
Objid för dataobjekt som ska tas bort.




</topic> **********
<topic> nmpsappl_RemoveAndDeleteData
nmpsappl_RemoveAndDeleteData

<h1>Anrop

pwr_tStatus nmpsappl_RemoveAndDeleteData(
<t>nmpsappl_t_ctx<t>ctx,
<t>pwr_tObjid<t>objid)

<h1>Beskrivning

nmpsappl_DataRemove tar bort ett dataobjekt ur de celler som speglas. 
Dessutom tas objektet bort ur databasen.
Argument

<b>ctx

Typ     
nmpsappl_t_applctx

Funktion
Kontext-pekare som erhölls vid anrop till nmpsappl_mirror_init.

<b>Objid

Typ
pwr_tObjid

Funktion
Objid för dataobjekt som ska tas bort.

</topic> **********

************************************************
************ NYTT  *****************************
************************************************

<topic> nytt
Nytt!

<h1>Objekt Referens Manual (ORM) ver 1.2 

Objektbeskrivning har tillkommit för att kunna visa Svensk hjälp text i XTT 
(trace) för underhåll (elektriker) mm och bygger på "PROVIEW/R Objekt 
handbok" dokument version: v2.0.

<b>Gör så här vid revidering
Spara filen som "doc" och som "txt" och kopiera den till utvecklingsdisken för 
proview. D.v.s. denna fil "orm_objekt_v??.doc" kopieras till Proview system 
katalog/fil "$pwr_exe/sv_se/pwrb_xtthelp.dat".

När man sparar denna DOC fil i Word för Proview "sparar man som" och 
anger filformatet "txt" och bocka för "infoga radbrytningar" i popup fönstret 
som dyker upp när man sparar. Glöm inte sen att ändra filen "txt" till "dat".

-------------------------------------------------------------------------
<h1>Revision v1.0
<b>Datum
021126
<b>Signatur
VTV/Johan Engström
<b>Ändring
första utgåvan v1.0.
-------------------------------------------------------------------------
<h1>Revision v1.1
<b>Datum
021127
<b>Signatur
VTV/Johan Engström
<b>Ändring
Länkar hit och dit!
-------------------------------------------------------------------------
<h1>Revision v1.2
<b>Datum
021203
<b>Signatur
VTV/Johan Engström
<b>Ändring
Nmps + IO objekt
-------------------------------------------------------------------------

</topic> **********

************************************************
*********** INFO *******************************
************************************************

<topic> info
Bra att veta!

Dokumentet beskriver de (objekt) klasser, med tillhörande attribut, som ingår i 
PROVIEW/R. Alla objekt är inte med men förhoppningsvis det objekt du är 
intresserad av. 

<h1>Objekt
Varje objektklass representerar en bestämd funktion eller metod. En objekt 
klass han uppträda på ett sätt i utvecklingsmiljön, t.ex. i form av en symbol 
med vissa attribut, och på ett annat sätt i målmiljön. Generellt består en klass 
av data och kod. Exekverbar kod existerar endast i målmiljön. 

Objektklassens attribut, som används för att beskriva enskilda instansers 
aktuella tillstånd som finns i objektkroppen. Det är inte säkert att hela kroppen 
lagras i rtdb. 

Beskrivningen av en objektklass inleds med klassens namn följt av en kort 
beskrivning av funktionen och därefter alla attribut.

<h1>Attribut 
Det finns tre olika typer av attribut till en symbol:

1, Input Attributes
Attribut som i objekt symbolen har ingångar för grafisk anslutning av signaler.

2, Output Attributes
Attribut som i objektsymbolen har utgångar för grafisk koppling till andra 
objekt.

3, Internal Attributes 
Attribut som i objektsymbolen inte har in/utgångar för grafisk koppling till 
andra objekt.

<b>Varje internt (internal) attribut beskrivas normalt så här:

Attribute name 
Graph name:
Type: attribute data type
Flags: attribute flags
Default value: 

<b>Med betydelsen så här:

<b>Attribute
Namnet på attributet.

<b>Graph
Ingångar resp. utgångar i objekt med grafisk symbol har namn som anges av 
Graph name.

<b>Type
Type anger attributets data typ.

<b>Flags
Av Flags framgår i vilken situation attributet används, t.ex. huruvida ett ändrat 
attributvärde beaktas eller ej i målmiljön.

<b>Default
Default value anger vilket värde attributet åsätts som standard vid 
konfigureringen. 


<h1>Mer info om flaggor och datatyper:

Flaggor<link> flags
Datatyper<link> datatyper

</topic> **********

************************************************
**************FLAGS****************************
************************************************

<topic> flags
Flags

Olika typer av flaggor, d.v.s. hurvida ett ändrat attributvärde beaktas eller ej i 
målmiljön (styrsystemet, RunTime).

<b>DevOnly 
Attributet existerar bara i utvecklings miljön

<b>InRtdb 
Den kopplade insignalens värde lagras i rtdb. 
 
<b>NoInvert 
Värdet av digital insignal kan inte inverteras. Normalt kan digitala insignaler 
inverteras.
 
<b>NoRtdb 
Den kopplade insignalens v ärde används utan att lagras i rtdb. Ska värdet 
avläsas måste detta göras i källan, dvs i det anslutna objektets utgång.
 
<b>OpenCompileFixParam 
Attributets v ärde anv änds om ingången lämnas öppen. Detta värde sätts med 
hjälp av Attribute Editor och läses vid kompileringstillfället. Om attributet 
ändras under exekveringen, t.ex. med hjälp av funktion i C- eller PLC-
program, beaktas inte ändringen. Det kan alltså inte ändras i rtdb.
 
<b>OpenExtern 
Lämnas ingången öppen används värdet från angiven utgång i samma objekt.
 
<b>OpenNoFunction 
Öppen ingång beaktas ej.
 
<b>OpenParam 
Lämnas ingången öppen används attributets värde. Detta sätts i 
utvecklingsmiljön med hjälp av Attribute Editor och ändringar i målmiljön, 
t.ex. via objektbild eller processbild, beaktas. Attributet fungerar precis som en 
design parameter. 

<b>CompileFixParam
Attributets värde läses vid kompileringstillfället och kan alltså inte ändras i 
rtdb.

<b>CompileSetParam
Attributets värde sätts under PLC-jobbets initialisering, t.ex. ScanTime i Pid 
objekt.

Parametern är avsedd för läsning och ska inte ändras i målmiljlön

<b>FixParam
Attributets värde läses/sätts i samband med initialisering i målmiljön. Värdet 
får inte ändras i rtdb.

<b>InitSetParam
Attributets värde sätts vid initiering av PLCprogrammet, t.ex. ValueIndex i Av-
objktet. Parametern är avsedd förläsning och ska inte ändras i målmiljön (`run-
time').

<b>Intern
Parametern används internt av objektet och uppdateras på initiativ av 
PROVIEW.

<b>Access
Vissa attribut med Param flagga kan dessutom ha Access flagga. En sådan 
innebär att rätten att ändra attributets värde tillkommer den som uppfyller det 
behörighetskrav som uttrycks av ett separat access attribut. Vid ändring av 
parametern från objektbild/MERbild beaktas access attributet för kontroll av 
behörighet och i förekommande fall gränskontroll. Så är fallet för t.ex. Gain i 
Pid-objektet vars accessparameter är AccGain, MinGain och MaxGain, dvs 
access parametrar heter som parametern själv med tillägg av prefixet Acc.

<b>Output
Utsignalen sätts av PROVIEW och lagras i rtdb.

<b>OutNoVal
Utsignalensvärde finns inte lagrat i rtdb. (Gäller Getxx-objekt)

<b>Operator
Signal order sätts av operatörer och återställs av PROVIEW efter att ha 
noterats.
 
<b>RunTimeOnly
Attibutet används enbart i målmiljön.
 
<b>PwrConstant
Attributets värde är fastlagt i PROVIEW distributionen och får inte ändras.

</topic> **********

************************************************
***********DATATYPER *************************
************************************************

<topic>datatyper
Datatyper

Type anger den förväntade datatypen på den storhet som ska knytas till 
attributet.

<h1>Data Typer 
-------------------------------------------------------------------------------------------
<b>Type
<t>Datatyp<t>Beskrivning
-------------------------------------------------------------------------------------------

<b>pwr_tBoolean
<t>Byte signed<t>sant (1) eller falskt (0)
<b>pwr_tChar
<t> Byte signed <t>ett tecken (A, b, 1, 2, 8, osv..)
<b>pwr_tInt8
<t> Byte signed <t>heltal (255) med teckenbit 
<b>pwr_tString8
<t> Byte signed <t>7 tecken
<b>pwr_tString16
<t> Byte signed <t>15 tecken
<b>pwr_tString40
<t> Byte signed <t>39 tecken
<b>pwr_tString80
<t> Byte signed <t>79 tecken
<b>pwr_tString132
<t> Byte signed <t>131 tecken
<b>pwr_tText[ ]
<t> Byte signed <t>1024 tecken
<b>pwr_tURL
<t> Byte signed <t>länk (webadress)
-------------------------------------------------------------------------------------------
<b>pwr_tUInt8
<t> Byte unsigned <t>heltal (256)
-------------------------------------------------------------------------------------------
<b>pwr_tInt16
<t>Short word signed <t>heltal (ca,+/-32767)
-------------------------------------------------------------------------------------------
<b>pwr_tUInt16
<t>Short word unsigned <t>heltal (65535)
-------------------------------------------------------------------------------------------
<b>pwr_tInt32
<t>Long word signed <t>heltal (stort)
-------------------------------------------------------------------------------------------
<b>pwr_tUInt32
<t>Long word unsigned<t> heltal (stort)
<b>pwr_tEnum
<t>Long word unsigned <t>Uppräkningstyp
<b>pwr_tMask
<t>Long word unsigned <t>bitmask
-------------------------------------------------------------------------------------------
<b>pwr_tFloat32
<t>Float <t>7 decimala siffror
-------------------------------------------------------------------------------------------
<b>pwr_tFloat64
<t>Double<t>16 decimala siffror
-------------------------------------------------------------------------------------------
<b>pwr_tTime 
<t>Time<t>Tidformat UTC
-------------------------------------------------------------------------------------------
<b>pwr_sAttriRef.Offet
<t>pwr_tObjid <t>Attribut referens
<b>pwr_sAttriRef.Size
<t>pwr_tObjid <t>Attribut referens
<b>pwr_sAttriRef.Flags
<t>pwr_tObjid <t>Attribut referens
-------------------------------------------------------------------------------------------
<b>pwr_tVid
<t>pwr_tObjid<t><t>Volymsidentitet
<b>pwr_tOix
<t>pwr_tObjid <t><t>Objekt index
-------------------------------------------------------------------------------------------


<b>OBS!
Attribut av typen pwr_tFloat32 har 7 signifikanta siffror. Detta är värt att ha i 
minnet speciellt i samband med objekt som Timint , Sum etc. där utsignalerna 
kan bli mycket stora tal. 


</topic>******


************************************************
*************LITE INFO *************************
************************************************

<topic> lite_info
PROVIEW/R objekt med kort förklaring.

<b>Grupperade efter funktion med början:

Konfiguration
Window
Operatör
Applikationer
Datainsamlimg
Historik
Backup
Utenheter, skrivare
Lagra signaler
Watchdog, övervakning
kanalobjekt
anläggning
Signaler I/O
Grafcet
Get, set, reset
Logiska
Analoga
Reglering
Drive, valve, pos
Simulering
Dokumentera

Länkarna (objekten) nedan leder till den "stora" beskrivningen om objektets 
funktion och alla attribut.

<h1>Konfiguration

<b>$DocHier <link> $DocHier
Grupperingsobjekt för 'dokument'.

<b>IOHandler <link> IOHandler
Innehåller attribut som används av IO-jobbet.

<b>$LibHier <link> $LibHier
Genom att placera enskilda objekt eller vanligare hela hierarki strukturer under 
$LibHier-objekt kan man i utvecklingsmiljön spara undan både 
anläggningsdelar och delar av nodsystemet som av någon anledning inte ska 
ingå i realtidsdatabasen just nu.

<b>ListDescriptor <link> ListDescriptor
Beskriver innehåll i och utseende på enskild lista.

<b>MessageHandler <link> MessageHandler
Se Objektet innehåller en enskild meddelandehanterares (=mh:s) attribut.

<b>$Node <link> $Node
Konfigurerar nod i 'Node Configuration'.

<b>$NodeHier <link> $NodeHier
Grupperingsobjekt i 'Node Configuration'.

<b>$System <link> $System
PROVIEW-systemets nodgemensamma objekt.

<h1>Window

<b>WindowPlc <link> WindowPlc
Objektet är förälderobjekt till alla objekt i underfönster både till PlcPgm och 
CSub objekt.

<b>WindowSubStep <link> WindowSubStep
Förälderobjekt till alla objekt i SubStep objekts underfönster.

<h1>Operatör

<b>Form <link> Form
Konfigurerar fönster för visning av formulär.

<b>Graph <link> Graph
Konfigurerar fönster för visning av GMS-grafikbild.

<b>OpPlace <link> OpPlace
Konfigurerar logisk operatörsstation för operatörskommunikation. En logisk 
operatörsstation representerar en arbetsstation, X-terminal e.dyl.

<b>PlotGroup <link> PlotGroup
Konfigurerar kurvgrupp.

<h1>Applikationer

<b>$Appl <link> $Appl
Konfigurerar laddning av angiven EXE-fil till målnod och initierar filens 
exekvering.

<b>Queue <link> Queue
Konfigurerar kö för mottagning av Package Handler meddelanden.

<h1>Datainsamlimg

<b>DsFast <link> DsFast
Lagrar data för snabbkurva à la minnesoscilloskop.

<b>DsFastConf <link> DsFastConf
Innehåller attribut för enskilt DsFast-jobb.

<b>DsTrend <link> DsTrend
Långtidslagrar data för trendkurva.

<b>DsTrendConf <link> DsTrendConf
Innehåller attribut för enskilt DsTrend-jobb.

<h1>Historik

<b>DsHist <link> DsHist
Konfigurerar historisk datalagring av skalär storhet eller element i 1- 
dimensionell vektor. (Datastorage History).

<b>DsHistServer <link> DsHistServer
Konfigurerar servern för historisk datalagring. (Data storage History Server).

<h1>Backup

<b>Backup <link> Backup
Pekar ut ett datasegment i rtdb för lagring (backup) på fil.

<b>Backup_Conf <link> Backup_Conf
Innehåller attribut för nodens backup-jobb.

<h1>Utenheter

<b>EventPrinter <link> EventPrinter
Konfigurerar logisk händelseskrivare.

<b>User <link> User
Konfigurerar operatörsstations användarkategori.

<h1>kanalobjekt<link> kanalobjekt

<b>ChanAi <link> ChanAi
Konfigurerar analog ingångskanal oberoende av det fysiska Ai-kortets typ. För 
omvandling från signalvärde till ärvärde används polynom.

<b>ChanAit <link> ChanAit
Konfigurerar analog ingångskanal oberoende av det fysiska Ai-kortets typ. 
Omvandling från signalvärde till ärvärde görs genom tabellslagning.

<b>ChanAo <link> ChanAo
Konfigurerar analog utgångskanal oberoende av det fysiska Ao-kortets typ.

<b>ChanCo <link> ChanCo
Konfigurerar pulsräknarkanal oberoende av det fysiska Co-kortets typ.

<b>ChanDi <link> ChanDi
Konfigurerar digital ingångskanal oberoende av det fysiska Di-kortets typ.

<b>ChanDo <link> ChanDo
Konfigurerar digital utgångskanal oberoende det fysiska Do-kortets typ.
ChanDo

<h1>Anläggning

<b>$PlantHier <link> $PlantHier
Grupperingsobjekt i 'Plant Configuration'.

<b>PlcPgm <link> PlcPgm
Representerar ett PLC program.

<h1>Signaler I/O

<b>Ai <link> Ai
Analog ingång.

<b>Ao <link> Ao
Analog utgång (Analog output).

<b>Av <link> Av
Analogt värde.

<b>Co <link> Co
Räknaringång (= Counter).

<b>Di <link> Di
Digital ingång.

<b>Do <link> Do
Digital utgång (Digital output).

<b>Dv <link> Dv
Digitalt värde.

<b>Po <link> Po
Puls utgång (Pulse Output) är ett modifierat Do objekt för pulsgenerering.

<h1>Grafcet

<b>InitStep <link> InitStep
Första steget i en Grafcet-kedja.

<b>Order <link> Order
Grafcet order.

<b>OrderAct <link> OrderAct
Hämtar, i aktivitetsfönster, Order-objektets tillstånd.

<b>Reset_SO <link> Reset
Tar, då ingången är TRUE, bort lagrad Grafcet order.

<b>SetCond <link> SetCond
Lagrar, i associerat Order eller Trans-objekt, status från villkorsfönster.

<b>SsBegin <link> SsBegin
Första Grafcet-steget i delsekvenskedja.

<b>SsEnd <link> SsEnd
Sista Grafcet-steget i delsekvenskedja

<b>Step <link> Step
Vanligt sekvensiellt Grafcet steg.

<b>SubStep <link> SubStep
Sekvenssteg för underliggande delsekvenskedja.

<b>Trans <link> Trans
Övergångsvillkor.

<h1>Get, set, reset, store mm.
objekt för att hämta lagra

<b>BCDDo <link> BCDDo
BCD ut ( t.ex. till teckenfönster)

<b>DiBCD <link> DiBCD
BCD in (t.ex från tumhjul).

<b>Gray <link> Gray
Graykod ingång. Objektet omvandlar 16-bitars Graykod till decimaltal.

<b>PiPos <link> PiPos
Översätter pulsräknarvärde till ingenjörsvärde ( position, volym etc.).

<b>CStoAo <link> CStoAo
Villkorlig lagring i Ao-signal ( Conditional Storage Analog output).

<b>CStoAp <link> CStoAp
Villkorlig lagring i analog parameter (Conditional Storage Analog parameter).

<b>CStoAv <link> CStoAv
Villkorlig lagring i Av-signal ( Conditional Storage Analog value).

<b>CStoIp <link> CStoIp
Villkorlig lagring i heltalsparameter ( Conditional Storage Integer parameter).

<b>GetAi <link> GetAi
Hämtar värdet på Ai-signal ( Get Analog input).

<b>GetAo <link> GetAo
Hämtar värdet på Ao-signal ( Get Analog output).

<b>GetAp <link> GetAp
Hämtar värdet på analog parameter (Get Analog parameter).

<b>GetAv <link> GetAv
Hämtar värdet på Av-signal ( Get Analog value).

<b>GetDi <link> GetDi
Hämtar värdet på Di-signal ( Get Digital input).

<b>GetDo <link> GetDo
Hämtar värdet på Do-signal ( Get Digital output).

<b>GetDp <link> GetDp
Hämtar värdet på digital parameter ( Get Digital parameter).

<b>GetDv <link> GetDv
Hämtar värdet på Dv-signal ( Get Digital value).

<b>GetIp <link> GetIp
Hämtar värdet på heltals parameter ( Get Integer parameter).

<b>GetPi <link> GetPi
Hämtar värdet på Co-signal ( Get Pulse input).

<b>ResDo <link> ResDo
Nollställer värdet på Do-signal (Reset Digital output).

<b>ResDp <link> ResDp
Nollställer värdet på digital parameter (Reset Digital parameter).

<b>ResDv <link> ResDv
Nollställer värdet på Dv-signal ( Reset Digital value).

<b>SetDo <link> SetDo
Ettställer värdet på Do-signal ( Set Digital output).

<b>SetDp <link> SetDp
Ettställer värdet på digital parameter ( Set Digital parameter).

<b>SetDv <link> SetDv
Ettställer värdet på Dv-signal ( Set Digital value ).

<b>StoAo <link> StoAo
Lagrar värde i Ao-signal ( Store Analog output).

<b>StoAp <link> StoAp
Lagrar värde i analog parameter ( Store Analog parameter).

<b>StoAv <link> StoAv
Lagrar värde i Av-signal ( Store Analog value).

<b>StoDo <link> StoDo
Lagrar värde i Do-signal ( Store Digital output).

<b>StoDp <link> StoDp
Lagrar värde i digital parameter ( Store Digital parameter).

<b>StoDv <link> StoDv
Lagrar värde i Dv-signal ( Store Digital value).

<b>StoIp <link> StoIp
Lagrar värde i heltalsparameter ( Store Integer parameter).

<b>ASup <link> ASup
Larmövervakning av analog storhet ( Analog Supervisory ).

<h1>Logiska

<b>And <link> And
OCH-grind.

<b>Count <link> Count
Pulsräknare (Pulse counter).

<b>CSub <link> CSub
Villkorlig exekvering av objekt placerade i underfönster.

<b>DSup <link> DSup
Larmövervakning av digital storhet ( Digital Supervisory ).

<b>Edge <link> Edge
Flankdetektor.

<b>Inv <link> Inv
Inverterare.

<b>Or <link> Or
ELLER-grind.

<b>Pulse <link> Pulse
Variabel puls.

<b>SR_R, SR_S <link> SR_R
Set Reset vippor.

<b>Timer <link> Timer
Fördröjt frånslag

<b>Wait <link> Wait
Fördröjt tillslag.

<b>Waith <link> Waith
Fördröjt tillslag med håll-funktion.

<b>XOr <link> XOr
Antingen-eller ( Exclusive Or)-grind.

<h1>Analoga

<b>AArithm <link> AArithm
Beräknar värdet av egendefinierat aritmetriskt uttryck.

<b>Adelay <link> Adelay
Tidsfördröjning av analog signal ( Analog delay).

<b>CArithm <link> CArithm
Friprogrammerbart objekt. Kodning sker i C-språket.

<b>Comph <link> Comph
Jämför (= Compares ) analog storhet mot övre (= high) gräns.

<b>Compl <link> Compl
Jämför (= Compares ) analog storhet mot undre (= low) gräns.

<b>Curve <link> Curve
Interpolera i tabell.

<b>DArithm <link> DArithm
Beräknar värdet av egendefinierat logiskt uttryck.

<b>Filter <link> Filter
Första ordningens filter.

<b>Limit <link> Limit
Dubbelsidig begränsare. Begränsar analog signal uppåt/nedåt och signalerar 
om begränsning sker.

<b>Maxmin <link> Maxmin
Max/Min väljare.

<b>PiSpeed <link> PiSpeed
Derivering av pulsräknarsignal.

<b>Ramp <link> Ramp
Begränsar en storhets ändringshastighet.

<b>Select <link> Select
Signalväljare. Väljer en av två analoga signaler.

<b>Speed <link> Speed
Deriverare.

<b>Sum <link> Sum
Summerare.

<b>Table <link> Table
Ett Curve-objekt interpolerar i en tabell som definierats i Table-objekt.

<b>Timint <link> Timint
Tidsintegrator ( Time integrator).

<h1>Reglering

<b>Inc3P <link> Inc3P
Inkrementell 3-punktsutgång med dödzon men utan lägesåterföring. 
Inkrementell syftar på insignalen och trean på att tre diskreta order kan ges 
med innebörden höger/vänster/ 0, upp/ner/0, öka/minska/0 etc. Utgångarna är 
satta under en tid som är proportionell mot storleken på insignalen.

<b>Mode <link> Mode
Hanterar val av reglermod (MANUAL / AUTO / CASCADE) och s.k. 
tvångsstyrning åt Pid-objekt.

<b>Out2P <link> Out2P
Två-punktsutgång med till/från styrning. En analog insignal konverteras till en 
binär signal. Styrningen utförs antingen som proportionell till/från styrning 
med dödzon eller som till/från styrning med hysteres.

<b>Pid <link> Pid
Implementerar olika former av PID reglering.

<b>Pos3P <link> Pos3P
Tre-lägesregulator, 'Positional 3-step controller', med lägesåterföring och 
dödzon. 'Positional' syftar på insignalen till OUT-ingången och trean på att tre 
diskreta order kan ges med innebörden höger/vänster/ 0, upp/ner/0, 
öka/minska/0 etc. Utgångarna är tidsproportionella mot ingången.

<h1>Drive, valve, pos, mm.

<b>Drive <link> Drive
Enkel (= START/STOPP) motorstyrning med övervakning av kontaktorsvar 
och rörelsevakt.

<b>Mvalve <link> Mvalve
Styrning, typ motorventil, med trelägesverkan samt övervakning av gångtid, 
gränslägesindikeringar och kontaktorsvar. Objektet realiserar öka-minska 
styrning.

<b>Posit <link> Posit
Positionerare. Används för positionering.

<b>Valve <link> Valve
Styrning, typ magnetventil, med tvålägesverkan och övervakning av gångtid. 
Objektet realiserar till-från styrning.

<h1>Simulering

<b>CStoAi <link> CStoAi
Villkorlig lagring i Ai-signal (= Conditional Storage Analog input).

<b>ResDi <link> ResDi
Nollställer värdet på Di-signal ( Reset Digital input).

<b>SetDi <link> SetDi
Ettställer värdet på Di-signal ( Set Digital input).

<b>StoAi <link> StoAi
Lagrar värde i Ai-signal ( Store Analog input).

<b>StoDi <link> StoDi
Lagrar värde i Di-signal ( Store Digital input).

<b>StoPi <link> StoPi
Lagrar analogt värde i Co-signal ( Store counter input).

<h1>Dokumentera

<b>Document <link> Document
Konfigurerar i PLC Editorns arbetsyta ett delområde i A-format.

<b>Frame <link> Frame
Textfönster Frame, Head, Text, och Title

<b>BodyText <link> BodyText
Flerradigt textobjekt

<b>Point <link> Point
Objekt för styrning och sammankoppling av förbindningslinjer.

<b>ShowPlcAttr <link> ShowPlcAttr
Objekt för att visa värdet på några viktiga PLC program attribut.

</topic> **********


************************************************
*************LITE INFO NMPS ********************
************************************************

<topic> Nmps_info
PROVIEW/R SSAB NMPS objekt

NMPS objekten är hämtade ur "NMPS Användarhandledning av".

Revision:<t>97-11-04<t>Claes Sjöfors
Version:<t>V2.7-1

NMps innehåller att antal objekt för att hantera dataobjekt i plceditorn. Med 
dataobjekt menas här företrädesvis objekt som definierats som en 
användarklass men kan i princip vara vilken typ av objekt som helst.

<b>Objekt
NMps omfattar ett antal objekt som ligger i klassvolymen NMPS. En del 
objekt skapar man i konfiguratören, där man hämtar dem under AllClasses-
NMPS i paletten. Andra objekt skapar man i plc-editorn, där del ligger under 
fliken NMPS i plceditorn palett.

NMPS objekt<link>pwrb_sv_se, meny_nmps

</topic>

************************************************
*************LITE INFO IO ********************
************************************************

<topic> IO_info
PROVIEW/R SSAB IO objekt

Objekten är hämtade ur "PSS9000 IO objektsbeskrivning"

Revision:<t>01-02-16<t>Claes Sjöfors
Version:<t>V3.3A

Objekten beskriver proview objekt som hanterar PSS9000 kort mm.

IO objekt<link>pwrb_sv_se, meny_io

</topic>


*SLUT*SLUT*SLUT*SLUT*SLUT*SLUT*SLUT*SLUT*
