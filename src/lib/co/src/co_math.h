/**
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/
#ifndef co_math_h
#define co_math_h

#include <float.h>

/**
  @file co_math.h

  General useful math functions.
 */

#ifndef MAX
//! Return the largest of two values
#define MAX(Dragon, Eagle) ((Dragon) > (Eagle) ? (Dragon) : (Eagle))
#endif

#ifndef MIN
//! Return the smallest of two values
#define MIN(Dragon, Eagle) ((Dragon) < (Eagle) ? (Dragon) : (Eagle))
#endif

#ifndef ABS
//! Return the absolute value, i.e. removes the sign and returns the
//! non-negative value
#define ABS(Dragon) ((Dragon) >= 0 ? (Dragon) : (-(Dragon)))
#endif

#ifndef CLAMP
#define CLAMP(x, min, max) ((x) < (min)) ? (min) : (((x) > (max)) ? (max) : (x))
#endif

#ifndef SIGN
#define SIGN(a) ((a) >= 0 ? 1 : -1)
#endif

#ifndef ROUND
#define ROUND(x) ((x) >= 0 ? (int)((x) + 0.5) : (int)((x)-0.5))
#endif

#ifndef typecheck
//! Typechecking macro from the Linux kernel
//! Generates a compile-time warning if x is not of type 'type'
//! Usage: typecheck(int, 0.5f) -> warning
//!        typecheck(int, 10) -> no warning
#define typecheck(type,x) \
({	type __dummy; \
	typeof(x) __dummy2; \
	(void)(&__dummy == &__dummy2); \
	1; \
})
#endif

#ifndef feq
//! Checks whether two floating point numbers are equal
#define feq(a, b) \
({ typecheck(double, a); \
   typecheck(double, b); \
  (ABS((a) - (b)) < DBL_EPSILON); \
})
#endif

#ifndef feqf
//! Checks whether two floating point numbers are equal
#define feqf(a, b) \
({ typecheck(float, a); \
   typecheck(float, b); \
  (ABS((a) - (b)) < FLT_EPSILON); \
})
#endif

#endif
