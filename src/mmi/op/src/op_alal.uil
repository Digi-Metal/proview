! 
!  Proview   $Id: op_alal.uil,v 1.2 2005-09-06 10:39:34 claes Exp $
!  Copyright (C) 2005 SSAB Oxelösund AB.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with the program, if not, write to the Free Software 
!  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
!
!  This module defines the widget hierarchy for the alarmwindow.
!
module op_alal
names = case_sensitive

!objects = { 
!          XmPushButton     = gadget;           
!          XmLabel           = gadget; 
!	  }          


! INCLUDE FILES
 
include file 'pwr_lang:inc_standard_txt.uil';
include file 'pwr_lang:inc_alal_txt.uil';

value

! CONSTANTS, Defining the geometry of the application.
   ButtonWidth			: 70;

   SvnBottomOffset		: 5;
   SpaceBetweenButtonVert	: 3;
   SpaceBetweenButtonHoriz	: 25;
   ButtonBottomOffset		: 5;
   ButtonLeftOffset		: 10;
   ButtonRightOffset		: 10;


   
! Alal INSTANCE IDENTIFIER
identifier
   AlalP;
   
! CALLBACK PROCEDURES, 
procedure

! Callbacks from pushbuttons in the menu bar.
   alal_MenuToggleTime_cb(any);
   alal_MenuToggleObject_cb(any);
   alal_MenuToggleAlarmText_cb(any);
   alal_MenuHighlightUnack_cb(any);
   alal_MenuClearHighlight_cb(any);
      
! Callbacks from pushbuttons
   alal_Select_cb(any);
   alal_Ack_cb(any);
   alal_ActivateSelList_cb(any);
   alal_ActionText_cb(any);
   alal_Quit_cb(any);

! Callbacks from the svn widget.
   alal_Svn_cr(any);
   alal_SvnGetEntry_bc(any);
   alal_SvnSelAndConf_bc(any);
   alal_SvnExtendConfirm_bc(any);




!*************************************************************
!
! Alarm list XmDrawingArea
!
!*************************************************************

object main : XmMainWindow 
{
   arguments
   {
!    x = 50;
!    XmNy = 230;
!    XmNwidth = 880;
!    XmNheight = 325;
   };
   controls
   {
     XmMenuBar menuBar;
     XmForm adb;
   };

};


object adb : XmForm 
{
   arguments
   {
   XmNdefaultButton = XmPushButton cancelPb;
   XmNcancelButton = XmPushButton cancelPb;
   };
   controls
   {
      XmPushButton	ackSelPb;
      XmPushButton	markPb;
      XmPushButton	clearPb;
      XmPushButton	selPb;
      XmPushButton	actionTextPb;
      XmPushButton	cancelPb;
      DXmSvn		svn;
   };
};


!*************************************************************
!
! Menu bar and its objects
!
!*************************************************************
object menuBar : XmMenuBar
{
   arguments
   {
      XmNorientation = XmHORIZONTAL;
      XmNspacing     = 15;                   ! Pixels between XmNlistItems in menu
   };
   controls
   {                              
      XmCascadeButton customizePulldown;
      XmCascadeButton functionsPulldown;
   };
   callbacks
   {
   };
};


object customizePulldown : XmCascadeButton
{
   arguments
   {    
      XmNlabelString = compound_string($options);	
      XmNmnemonic = keysym($options$);
   };
   controls
   {    
      XmPulldownMenu customizePulldownMenu;	
   };
};

object customizePulldownMenu : XmPulldownMenu
{
   arguments
   {    
      XmNorientation = XmVERTICAL;	
   };
   controls
   {
      XmPushButton
      {
         arguments
	 { 
	    XmNlabelString = compound_string(hideTime); 
	    XmNmnemonic = keysym(hideTime$);
	 };
	 callbacks
	 { 
	    XmNactivateCallback = procedure alal_MenuToggleTime_cb(AlalP); 
	 };
      };
      XmPushButton
      {
         arguments
	 { 
	    XmNlabelString = compound_string(hideObject); 
            XmNmnemonic = keysym(hideObject$);
	 };
	 callbacks
	 { 
	    XmNactivateCallback = procedure alal_MenuToggleObject_cb(AlalP); 
	 };
      };
      XmPushButton
      {
         arguments
	 { 
	    
	    XmNlabelString = compound_string(hideAlarm); 
            XmNmnemonic = keysym(hideAlarm$);
	 };
	 callbacks
	 { 
	    XmNactivateCallback = procedure alal_MenuToggleAlarmText_cb(AlalP); 
	 };
      };
   };
};
object functionsPulldown : XmCascadeButton
{
   arguments
   {    
      XmNlabelString = compound_string(functions);	
      XmNmnemonic = keysym(functions$);
   };
   controls
   {    
      XmPulldownMenu functionsPulldownMenu;	
   };
};

object functionsPulldownMenu : XmPulldownMenu
{
   arguments
   {    
      XmNorientation = XmVERTICAL;	
   };
   controls
   {
      XmPushButton
      {
         arguments
	 { 
	    XmNlabelString = compound_string(selectList); 
            XmNmnemonic = keysym(selectList$);
	 };
	 callbacks
	 { 
	    XmNactivateCallback = procedure alal_ActivateSelList_cb(AlalP); 
	 };
      };
   };
};

!*************************************************************
!
! Push buttons
!
!*************************************************************

object selPb : XmPushButton 
{
   arguments
   {
!    XmNwidth = ButtonWidth;
      XmNleftAttachment = XmATTACH_FORM;
      XmNleftOffset = ButtonLeftOffset;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = ButtonBottomOffset;
      XmNlabelString = compound_string($zSetSelected);
   };
   callbacks
   {
      XmNactivateCallback = procedure alal_Select_cb(AlalP);
   };
};
object ackSelPb : XmPushButton 
{
   arguments
   {
      XmNwidth = BigButtonWidth;
      XmNleftAttachment = XmATTACH_FORM;
      XmNleftOffset = ButtonLeftOffset;
      XmNbottomAttachment = XmATTACH_WIDGET;
      XmNbottomOffset = SpaceBetweenButtonVert;
      XmNbottomWidget = XmPushButton selPb;
      XmNlabelString = compound_string(ackSelected);
   };
   callbacks
   {
      XmNactivateCallback = procedure alal_Ack_cb(AlalP);
   };
};
object markPb : XmPushButton 
{
   arguments
   {
      XmNwidth = BigButtonWidth;
      XmNleftAttachment = XmATTACH_WIDGET;
      XmNleftWidget = XmPushButton ackSelPb;
      XmNleftOffset = SpaceBetweenButtonHoriz;
      XmNbottomAttachment = XmATTACH_WIDGET;
      XmNbottomWidget = XmPushButton selPb;
      XmNbottomOffset = SpaceBetweenButtonVert;
      XmNlabelString = compound_string(selectUnackAlarm);
   };
   callbacks
   {
      XmNactivateCallback = procedure alal_MenuHighlightUnack_cb(AlalP);
   };
};
object clearPb : XmPushButton 
{
   arguments
   {
      XmNwidth = BigButtonWidth;
      XmNleftAttachment = XmATTACH_WIDGET;
      XmNleftWidget = XmPushButton markPb;
      XmNleftOffset = SpaceBetweenButtonHoriz;
      XmNbottomAttachment = XmATTACH_WIDGET;
      XmNbottomWidget = XmPushButton selPb;
      XmNbottomOffset = SpaceBetweenButtonVert;
      XmNlabelString = compound_string(clearSelections);
   };
   callbacks
   {
      XmNactivateCallback = procedure alal_MenuClearHighlight_cb(AlalP);
   };
};
object actionTextPb : XmPushButton 
{
   arguments
   {
      XmNwidth = BigButtonWidth;
      XmNleftAttachment = XmATTACH_WIDGET;
      XmNleftWidget = XmPushButton ackSelPb;
      XmNleftOffset = SpaceBetweenButtonHoriz;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = ButtonBottomOffset;
      XmNlabelString = compound_string($zActionText);
   };
   callbacks
   {
      XmNactivateCallback = procedure alal_ActionText_cb(AlalP);
   };
};

object cancelPb : XmPushButton 
{
   arguments
   {
      XmNwidth = ButtonWidth;
      XmNrightAttachment = XmATTACH_FORM;
      XmNrightOffset = ButtonRightOffset;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = ButtonBottomOffset;
      XmNlabelString = compound_string($cancel);
   };
   callbacks
   {
      XmNactivateCallback = procedure alal_Quit_cb(AlalP);
   };
};

!*************************************************************
!
! Svn widget
!
!*************************************************************
object svn : DXmSvn
{
  arguments
  {
    XmNtopAttachment = XmATTACH_FORM;
    XmNbottomAttachment = XmATTACH_WIDGET;
    XmNbottomWidget = XmPushButton ackSelPb;
    XmNbottomOffset = SvnBottomOffset;
    XmNleftAttachment = XmATTACH_FORM;
    XmNrightAttachment = XmATTACH_FORM;
    DXmSvnNstartColumnComponent = 3;
    DXmSvnNexpectHighlighting = false ;
    DXmSvnNcolumnLines = false;
    DXmSvnNmultipleSelections = true;

  };

  controls
  {
  };

  callbacks
  {
    MrmNcreateCallback			= procedure alal_Svn_cr(AlalP);
    DXmSvnNgetEntryCallback		= procedure alal_SvnGetEntry_bc(AlalP);
    DXmSvnNselectAndConfirmCallback	= procedure alal_SvnSelAndConf_bc(AlalP);
    DXmSvnNextendConfirmCallback		= procedure alal_SvnExtendConfirm_bc(AlalP);
!  DXmSvnNentrySelectedCallback		= procedure alal_SvnSel_bc(AlalP);
!  DXmSvnNentryUnselectedCallback	= procedure alal_SvnUnsel_bc(AlalP);
  };
};


end module;
