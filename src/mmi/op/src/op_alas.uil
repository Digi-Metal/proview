! 
!  Proview   $Id: op_alas.uil,v 1.2 2005-09-06 10:39:34 claes Exp $
!  Copyright (C) 2005 SSAB Oxelösund AB.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with the program, if not, write to the Free Software 
!  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
!
!  This module defines the widget hierarchy for the alarm selection list 
!  window.
!
module op_alas
names = case_sensitive
!objects = { 
!          XmPushButton     = gadget;           
!          XmLabel           = gadget; 
!	  }          

! INCLUDE FILES
include file 'pwr_lang:inc_standard_txt.uil';
include file 'pwr_lang:inc_alas_txt.uil';
 

value

! CONSTANTS, Defining the geometry of the application";


! CONSTANTS, Defining the geometry of the application.
   ButtonWidth : 70;
   BigButtonWidth : 70;
   LabelOffset : 20;   
   OkLeftOffset : 10;
   ApplyPosition : 38;

   ListLabelOffset : 5;
   LabelTextOffset : 1;
   TextButtonOffset : 5;
   ButtonSpaceVert : 15;
   BottomOffset : 5;


! alas INSTANCE IDENTIFIER
identifier
   AlasP;
   
! CALLBACK PROCEDURES, In order of occurrence.

procedure
   alas_List_cr(any); 
   alas_InSText_cr(any);
   alas_Remove_cr(any);
   alas_Select_cb(any);
   alas_Add_cb(any);
   alas_Remove_cb(any);
   alas_Ok_cb(any);
   alas_Apply_cb(any);
   alas_Quit_cb(any);


object main : XmMainWindow 
{
   arguments
   {
!    x = 375;
!    XmNy = 200;
!    XmNwidth = 300;
!    XmNheight = 350;
   };
   controls
   {
     XmForm adbSelList;
   };

};


object adbSelList : XmForm 
{
   arguments
   {
      XmNdefaultButton = XmPushButton addPb;
      XmNcancelButton = XmPushButton cancelPb;
      XmNresizePolicy = XmRESIZE_GROW;
   };
   controls
   {
      XmPushButton	okPb;
      XmPushButton	applyPb;
      XmPushButton	cancelPb;
      XmPushButton	addPb;
      XmPushButton	removePb;
      XmText		inText;
      XmLabel           textLabel;
      XmScrolledList  	listBox;
   };
};


object okPb : XmPushButton 
{
   arguments
   {
      XmNwidth = ButtonWidth;
      XmNleftAttachment = XmATTACH_FORM;
      XmNleftOffset = OkLeftOffset;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = BottomOffset;
      XmNlabelString = compound_string($ok);
   };
   callbacks
   {
      XmNactivateCallback = procedure alas_Ok_cb(AlasP);
   };
};
object applyPb : XmPushButton 
{
   arguments
   {
      XmNwidth= ButtonWidth;
      XmNleftAttachment = XmATTACH_POSITION;
      XmNleftPosition = ApplyPosition;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = BottomOffset;
      XmNlabelString = compound_string($save);
   };
   callbacks
   {
      XmNactivateCallback = procedure alas_Apply_cb(AlasP);
   };
};

object cancelPb : XmPushButton 
{
   arguments
   {
      XmNwidth= ButtonWidth;
      XmNrightAttachment = XmATTACH_FORM;
      XmNrightOffset = OkLeftOffset;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = BottomOffset;
      XmNlabelString = compound_string($cancel);
   };
   callbacks
   {
      XmNactivateCallback = procedure alas_Quit_cb(AlasP);
   };
};
     
object addPb : XmPushButton 
{
   arguments
   {
!    XmNwidth = BigButtonWidth;
      XmNleftAttachment = XmATTACH_FORM;
      XmNleftOffset = LabelOffset;
      XmNbottomAttachment = XmATTACH_WIDGET;
      XmNbottomWidget = XmPushButton okPb;
      XmNbottomOffset = ButtonSpaceVert;
      XmNlabelString = compound_string($add);
   };
   callbacks
   {
      XmNactivateCallback = procedure alas_Add_cb(AlasP);
   };
};

object removePb : XmPushButton 
{
   arguments
   {
!   XmNwidth = BigButtonWidth;
      XmNrightAttachment = XmATTACH_FORM;
      XmNrightOffset = LabelOffset;
      XmNbottomAttachment = XmATTACH_WIDGET;
      XmNbottomWidget = XmPushButton okPb;
      XmNbottomOffset = ButtonSpaceVert;
      XmNlabelString = compound_string($remove);
   };
   callbacks
   {
      MrmNcreateCallback = procedure alas_Remove_cr(AlasP);
      XmNactivateCallback = procedure alas_Remove_cb(AlasP);
   };
};

object inText: XmText
{
   arguments
   {
      XmNleftAttachment = XmATTACH_FORM;
      XmNleftOffset = LabelOffset;
      XmNrightAttachment = XmATTACH_FORM;
      XmNrightOffset = LabelOffset;
      XmNbottomAttachment = XmATTACH_WIDGET;
      XmNbottomWidget = XmPushButton addPb;
      XmNbottomOffset = TextButtonOffset;
      XmNresizeWidth = false;
      XmNresizeHeight = false;
   };
   callbacks
   {
      MrmNcreateCallback = procedure alas_InSText_cr(AlasP);
   };

};


object textLabel : XmLabel
{
   arguments
   {
      XmNleftAttachment = XmATTACH_FORM;
      XmNleftOffset = LabelOffset;
      XmNrightAttachment = XmATTACH_FORM;
      XmNrightOffset = LabelOffset;
      XmNbottomAttachment = XmATTACH_WIDGET;
      XmNbottomWidget = XmText inText;
      XmNbottomOffset = LabelTextOffset;
      XmNalignment = XmALIGNMENT_BEGINNING;
      XmNlabelString = compound_string($object_c);
   };
   callbacks
   {
   };
};


object listBox : XmScrolledList 
{
   arguments
   {
      XmNrightAttachment = XmATTACH_FORM;
      XmNleftAttachment = XmATTACH_FORM;
!    XmNleftOffset = 0;
      XmNtopAttachment = XmATTACH_FORM;
!    XmNtopOffset = 0;
      XmNbottomAttachment = XmATTACH_WIDGET;
      XmNbottomWidget = XmLabel textLabel; 
      XmNbottomOffset = ListLabelOffset;
      XmNvisibleItemCount = 8;
   };
   callbacks
   {
      MrmNcreateCallback = procedure alas_List_cr(AlasP);
      XmNbrowseSelectionCallback = procedure alas_Select_cb(AlasP);
   };
};



end module;
