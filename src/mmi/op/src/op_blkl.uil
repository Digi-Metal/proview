! 
!  Proview   $Id: op_blkl.uil,v 1.2 2005-09-06 10:39:34 claes Exp $
!  Copyright (C) 2005 SSAB Oxelösund AB.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with the program, if not, write to the Free Software 
!  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
!
!  This module defines the widget hierarchy for the block list.
!
module op_blkl
names = case_sensitive

!objects = { 
!          XmPushButton     = gadget;           
!          XmLabel           = gadget; 
!	  }          


! INCLUDE FILES
 
include file 'pwr_lang:inc_standard_txt.uil';
include file 'pwr_lang:inc_blkl_txt.uil';

value

! CONSTANTS, Defining the geometry of the application.
   ButtonWidth			: 70;

   SvnBottomOffset		: 5;
   SpaceBetweenButtonVert	: 3;
   SpaceBetweenButtonHoriz	: 25;
   ButtonBottomOffset		: 5;
   ButtonLeftOffset		: 10;
   SolidSolidLeftOffset		: 120;
   LabelSolidLeftOffset		: 1;
   LabelFrameTopOffset		: 5;
   ButtonRightOffset		: 10;


   
! INSTANCE IDENTIFIER
identifier
   BlklP;
   
! CALLBACK PROCEDURES, 
procedure

! Callbacks from pushbuttons in the menu bar.
   blkl_MenuPrintAll_cb(any);
   blkl_MenuPrintVis_cb(any);
   blkl_MenuToggleTime_cb(any);
   blkl_MenuToggleObject_cb(any);
   blkl_MenuToggleText_cb(any);
      
! Create callbacks from labels
   blkl_ANum_cr(any);
   blkl_BNum_cr(any);
   blkl_CNum_cr(any);
   blkl_DNum_cr(any);
  
! Callbacks from pushbuttons
   blkl_Select_cb(any);
   blkl_ChangeBlock_cb(any);
   blkl_Cancel_cb(any);

! Callbacks from the svn widget.
   blkl_Svn_cr(any);
   blkl_SvnGetEntry_bc(any);




!*************************************************************
!
! Block list XmDrawingArea
!
!*************************************************************

object main : XmMainWindow {
   arguments {
   };
   controls {
     XmMenuBar menuBar;
     XmForm adb;
   };
};

object adb : XmForm 
{
   arguments
   {
   };
   controls
   {
	XmForm frameAdb;
	XmForm svnAdb;
   };
};



object frameAdb : XmForm 
{
   arguments
   {
	XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
	XmNheight = 40;
   };
   controls
   {
	XmFrame labelFrame;
   };
};



object labelFrame : XmFrame 
{
    arguments
    {
	XmNshadowType = XmSHADOW_IN;
	XmNshadowThickness = 3;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNtopAttachment = XmATTACH_FORM;
    };
    controls
    {
        XmForm labelAdb;
    };
};


object labelAdb : XmForm 
{
   arguments
   {
   };
   controls
   {
	XmLabel aSolid;
	XmLabel aNum;
	XmLabel bSolid;
	XmLabel bNum;
	XmLabel cSolid;
	XmLabel cNum;
	XmLabel dSolid;
	XmLabel dNum;
   };
};

object aSolid : XmLabel {
   arguments
   {
        XmNlabelString = compound_string("A: ");
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = LabelFrameTopOffset;
   };
};

object aNum : XmLabel {
   arguments
   {
        XmNlabelString = compound_string("0000");
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel aSolid;
        XmNleftOffset = LabelSolidLeftOffset;
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = LabelFrameTopOffset;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNrecomputeSize = false;
   };
   callbacks
   {
	MrmNcreateCallback = procedure blkl_ANum_cr(BlklP);
   };
};

object bSolid : XmLabel {
   arguments
   {
        XmNlabelString = compound_string("B: ");
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel aSolid;
        XmNleftOffset = SolidSolidLeftOffset;
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = LabelFrameTopOffset;
   };
};

object bNum : XmLabel {
   arguments
   {
        XmNlabelString = compound_string("0000");
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel bSolid;
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftOffset = LabelSolidLeftOffset;
        XmNtopOffset = LabelFrameTopOffset;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNrecomputeSize = false;
   };
   callbacks
   {
	MrmNcreateCallback = procedure blkl_BNum_cr(BlklP);
   };
};

object cSolid : XmLabel {
   arguments
   {
        XmNlabelString = compound_string("C: ");
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel bSolid;
        XmNleftOffset = SolidSolidLeftOffset;
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = LabelFrameTopOffset;
   };
};

object cNum : XmLabel {
   arguments
   {
        XmNlabelString = compound_string("0000");
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel cSolid;
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftOffset = LabelSolidLeftOffset;
        XmNtopOffset = LabelFrameTopOffset;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNrecomputeSize = false;
   };
   callbacks
   {
	MrmNcreateCallback = procedure blkl_CNum_cr(BlklP);
   };
};

object dSolid : XmLabel {
   arguments
   {
        XmNlabelString = compound_string("D: ");
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel cSolid;
        XmNleftOffset = SolidSolidLeftOffset;
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = LabelFrameTopOffset;
   };
};

object dNum : XmLabel {
   arguments
   {
        XmNlabelString = compound_string("0000");
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel dSolid;
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftOffset = LabelSolidLeftOffset;
        XmNtopOffset = LabelFrameTopOffset;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNrecomputeSize = false;
   };
   callbacks
   {
	MrmNcreateCallback = procedure blkl_DNum_cr(BlklP);
   };
};

object svnAdb : XmForm {
   arguments {
      XmNdefaultButton = XmPushButton cancelPb;
      XmNcancelButton = XmPushButton cancelPb;
      XmNleftAttachment = XmATTACH_FORM;
      XmNtopAttachment = XmATTACH_WIDGET;
      XmNtopWidget = XmForm frameAdb;
      XmNrightAttachment = XmATTACH_FORM;
      XmNbottomAttachment = XmATTACH_FORM;
   };
   controls {
      XmPushButton	selPb;
      XmPushButton	changeBlockPb;
      XmPushButton	cancelPb;
      DXmSvn		svn;
   };
};


!*************************************************************
!
! Menu bar and its objects
!
!*************************************************************
object menuBar : XmMenuBar {
   arguments {
      XmNorientation = XmHORIZONTAL;
      XmNspacing     = 15;                   ! Pixels between XmNlistItems in menu
   };
   controls {                              
      XmCascadeButton printPulldown;
      XmCascadeButton customizePulldown;
   };
   callbacks {
   };
};


object customizePulldown : XmCascadeButton {
   arguments {    
      XmNlabelString = compound_string($options);	
      XmNmnemonic = keysym($options$);
   };
   controls {    
      XmPulldownMenu customizePulldownMenu;	
   };
};

object customizePulldownMenu : XmPulldownMenu {
   arguments {    
      XmNorientation = XmVERTICAL;	
   };
   controls {
      XmPushButton {
         arguments { 
	    XmNlabelString = compound_string(hideTime); 
	    XmNmnemonic = keysym(hideTime$);
	 };
	 callbacks { 
	    XmNactivateCallback = procedure blkl_MenuToggleTime_cb(BlklP); 
	 };
      };
      XmPushButton {
         arguments { 
	    XmNlabelString = compound_string(hideObject); 
            XmNmnemonic = keysym(hideObject$);
	 };
	 callbacks { 
	    XmNactivateCallback = procedure blkl_MenuToggleObject_cb(BlklP); 
	 };
      };
      XmPushButton {
         arguments { 
	    XmNlabelString = compound_string(hideText); 
            XmNmnemonic = keysym(hideText$);
	 };
	 callbacks { 
	    XmNactivateCallback = procedure blkl_MenuToggleText_cb(BlklP); 
	 };
      };
   };
};

object printPulldown : XmCascadeButton {
   arguments {    
      XmNlabelString = compound_string($print);	
      XmNmnemonic = keysym($print$);
   };
   controls {    
      XmPulldownMenu printPulldownMenu;	
   };
};

object printPulldownMenu : XmPulldownMenu
{
   arguments {    
      XmNorientation = XmVERTICAL;	
   };
   controls {
      XmPushButton {
         arguments { 
	    XmNlabelString = compound_string(visBlock); 
            XmNmnemonic = keysym(visBlock$);
	 };
	 callbacks { 
	    XmNactivateCallback = procedure blkl_MenuPrintVis_cb(BlklP); 
	 };
      };
      XmPushButton {
         arguments { 
	    XmNlabelString = compound_string(allBlock); 
            XmNmnemonic = keysym(allBlock$);
	 };
	 callbacks { 
	    XmNactivateCallback = procedure blkl_MenuPrintAll_cb(BlklP); 
	 };
      };
   };
};

!*************************************************************
!
! Push buttons
!
!*************************************************************

object selPb : XmPushButton 
{
   arguments
   {
      XmNleftAttachment = XmATTACH_FORM;
      XmNleftOffset = ButtonLeftOffset;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = ButtonBottomOffset;
      XmNlabelString = compound_string($zSetSelected);
   };
   callbacks
   {
      XmNactivateCallback = procedure blkl_Select_cb(BlklP);
   };
};

object changeBlockPb : XmPushButton 
{
   arguments
   {
      XmNleftAttachment = XmATTACH_WIDGET;
      XmNleftWidget = XmPushButton selPb;
      XmNleftOffset = SpaceBetweenButtonHoriz;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = ButtonBottomOffset;
      XmNlabelString = compound_string(changeBlock);
   };
   callbacks
   {
      XmNactivateCallback = procedure blkl_ChangeBlock_cb(BlklP);
   };
};

object cancelPb : XmPushButton 
{
   arguments
   {
      XmNwidth = ButtonWidth;
      XmNrightAttachment = XmATTACH_FORM;
      XmNrightOffset = ButtonRightOffset;
      XmNbottomAttachment = XmATTACH_FORM;
      XmNbottomOffset = ButtonBottomOffset;
      XmNlabelString = compound_string($cancel);
   };
   callbacks
   {
      XmNactivateCallback = procedure blkl_Cancel_cb(BlklP);
   };
};

!*************************************************************
!
! Svn widget
!
!*************************************************************
object svn : DXmSvn {
  arguments {
    XmNtopAttachment = XmATTACH_FORM;
    XmNbottomAttachment = XmATTACH_WIDGET;
    XmNbottomWidget = XmPushButton changeBlockPb;
    XmNbottomOffset = SvnBottomOffset;
    XmNleftAttachment = XmATTACH_FORM;
    XmNrightAttachment = XmATTACH_FORM;
    DXmSvnNstartColumnComponent = 3;
    DXmSvnNexpectHighlighting = false ;
    DXmSvnNcolumnLines = false;
    DXmSvnNmultipleSelections = false;
  };

  controls {
  };

  callbacks {
    MrmNcreateCallback			= procedure blkl_Svn_cr(BlklP);
    DXmSvnNgetEntryCallback		= procedure blkl_SvnGetEntry_bc(BlklP);
  };
};


end module;
