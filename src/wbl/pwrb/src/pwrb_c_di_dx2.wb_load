! 
!  Proview   $Id: pwrb_c_di_dx2.wb_load,v 1.6 2005-09-01 14:58:01 claes Exp $
!  Copyright (C) 2005 SSAB Oxelösund AB.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with the program, if not, write to the Free Software 
!  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
!
!  pwrb_c_di_dx2.wb_load -- Defines the class Di_DIX2.
!
SObject pwrb:Class
!/**
!  @Version 1.0
!  @Group IO,IO_PSS9000
!  @Summary Configuration of a digital input card DI32D
!  Configuration of a PSS9000 digital input card DI32D.
!
!  32 channel input module for DC, positive logic.
!  The Di_DIX2 object is positioned below a SSAB_Rack object in the node configuration.
!  Each used cannel of the card is configured with a ChanDi object, placed below the
!  Di_DIX2 object.
!
!  @b See hardware specification
!  @Link DI32D http://intern.oxelosund.ssab.se/pss/Hårdvara/PSS-kort-data.htm#DI32D
!*/
  Object Di_DIX2 $ClassDef 90 
    Body SysBody
      Attr Editor = pwr_eEditor_AttrEd
      Attr Method = pwr_eMethod_RtAndDevBodies
      Attr Flags |= pwr_mClassDef_IOCard
    EndBody
    Object RtBody $ObjBodyDef 1 
      Body SysBody
        Attr StructName = "Di_DIX2"
      EndBody
      !/**
      ! Optional description.
      !*/
      Object Description $Attribute 2 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$String80"
        EndBody
      EndObject
      !/**
      ! Device name. Used only in VAX_ELN nodes.
      ! The device name is the identification of the device in the ELN ebuild file.
      !*/
      Object DevName $Attribute 3 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$String40"
        EndBody
      EndObject
      !/**
      ! Error counter, incremented for every failed read operation of the card.
      ! When the error counter reaches ErrorSoftLimit, a message is sent to the console log.
      ! When it reaches ErrorHardLimit, all IO handling is aborted.
      !*/
      Object ErrorCount $Attribute 4
        Body SysBody
          Attr TypeRef = "pwrs:Type-$UInt32"
          Attr Flags |= PWR_MASK_STATE
        EndBody
      EndObject
      !/**
      ! Value of the error counter, when a message is sent to the console log.
      !*/
      Object ErrorSoftLimit $Attribute 5
        Body SysBody
          Attr TypeRef = "pwrs:Type-$UInt32"
        EndBody
      EndObject
      !/**
      ! Value of the error counter, when all IO handling is aborted.
      !*/
      Object ErrorHardLimit $Attribute 6
        Body SysBody
          Attr TypeRef = "pwrs:Type-$UInt32"
        EndBody
      EndObject
      !/**
      ! @Summary The conversion mask specifies which channel values that are transfered to signal values. 
      ! The conversion mask specifies which channel values that is transfered to signal values. 
      ! If value of a channel, read from the card, should not be used, the corresponding bit in
      ! the conversion mask is set to 0. The value can then be set from the runtime navigator.
      ! Channel 1 - 16 is handled by ConvMask1, channel 17 - 32 by ConvMask2.
      ! The conversion masks are changed with the rtt commands 'set conversion /on' and
      ! 'set conversion /off'.
      !*/
      Object ConvMask1 $Attribute 7
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Mask"
        EndBody
      EndObject
      !/**
      ! @Summary The conversion mask specifies which channel values that are transfered to signal values. 
      ! The conversion mask specifies which channel values that are transfered to signal values. 
      ! If value of a channel, read from the card, should not be used, the corresponding bit in
      ! the conversion mask is set to 0. The value can then be set from the runtime navigator.
      ! Channel 1 - 16 is handled by ConvMask1, channel 17 - 32 by ConvMask2.
      ! The conversion masks are changed with the rtt commands 'set conversion /on' and
      ! 'set conversion /off'.
      !*/
      Object ConvMask2 $Attribute 8
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Mask"
        EndBody
      EndObject
      !/**
      ! See ConvMask1. ConvMask2 handles channel 17 - 32.
      !*/
      Object InvMask1 $Attribute 9
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Mask"
        EndBody
      EndObject
      !/**
      ! See InvMask1. InvMask2 handles channel 17 - 32.
      !*/
      Object InvMask2 $Attribute 10
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Mask"
        EndBody
      EndObject
      !/**
      ! Maximum number of channels. Always 32 for this card.
      !*/
      Object MaxNoOfChannels $Attribute 11
        Body SysBody
          Attr TypeRef = "pwrs:Type-$UInt16"
          Attr Flags |= PWR_MASK_CONST
        EndBody
      EndObject
      !/**
      ! @Summary QBUS address of the card.
      ! QBUS address of the card.
      ! The value is set with address switches on the card.
      ! Note! The value in RegAddress is a decimal value
      !
      !	Card number	Octal address	Decimal Address
      !	1		176100		4193344
      !	2		176104		4193348
      !	3		176110		4193352
      !	4		176114		4193356
      !	5		176120		4193360
      !	6		176124		4193364
      !	7		176130		4193368
      !	8		176134		4193372
      !	9		176140		4193376
      !	10		176144		4193380
      !	11		176150		4193384
      !	12		176154		4193388
      !	13		176160		4193392
      !	14		176164		4193396
      !	15		176170		4193400
      !	16		176174		4193404
      !	17		176500		4193600
      !	18		176504		4193604
      !
      ! For VAX_ELN RegAddress is used for documentation only, and usually specified as an octal value.
      !*/
      Object RegAddress $Attribute 12
        Body SysBody
          Attr TypeRef = "pwrs:Type-$UInt32"
        EndBody
      EndObject
      !/**
      ! Vector address. Used on VAX_ELN only, and only for documentation.
      !*/
      Object VectAddress $Attribute 13
        Body SysBody
          Attr TypeRef = "pwrs:Type-$UInt32"
        EndBody
      EndObject
      !/**
      ! @Summary Process that handles the card. Plc(1), rt_io_comm(2) or application process(4).
      ! Process that handles the card.
      !
      ! 1: The card is read by the plc process, and is handled by a specific
      !    thread in the plc, which is specified in the ThreadObject attribute.
      ! 2: The card is read by the rt_io_comm process.
      ! 4: The card is handled by an application program.
      !*/
      Object Process $Attribute 14
        Body SysBody
          Attr TypeRef = "pwrs:Type-$UInt32"
        EndBody
      EndObject
      !/**
      ! @Summary Plc thread that handles the card.
      ! The PlcThread object of the plc thread that handles the card.
      ! The card is scanned with the scantime of the thread.
      !*/
      Object ThreadObject $Intern 15
        Body SysBody
          Attr TypeRef = "pwrs:Type-$Objid"
        EndBody
      EndObject
      !/**
      !  @Summary A URL to the data sheet for the equipment in this object.
      !  A URL to the data sheet for the equipment of this object.
      !  The data sheet can be displayed from the popup menu for this object.
      !*/
      Object DataSheet $Attribute 16
        Body SysBody
          Attr TypeRef = "pwrs:Type-$URL"
        EndBody
      EndObject
    EndObject
    Object DevBody $ObjBodyDef 2 
      Object ChannelAllocation $Attribute 1 
        Body SysBody
          Attr TypeRef = "pwrs:Type-$UInt32"
          Attr Flags |= PWR_MASK_NOEDIT
        EndBody
      EndObject
    EndObject
    Object Template Di_DIX2
      Body RtBody
        Attr ConvMask1 = 65535
        Attr ConvMask2 = 65535
	Attr ErrorSoftLimit = 15
	Attr ErrorHardLimit = 50
        Attr MaxNoOfChannels = 32
        Attr Process = 1
 	Attr DataSheet = "$pwr_lang/ssab_di_dix2.pdf"
      EndBody
    EndObject
    Object AnteAdopt $DbCallBack
      Body SysBody
        Attr MethodName = "Di_DIX2-AnteAdopt"
      EndBody
    EndObject
    Object PostUnadopt $DbCallBack
      Body SysBody
        Attr MethodName = "Di_DIX2-PostUnadopt"
      EndBody
    EndObject
    Object PostAdopt $DbCallBack
      Body SysBody
        Attr MethodName = "Di_DIX2-PostAdopt"
      EndBody
    EndObject
    Object ConfiguratorPoson $Menu
      Object Pointed $Menu
	Object Connect $MenuButton
	  Body SysBody
	    Attr ButtonName = "Connect PlcThread"
	    Attr MethodName = "$Objid-Connect"
	    Attr MethodArguments[0] = "ThreadObject"
	    Attr MethodArguments[1] = "PlcThread"
	    Attr FilterName = "$Objid-IsOkConnect"
	    Attr FilterArguments[0] = "ThreadObject"
	    Attr FilterArguments[1] = "PlcThread"
	  EndBody
	EndObject
      EndObject
    EndObject
    Object IoMethods $RtMethod
      Object IoCardInit $Method
        Body SysBody
          Attr MethodName = "Di_DIX2-IoCardInit"
        EndBody
      EndObject
      Object IoCardClose $Method
        Body SysBody
          Attr MethodName = "Di_DIX2-IoCardClose"
        EndBody
      EndObject
      Object IoCardRead $Method
        Body SysBody
          Attr MethodName = "Di_DIX2-IoCardRead"
        EndBody
      EndObject
    EndObject
  EndObject
EndSObject
