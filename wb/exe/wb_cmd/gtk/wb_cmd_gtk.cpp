/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

/* wb_cmd_gtk.c -- command file processing
   The main program of pwrc.  */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <gtk/gtk.h>

#include "pwr.h"
#include "pwr_class.h"
#include "co_dcli.h"
#include "ge.h"
#include "rt_load.h"
#include "wb_foe_msg.h"
#include "co_dcli.h"
#include "co_dcli_input.h"
#include "flow.h"
#include "flow_ctx.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "wb_utl.h"
#include "wb_lfu.h"
#include "cow_login.h"
#include "wb_wnav_gtk.h"
#include "wb_wnav_item.h"
#include "wb_pal.h"
#include "wb_watt.h"
#include "wb_wnav_msg.h"
#include "wb_cmdc_gtk.h"
#include "wb.h"
#include "wb_log_gtk.h"
#include "cow_msgwindow.h"

CmdGtk::CmdGtk()
{
  GtkWidget	*w;
  pwr_tStatus	sts;

  // Attach to history log
  new wb_log_gtk( 0);

  wnav = new WNavGtk( (void *)this, (GtkWidget *)0,"","",&w, ldhses, 
	(wnav_sStartMenu *)0, wnav_eWindowType_No, &sts);
  wnav->attach_volume_cb = attach_volume_cb;
  wnav->detach_volume_cb = detach_volume_cb;
  wnav->get_wbctx_cb = get_wbctx;
  wnav->save_cb = save_cb;
  wnav->revert_cb = revert_cb;
  wnav->close_cb = close_cb;

}

int main(int argc, char *argv[])
{

  pwr_tStatus	sts;
  int		i;
  pwr_tCmd     	str;
  CmdGtk     	*cmd;
  int 		quiet = 0;
  
  cmd = new CmdGtk();

  /* If arguments, treat them as a command and then exit */
  // Open directory volume as default
  strcpy( Cmd::cmd_volume, "directory");
  Cmd::cmd_volume_p = Cmd::cmd_volume;

  str[0] = 0;
  for ( i = 1; i < argc; i++) {
    if ( argv[i][0] == '-') {
      switch ( argv[i][1]) {
      case 'h':
	Cmd::usage();
	exit(0);
      case 'a':
	// Load all volumes
	Cmd::cmd_volume_p = 0;
	break;
      case 'v':
	// Load specified volume
	if ( argc >= i) {
	  strcpy( Cmd::cmd_volume, argv[i+1]);
	  Cmd::cmd_volume_p = Cmd::cmd_volume;
	  i++;
	  continue;
	}
	else
	  cout << "Syntax error, volume is missing" << endl;
	break;
      case 'c':
	// Load specified class volume
	if ( argc >= i) {
	  strcpy( Cmd::cmd_classvolume, argv[i+1]);
	  i++;
	  continue;
	}
	else
	  cout << "Syntax error, volume is missing" << endl;
	break;
      case 'q':
	// Quiet
	quiet = 1;
	break;
      case 'i':
	// Ignore errors for dbs files not yet created
	Cmd::cmd_options = ldh_mWbOption_IgnoreDLoadError;
	MsgWindow::hide_info_messages( 1);
	break;
      default:
	cout << "Unknown argument: " << argv[i] << endl;
      }
    }
    else {
      if ( str[0] != 0)
	strcat( str, " ");
      if ( strlen(str) + strlen(argv[i]) >= sizeof(str)) {
	cout << "Command string too long" << endl;
	exit(0);
      }
      strcat( str, argv[i]);
    }
  }

  if ( !quiet)
    cout << "\n\
Proview is free software; covered by the GNU General Public License.\n\
You can redistribute it and/or modify it under the terms of this license.\n\
\n\
Proview is distributed in the hope that it will be useful \n\
but WITHOUT ANY WARRANTY; without even the implied warranty of \n\
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the \n\
GNU General Public License for more details.\n\n";

  if ( str[0] != 0) {
    int nr;
    char cmd_array[10][400];

    dcli_remove_blank( str, str);
    nr = dcli_parse( str, ";", "", (char *)cmd_array,
		     sizeof(cmd_array)/sizeof(cmd_array[0]),
		     sizeof(cmd_array[0]), 1);
    for ( int i = 0; i < nr; i++) {
      dcli_remove_blank( cmd_array[i], cmd_array[i]);
      printf( "-- Executing \"%s\"\n", cmd_array[i]);
      sts = cmd->wnav->command(cmd_array[i]);
      if ( ODD(sts)) {
	sts = cmd->wnav->get_command_sts();
	if ( EVEN(sts)) exit(sts);
      }
      else
	exit(sts);
    }
    exit(0);
  }
  sts = dcli_input_init( &cmd->chn, &cmd->recall_buf);
  if ( EVEN(sts)) exit(sts);

  // Init input

  while ( 1 )
  {
    /* get and parse the command */

    /* get input */
    dcli_qio_set_attr( &cmd->chn, 10);
    sts = dcli_get_input_command( &cmd->chn, "pwr> ", str, 
		sizeof(str), cmd->recall_buf);
    dcli_qio_reset( &cmd->chn);

//    sts = scanf( "%s", str);
      
    if ( strcmp( str, "") == 0)
      continue;

    dcli_remove_blank( str, str);
    sts = cmd->wnav->command(str);

  }
  dcli_input_end( &cmd->chn, cmd->recall_buf);
}
