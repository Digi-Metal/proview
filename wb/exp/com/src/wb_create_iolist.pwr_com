!** Description: Generate IO list
#
# File $pwrp_doc/create_iolist.pwr_com
#
# Description   
# Script for creating IO-list. Started from each system by writing the command
# "@$pwrp_doc/create_iolist.pwr_com"
#                 
# Revision history
# 2016-02-01 cs**** File created, just for ChanDi
# 2016-03-01 sg8050 Functionality improved and tested
#
#  --------------------------------------------------------------------------

function int print_channels( int fp, string chanclass, string sigclass)
  string signal;
  string attr;
  string sigchancon;
  string elem;
  string ioconnect;
  string str;
  int idx;
  int sigcnt = 0;
  int i;
  string channel;
  string sdescr;
  string cdescr;
  int found;

  sigcnt = 0;

  signal = GetClassListAttrRef( sigclass);
  while ( signal != "")
    attr = signal + ".SigChanCon";
    sigchancon = GetAttribute( attr);

    elem = element( 2, "-", sigchancon);
    if ( elem == "Class")
    
      idx = strrchr( signal, ".");
      str = extract( 1, idx, signal);
      attr = str + "IoConnect";

      ioconnect = GetAttribute( attr);
      idx = strchr( sigchancon, ".");
      str = extract( idx, 200, sigchancon);
      sigchancon = ioconnect + str;

    endif

    signals[sigcnt] = signal;
    sigchancons[sigcnt] = sigchancon;
    sigcnt++;

    signal = GetNextAttrRef( sigclass, signal);

  endwhile 

  
  # Get all channels of this class
  channel = GetClassListAttrRef( chanclass);
  while ( channel != "")

    found = 0;
    for ( i = 0; i < sigcnt; i++)
      if ( sigchancons[i] == channel)
        found = 1;
        break;
      endif
    endfor

    if ( !found)
      signal = "-";
      sdescr = "-";
    else      
      attr = signals[i] + ".Description";
      sdescr = GetAttribute( attr);
    endif

    attr = channel + ".Description";
    cdescr = GetAttribute( attr);

    # Write to temporary file
    fprintf( fp, "%s;%s;\"%s\";\"%s\"\n", channel, signals[i], sdescr, cdescr);

    channel = GetNextAttrRef( chanclass, channel);
  endwhile


  return 1;
endfunction

main()
  extern string signals[4000];
  extern string sigchancons[4000];
  string volume;
  string outfilename;
  string tmpfilename;
  string lvolname;
  string cmd;
  int fp;
  string msg;

  string path = "$pwrp_doc/";
  string fileend = "_iolist.csv";
  string tmpname = "tmp";

  # Write excuse
  printf("This will take some time, please wait...\n");

  # Create temporary file name and output file name
  volume = GetCurrentVolume();
  lvolname = tolower(volume);
  outfilename = path + lvolname + fileend;
  tmpfilename = path + tmpname + fileend;

  # Open temporary file
  fp = fopen(tmpfilename,"w");


  # Print all channnels
  print_channels( fp, "ChanDi", "Di");
  print_channels( fp, "ChanDo", "Do");
  print_channels( fp, "ChanAi", "Ai");
  print_channels( fp, "ChanAo", "Ao");
  print_channels( fp, "ChanCo", "Co");
  print_channels( fp, "ChanIi", "Ii");
  print_channels( fp, "ChanIo", "Io");

  # Close temporary file
  fclose(fp);
  
  # Sort and pipe to output file, remove temporary file
  cmd = "sort " + tmpfilename + " > " + outfilename;
  system( cmd );
  cmd = "rm " + tmpfilename;
  system( cmd );
  
  # Write total no of lines to screen
  printf("File %s created\n", outfilename);
  msg = "File " + outfilename + " created";
  MessageInfo( msg);
  

  delete signals[1000];
  delete sigchancons[1000];
endmain