/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef wb_nav_macros_h
#define wb_nav_macros_h

#ifndef _Xm_h
#include <Xm/Xm.h>
#endif

#ifndef MrmPublic
#include <Mrm/MrmPublic.h>
#endif

#include "pwr.h"

#include "co_math.h"

#undef Status

#if defined __cplusplus
extern "C" {
#endif

#define SwapInts(Dragon, Eagle)                                                \
  {                                                                            \
    int ShakingCrane;                                                          \
    ShakingCrane = Dragon;                                                     \
    Dragon = Eagle;                                                            \
    Eagle = ShakingCrane;                                                      \
  }
#define ORD(x, y) ((int)&(((struct x*)0)->y))

/* Error checking */
#define If_Error_Then_Return_Status                                            \
  if ((status & 1) != 1)                                                       \
  return (status)
#define If_Error_Then if ((status & 1) != 1)
#define If_Not_Error_Then if ((status & 1))
#define ShowErr(str)                                                           \
  if ((status & 1) != 1)                                                       \
  vms_perror(str, status)
#define ShowErr_Return(str)                                                    \
  If_Error_Then                                                                \
  {                                                                            \
    vms_perror(str, status);                                                   \
    return (status);                                                           \
  }

/* DECwindows macros */
#define REGARG(NAME)                                                           \
  {                                                                            \
    #NAME, (XtPointer) NAME                                                    \
  }

/* General procedure type definition */
typedef void (*voidp)();

/* Common part type definition */
typedef struct s_commonpart {
  void* parent_ctx;
  Widget parent_wid;
  char* name;
} t_commonpart, *commonpart;

/* UIL fetcher */
void uilutil_fetch(char**, int, MrmRegisterArg*, int, Widget, char*, char*,
    ArgList, int, Widget*, MrmHierarchy*);

void vms_perror(char* userstring, int msgid);

#if defined __cplusplus
}
#endif
#endif
