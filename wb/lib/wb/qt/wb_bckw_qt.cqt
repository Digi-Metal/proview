/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_bckw_qt.cpp -- Backupfile display window */

#include "cow_qt_helpers.h"
#include "cow_xhelp.h"

#include "wb_bckw_qt.h"
#include "wb_bckwnav_qt.h"

#include <QMenuBar>
#include <QVBoxLayout>

WbBckWQt::WbBckWQt(void* bckw_parent_ctx, QWidget* bckw_parent_wid,
    ldh_tSession bckw_ldhses, const char* bckw_name, wb_bck_list* l_list,
    int l_editmode, pwr_tStatus* status)
    : WbBckW(
          bckw_parent_ctx, bckw_ldhses, bckw_name, l_list, l_editmode, status)
{
  toplevel = new WbBckWQtWidget(this, bckw_parent_wid);
  toplevel->setToolTip(fl("wb_bckw widget"));
  toplevel->setMinimumSize(1100, 600);
  toplevel->setWindowTitle(fl(bckw_name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QMenuBar* menu_bar = new QMenuBar();

  // File Entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Open", SLOT(activate_open()));
  addMenuItem(toplevel, file, "&Compare Backup File", SLOT(activate_diff()));
  addMenuItem(toplevel, file, "C&ompare Database", SLOT(activate_diff_wb()));
  addMenuItem(
      toplevel, file, "&Print", SLOT(activate_print()), "", "document-print");
  addMenuItem(
      toplevel, file, "&Transfer to database", SLOT(activate_transfer_wb()));
  addMenuItem(toplevel, file, "&Filter", SLOT(activate_filter()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Edit menu
  QMenu* edit = menu_bar->addMenu(translate_utf8("&Edit"));
  addMenuItem(toplevel, edit, "&Check all", SLOT(activate_check_all()));
  addMenuItem(toplevel, edit, "&Check clear", SLOT(activate_check_clear()));

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "zoom-original");

  // Help menu
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  QVBoxLayout* form = new QVBoxLayout(toplevel);

  // Create bckwnav
  bckwnav = new WbBckWNavQt(
      this, toplevel, bckw_ldhses, l_list, l_editmode, &nav_widget);

  form->setMenuBar(menu_bar);
  add_expanding(form, nav_widget);

  toplevel->setLayout(form);
  toplevel->show();

  wow = new CoWowQt(toplevel);

  WbBckW::show();

  if (list && list->type() != bck_eType_WbDiff) {
    file_transfer_wb->setVisible(false);
    edit_check_all->setVisible(false);
    edit_check_clear->setVisible(false);
  }
}

void WbBckWQt::print()
{
  pwr_tStatus sts;

  CoWowQt::CreateBrowPrintDialogQt(name, bckwnav->brow->ctx,
      flow_eOrientation_Portrait, 1.0, toplevel, &sts);
}

void WbBckWQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!bck->focustimer.disabled()) {
    bck->bckwnav->set_input_focus();
    bck->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void WbBckWQtWidget::closeEvent(QCloseEvent* event)
{
  delete bck;
  QWidget::closeEvent(event);
}

WbBckWQt::~WbBckWQt()
{
  if (bckwnav)
    delete bckwnav;
}

void WbBckWQt::set_title(char* title)
{
  toplevel->setWindowTitle(QString::fromLatin1(title));
}

void WbBckWQtWidget::activate_print()
{
  bck->activate_print();
}

void WbBckWQtWidget::activate_open()
{
  bck->activate_open();
}

void WbBckWQtWidget::activate_diff()
{
  bck->activate_diff();
}

void WbBckWQtWidget::activate_diff_wb()
{
  bck->activate_diff_wb();
}

void WbBckWQtWidget::activate_transfer_wb()
{
  bck->activate_transfer_wb();
}

void WbBckWQtWidget::activate_filter()
{
  bck->activate_filter();
}

void WbBckWQtWidget::activate_check_all()
{
  bck->activate_check_all();
}

void WbBckWQtWidget::activate_check_clear()
{
  bck->activate_check_clear();
}

void WbBckWQtWidget::activate_zoom_in()
{
  bck->bckwnav->zoom(1.2);
}

void WbBckWQtWidget::activate_zoom_out()
{
  bck->bckwnav->zoom(5.0 / 6);
}

void WbBckWQtWidget::activate_zoom_reset()
{
  bck->bckwnav->unzoom();
}

void WbBckWQtWidget::activate_help()
{
  CoXHelp::dhelp(
      "backup_refman", 0, navh_eHelpFile_Other, "$pwr_lang/man_dg.dat", true);
}