/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_expw_qt.cpp -- Backupfile display window */

#include "cow_qt_helpers.h"
#include "cow_xhelp.h"

#include "wb_expw_qt.h"
#include "wb_expwnav_qt.h"

#include <QMenuBar>
#include <QVBoxLayout>

WbExpWQt::WbExpWQt(void* expw_parent_ctx, QWidget* expw_parent_wid,
    ldh_tSession expw_ldhses, const char* expw_name, int l_type, int l_editmode,
    pwr_tStatus* status)
    : WbExpW(
          expw_parent_ctx, expw_ldhses, expw_name, l_type, l_editmode, status)
{
  toplevel = new WbExpWQtWidget(this, expw_parent_wid);
  toplevel->setToolTip(fl("wb_expw widget"));
  toplevel->setMinimumSize(1100, 600);
  toplevel->setWindowTitle(fl(expw_name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QMenuBar* menu_bar = new QMenuBar();

  // File Entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, btext, SLOT(activate_export()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Edit menu
  QMenu* edit = menu_bar->addMenu(translate_utf8("&Edit"));
  addMenuItem(toplevel, edit, "&Update", SLOT(activate_update()), "CTRL+U");
  addMenuItem(toplevel, edit, "&Check all", SLOT(activate_check_all()));
  addMenuItem(toplevel, edit, "C&heck clear", SLOT(activate_check_clear()));
  addMenuItem(toplevel, edit, "Check &reset", SLOT(activate_check_reset()));
  addCheckableMenuItem(
      toplevel, edit, "&Show all", SLOT(activate_show_all(bool)), "CTRL+A");

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "zoom-original");

  // Help Entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  // Toolbar
  QToolBar* tools = new QToolBar();

  addToolItem(toplevel, tools, action, SLOT(activate_export()),
      "$pwr_exe/wb_export.png");
  addToolItem(toplevel, tools, "Update", SLOT(activate_update()),
      "$pwr_exe/ge_update.png");
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  QVBoxLayout* form = new QVBoxLayout(toplevel);

  // Create expwnav
  expwnav = new WbExpWNavQt(
      this, toplevel, expw_ldhses, l_type, l_editmode, &nav_widget);

  form->setMenuBar(menu_bar);
  form->addWidget(tools);
  add_expanding(form, nav_widget);

  toplevel->setLayout(form);
  toplevel->show();

  wow = new CoWowQt(toplevel);

  WbExpW::show();
  // expwnav->check_all();
}

void WbExpWQt::print()
{
  pwr_tStatus sts;

  CoWowQt::CreateBrowPrintDialogQt(name, expwnav->brow->ctx,
      flow_eOrientation_Portrait, 1.0, toplevel, &sts);
}

void WbExpWQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!expw->focustimer.disabled()) {
    expw->expwnav->set_input_focus();
    expw->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void WbExpWQtWidget::closeEvent(QCloseEvent* event)
{
  debug_print("WbExpWQtWidget::closeEvent\n");
  delete expw;
  QWidget::closeEvent(event);
}

void WbExpWQt::set_title(char* title)
{
  toplevel->setWindowTitle(QString::fromLatin1(title));
}

void WbExpWQtWidget::activate_export()
{
  expw->activate_export();
}

void WbExpWQtWidget::activate_update()
{
  expw->activate_update();
}

void WbExpWQtWidget::activate_check_all()
{
  expw->activate_check_all();
}

void WbExpWQtWidget::activate_check_clear()
{
  expw->activate_check_clear();
}

void WbExpWQtWidget::activate_check_reset()
{
  expw->activate_check_reset();
}

void WbExpWQtWidget::activate_show_all(bool set)
{
  expw->expwnav->set_show_all(set);
}

void WbExpWQtWidget::activate_zoom_in()
{
  expw->expwnav->zoom(1.2);
}

void WbExpWQtWidget::activate_zoom_out()
{
  expw->expwnav->zoom(5.0 / 6);
}

void WbExpWQtWidget::activate_zoom_reset()
{
  expw->expwnav->unzoom();
}

void WbExpWQtWidget::activate_help()
{
  if (expw->type == expw_eType_Export || expw->type == expw_eType_Import) {
    CoXHelp::dhelp("exportimport_refman", 0, navh_eHelpFile_Other,
        "$pwr_lang/man_dg.dat", true);
  } else if (expw->type == expw_eType_BuildDirectories) {
    CoXHelp::dhelp("builddir_refman", 0, navh_eHelpFile_Other,
        "$pwr_lang/man_dg.dat", true);
  }
}