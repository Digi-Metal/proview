/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

//   wb_foe_qt.cpp
//   This module creates function object editor and handles
//   the graphical editor.

#include <math.h>
#include <stdlib.h>
#include <string.h>

#include "pwr_baseclasses.h"

#include "cow_logw_qt.h"
#include "cow_qt_helpers.h"

#include "wb_foe_msg.h"
#include "wb_foe_qt.h"
#include "wb_gre_qt.h"
#include "wb_log.h"
#include "wb_nav_qt.h"
#include "wb_pal_qt.h"
#include "wb_watt_qt.h"
#include "wb_watttext_qt.h"

#include <QCloseEvent>
#include <QHBoxLayout>
#include <QMenu>
#include <QMenuBar>
#include <QMessageBox>
#include <QTimer>

void WFoeQtWidget::activate_save()
{
  foe->activate_save();
}

void WFoeQtWidget::activate_winddelete()
{
  foe->activate_winddelete();
}

void WFoeQtWidget::activate_quit()
{
  foe->activate_quit();
}

void WFoeQtWidget::activate_savetrace()
{
  foe->activate_savetrace();
}

void WFoeQtWidget::activate_restoretrace()
{
  foe->activate_restoretrace();
}

void WFoeQtWidget::activate_history()
{
  pwr_tStatus sts;
  char categories[3][20];
  pwr_tOName wname;
  int size;
  char title[300];

  wb_log::category_to_string(wlog_eCategory_PlcSave, categories[0]);
  wb_log::category_to_string(wlog_eCategory_PlcBuild, categories[1]);
  strcpy(categories[2], "");

  sts = ldh_ObjidToName(foe->gre->wind->hw.ldhses, foe->gre->wind->lw.oid,
      ldh_eName_VolPath, wname, sizeof(wname), &size);
  if (EVEN(sts)) {
    return;
  }

  strcpy(title, "History ");
  strcat(title, wname);
  CoLogWQt* logw = new CoLogWQt(foe, title, 0, &sts);
  logw->CoLogW::show(categories, wname);
}

void WFoeQtWidget::activate_print()
{
  foe->activate_print();
}

void WFoeQtWidget::activate_printdialog()
{
  CoWowQt::CreateFlowPrintDialogQt(
      "PlcEditor", foe->gre->flow_ctx, ((WGreQt*)foe->gre)->flow_widget);
}

void WFoeQtWidget::activate_printoverv()
{
  foe->activate_printoverv();
}

void WFoeQtWidget::activate_printselect()
{
  foe->activate_printselect();
}

void WFoeQtWidget::activate_printpdf()
{
  foe->activate_printpdf();
}

void WFoeQtWidget::activate_syntax()
{
  foe->activate_syntax();
}

void WFoeQtWidget::activate_compile()
{
  foe->activate_compile();
}

void WFoeQtWidget::activate_delete()
{
  foe->activate_delete();
}

void WFoeQtWidget::activate_delete_confirm()
{
  foe->activate_delete_confirm();
}

void WFoeQtWidget::activate_createobject()
{
  double x, y;

  foe->gre->pixel_to_position(
      foe->gre->popup_menu_x, foe->gre->popup_menu_y, &x, &y);
  foe->activate_createobject((float)x, (float)y);
}

void WFoeQtWidget::activate_changetext()
{
  foe->activate_changetext();
}

void WFoeQtWidget::activate_cut()
{
  foe->activate_cut();
}

void WFoeQtWidget::activate_copy()
{
  foe->activate_copy();
}

void WFoeQtWidget::activate_paste()
{
  foe->activate_paste();
}

void WFoeQtWidget::activate_select_next()
{
  foe->activate_select_nextobject(
      static_cast<flow_eDirection>(((QAction*)sender())->data().toInt()));
}

void WFoeQtWidget::activate_select_addnext()
{
  foe->activate_select_addnextobject(
      static_cast<flow_eDirection>(((QAction*)sender())->data().toInt()));
}

void WFoeQtWidget::activate_select_cp_next()
{
  foe->activate_select_nextconpoint(
      static_cast<flow_eDirection>(((QAction*)sender())->data().toInt()));
}

void WFoeQtWidget::activate_scroll()
{
  foe->activate_scroll(
      static_cast<flow_eDirection>(((QAction*)sender())->data().toInt()));
}

void WFoeQtWidget::activate_move()
{
  foe->activate_move_object(
      static_cast<flow_eDirection>(((QAction*)sender())->data().toInt()));
}

void WFoeQtWidget::activate_attribute()
{
  foe->activate_attribute();
}

void WFoeQtWidget::activate_editcode()
{
  foe->activate_editcode();
}

void WFoeQtWidget::activate_subwindow()
{
  foe->activate_subwindow();
}

void WFoeQtWidget::activate_undelete()
{
  foe->activate_undelete();
}

void WFoeQtWidget::activate_unselect()
{
  foe->activate_unselect();
}

void WFoeQtWidget::activate_createnode()
{
  foe->activate_createnode();
}

void WFoeQtWidget::activate_createcon()
{
  foe->activate_createconnection();
}

void WFoeQtWidget::activate_conpoint_lock()
{
  foe->activate_conpoint_lock();
}

// Sets gridsize.
void WFoeQtWidget::activate_gridsize()
{
  foe->gre->set_grid_size(((QAction*)sender())->data().toDouble());
}

void WFoeQtWidget::activate_showgrid()
{
}

void WFoeQtWidget::activate_redraw()
{
  foe->activate_redraw();
}

void WFoeQtWidget::activate_zoomin()
{
  foe->activate_zoomin();
}

void WFoeQtWidget::activate_zoomout()
{
  foe->activate_zoomout();
}

void WFoeQtWidget::activate_unzoom()
{
  foe->activate_unzoom();
}

// Display or hide the connection palette.
void WFoeQtWidget::activate_palette_con()
{
  if (sender() != foe->view_conpal) {
    foe->view_conpal->setChecked(true);
  }

  foe->nav_palette->setVisible(false);
  foe->node_palette->setVisible(false);
  foe->con_palette->setVisible(true);
  foe->node_palette_managed = 0;
  foe->nav_palette_managed = 0;
  foe->con_palette_managed = 1;
  foe->con_palctx->set_inputfocus(1);
}

// Display or hide the connection palette.
void WFoeQtWidget::activate_palette_object()
{
  if (sender() != foe->view_objectpal) {
    foe->view_objectpal->setChecked(true);
  }

  foe->con_palette->setVisible(false);
  foe->nav_palette->setVisible(false);
  foe->node_palette->setVisible(true);
  foe->con_palette_managed = 0;
  foe->nav_palette_managed = 0;
  foe->node_palette_managed = 1;
  foe->node_palctx->set_inputfocus(1);
}

void WFoeQtWidget::activate_confeedback(bool set)
{
  foe->activate_confeedback(set);
}

void WFoeQtWidget::activate_singlelinetext()
{
  foe->activate_createobject_cid(pwr_cClass_Text, 0);
}

void WFoeQtWidget::activate_bodytext()
{
  foe->activate_createobject_cid(pwr_cClass_BodyText, 0);
}

void WFoeQtWidget::activate_textheader()
{
  foe->activate_createobject_cid(pwr_cClass_Head, 0);
}

void WFoeQtWidget::activate_document()
{
  foe->activate_createobject_cid(pwr_cClass_Document, 0);
}

void WFoeQtWidget::activate_document_landscape()
{
  foe->activate_createobject_cid(pwr_cClass_Document, 1);
}

// Display or hide the connection palette.
void WFoeQtWidget::activate_palette_plant()
{
  if (sender() != foe->view_plantpal) {
    foe->view_plantpal->setChecked(true);
  }

  foe->con_palette->setVisible(false);
  foe->node_palette->setVisible(false);
  foe->nav_palette->setVisible(true);
  foe->node_palette_managed = 0;
  foe->con_palette_managed = 0;
  foe->nav_palette_managed = 1;
  foe->navctx->set_inputfocus(1);
}

void WFoeQtWidget::activate_refcon(bool set)
{
  foe->activate_refcon(set);
}

void WFoeQtWidget::activate_showexeord(bool set)
{
  foe->activate_showexeord(set);
}

void WFoeQtWidget::activate_plcattribute()
{
  foe->activate_plcattribute();
}

void WFoeQtWidget::activate_search()
{
}

void WFoeQtWidget::activate_searchobject()
{
  foe->activate_searchobject();
}

void WFoeQtWidget::activate_searchstring()
{
  foe->activate_searchstring();
}

void WFoeQtWidget::activate_searchnext()
{
  foe->activate_searchnext();
}

void WFoeQtWidget::activate_getobj()
{
  foe->activate_getobj();
}

void WFoeQtWidget::activate_expand()
{
  foe->activate_expand();
}

void WFoeQtWidget::activate_compress()
{
  foe->activate_compress();
}

// Display help window for topic plc editor
void WFoeQtWidget::activate_help()
{
  foe->activate_help();
}

// Display help for the plc window
void WFoeQtWidget::activate_helpplc()
{
  foe->activate_helpplc();
}

// Display help for all the plcpmgs
void WFoeQtWidget::activate_helpplclist()
{
  foe->activate_helpplclist();
}

// Display class help for selected object
void WFoeQtWidget::activate_helpclass()
{
  foe->activate_helpclass();
}

// Callbacks from the toggle buttons under the function entry.
// This callbacks are called when the value of a toggle button is changed.
// The function pulldown menu is a radio box which ensure that
// one and only one toggle button is set at any time:
// If the callback is generated by the radio entry
// (and not directly by the user ) the event is 0.
// These callbacks are use to determine in which mode the user works:
// 	SG 01.05.91
void WFoeQtWidget::activate_trace_togg()
{
  foe->activate_trace_togg(true);
}

// Callbacks from the toggle buttons under the customize entry.
void WFoeQtWidget::activate_simulate_togg()
{
  foe->activate_simulate_togg(true);
}

void WFoeQtWidget::activate_view_togg()
{
  if (sender() != foe->view_togg) {
    foe->view_togg->setChecked(true);
  }

  foe->activate_view_togg(true);
}

void WFoeQtWidget::activate_edit_togg()
{
  if (sender() != foe->edit_togg) {
    foe->edit_togg->setChecked(true);
    foe->edit_was_checked = true;
  } else {
    foe->edit_was_checked = !foe->edit_was_checked;
  }

  foe->activate_edit_togg(foe->edit_was_checked);
}

void WFoeQtWidget::valchanged_textinput()
{
  int sts;

  if (foe->textinput == 0) {
    return;
  }

  strcpy(foe->searchstring, qPrintableLatin1(foe->textinput->text()));

  foe->message("");
  foe->textinput->setText("");
  foe->textinput->setVisible(false);

  /* Call the specified function */
  sts = (foe->textinput_func)(foe, foe->searchstring);
  foe->error_msg(sts);
}

void WFoeQtWidget::wfoeqt_reset_current_node()
{
  if (foe->popupmenu_node != 0) {
    foe->gre->node_unselect(foe->popupmenu_node);
  }
}

void WFoeQtWidget::popup_unmap_cb()
{
  if (foe->popupmenu_node != 0) {
    /* Wait some time and take away select if nobody else has done that */
    QTimer::singleShot(50, this, SLOT(wfoeqt_reset_current_node()));
  }
  foe->normal_cursor();
}

int WFoeQt::modify_popup(unsigned long popupmenu_mask, int x, int y)
{
  static const int bsize = 12;
  static char buttontext[bsize][40] = { "ObjectEditor", "SubWindow", "Connect",
    "Delete", "Paste", "Copy", "Cut", "PrintSelect", "HelpClass",
    "CreateObject", "EditCode", "EditText" };
  static QString menu_callbacks[bsize] = { SLOT(activate_attribute()),
    SLOT(activate_subwindow()), SLOT(activate_getobj()),
    SLOT(activate_delete()), SLOT(activate_paste()), SLOT(activate_copy()),
    SLOT(activate_cut()), SLOT(activate_printselect()),
    SLOT(activate_helpclass()), SLOT(activate_createobject()),
    SLOT(activate_editcode()), SLOT(activate_editcode()) };

  QMenu* menu = new QMenu(toplevel);
  for (int i = 0; i < bsize; i++) {
    if (popupmenu_mask & (1 << i)) {
      addMenuItem(toplevel, menu, buttontext[i], qPrintable(menu_callbacks[i]));
    }
  }

  QObject::connect(
      menu, SIGNAL(aboutToHide()), toplevel, SLOT(popup_unmap_cb()));
  menu->popup(QPoint(x + 5, y));
  popupmenu = menu;

  return FOE__SUCCESS;
}

void WFoeQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!foe->focustimer.disabled()) {
    if (foe->nav_palette_managed) {
      foe->navctx->set_inputfocus(1);
    } else if (foe->node_palette_managed) {
      foe->node_palctx->set_inputfocus(1);
    } else if (foe->con_palette_managed) {
      foe->con_palctx->set_inputfocus(1);
    }

    foe->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

// Start the attribute editor and store the attribute context pointer
// together with WFoe and the nodepointer to use when a backcall
// comes.
WAtt* WFoeQt::watt_new(void* a_parent_ctx, ldh_tSesContext a_ldhses,
    pwr_sAttrRef a_aref, int a_editmode, int a_advanced_user,
    int a_display_objectname)
{
  return new WAttQt(a_parent_ctx, a_ldhses, a_aref, a_editmode, a_advanced_user,
      a_display_objectname);
}

WAttText* WFoeQt::watttext_new(void* a_parent_ctx, ldh_tSesContext a_ldhses,
    pwr_sAttrRef a_aref, int a_editmode, pwr_tStatus* status)
{
  return new WAttTextQt(a_parent_ctx, a_ldhses, a_aref, a_editmode, status);
}

// Destroys a foe instance.
// Destroys the widget and frees allocated memory for the
// context.
void WFoeQt::destroy()
{
  gre->wind->hw.foe = 0;

  delete gre;
  delete node_palctx;
  delete con_palctx;
  delete navctx;

  /* Destroy the widget */
  delete toplevel;

  // Yes, this is intentional, we want to call the destructor here.
  delete this;
}

void WFoeQt::set_title()
{
  QString new_title = QString::fromLatin1(name);
  if (function == EDIT) {
    new_title.prepend("*** ");
    toplevel->setWindowTitle(new_title);
  } else if (function == VIEW) {
    toplevel->setWindowTitle(new_title);
  }
}

WFoe* WFoeQt::subwindow_new(void* f_parent_ctx, char* f_name,
    pwr_tObjid plcprogram, ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx,
    vldh_t_node nodeobject, unsigned long windowindex, unsigned long new_window,
    int f_map_window, ldh_eAccess f_access, foe_eFuncAccess function_access,
    unsigned int f_options, pwr_tStatus* sts)
{
  WFoeQt* foe = new WFoeQt(f_parent_ctx, f_name, plcprogram,
      ldhwbctx, ldhsesctx, nodeobject, windowindex, new_window, f_map_window,
      f_access, function_access, f_options, sts);
  if (ODD(*sts)) {
    get_build_options_cb = get_build_options_subwindow_cb;
  }

  return foe;
}

// Displays a message in the foe window.
// Changes the label of a label widget which id is stored in the context.
// Author: SG
// 	Date : 25.01.91
//    	To avoid unnecessary call to this routine the context variable :
//     	foe.msg_label_id is set to null if the the message to be displayed
//     	is "" . This case occurs when you want to erase a previous message.
void WFoeQt::message(const char* new_label)
{
  int l;

  gre->search_rectangle_delete();
  l = strlen(new_label);
  msg_label_id = (l != 0);
  if (l == 0) {
    new_label = " ";
  }
  label->setText(QString::fromLatin1(new_label));
}

// This routine is called by any one who wants to send a little message.
// in a ( modal) message box. No callback is expected. We just want to
// be sure that the user see the message.
// Author: SG
// Date : 24.02.91
void WFoeQt::msgbox(const char* new_label)
{
  wow->DisplayError("Message", new_label);
}

// This routine is called by any one who wants to send a little caution message.
// The calling routine send also the address of the function it want to
// be executed when the yes button is pressed in the caution box.
// Author: SG
// Date : 13.02.91
void WFoeQt::popupmsg(const char* new_label, void (*yes_procedure)(WFoe*),
    void (*no_procedure)(WFoe*), void (*cancel_procedure)(WFoe*))
{
  popupmsg_yes_p = yes_procedure;
  popupmsg_no_p = no_procedure;
  popupmsg_cancel_p = cancel_procedure;
  QMessageBox::StandardButton reply = QMessageBox::question(toplevel,
      fl("Confirm"), QString::fromLatin1(new_label),
      QMessageBox::Yes | QMessageBox::No | QMessageBox::Cancel);
  if (reply == QMessageBox::Yes) {
    if (popupmsg_yes_p != NULL) {
      (popupmsg_yes_p)(this);
    }
  } else if (reply == QMessageBox::No) {
    if (popupmsg_no_p != NULL) {
      (popupmsg_no_p)(this);
    }
  } else {
    if (popupmsg_cancel_p != NULL) {
      (popupmsg_cancel_p)(this);
    }
  }
}

WFoeQt::WFoeQt(void* f_parent_ctx, const char* f_name, pwr_tObjid plcprogram,
    ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx, vldh_t_node nodeobject,
    unsigned long windowindex, unsigned long new_window, int f_map_window,
    ldh_eAccess f_access, foe_eFuncAccess function_access,
    unsigned int f_options, pwr_tStatus* sts) : WFoe(f_parent_ctx, f_name,
        plcprogram, ldhwbctx, ldhsesctx, nodeobject, windowindex, new_window,
        f_map_window, f_access, function_access, f_options, sts)
{
  toplevel = new WFoeQtWidget(this);
  *sts = new_local(plcprogram, ldhwbctx, ldhsesctx, nodeobject, windowindex,
      new_window, function_access);
}

WFoeQt::WFoeQt(void* f_parent_ctx, const char* f_name, pwr_tObjid plcprogram,
    ldh_tWBContext ldhwbctx, ldh_tSesContext ldhsesctx, int f_map_window,
    ldh_eAccess f_access, unsigned int f_options, pwr_tStatus* sts)
    : WFoe(f_parent_ctx, f_name, plcprogram, ldhwbctx, ldhsesctx, f_map_window,
          f_access, f_options, sts)
{
  int size;
  pwr_tFullName new_name;
  ldh_tSesContext ldhses;

  /* Check that it is possible to open a session */
  *sts = ldh_OpenSession(
      &ldhses, ldh_SessionToVol(ldhsesctx), access, ldh_eUtility_PlcEditor);
  if (EVEN(*sts)) {
    return;
  }

  *sts = ldh_CloseSession(ldhses);

  /* New title */
  *sts = ldh_ObjidToName(ldhsesctx, plcprogram, ldh_eName_Hierarchy, new_name,
      sizeof(new_name), &size);
  error_msg(*sts);
  if (EVEN(*sts)) {
    return;
  }

  strcpy(name, new_name);
  toplevel = new WFoeQtWidget(this);
  *sts = new_local(
      plcprogram, ldhwbctx, ldhsesctx, 0, 0, 0, foe_eFuncAccess_Edit);
}

// Pop the window
void WFoeQt::pop()
{
  ::pop(toplevel);
}

void WFoeQtWidget::closeEvent(QCloseEvent* event)
{
  foe->activate_quit();
  event->ignore();
}

// Create a new foe window
// SG 09.02.91 : Create a new toplevel widget and give it an pixmap icon
// SG : 13.02.91 Fetch a caution box and save the id of the widget in the
//               foe context for futher use
// SG : 24.02.91 Fetch a widget ( again !) . This time a message box
// SG : 24.03.91 Send the routine the desired position (x_top , y_top)
// and the desired size ( width_adb , height_adb ) for the window to be created.
// The two first parameters are set to the top level widget
// and the two last paramters are set to the adb widget (see in uil file
// the widget hierarchy )
// SG 14.04.91 A new widget to fetch , the help widget !
// SG 2.05.91 New parameter : function ( edit , trace , view , simulate ..)
// to indicate which neted events and which menu entries should be alllowed.
pwr_tStatus WFoeQt::create_window(int x_top, int y_top, int width_adb,
    int height_adb, ldh_tSesContext ldhsession, foe_eFuncAccess function_access)
{
  pwr_tStatus sts;

  toplevel->setMinimumSize(1100, 1000);

  CoWowQt::SetWindowIcon(toplevel);

  QMenuBar* menu_bar = new QMenuBar();

  // File Entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  save = addMenuItem(
      toplevel, file, "Save", SLOT(activate_save()), "CTRL+S", "document-save");

  // Submenu Print
  QMenu* file_print = file->addMenu(translate_utf8("&Print"));
  addMenuItem(toplevel, file_print, "&Print...", SLOT(activate_printdialog()));
  addMenuItem(toplevel, file_print, "&Documents", SLOT(activate_print()));
  addMenuItem(toplevel, file_print, "&Overview", SLOT(activate_printoverv()));
  addMenuItem(toplevel, file_print, "&Selected Documents",
      SLOT(activate_printselect()));
  addMenuItem(toplevel, file_print, "To Pdf &File", SLOT(activate_printpdf()));

  syntax
      = addMenuItem(toplevel, file, "Synta&x Check", SLOT(activate_syntax()));
  compile = addMenuItem(toplevel, file, "&Build", SLOT(activate_compile()),
      "CTRL+SHIFT+B", "system-run");
  plcattribute = addMenuItem(
      toplevel, file, "Plc &Attributes...", SLOT(activate_plcattribute()));
  winddelete = addMenuItem(
      toplevel, file, "&Delete Window", SLOT(activate_winddelete()));
  savetrace
      = addMenuItem(toplevel, file, "Save &Trace", SLOT(activate_savetrace()));
  restoretrace = addMenuItem(
      toplevel, file, "&Restore Trace", SLOT(activate_restoretrace()));
  addMenuItem(toplevel, file, "&History", SLOT(activate_history()));
  exit = addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Edit Entry
  edit = menu_bar->addMenu(translate_utf8("&Edit"));
  undelete
      = addMenuItem(toplevel, edit, "&Undo Delete", SLOT(activate_undelete()));

  createnode = addMenuItem(
      toplevel, edit, "&Create Object", SLOT(activate_createnode()), "ALT+D");
  createcon = addMenuItem(toplevel, edit, "C&reate Connection",
      SLOT(activate_createcon()), "CTRL+D");
  connectA = addMenuItem(
      toplevel, edit, "C&onnect", SLOT(activate_getobj()), "CTRL+Q");
  lockconpoint = addMenuItem(toplevel, edit, "&Lock ConnectionPoint Selection",
      SLOT(activate_conpoint_lock()), "CTRL+SHIFT+D");
  cut = addMenuItem(
      toplevel, edit, "&Cut", SLOT(activate_cut()), "CTRL+X", "edit-cut");
  copy = addMenuItem(
      toplevel, edit, "&Copy", SLOT(activate_copy()), "CTRL+C", "edit-copy");
  paste = addMenuItem(
      toplevel, edit, "&Paste", SLOT(activate_paste()), "CTRL+V", "edit-paste");
  del = addMenuItem(toplevel, edit, "&Delete", SLOT(activate_delete_confirm()),
      "Delete", "edit-delete");

  // Edit Select submenu
  QMenu* edit_select = edit->addMenu(translate_utf8("Select"));
  unselect = addMenuItem(
      toplevel, edit_select, "&Reset", SLOT(activate_unselect()), "ALT+Z");
  QAction* a = addMenuItem(toplevel, edit_select, "Next Right",
      SLOT(activate_select_next()), "SHIFT+Right");
  a->setData(flow_eDirection_Right);
  a = addMenuItem(toplevel, edit_select, "Next Left",
      SLOT(activate_select_next()), "SHIFT+Left");
  a->setData(flow_eDirection_Left);
  a = addMenuItem(toplevel, edit_select, "Next Up",
      SLOT(activate_select_next()), "SHIFT+Up");
  a->setData(flow_eDirection_Up);
  a = addMenuItem(toplevel, edit_select, "Next Down",
      SLOT(activate_select_next()), "SHIFT+Down");
  a->setData(flow_eDirection_Down);

  select_addnextright = addMenuItem(toplevel, edit_select, "Add Next Right",
      SLOT(activate_select_addnext()), "ALT+SHIFT+Right");
  select_addnextright->setData(flow_eDirection_Right);
  select_addnextleft = addMenuItem(toplevel, edit_select, "Add Next Left",
      SLOT(activate_select_addnext()), "ALT+SHIFT+Left");
  select_addnextleft->setData(flow_eDirection_Left);
  select_addnextup = addMenuItem(toplevel, edit_select, "Add Next Up",
      SLOT(activate_select_addnext()), "ALT+SHIFT+Up");
  select_addnextup->setData(flow_eDirection_Up);
  select_addnextdown = addMenuItem(toplevel, edit_select, "Add Next Down",
      SLOT(activate_select_addnext()), "ALT+SHIFT+Down");
  select_addnextdown->setData(flow_eDirection_Down);

  select_cp_nextright
      = addMenuItem(toplevel, edit_select, "Next ConnectionPoint Right",
          SLOT(activate_select_cp_next()), "CTRL+Right");
  select_cp_nextright->setData(flow_eDirection_Right);
  select_cp_nextleft
      = addMenuItem(toplevel, edit_select, "Next ConnectionPoint Left",
          SLOT(activate_select_cp_next()), "CTRL+Left");
  select_cp_nextleft->setData(flow_eDirection_Left);
  select_cp_nextup = addMenuItem(toplevel, edit_select,
      "Next ConnectionPoint Up", SLOT(activate_select_cp_next()), "CTRL+Up");
  select_cp_nextup->setData(flow_eDirection_Up);
  select_cp_nextdown
      = addMenuItem(toplevel, edit_select, "Next ConnectionPoint Down",
          SLOT(activate_select_cp_next()), "CTRL+Down");
  select_cp_nextdown->setData(flow_eDirection_Down);

  // Edit Scroll submenu
  QMenu* edit_scroll = edit->addMenu(translate_utf8("Scroll"));
  a = addMenuItem(
      toplevel, edit_scroll, "Right", SLOT(activate_scroll()), "ALT+Right");
  a->setData(flow_eDirection_Right);
  a = addMenuItem(
      toplevel, edit_scroll, "Left", SLOT(activate_scroll()), "ALT+Left");
  a->setData(flow_eDirection_Left);
  a = addMenuItem(
      toplevel, edit_scroll, "Up", SLOT(activate_scroll()), "ALT+Up");
  a->setData(flow_eDirection_Up);
  a = addMenuItem(
      toplevel, edit_scroll, "Down", SLOT(activate_scroll()), "ALT+Down");
  a->setData(flow_eDirection_Down);

  // Edit Move submenu
  QMenu* edit_move = edit->addMenu(translate_utf8("Move"));
  move_right = addMenuItem(
      toplevel, edit_move, "Right", SLOT(activate_move()), "CTRL+SHIFT+Right");
  move_right->setData(flow_eDirection_Right);
  move_left = addMenuItem(
      toplevel, edit_move, "Left", SLOT(activate_move()), "CTRL+SHIFT+Left");
  move_left->setData(flow_eDirection_Left);
  move_up = addMenuItem(
      toplevel, edit_move, "Up", SLOT(activate_move()), "CTRL+SHIFT+Up");
  move_up->setData(flow_eDirection_Up);
  move_down = addMenuItem(
      toplevel, edit_move, "Down", SLOT(activate_move()), "CTRL+SHIFT+Down");
  move_down->setData(flow_eDirection_Down);

  changetext = addMenuItem(
      toplevel, edit, "C&hange Text", SLOT(activate_changetext()), "CTRL+T");
  expand = addMenuItem(
      toplevel, edit, "E&xpand Object", SLOT(activate_expand()), "CTRL+K");
  compress = addMenuItem(
      toplevel, edit, "C&ompress Object", SLOT(activate_compress()), "CTRL+J");

  // Search Entry
  QMenu* search = menu_bar->addMenu(translate_utf8("&Search"));
  addMenuItem(toplevel, search, "&Object", SLOT(activate_searchobject()));
  addMenuItem(
      toplevel, search, "&String", SLOT(activate_searchstring()), "CTRL+F");
  addMenuItem(toplevel, search, "&Next", SLOT(activate_searchnext()), "CTRL+G");

  // View Entry
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));

  // Submenu Palette
  QActionGroup* view_pal_group = new QActionGroup(toplevel);
  QMenu* view_pal = view->addMenu(translate_utf8("&Palette"));
  view_objectpal = addMenuRadioItem(toplevel, view_pal, "&Object",
      SLOT(activate_palette_object()), view_pal_group, "ALT+O");
  view_conpal = addMenuRadioItem(toplevel, view_pal, "&Connection",
      SLOT(activate_palette_con()), view_pal_group, "ALT+I");
  view_plantpal = addMenuRadioItem(toplevel, view_pal, "&Plant",
      SLOT(activate_palette_plant()), view_pal_group, "ALT+P");

  addCheckableMenuItem(toplevel, view, "&Reference Connections",
      SLOT(activate_refcon(bool)), "CTRL+R");

  // Submenu gridsize
  QActionGroup* view_gs_group = new QActionGroup(toplevel);
  QMenu* view_gs = view->addMenu(translate_utf8("&Grid Size"));
  for (int i = 0; i < 5; i++) {
    double num = pow(2, i) / (16 * 5);
    QString txt = QString::number(i + 1).prepend('_');
    QAction* view_gs_t = addMenuRadioItem(toplevel, view_gs, qPrintable(txt),
        SLOT(activate_gridsize()), view_gs_group);
    view_gs_t->setData(num);
  }

  addMenuItem(toplevel, view, "&Show Grid", SLOT(activate_showgrid()));

  // Zoom submenu
  QMenu* view_zoom = menu_bar->addMenu(translate_utf8("&Zoom"));
  addMenuItem(toplevel, view_zoom, "Zoom &In", SLOT(activate_zoomin()),
      "CTRL+I", "zoom-in");
  addMenuItem(toplevel, view_zoom, "Zoom &Out", SLOT(activate_zoomout()),
      "CTRL+O", "zoom-out");
  addMenuItem(toplevel, view_zoom, "Zoom &Reset", SLOT(activate_unzoom()), "",
      "zoom-original");

  addCheckableMenuItem(
      toplevel, view, "S&how Execute Order", SLOT(activate_showexeord(bool)));

  redraw = addMenuItem(toplevel, view, "R&edraw", SLOT(activate_redraw()), "",
      "$pwr_exe/foe_redraw.png");

  // Functions Entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "&Open Object...",
      SLOT(activate_attribute()), "CTRL+A");
  addMenuItem(toplevel, functions, "Open &Subwindow",
      SLOT(activate_subwindow()));

  // Mode entry
  QMenu* mode = menu_bar->addMenu(translate_utf8("&Mode"));
  QActionGroup* mode_group = new QActionGroup(toplevel);
  view_togg = addMenuRadioItem(
      toplevel, mode, "&View", SLOT(activate_view_togg()), mode_group);
  edit_togg = addMenuRadioItem(
      toplevel, mode, "&Edit", SLOT(activate_edit_togg()), mode_group);
  edit_togg->setShortcut(fl("CTRL+E"));
  trace_togg = addMenuRadioItem(
      toplevel, mode, "&Trace", SLOT(activate_trace_togg()), mode_group);
  simulate_togg = addMenuRadioItem(
      toplevel, mode, "&Simulate", SLOT(activate_simulate_togg()), mode_group);

  // Menu Help
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");
  addMenuItem(toplevel, help, "H&elp on PlcPgm", SLOT(activate_helpplc()));
  addMenuItem(
      toplevel, help, "He&lp PlcPgm Overview", SLOT(activate_helpplclist()));

  // Toolbar
  QToolBar* tools = new QToolBar();
  tools_save = addToolItem(
      toplevel, tools, "Save", SLOT(activate_save()), "document-save");
  addToolItem(toplevel, tools, "Print documents", SLOT(activate_print()),
      "document-print");
  addToolItem(toplevel, tools, "Set edit mode", SLOT(activate_edit_togg()),
      "$pwr_exe/foe_edit.png");
  addToolItem(toplevel, tools, "Set view mode", SLOT(activate_view_togg()),
      "$pwr_exe/foe_view.png");
  tools_build = addToolItem(
      toplevel, tools, "Build Program", SLOT(activate_compile()), "system-run");
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoomin()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoomout()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_unzoom()),
      "$pwr_exe/xtt_zoom_reset.png");
  addToolItem(toplevel, tools, "Show Object palette",
      SLOT(activate_palette_object()), "$pwr_exe/foe_objectpalette.png");
  addToolItem(toplevel, tools, "Show Connection palette",
      SLOT(activate_palette_con()), "$pwr_exe/foe_conpalette.png");
  addToolItem(toplevel, tools, "Show Plant Hierarchy",
      SLOT(activate_palette_plant()), "$pwr_exe/xtt_navigator.png");

  // Redraw pushbutton
  tools_redraw = addToolItem(toplevel, tools, "Redraw", SLOT(activate_redraw()),
      "$pwr_exe/foe_redraw.png");

  // Feedback connection checkbutton
  tools_confeedback
      = addCheckableToolItem(toplevel, tools, "Feedback connection",
          SLOT(activate_confeedback(bool)), "$pwr_exe/foe_confeedback.png");

  // Singlelinetext button
  tools_singlelinetext = addToolItem(toplevel, tools, "Single line text",
      SLOT(activate_singlelinetext()), "$pwr_exe/foe_singlelinetext.png");

  // Bodytext button
  tools_bodytext = addToolItem(toplevel, tools, "Multi line text",
      SLOT(activate_bodytext()), "$pwr_exe/foe_bodytext.png");

  // Textheader button
  tools_textheader = addToolItem(toplevel, tools, "Text header",
      SLOT(activate_textheader()), "$pwr_exe/foe_textheader.png");

  // Document button
  tools_document = addToolItem(toplevel, tools, "Document portrait",
      SLOT(activate_document()), "$pwr_exe/foe_document.png");

  // Document_Landscape button
  tools_document_landscape = addToolItem(toplevel, tools, "Document landscape",
      SLOT(activate_document_landscape()),
      "$pwr_exe/foe_document_landscape.png");

  // Statusbar and cmd input
  QStatusBar* statusbar = new QStatusBar();
  statusbar->setFixedHeight(25);
  label = new QLabel("");
  textinput = new QLineEdit();
  QObject::connect(textinput, SIGNAL(returnPressed()), toplevel,
      SLOT(valchanged_textinput()));

  statusbar->addWidget(label);
  add_expanding(statusbar, textinput);

  QHBoxLayout* palbox = new QHBoxLayout();
  node_palctx = new PalQt(this, "Objects", ldhsession, "PlcEditorPalette",
      &node_palette, &sts);
  node_palette_managed = 1;
  node_palctx->select_cb = pal_select_cb;

  con_palctx = new PalQt(this, "Connections", ldhsession, "PlcEditorConPalette",
      &con_palette, &sts);

  navctx = new NavQt(this, "Plant", ldhsession, "NavigatorW1", &nav_palette,
      &sts);

  add_expanding(palbox, node_palette);
  add_expanding(palbox, con_palette);
  add_expanding(palbox, nav_palette);

  subpane = new QSplitter(Qt::Vertical);
  add_expanding(subpane, palbox);

  pane = new QSplitter(Qt::Horizontal);
  gre = new WGreQt(this, "Name");

  subpane->addWidget(((WGreQt*)gre)->create_navigator());

  add_expanding(pane, ((WGreQt*)gre)->form_widget);
  pane->addWidget(subpane);

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);
  vbox->setMenuBar(menu_bar);
  vbox->addWidget(tools);
  add_expanding(vbox, pane);
  vbox->addWidget(statusbar);

  toplevel->setLayout(vbox);
  toplevel->show();

  con_palette->setVisible(false);
  nav_palette->setVisible(false);
  textinput->setVisible(false);
  set_pane_position(pane, -220);
  set_pane_position(subpane, -220);

  gre->init();
  function_setup();

  wow = new CoWowQt(toplevel);

  return FOE__SUCCESS;
}

void WFoeQt::set_mode_button_state(int mode, int state)
{
  switch (mode) {
  case VIEW:
    view_togg->setChecked(state);
    break;
  case EDIT:
    edit_togg->setChecked(state);
    break;
  case TRACE:
    trace_togg->setChecked(state);
    break;
  case SIMULATE:
    simulate_togg->setChecked(state);
    break;
  }
}

// Show the text input widget.
int WFoeQt::get_textinput(const char* msg, int (*function)(WFoe*, char*))
{
  /* Print the text */
  message(msg);

  /* View the input widget */
  textinput->setVisible(true);
  textinput->setFocus();

  /* Insert the function in foe */
  textinput_func = function;

  return FOE__SUCCESS;
}

// Disable or enable the menu entries that are relevant for the trace function.
int WFoeQt::edit_set_entries()
{
  set_title();

  if (!classeditor) {
    save->setEnabled(true);
    exit->setEnabled(true);
    syntax->setEnabled(true);
    compile->setEnabled(true);
    savetrace->setEnabled(true);
    restoretrace->setEnabled(true);
    redraw->setEnabled(true);
    plcattribute->setEnabled(true);
    winddelete->setEnabled(true);
    edit->setEnabled(true);
    cut->setEnabled(true);
    copy->setEnabled(true);
    paste->setEnabled(true);
    undelete->setEnabled(true);
    unselect->setEnabled(true);
    connectA->setEnabled(true);
    del->setEnabled(true);
    changetext->setEnabled(true);
    expand->setEnabled(true);
    compress->setEnabled(true);
    tools_save->setEnabled(true);
    tools_build->setEnabled(true);
    tools_redraw->setEnabled(true);
    tools_confeedback->setEnabled(true);
    tools_singlelinetext->setEnabled(true);
    tools_bodytext->setEnabled(true);
    tools_textheader->setEnabled(true);
    tools_document->setEnabled(true);
    tools_document_landscape->setEnabled(true);
    select_addnextright->setEnabled(true);
    select_addnextleft->setEnabled(true);
    select_addnextup->setEnabled(true);
    select_addnextdown->setEnabled(true);
    select_cp_nextright->setEnabled(true);
    select_cp_nextleft->setEnabled(true);
    select_cp_nextup->setEnabled(true);
    select_cp_nextdown->setEnabled(true);
    move_right->setEnabled(true);
    move_left->setEnabled(true);
    move_up->setEnabled(true);
    move_down->setEnabled(true);
    createnode->setEnabled(true);
    createcon->setEnabled(true);
    lockconpoint->setEnabled(true);
  } else {
    save->setEnabled(true);
    exit->setEnabled(true);
    syntax->setEnabled(false);
    compile->setEnabled(false);
    savetrace->setEnabled(false);
    restoretrace->setEnabled(false);
    redraw->setEnabled(true);
    plcattribute->setEnabled(true);
    winddelete->setEnabled(true);
    edit->setEnabled(true);
    cut->setEnabled(true);
    copy->setEnabled(true);
    paste->setEnabled(true);
    undelete->setEnabled(true);
    unselect->setEnabled(true);
    connectA->setEnabled(true);
    del->setEnabled(true);
    changetext->setEnabled(true);
    expand->setEnabled(true);
    compress->setEnabled(true);
    tools_save->setEnabled(true);
    tools_build->setEnabled(false);
    tools_redraw->setEnabled(true);
    tools_confeedback->setEnabled(true);
    tools_singlelinetext->setEnabled(true);
    tools_bodytext->setEnabled(true);
    tools_textheader->setEnabled(true);
    tools_document->setEnabled(true);
    tools_document_landscape->setEnabled(true);
    select_addnextright->setEnabled(true);
    select_addnextleft->setEnabled(true);
    select_addnextup->setEnabled(true);
    select_addnextdown->setEnabled(true);
    select_cp_nextright->setEnabled(true);
    select_cp_nextleft->setEnabled(true);
    select_cp_nextup->setEnabled(true);
    select_cp_nextdown->setEnabled(true);
    move_right->setEnabled(true);
    move_left->setEnabled(true);
    move_up->setEnabled(true);
    move_down->setEnabled(true);
    createnode->setEnabled(true);
    createcon->setEnabled(true);
    lockconpoint->setEnabled(true);
  }

  return FOE__SUCCESS;
}

// Disable or enable the menu entries that are relevant for the trace function.
int WFoeQt::view_set_entries()
{
  set_title();

  save->setEnabled(false);
  exit->setEnabled(true);
  syntax->setEnabled(false);
  compile->setEnabled(false);
  redraw->setEnabled(false);
  plcattribute->setEnabled(false);
  winddelete->setEnabled(false);
  cut->setEnabled(false);
  paste->setEnabled(false);
  undelete->setEnabled(false);
  unselect->setEnabled(true);
  connectA->setEnabled(false);
  del->setEnabled(false);
  changetext->setEnabled(false);
  expand->setEnabled(false);
  compress->setEnabled(false);
  tools_save->setEnabled(false);
  tools_redraw->setEnabled(false);
  tools_confeedback->setEnabled(false);
  tools_singlelinetext->setEnabled(false);
  tools_bodytext->setEnabled(false);
  tools_textheader->setEnabled(false);
  tools_document->setEnabled(false);
  tools_document_landscape->setEnabled(false);
  tools_build->setEnabled(false);
  select_addnextright->setEnabled(false);
  select_addnextleft->setEnabled(false);
  select_addnextup->setEnabled(false);
  select_addnextdown->setEnabled(false);
  select_cp_nextright->setEnabled(false);
  select_cp_nextleft->setEnabled(false);
  select_cp_nextup->setEnabled(false);
  select_cp_nextdown->setEnabled(false);
  move_right->setEnabled(false);
  move_left->setEnabled(false);
  move_up->setEnabled(false);
  move_down->setEnabled(false);
  createnode->setEnabled(false);
  createcon->setEnabled(false);
  lockconpoint->setEnabled(false);

  return FOE__SUCCESS;
}

int WFoeQt::get_selection(char* str, int len)
{
  return CoWowQt::GetSelection(str, len);
}
