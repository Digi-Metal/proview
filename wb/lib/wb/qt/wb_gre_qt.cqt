/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/* wb_gre_qt.cpp
   This module creates the flow window and handles
   the flow callbacks.  */

#include <string.h>

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include "flow_widget_qt.h"

#include "wb_gre_qt.h"

#include <QTimer>

WGreQt::WGreQt(void* wg_parent_ctx, QWidget* wg_parent_wid, const char* name)
    : WGre(wg_parent_ctx, 0), trace_obj(0)
{
  ctx_init();
  debug_print("creating a scrolledflowwidgetqt\n");
  form_widget = scrolledflowwidgetqt_new(init_flow, this, &flow_widget);
  showNow(flow_widget);
  popupmenu_mode = GRE_POPUPMENUMODE_OBJECT;
}

WGreQt::~WGreQt()
{
  debug_print("WGreQt::~WGreQt\n");
  form_widget->close();
}

int WGreQt::new_navigator(QWidget* parent)
{
  debug_print("creating a flownavwidgetqt\n");
  nav_widget = flownavwidgetqt_new(flow_widget);
  return 1;
}

int WGreQt::new_navigator_popup()
{
  return 1;
}

void WGreQtTraceObject::trace_scan()
{
  if (wgre->trace_started) {
    flow_TraceScan(wgre->flow_ctx);

    trace_timerid = new QTimer(this);
    trace_timerid->setSingleShot(true);
    connect(trace_timerid, SIGNAL(timeout()), this, SLOT(trace_scan()));
    trace_timerid->start(500);
  }
}

void WGreQt::trace_start()
{
  trace_started = 1;
  trace_obj->trace_scan();
}

void WGreQt::trace_stop()
{
  if (trace_started) {
    trace_started = 0;
    delete trace_obj;
  }
}

void WGreQt::get_popup_position(int* x, int* y)
{
  int wind_x, wind_y;

  CoWowQt::PopupPosition(form_widget, *x, *y, &wind_x, &wind_y);
  *x = wind_x;
  *y = wind_y;
}