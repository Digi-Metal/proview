/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/* wb_pal_qt.cpp -- Palette of configurator or plc-editor */

#include "cow_qt_helpers.h"

#include "flow_browwidget_qt.h"

#include "wb_pal_qt.h"

#include <QScrollArea>

#include <qlocalsocket.h>

PalQt::PalQt(void* pal_parent_ctx, QWidget* pal_parent_wid,
    const char* pal_name, ldh_tSesContext pal_ldhses, const char* pal_root_name,
    QWidget** w, pwr_tStatus* status)
    : Pal(pal_parent_ctx, pal_name, pal_ldhses, pal_root_name, status)
{
  trace_obj = new PalQtTraceObject(this);

  debug_print("creating a scrolledbrowwidgetqt\n");
  QScrollArea* scrolledbrow = ((QScrollArea*) scrolledbrowwidgetqt_new(Pal::init_brow_cb, this, &brow_widget));
  brow_widget->setToolTip(fl("PalQt"));

  form_widget = wrapInFrame(scrolledbrow);

  showNow(brow_widget);

  server = new QLocalServer(trace_obj);
  server->listen("STRING");
  QObject::connect(
      server, SIGNAL(newConnection()), trace_obj, SLOT(sel_convert_cb()));

  set_inputfocus(0);

  *w = form_widget;
  *status = 1;
}

PalQt::~PalQt()
{
  debug_print("PalQt::~PalQt\n");
  PalFile::config_tree_free(menu);
  free_pixmaps();
  delete trace_obj;
  form_widget->close();
}

void PalQt::create_popup_menu(pwr_tCid cid, int x, int y)
{
  (create_popup_menu_cb)(parent_ctx, cid, x, y);
}

static void modifyBackground(QWidget* widget, QColor color)
{
  QPalette pal;
  pal.setColor(QPalette::Background, color);
  widget->setAutoFillBackground(true);
  widget->setPalette(pal);
}

void PalQt::set_inputfocus(int focus)
{
  if (!displayed) {
    return;
  }

  if (focus) {
    modifyBackground(form_widget, QColor("Black"));
    brow_widget->setFocus();
  } else {
    modifyBackground(form_widget, QColor("White"));
  }
}

void PalQt::set_selection_owner()
{
  selection_owner = 1;
  brow_SetInverseColor(brow_ctx, flow_eDrawType_Line);
}

void PalQtTraceObject::sel_convert_cb()
{
  char name[200];
  brow_tNode* node_list;
  int node_count;

  if (!pal->selection_owner) {
    return;
  }

  brow_GetSelectedNodes(pal->brow_ctx, &node_list, &node_count);
  if (!node_count) {
    strcpy(name, "");
  } else {
    PalItem* item;
    brow_GetUserData(node_list[0], (void**)&item);

    switch (item->type) {
    case pal_ePalItemType_ClassVolume:
    case pal_ePalItemType_Class:
    case pal_ePalItemType_Object:
    default:
      brow_GetAnnotation(node_list[0], 0, name, sizeof(name));
      free(node_list);
    }
  }

  QByteArray block;
  QDataStream out(&block, QIODevice::WriteOnly);
  out.writeRawData(name, strlen(name));

  QLocalSocket* clientConnection = pal->server->nextPendingConnection();
  clientConnection->write(block);
  clientConnection->flush();
  clientConnection->disconnectFromServer();

  // brow_SelectClear(brow_ctx);
  brow_SetInverseColor(pal->brow_ctx, flow_eDrawType_LineGray);
  pal->selection_owner = 0;
}