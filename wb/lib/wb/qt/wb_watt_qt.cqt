/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/* wb_watt_qt.cpp -- Display object attributes */

#include "cow_qt_helpers.h"
#include "cow_xhelp.h"

#include "wb_watt_msg.h"
#include "wb_watt_qt.h"
#include "wb_wattnav_qt.h"
#include "wb_wnav.h"
#include "wb_wtt.h"

#include <QDialogButtonBox>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

CoWowRecall WAttQt::value_recall;

void WAttQt::message(char severity, const char* message)
{
  msg_label->setText(fl(message));
  if (strcmp(message, "") != 0) {
    msg_label->setVisible(true);
  }
}

void WAttQt::set_prompt(const char* prompt)
{
  if (strcmp(prompt, "") == 0) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setVisible(true);
  }
}

void WAttQt::change_value(int set_focus)
{
  int multiline;
  char* value;
  int input_size;

  if (input_open) {
    cmd_entry->setVisible(false);
    cmd_scrolledinput->setVisible(false);
    set_prompt("");
    input_open = 0;
    return;
  }

  int sts = wattnav->check_attr(
      &multiline, &input_node, input_name, &value, &input_size);
  if (EVEN(sts)) {
    if (sts == WATT__NOATTRSEL) {
      message('E', "No attribute is selected");
    } else {
      message('E', wnav_get_message(sts));
    }
    return;
  }

  if (multiline) {
    cmd_scrolledinput->setVisible(true);

    set_pane_position(pane, -170);
    cmd_scrolled_buffer->setFocus();
    input_max_length = input_size;
    input_multiline = 1;
  } else {
    cmd_entry->setVisible(true);
    cmd_entry->setMaxLength(input_size);
    cmd_entry->setFocus();
    input_multiline = 0;
  }

  message(' ', "");

  if (value) {
    if (multiline) {
      cmd_scrolled_buffer->setText(QString::fromLatin1(value));
    } else {
      cmd_entry->setText(QString::fromLatin1(value));

      // Select the text
      cmd_entry->selectAll();
    }
  } else {
    cmd_entry->setText("");
  }
  set_prompt("value >");
  input_open = 1;
}

void WAttQtWidget::action_text_inserted()
{
  int count = watt->cmd_scrolled_buffer->toPlainText().length();

  if (count > watt->input_max_length) {
    // Remove inserted chars
    QString txt = watt->cmd_scrolled_buffer->toPlainText();
    txt.truncate(watt->input_max_length);
    watt->cmd_scrolled_buffer->setText(txt);

    CoWowQt wow(this);
    wow.DisplayError("Error message", "Attribute size exceeded");
  } else {
    watt->message(' ', "");
  }
}

//
//  Callbackfunctions from menu entries
//
void WAttQtWidget::activate_change_value()
{
  watt->change_value(1);
}

void WAttQtWidget::activate_close_changeval()
{
  watt->change_value_close();
}

void WAttQtWidget::activate_print()
{
  watt->activate_print();
}

void WAttQtWidget::activate_help()
{
  CoXHelp::dhelp("objecteditor_refman", 0, navh_eHelpFile_Other,
      "$pwr_lang/man_dg.dat", true);
}

void WAttQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!watt->focustimer.disabled()) {
    if (watt->cmd_scrolledinput->isVisible()) {
      watt->cmd_scrolled_buffer->setFocus();
    } else if (watt->cmd_entry->isVisible()) {
      watt->cmd_entry->setFocus();
    } else if (watt->wattnav) {
      watt->wattnav->set_inputfocus();
    }

    watt->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void WAttQtWidget::hide_cmd_entry()
{
  watt->wattnav->set_inputfocus();

  if (watt->input_open) {
    watt->cmd_prompt->setVisible(false);
    watt->input_open = 0;
  }
}

void WAttQt::print(const char* title)
{
  pwr_tStatus sts;

  CoWowQt::CreateBrowPrintDialogQt(title, wattnav->brow->ctx,
      flow_eOrientation_Portrait, 1.0, toplevel, &sts);
}

void WAttQt::change_value_close()
{
  if (input_open) {
    if (input_multiline) {
      char* text = qPrintableLatin1(cmd_scrolled_buffer->toPlainText());

      if (text) {
        // Replace ctrl characters with space
        for (unsigned char* s = (unsigned char*)text; *s; s++) {
          if (*s < ' ' && *s != 10 && *s != 13) {
            *s = ' ';
          }
        }

        wattnav->set_attr_value(input_node, input_name, text);
      }
      cmd_scrolledinput->setVisible(false);
      set_prompt("");
      input_open = 0;

      set_pane_position(pane, -50);

      wattnav->redraw();
      wattnav->set_inputfocus();

      if (!text) {
        message('E', "Input error, invalid character");
      }
    } else {
      char* text = qPrintableLatin1(cmd_entry->text());

      if (text) {
        wattnav->set_attr_value(input_node, input_name, text);
      }
      cmd_entry->setVisible(false);
      set_prompt("");
      input_open = 0;
      if (redraw_cb) {
        (redraw_cb)(this);
      }

      wattnav->set_inputfocus();

      if (!text) {
        message('E', "Input error, invalid character");
      }
    }

    if (pending_close) {
      toplevel->close();
    }
  }
}

void WAttQtWidget::activate_cmd_entry()
{
  watt->wattnav->set_inputfocus();

  char* text = qPrintableLatin1(watt->cmd_entry->text());

  if (watt->input_open) {
    if (text) {
      watt->wattnav->set_attr_value(watt->input_node, watt->input_name, text);
    }
    watt->cmd_entry->setVisible(false);
    watt->set_prompt("");
    watt->input_open = 0;
    if (watt->redraw_cb) {
      (watt->redraw_cb)(watt);
    }
  }

  watt->cmd_prompt->setVisible(false);
  watt->cmd_entry->setVisible(false);

  if (!text) {
    watt->message('E', "Input error, invalid character");
  }

  if (watt->pending_close) {
    close();
  }
}

void WAttQtWidget::activate_cmd_scrolled_ok()
{
  if (watt->input_open) {
    char* text = qPrintableLatin1(watt->cmd_scrolled_buffer->toPlainText());

    if (text) {
      // Replace ctrl characters with space
      for (unsigned char* s = (unsigned char*)text; *s; s++) {
        if (*s < ' ' && *s != 10 && *s != 13) {
          *s = ' ';
        }
      }

      watt->wattnav->set_attr_value(watt->input_node, watt->input_name, text);
    }
    watt->cmd_scrolledinput->setVisible(false);
    watt->set_prompt("");
    watt->input_open = 0;

    set_pane_position(watt->pane, -50);

    watt->wattnav->redraw();
    watt->wattnav->set_inputfocus();

    if (!text) {
      watt->message('E', "Input error, invalid character");
    }

    if (watt->pending_close) {
      close();
    }
  }
}

void WAttQtWidget::activate_cmd_scrolled_ca()
{
  if (watt->input_open) {
    watt->cmd_scrolledinput->setVisible(false);

    set_pane_position(watt->pane, -50);

    watt->set_prompt("");
    watt->input_open = 0;
    watt->wattnav->set_inputfocus();
  }
}

int WAttQt::open_changevalue(char* name)
{
  int sts = wattnav->select_by_name(name);
  if (EVEN(sts)) {
    return sts;
  }

  change_value(0);
  return WATT__SUCCESS;
}

void WAttQt::pop()
{
  ::pop(toplevel);
}

void WAttQt::update_title()
{
  CoWowQt::update_title(toplevel, editmode);
}

void WAttQtWidget::closeEvent(QCloseEvent* event)
{
  debug_print("WAttQtWidget::closeEvent\n");
  if (watt->close_cb) {
    (watt->close_cb)(watt);
  } else {
    delete watt;
  }
  QWidget::closeEvent(event);
}

WAttQt::WAttQt(QWidget* wa_parent_wid, void* wa_parent_ctx,
    ldh_tSesContext wa_ldhses, pwr_sAttrRef wa_aref, int wa_editmode,
    int wa_advanced_user, int wa_display_objectname)
    : WAtt(wa_parent_ctx, wa_ldhses, wa_aref, wa_editmode, wa_advanced_user,
          wa_display_objectname)
{
  int sts;
  int size;
  char* namep;

  sts = ldh_AttrRefToName(ldhses, &aref, ldh_eName_Hierarchy, &namep, &size);
  if (EVEN(sts)) {
    return;
  }

  toplevel = new WAttQtWidget(this, wa_parent_wid);
  toplevel->setToolTip(fl("wb_watt widget"));
  toplevel->setFixedSize(410, 570);
  toplevel->setWindowTitle(fl(namep));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "Change &Value",
      SLOT(activate_change_value()), "CTRL+Q");
  addMenuItem(toplevel, functions, "C&lose Change Value",
      SLOT(activate_close_changeval()), "CTRL+T");

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  pane = new QSplitter(Qt::Vertical);

  if (((WUtility*)parent_ctx)->utype == wb_eUtility_WNav) {
    parent_ctx = ((WNav*)parent_ctx)->parent_ctx;
  }
  utility = ((WUtility*)parent_ctx)->utype;

  wattnav = new WAttNavQt(this, wattnav_eType_Object, pane, "Plant", ldhses,
      aref, wa_editmode, wa_advanced_user, wa_display_objectname, utility,
      &brow_widget, &sts);
  wattnav->message_cb = &WAtt::message_cb;
  wattnav->change_value_cb = &WAtt::change_value_cb;

  QStatusBar* statusbar = new QStatusBar();
  msg_label = new QLabel("");
  cmd_prompt = new QLabel("value > ");
  cmd_entry = new CoWowEntryQt(&value_recall);
  cmd_entry->set_hide_on_esc(true);
  QObject::connect(cmd_entry, SIGNAL(returnPressed()), toplevel,
      SLOT(activate_cmd_entry()));
  QObject::connect(cmd_entry, SIGNAL(editingFinished()), toplevel,
      SLOT(hide_cmd_entry()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);
  statusbar->setFixedHeight(25);

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);
  vbox->setMenuBar(menu_bar);

  add_expanding(pane, brow_widget);
  pane->addWidget(statusbar);

  add_expanding(vbox, pane);

  toplevel->setLayout(vbox);

  cmd_scrolled_buffer = new QTextEdit();
  QObject::connect(cmd_scrolled_buffer, SIGNAL(textChanged()), toplevel,
      SLOT(action_text_inserted()));

  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
  buttons->addButton(QDialogButtonBox::Cancel);
  buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      toplevel, SLOT(activate_cmd_scrolled_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
      toplevel, SLOT(activate_cmd_scrolled_ca()));

  QVBoxLayout* cmd_scrolledinput_layout = new QVBoxLayout();
  add_expanding(cmd_scrolledinput_layout, cmd_scrolled_buffer);
  cmd_scrolledinput_layout->addWidget(buttons);
  cmd_scrolledinput = layout_to_widget(cmd_scrolledinput_layout);

  add_expanding(statusbar, cmd_scrolledinput);

  toplevel->show();

  msg_label->setVisible(false);
  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);
  cmd_scrolledinput->setVisible(false);

  set_pane_position(pane, -50);

  if (utility == wb_eUtility_Wtt) {
    ((Wtt*)parent_ctx)->register_utility(this, wb_eUtility_AttributeEditor);
  }

  update_title();
}