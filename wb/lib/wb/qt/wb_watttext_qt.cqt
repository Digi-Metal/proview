/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_watttext_qt.cpp -- Display object attributes */

#include "co_string.h"

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"
#include "cow_xhelp.h"

#include "wb_watttext_qt.h"
#include "wb_wnav.h"
#include "wb_wtt.h"

#include <QApplication>
#include <QClipboard>
#include <QDialogButtonBox>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

void WAttTextQt::message(char severity, const char* message)
{
  msg_label->setText(fl(message));
}

void WAttTextQtWidget::action_text_inserted()
{
  int count = atxt->textbuffer->toPlainText().length();

  if (count > atxt->input_max_length) {
    // Remove inserted chars
    QString txt = atxt->textbuffer->toPlainText();
    txt.truncate(atxt->input_max_length);
    atxt->textbuffer->setText(txt);

    CoWowQt wow(this);
    wow.DisplayError("Error message", "Attribute size exceeded");
  } else {
    atxt->message(' ', "");
    atxt->modified = 1;
  }
}

//
//  Callbackfunctions from menu entries
//
void WAttTextQtWidget::activate_copy()
{
  QApplication::clipboard()->setText(atxt->textbuffer->toPlainText());
}

void WAttTextQtWidget::activate_cut()
{
  QApplication::clipboard()->setText(atxt->textbuffer->toPlainText());
  atxt->textbuffer->setText("");
}

void WAttTextQtWidget::activate_paste()
{
  atxt->textbuffer->setText(QApplication::clipboard()->text());
}

void WAttTextQtWidget::activate_ok()
{
  atxt->set_attr_value();
  atxt->modified = 0;
  close();
}

void WAttTextQtWidget::activate_apply()
{
  atxt->set_attr_value();
  atxt->modified = 0;
}

void WAttTextQtWidget::activate_help()
{
  CoXHelp::dhelp("objecttexteditor_refman", 0, navh_eHelpFile_Other,
      "$pwr_lang/man_dg.dat", true);
}

void WAttTextQtWidget::focusInEvent(QFocusEvent* event)
{
  if (atxt->editmode) {
    atxt->textbuffer->setFocus();
  }

  QWidget::focusInEvent(event);
}

void WAttTextQt::pop()
{
  ::pop(toplevel);
}

void WAttTextQt::set_editmode(int editmode, ldh_tSesContext ldhses)
{
  textbuffer->setReadOnly(!editmode);

  if (ldhses != 0) {
    this->ldhses = ldhses;
  }
  this->editmode = editmode;
}

void WAttTextQt::set_attr_value()
{
  if (editmode) {
    char text[input_max_length];
    strncpy(
        text, qPrintableLatin1(textbuffer->toPlainText()), input_max_length);

    if (!streq(text, "")) {
      // Replace ctrl characters with space
      for (unsigned char* s = (unsigned char*)text; *s; s++) {
        if (*s < ' ' && *s != 10 && *s != 13) {
          *s = ' ';
        }
      }

      int size = input_max_length + 1;
      ldh_SetObjectPar(ldhses, aref.Objid, "DevBody", aname, text, size);
    } else {
      wow->DisplayError("Input error", "Invalid character");
    }
  }
}

void WAttTextQtWidget::closeEvent(QCloseEvent* event)
{
  if (atxt->close_cb) {
    (atxt->close_cb)(atxt);
  } else {
    delete atxt;
  }

  QWidget::closeEvent(event);
}

WAttTextQt::~WAttTextQt()
{
  if (wow) {
    delete wow;
  }
}

WAttTextQt::WAttTextQt(void* wa_parent_ctx, ldh_tSesContext wa_ldhses,
    pwr_sAttrRef wa_aref, int wa_editmode, pwr_tStatus* status)
    : WAttText(wa_parent_ctx, wa_ldhses, wa_aref, wa_editmode, status), init(1)
{
  int sts;
  int size;
  char* namep;

  if (EVEN(*status)) {
    return;
  }

  sts = ldh_AttrRefToName(ldhses, &aref, ldh_eName_Hierarchy, &namep, &size);
  if (EVEN(sts)) {
    *status = sts;
    return;
  }

  toplevel = new WAttTextQtWidget(this);
  toplevel->setMinimumSize(800, 700);
  toplevel->setWindowTitle(fl(namep));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Save", SLOT(activate_apply()), "CTRL+S",
      "document-save");
  addMenuItem(toplevel, file, "S&ave and close", SLOT(activate_ok()), "CTRL+T");
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Edit entry
  QMenu* edit = menu_bar->addMenu(translate_utf8("&Edit"));
  addMenuItem(
      toplevel, edit, "&Copy", SLOT(activate_copy()), "CTRL+C", "edit-copy");
  addMenuItem(
      toplevel, edit, "&Cut", SLOT(activate_cut()), "CTRL+X", "edit-cut");
  addMenuItem(
      toplevel, edit, "&Paste", SLOT(activate_paste()), "CTRL+V", "edit-paste");

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  if (((WUtility*)parent_ctx)->utype == wb_eUtility_WNav) {
    parent_ctx = ((WNav*)parent_ctx)->parent_ctx;
  }
  utility = ((WUtility*)parent_ctx)->utype;

  textbuffer = new QTextEdit();
  QObject::connect(textbuffer, SIGNAL(textChanged()), toplevel,
      SLOT(action_text_inserted()));

  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Apply);
  buttons->addButton(QDialogButtonBox::Cancel);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      toplevel, SLOT(activate_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Apply), SIGNAL(clicked()),
      toplevel, SLOT(activate_apply()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
      toplevel, SLOT(close()));

  msg_label = new QLabel("");
  msg_label->setFixedHeight(25);

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);
  vbox->setMenuBar(menu_bar);
  add_expanding(vbox, textbuffer);
  vbox->addWidget(buttons);
  vbox->addWidget(msg_label);

  toplevel->setLayout(vbox);
  toplevel->show();

  if (utility == wb_eUtility_Wtt) {
    ((Wtt*)parent_ctx)->register_utility(this, wb_eUtility_AttrTextEditor);
  }

  char* value;
  ldh_sAttrRefInfo ainfo;

  sts = ldh_GetAttrRefInfo(ldhses, &aref, &ainfo);
  if (EVEN(sts)) {
    *status = sts;
    return;
  }

  char* s = strchr(namep, '.');
  if (!s) {
    return;
  }

  strncpy(aname, s + 1, sizeof(aname));

  sts = ldh_GetObjectPar(
      ldhses, aref.Objid, "DevBody", aname, (char**)&value, &size);
  if (EVEN(sts)) {
    *status = sts;
    return;
  }

  input_max_length = ainfo.size - 1;

  textbuffer->setText(QString::fromLatin1(value));

  textbuffer->setReadOnly(!editmode);

  wow = new CoWowQt(toplevel);
  init = 0;
}