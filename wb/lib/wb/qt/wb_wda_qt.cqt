/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_wda_qt.cpp -- spreadsheet editor */

#include "co_string.h"

#include "cow_qt_helpers.h"
#include "cow_xhelp.h"

#include "wb_wda_msg.h"
#include "wb_wda_qt.h"
#include "wb_wdanav_qt.h"
#include "wb_wnav.h"
#include "wb_wtt.h"

#include <QDialogButtonBox>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

CoWowRecall WdaQt::value_recall;

void WdaQt::message(char severity, const char* message)
{
  msg_label->setText(fl(message));
  if (!streq(message, "")) {
    msg_label->setVisible(true);
  }
}

void WdaQt::set_prompt(const char* prompt)
{
  if (streq(prompt, "")) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setVisible(true);
  }
}

void WdaQt::print(const char* title)
{
  CoWowQt::CreateBrowPrintDialogQt(
      title, wdanav->brow->ctx, ((WdaNavQt*)wdanav)->brow_widget);
}

void WdaQt::change_value(int set_focus)
{
  int multiline;
  char* value;
  int input_size;

  if (input_open) {
    cmd_entry->setVisible(false);
    cmd_scrolledinput->setVisible(false);
    set_prompt("");
    input_open = 0;
    return;
  }

  int sts = wdanav->check_attr(
      &multiline, &input_node, input_name, &value, &input_size);
  if (EVEN(sts)) {
    if (sts == WDA__NOATTRSEL) {
      message('E', "No attribute is selected");
    } else {
      message('E', wnav_get_message(sts));
    }
    return;
  }

  if (multiline) {
    cmd_scrolledinput->setVisible(true);

    set_pane_position(pane, -170);
    cmd_scrolled_buffer->setFocus();
    input_multiline = 1;
  } else {
    cmd_entry->setVisible(true);
    cmd_entry->setMaxLength(input_size);
    cmd_entry->setFocus();
    input_multiline = 0;
  }

  message(' ', "");

  if (value) {
    if (multiline) {
      cmd_scrolled_buffer->setText(QString::fromLatin1(value));
    } else {
      cmd_entry->setText(QString::fromLatin1(value));

      // Select the text
      cmd_entry->selectAll();
    }
  } else {
    cmd_entry->setText("");
  }
  set_prompt("value >");
  input_open = 1;
}

//
//  Callbackfunctions from menu entries
//
void WdaQtWidget::activate_change_value()
{
  wda->change_value(1);
}

void WdaQtWidget::activate_close_changeval()
{
  wda->change_value_close();
}

void WdaQtWidget::activate_print()
{
  wda->activate_print();
}

void WdaQtWidget::activate_export_text()
{
  wda->print_textfile();
}

void WdaQtWidget::activate_import_text()
{
  wda->import_textfile();
}

void WdaQtWidget::activate_setclass()
{
  wda->Wda::open_class_dialog();
}

void WdaQtWidget::activate_setattr()
{
  wda->open_attr_dialog();
}

void WdaQtWidget::activate_nextattr()
{
  int sts = wda->next_attr();
  if (EVEN(sts)) {
    wda->wow->DisplayError("Spreadsheet error", wnav_get_message(sts));
  }
}

void WdaQtWidget::activate_prevattr()
{
  int sts = wda->prev_attr();
  if (EVEN(sts)) {
    wda->wow->DisplayError("Spreadsheet error", wnav_get_message(sts));
  }
}

void WdaQtWidget::activate_help()
{
  CoXHelp::dhelp("spreadsheeteditor_refman", 0, navh_eHelpFile_Other,
      "$pwr_lang/man_dg.dat", true);
}

void WdaQtWidget::class_activate_ok(
    char* hiername, char* searchname, char* classname, bool attrobjects)
{
  wda->attrobjects = attrobjects;

  if (streq(hiername, "")) {
    wda->objid = pwr_cNObjid;
  } else {
    int sts = ldh_NameToObjid(wda->ldhses, &wda->objid, hiername);
    if (EVEN(sts)) {
      CoWowQt ww(this);
      ww.DisplayError("Hierarchy object error", wnav_get_message(sts));
      return;
    }
  }
  strncpy(wda->search_name, searchname, sizeof(wda->search_name));

  pwr_tClassId new_classid;
  int sts = ldh_ClassNameToId(wda->ldhses, &new_classid, classname);
  if (EVEN(sts)) {
    CoWowQt ww(this);
    ww.DisplayError("Class error", wnav_get_message(sts));
    return;
  }

  if (wda->classid != new_classid) {
    // Enter attribute
    wda->classid = new_classid;
    wda->open_attr_dialog();
  } else {
    // Find new attributes
    int sts = ((WdaNav*)wda->wdanav)
                  ->update(wda->objid, wda->classid, wda->attribute,
                      wda->attrobjects, wda->search_name);
    if (EVEN(sts)) {
      CoWowQt ww(this);
      ww.DisplayError("Spreadsheet error", wnav_get_message(sts));
    }
  }
}

void WdaQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!wda->focustimer.disabled()) {
    if (wda->cmd_scrolledinput->isVisible()) {
      wda->cmd_scrolled_buffer->setFocus();
    } else if (wda->cmd_entry->isVisible()) {
      wda->cmd_entry->setFocus();
    } else if (wda->wdanav) {
      wda->wdanav->set_inputfocus();
    }

    wda->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void WdaQt::change_value_close()
{
  if (input_open) {
    if (input_multiline) {
      char* text = qPrintableLatin1(cmd_scrolled_buffer->toPlainText());

      // Replace ctrl characters with space
      for (unsigned char* s = (unsigned char*)text; *s; s++) {
        if (*s < ' ' && *s != 10 && *s != 13) {
          *s = ' ';
        }
      }

      wdanav->set_attr_value(input_node, input_name, text);
      cmd_scrolledinput->setVisible(false);
      set_prompt("");
      input_open = 0;

      set_pane_position(pane, -50);

      wdanav->redraw();
      wdanav->set_inputfocus();

      if (!text) {
        message('E', "Input error, invalid character");
      }
    } else {
      char* text = qPrintableLatin1(cmd_entry->text());

      if (text) {
        wdanav->set_attr_value(input_node, input_name, text);
      }
      cmd_entry->setVisible(false);
      set_prompt("");
      input_open = 0;
      if (redraw_cb) {
        (redraw_cb)(this);
      }

      wdanav->set_inputfocus();

      if (!text) {
        message('E', "Input error, invalid character");
      }
    }
  }
}

void WdaQtWidget::activate_cmd_entry()
{
  wda->cmd_prompt->setVisible(false);
  wda->cmd_entry->setVisible(false);

  wda->wdanav->set_inputfocus();

  char* text = qPrintableLatin1(wda->cmd_entry->text());

  if (wda->input_open) {
    if (text) {
      wda->wdanav->set_attr_value(wda->input_node, wda->input_name, text);
    }
    wda->cmd_entry->setVisible(false);
    wda->set_prompt("");
    wda->input_open = 0;
    if (wda->redraw_cb) {
      (wda->redraw_cb)(wda);
    }

    if (!text) {
      wda->message('E', "Input error, invalid character");
    }
  }
}

void WdaQtWidget::activate_cmd_scrolled_ok()
{
  if (wda->input_open) {
    char* text = qPrintableLatin1(wda->cmd_scrolled_buffer->toPlainText());

    if (text) {
      // Replace ctrl characters with space
      for (unsigned char* s = (unsigned char*)text; *s; s++) {
        if (*s < ' ' && *s != 10 && *s != 13) {
          *s = ' ';
        }
      }

      wda->wdanav->set_attr_value(wda->input_node, wda->input_name, text);
    }
    wda->cmd_scrolledinput->setVisible(false);
    wda->set_prompt("");
    wda->input_open = 0;

    set_pane_position(wda->pane, -50);

    wda->wdanav->redraw();
    wda->wdanav->set_inputfocus();
    if (!text) {
      wda->message('E', "Input error, invalid character");
    }
  }
}

void WdaQtWidget::activate_cmd_scrolled_ca()
{
  if (wda->input_open) {
    wda->cmd_scrolledinput->setVisible(false);

    set_pane_position(wda->pane, -50);

    wda->set_prompt("");
    wda->input_open = 0;
    wda->wdanav->set_inputfocus();
  }
}

void WdaQt::pop()
{
  ::pop(toplevel);
}

void WdaQt::open_class_dialog(char* hierstr, char* classstr, char* namestr)
{
  // Create an input dialog
  QDialog wdaclass_dia(toplevel);
  wdaclass_dia.setMinimumSize(500, 150);
  wdaclass_dia.setWindowTitle(fl("Select Class"));
  // Do not set the "DeleteOnClose" attribute,
  // we need to access the dialog fields after exec()

  QLineEdit* wdaclass_classvalue = new QLineEdit(fl(classstr));
  QLabel* class_label = new QLabel("Class");
  class_label->setFixedWidth(95);
  QLineEdit* wdaclass_hiervalue = new QLineEdit(fl(hierstr));
  QLabel* hier_label = new QLabel("Hierarchy");
  hier_label->setFixedWidth(95);
  QLineEdit* wdaclass_namevalue = new QLineEdit(fl(namestr));
  QLabel* name_label = new QLabel("Name");
  name_label->setFixedWidth(95);
  QCheckBox* wdaclass_attrobjects = new QCheckBox("Attribute Objects");
  wdaclass_attrobjects->setChecked(attrobjects);

  QHBoxLayout* india_hboxclass = new QHBoxLayout();
  india_hboxclass->addWidget(class_label);
  add_expanding(india_hboxclass, wdaclass_classvalue);

  QHBoxLayout* india_hboxhier = new QHBoxLayout();
  india_hboxhier->addWidget(hier_label);
  add_expanding(india_hboxhier, wdaclass_hiervalue);

  QHBoxLayout* india_hboxname = new QHBoxLayout();
  india_hboxname->addWidget(name_label);
  add_expanding(india_hboxname, wdaclass_namevalue);

  QHBoxLayout* india_hboxattrobj = new QHBoxLayout();
  india_hboxattrobj->addWidget(wdaclass_attrobjects);

  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Cancel);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      &wdaclass_dia, SLOT(accept()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
      &wdaclass_dia, SLOT(reject()));

  QVBoxLayout* india_vbox = new QVBoxLayout(&wdaclass_dia);
  india_vbox->addLayout(india_hboxclass);
  india_vbox->addLayout(india_hboxhier);
  india_vbox->addLayout(india_hboxname);
  add_expanding(india_vbox, india_hboxattrobj);
  india_vbox->addWidget(separator(QFrame::HLine));
  india_vbox->addWidget(buttons);
  wdaclass_dia.setLayout(india_vbox);

  int res = wdaclass_dia.exec();
  if (res == QDialog::Accepted) {
    char* hiername = qPrintableLatin1(wdaclass_hiervalue->text());
    char* searchname = qPrintableLatin1(wdaclass_namevalue->text());
    char* classname = qPrintableLatin1(wdaclass_classvalue->text());
    bool attrobjects = wdaclass_attrobjects->isChecked();

    toplevel->class_activate_ok(hiername, searchname, classname, attrobjects);
  }
}

void WdaQt::update_title()
{
  CoWowQt::update_title(toplevel, editmode);
}

WdaQt::~WdaQt()
{
  if (wow)
    delete wow;
  delete cmd_entry;
  delete (WdaNav*)wdanav;
}

void WdaQtWidget::closeEvent(QCloseEvent* event)
{
  if (wda->close_cb) {
    (wda->close_cb)(wda);
  } else {
    delete wda;
  }
  QWidget::closeEvent(event);
}

WdaQt::WdaQt(QWidget* wa_parent_wid, void* wa_parent_ctx,
    ldh_tSesContext wa_ldhses, pwr_tObjid wa_objid, pwr_tClassId wa_classid,
    const char* wa_attribute, int wa_editmode, int wa_advanced_user,
    int wa_display_objectname)
    : Wda(wa_parent_ctx, wa_ldhses, wa_objid, wa_classid, wa_attribute,
          wa_editmode, wa_advanced_user, wa_display_objectname)
{
  int sts;

  toplevel = new WdaQtWidget(this, wa_parent_wid);
  toplevel->setMinimumSize(700, 700);
  toplevel->setWindowTitle(fl("Spreadsheet Editor"));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(
      toplevel, file, "&Select Class", SLOT(activate_setclass()), "CTRL+C");
  addMenuItem(
      toplevel, file, "Select &Attribute", SLOT(activate_setattr()), "CTRL+A");
  addMenuItem(
      toplevel, file, "Next Attribute", SLOT(activate_nextattr()), "CTRL+N");
  addMenuItem(toplevel, file, "Previous Attribute", SLOT(activate_prevattr()),
      "CTRL+P");
  addMenuItem(
      toplevel, file, "Export to Textfile", SLOT(activate_export_text()));
  addMenuItem(
      toplevel, file, "Import from Textfile", SLOT(activate_import_text()));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "Change &Value",
      SLOT(activate_change_value()), "CTRL+Q");
  addMenuItem(toplevel, functions, "C&lose Change Value",
      SLOT(activate_close_changeval()), "CTRL+T");

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  pane = new QSplitter(Qt::Vertical);

  utility = ((WUtility*)parent_ctx)->utype;
  wdanav = new WdaNavQt(this, pane, "Plant", ldhses, objid, classid, attribute,
      wa_editmode, wa_advanced_user, wa_display_objectname, utility,
      &brow_widget, &sts);
  wdanav->message_cb = &Wda::message_cb;
  wdanav->change_value_cb = &Wda::change_value_cb;

  QStatusBar* statusbar = new QStatusBar();
  msg_label = new QLabel("");
  cmd_prompt = new QLabel("value > ");
  cmd_entry = new CoWowEntryQt(&value_recall);
  QObject::connect(
      cmd_entry, SIGNAL(returnPressed()), toplevel, SLOT(activate_cmd_entry()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);
  statusbar->setFixedHeight(25);

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);
  vbox->setMenuBar(menu_bar);

  add_expanding(pane, brow_widget);
  pane->addWidget(statusbar);

  add_expanding(vbox, pane);

  toplevel->setLayout(vbox);

  cmd_scrolled_buffer = new QTextEdit();

  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Cancel);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      toplevel, SLOT(activate_cmd_scrolled_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
      toplevel, SLOT(activate_cmd_scrolled_ca()));

  QVBoxLayout* cmd_scrolledinput_layout = new QVBoxLayout();
  add_expanding(cmd_scrolledinput_layout, cmd_scrolled_buffer);
  cmd_scrolledinput_layout->addWidget(buttons);
  cmd_scrolledinput = layout_to_widget(cmd_scrolledinput_layout);

  add_expanding(statusbar, cmd_scrolledinput);

  toplevel->show();

  msg_label->setVisible(false);
  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);
  cmd_scrolledinput->setVisible(false);

  set_pane_position(pane, -50);

  wow = new CoWowQt(toplevel);

  update_title();

  if (utility == wb_eUtility_Wtt) {
    ((Wtt*)parent_ctx)->register_utility(this, wb_eUtility_SpreadsheetEditor);
  }
  Wda::open_class_dialog();
}