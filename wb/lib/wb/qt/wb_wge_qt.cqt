/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "co_string.h"

#include "cow_qt_helpers.h"

#include "ge_graph_qt.h"

#include "wb_wge_qt.h"

#include <QApplication>
#include <QMenuBar>
#include <QMessageBox>
#include <QVBoxLayout>

void WGeQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!ge->focustimer.disabled()) {
    if (ge->graph) {
      ge->graph->set_inputfocus(1);
    }

    ge->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void WGeQt::change_value_cb(void* ge_ctx, void* value_object, char* text)
{
  WGeQt* ge = (WGeQt*)ge_ctx;

  if (ge->value_input_open) {
    ge->value_dialog->setVisible(false);
    ge->value_input_open = 0;
    return;
  }

  ge->value_dialog->setVisible(true);

  message(ge, ' ', "");
  ge->value_input->setFocus();

  ge->value_input->setText(fl(text));
  ge->value_input->selectAll();

  ge->value_input_open = 1;
  ge->current_value_object = value_object;
}

void WGeQt::confirm_cb(void* ge_ctx, void* confirm_object, char* text)
{
  WGeQt* ge = (WGeQt*)ge_ctx;

  if (ge->confirm_open) {
    ge->confirm_open = 0;
    return;
  }

  message(ge, ' ', "");

  ge->confirm_open = 1;
  ge->current_confirm_object = confirm_object;
  QMessageBox::StandardButton reply = QMessageBox::question(ge->toplevel,
      fl("Confirm"), fl(text), QMessageBox::Yes | QMessageBox::No);
  if (reply == QMessageBox::Yes) {
    ge->graph->confirm_ok(ge->current_confirm_object);
  }
  ge->confirm_open = 0;
}

void WGeQt::message_dialog_cb(void* ge_ctx, const char* text)
{
  WGeQt* ge = (WGeQt*)ge_ctx;

  ge->message_dia_widget->setVisible(true);

  ge->message_dia_label->setText(fl(text));
}

void WGeQtWidget::activate_zoom_in()
{
  ge->graph->zoom(1.2);
}

void WGeQtWidget::activate_zoom_out()
{
  ge->graph->zoom(5.0 / 6);
}

void WGeQtWidget::activate_zoom_reset()
{
  ge->graph->unzoom();
}

void WGeQtWidget::activate_help()
{
  if (ge->help_cb) {
    char key[80];
    str_ToLower(key, ge->name);
    (ge->help_cb)(ge, key);
  }
}

void WGeQtWidget::action_resize(QResizeEvent* event)
{
  if (ge->graph && !ge->scrollbar && !ge->navigator && ge->graph->grow) {
    ge->graph->set_default_layout();
  }
}

WGeQt::~WGeQt()
{
  if (nav_widget) {
    nav_widget->close();
  }
}

void WGeQt::set_size(int width, int height)
{
  toplevel->resize(width + 20, height + 20);
}

void WGeQt::set_subwindow_release()
{
  subwindow_release = 1;
  QApplication::exit();
}

void WGeQt::pop()
{
  ::pop(toplevel);
}

void WGeQtWidget::closeEvent(QCloseEvent* event)
{
  if (ge->modal) {
    ge->terminated = 1;
    QApplication::exit();
  } else {
    delete ge;
  }
  QWidget::closeEvent(event);
}

WGeQt::WGeQt(void* wge_parent_ctx, char* wge_name, char* wge_filename,
    int wge_scrollbar, int wge_menu, int wge_navigator, int wge_width,
    int wge_height, int x, int y, char* object_name, int wge_modal = 0)
    : WGe(wge_parent_ctx, wge_name, wge_filename, wge_scrollbar, wge_menu,
          wge_navigator, wge_width, wge_height, x, y, object_name, wge_modal),
      value_dialog(0)
{
  int window_width = 600;
  int window_height = 500;
  pwr_tStatus sts;
  char title[300];

  if (wge_width != 0 && wge_height != 0) {
    window_width = wge_width;
    window_height = wge_height;
  }
  str_StrncpyCutOff(title, name, sizeof(title), 1);

  // Qt
  toplevel = new WGeQtWidget(this);
  toplevel->setMinimumSize(window_width, window_height);
  toplevel->setWindowTitle(fl(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  if (!(x == 0 && y == 0)) {
    // Set position...
  }

  QVBoxLayout* graph_form = new QVBoxLayout();
  graph = new GraphQt(this, "Plant", &grow_widget, &sts, "pwrp_exe:",
      graph_eMode_Runtime, scrollbar, 1, object_name, 0, 0);
  graph->message_cb = &message;
  graph->close_cb = &graph_close_cb;
  graph->init_cb = &graph_init_cb;
  graph->change_value_cb = &change_value_cb;
  graph->confirm_cb = &confirm_cb;
  graph->message_dialog_cb = &message_dialog_cb;
  graph->command_cb = &wge_command_cb;
  graph->is_authorized_cb = &wge_is_authorized_cb;

  QObject::connect(((GraphQt*)graph)->grow_widget,
      SIGNAL(resize_signal(QResizeEvent*)), toplevel,
      SLOT(action_resize(QResizeEvent*)));

  if (wge_menu) {
    QMenuBar* menu_bar = new QMenuBar();

    // File Entry
    QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
    addMenuItem(
        toplevel, file, "&Close", SLOT(close()), "CTRL+W", "$pwr_exe/xtt_close.png");

    // View menu
    QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
    addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
        "$pwr_exe/xtt_zoom_in.png");
    addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()),
        "CTRL+O", "$pwr_exe/xtt_zoom_out.png");
    addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
        "$pwr_exe/xtt_zoom_reset.png");

    // Menu Help
    QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
    addMenuItem(toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H",
        "$pwr_exe/xtt_help.png");

    graph_form->setMenuBar(menu_bar);
  }

  add_expanding(graph_form, grow_widget);

  toplevel->setLayout(graph_form);
  toplevel->show();

  if (navigator) {
    // Create navigator popup
    nav_widget = ((GraphQt*)graph)->create_navigator();
    nav_widget->setFixedSize(200, 200);
    nav_widget->setWindowTitle(fl("Navigator"));
    nav_widget->setAttribute(Qt::WA_DeleteOnClose);

    nav_widget->show();

    graph->set_nav_background_color();
  }
}