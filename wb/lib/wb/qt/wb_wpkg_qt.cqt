/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_wpkg_qt.cpp -- package window */

#include "cow_logw_qt.h"
#include "cow_qt_helpers.h"
#include "cow_xhelp.h"

#include "wb_log.h"
#include "wb_wpkg_qt.h"
#include "wb_wpkgnav_qt.h"
#include "wb_wtt.h"

#include <QMenuBar>
#include <QVBoxLayout>

void WPkgQt::message(char severity, const char* message)
{
  msg_label->setText(fl(message));

  // Change the label now !!
  toplevel->update();
}

//
//  Callbackfunctions from menu entries
//
void WPkgQtWidget::activate_distribute()
{
  pkg->activate_distribute();
}

void WPkgQtWidget::activate_createpkg()
{
  pkg->activate_createpkg();
}

void WPkgQtWidget::activate_zoom_in()
{
  pkg->activate_zoom_in();
}

void WPkgQtWidget::activate_zoom_out()
{
  pkg->activate_zoom_out();
}

void WPkgQtWidget::activate_zoom_reset()
{
  pkg->activate_zoom_reset();
}

void WPkgQtWidget::activate_deletepkg()
{
  pkg->activate_deletepkg();
}

void WPkgQtWidget::activate_dmode_filediff(bool set)
{
  pkg->activate_dmode_filediff(set);
}

void WPkgQtWidget::activate_dmode_filetime(bool set)
{
  pkg->activate_dmode_filetime(set);
}

void WPkgQtWidget::activate_dmode_filepath(bool set)
{
  pkg->activate_dmode_filepath(set);
}

void WPkgQtWidget::activate_help()
{
  CoXHelp::dhelp("package window", 0, navh_eHelpFile_Base, 0, true);
}

void WPkgQtWidget::activate_history()
{
  pwr_tStatus sts;
  char categories[3][20];
  char title[80];

  wb_log::category_to_string(wlog_eCategory_CreatePackage, categories[0]);
  wb_log::category_to_string(wlog_eCategory_CopyPackage, categories[1]);
  strcpy(categories[2], "");

  strcpy(title, "Distributor History");
  CoLogWQt* logw = new CoLogWQt(pkg, title, 1, &sts);
  logw->CoLogW::show(categories, 0);
}

void WPkgQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!pkg->focustimer.disabled()) {
    ((WPkgNav*)pkg->wpkgnav)->set_inputfocus();

    pkg->focustimer.disable(400);
  }
  QWidget::focusInEvent(event);
}

void WPkgQt::pop()
{
  ::pop(toplevel);
}

void WPkgQt::flush()
{
  toplevel->update();
}

void WPkgQt::set_clock_cursor()
{
  toplevel->window()->setCursor(Qt::WaitCursor);
}

void WPkgQt::reset_cursor()
{
  toplevel->window()->unsetCursor();
}

WPkgQt::~WPkgQt()
{
  delete wow;
  delete wpkgnav;
}

void WPkgQtWidget::closeEvent(QCloseEvent* event)
{
  if (pkg->close_cb) {
    (pkg->close_cb)(pkg->parent_ctx);
  } else {
    delete pkg;
  }
  QWidget::closeEvent(event);
}

WPkgQt::WPkgQt(void* wa_parent_ctx) : WPkg(wa_parent_ctx)
{
  int sts;

  toplevel = new WPkgQtWidget(this);
  toplevel->setMinimumSize(600, 600);
  toplevel->setWindowTitle(fl("Distributor"));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QMenuBar* menu_bar = new QMenuBar();

  // File Entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&History", SLOT(activate_history()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "$pwr_exe/xtt_close.png");

  // Functions Entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("F&unctions"));
  addMenuItem(toplevel, functions, "&Distribute", SLOT(activate_distribute()),
      "CTRL+D");
  addMenuItem(
      toplevel, functions, "&Create Package", SLOT(activate_createpkg()));
  addMenuItem(
      toplevel, functions, "D&elete Package", SLOT(activate_deletepkg()));

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "$pwr_exe/xtt_zoom_in.png");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "$pwr_exe/xtt_zoom_out.png");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "$pwr_exe/xtt_zoom_reset.png");
  addCheckableMenuItem(toplevel, view, "&Display File Differences",
      SLOT(activate_dmode_filediff(bool)));
  addCheckableMenuItem(toplevel, view, "Display Files In &Time Order",
      SLOT(activate_dmode_filetime(bool)));
  addCheckableMenuItem(toplevel, view, "Display File &Path",
      SLOT(activate_dmode_filepath(bool)));

  // Menu Help
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Distribute", SLOT(activate_distribute()),
      "$pwr_exe/wpkg_distribute.png");
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);

  utility = ((WUtility*)parent_ctx)->utype;
  wpkgnav = new WPkgNavQt(this, "Packages", utility, &brow_widget, &sts);
  ((WPkgNav*)wpkgnav)->message_cb = message_cb;
  ((WPkgNav*)wpkgnav)->set_clock_cursor_cb = set_clock_cursor_cb;
  ((WPkgNav*)wpkgnav)->reset_cursor_cb = reset_cursor_cb;

  QStatusBar* statusbar = new QStatusBar();
  msg_label = new QLabel("");

  statusbar->addWidget(msg_label);

  vbox->setMenuBar(menu_bar);
  vbox->addWidget(tools);
  add_expanding(vbox, brow_widget);
  vbox->addWidget(statusbar);

  toplevel->setLayout(vbox);
  toplevel->show();

  wow = new CoWowQt(toplevel);

  if (utility == wb_eUtility_Wtt) {
    ((Wtt*)parent_ctx)->register_utility(this, wb_eUtility_Distributor);
  }
}