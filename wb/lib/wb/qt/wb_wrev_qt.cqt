/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_wrev_qt.cpp -- package window */

#include "cow_logw_qt.h"
#include "cow_qt_helpers.h"
#include "cow_xhelp.h"

#include "wb_wrev_qt.h"
#include "wb_wrevnav_qt.h"

#include <QDialogButtonBox>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

void WRevQt::message(char severity, const char* message)
{
  msg_label->setText(fl(message));

  // Change the label now !!
  toplevel->update();
}

//
//  Callbackfunctions from menu entries
//
void WRevQtWidget::activate_history()
{
  pwr_tStatus sts;
  char categories[3][20];

  wb_log::category_to_string(wlog_eCategory_NewRevision, categories[0]);
  wb_log::category_to_string(wlog_eCategory_RevisionRestore, categories[1]);
  strcpy(categories[2], "");

  CoLogWQt* logw
      = new CoLogWQt(rev, parentWidget(), "Revision History", 1, &sts);
  logw->CoLogW::show(categories, 0);
}

void WRevQtWidget::activate_store()
{
  rev->activate_store();
}

void WRevQtWidget::activate_restore()
{
  rev->activate_restore();
}

void WRevQtWidget::activate_delete()
{
  rev->activate_delete();
}

void WRevQtWidget::activate_build()
{
  rev->activate_build();
}

void WRevQtWidget::activate_zoom_in()
{
  rev->activate_zoom_in();
}

void WRevQtWidget::activate_zoom_out()
{
  rev->activate_zoom_out();
}

void WRevQtWidget::activate_zoom_reset()
{
  rev->activate_zoom_reset();
}

void WRevQtWidget::activate_help()
{
  CoXHelp::dhelp(
      "revisions", 0, navh_eHelpFile_Other, "$pwr_lang/man_dg.dat", true);
}

void WRevQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!rev->focustimer.disabled()) {
    ((WRevNav*)rev->wrevnav)->set_inputfocus();

    rev->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void WRevQt::pop()
{
  ::pop(toplevel);
}

void WRevQt::flush()
{
  toplevel->update();
}

void WRevQt::set_clock_cursor()
{
  toplevel->window()->setCursor(Qt::WaitCursor);
}

void WRevQt::reset_cursor()
{
  toplevel->window()->unsetCursor();
}

void WRevQtWidget::closeEvent(QCloseEvent* event)
{
  if (rev->close_cb) {
    (rev->close_cb)(rev->parent_ctx);
  } else {
    delete rev;
  }
  QWidget::closeEvent(event);
}

WRevQt::~WRevQt()
{
  delete wow;
  delete wrevnav;
}

WRevQt::WRevQt(
    QWidget* wa_parent_wid, void* wa_parent_ctx, ldh_tSession wa_ldhses)
    : WRev(wa_parent_ctx, wa_ldhses), india_widget(0)
{
  int sts;

  toplevel = new WRevQtWidget(this, wa_parent_wid);
  toplevel->setMinimumSize(700, 300);
  toplevel->setWindowTitle(fl("Revisions"));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File Entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&History", SLOT(activate_history()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions Entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("F&unctions"));
  addMenuItem(toplevel, functions, "&New Revision", SLOT(activate_store()));
  addMenuItem(
      toplevel, functions, "&Restore Revision", SLOT(activate_restore()));
  addMenuItem(toplevel, functions, "&Delete Revision", SLOT(activate_delete()));
  addMenuItem(toplevel, functions, "&Build All", SLOT(activate_build()));

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "zoom-original");

  // Menu Help
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);

  utility = ((WUtility*)parent_ctx)->utype;
  wrevnav = new WRevNavQt(
      this, toplevel, ldhses, "Packages", utility, &brow_widget, &sts);
  ((WRevNav*)wrevnav)->message_cb = message_cb;
  ((WRevNav*)wrevnav)->set_clock_cursor_cb = set_clock_cursor_cb;
  ((WRevNav*)wrevnav)->reset_cursor_cb = reset_cursor_cb;
  ((WRevNav*)wrevnav)->command_cb = rev_command_cb;

  QStatusBar* statusbar = new QStatusBar();
  msg_label = new QLabel("");

  statusbar->addWidget(msg_label);

  vbox->setMenuBar(menu_bar);
  vbox->addWidget(tools);
  add_expanding(vbox, brow_widget);
  vbox->addWidget(statusbar);

  toplevel->setLayout(vbox);
  toplevel->show();

  wow = new CoWowQt(toplevel);
}

void WRevInputDialog::closeEvent(QCloseEvent* event)
{
  QWidget::closeEvent(event);
  rev->dialog_count--;
  rev->india_widget = 0;
}

void WRevInputDialog::activate_ok()
{
  rev->dialog_count--;
  rev->india_widget = 0;

  (rev->india_ok_cb)(rev, qPrintableLatin1(india_text1->text()), qPrintableLatin1(india_text2->text()));
  close();
}

void WRevInputDialog::activate_cancel()
{
  close();
  rev->dialog_count--;
  rev->india_widget = 0;
}

void WRevQt::open_input_dialog(const char* text1, const char* text2,
    const char* title, const char* init_text1, const char* init_text2,
    void (*ok_cb)(WRev*, char*, char*))
{
  india_widget = new WRevInputDialog(
      this, toplevel, text1, text2, init_text1, init_text2);

  india_ok_cb = ok_cb;
  dialog_count++;
}

WRevInputDialog::WRevInputDialog(WRevQt* parent_ctx, QWidget* parent,
    const char* text1, const char* text2, const char* init_text1,
    const char* init_text2)
    : QDialog(parent), rev(parent_ctx)
{
  setMinimumWidth(350);
  setWindowTitle(fl("New Revision"));
  setAttribute(Qt::WA_DeleteOnClose);

  india_text1 = new QLineEdit(fl(init_text1));
  india_text2 = new QLineEdit(fl(init_text2));
  QLabel* india_label1 = new QLabel(fl(text1));
  QLabel* india_label2 = new QLabel(fl(text2));

  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Cancel);
  connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()), this,
      SLOT(activate_ok()));
  connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()), this,
      SLOT(activate_cancel()));

  QHBoxLayout* hboxtext1 = new QHBoxLayout();
  hboxtext1->addWidget(india_label1);
  hboxtext1->addWidget(india_text1);

  QHBoxLayout* hboxtext2 = new QHBoxLayout();
  hboxtext2->addWidget(india_label2);
  hboxtext2->addWidget(india_text2);

  QVBoxLayout* vbox = new QVBoxLayout();
  vbox->addLayout(hboxtext1);
  vbox->addLayout(hboxtext2);
  vbox->addWidget(separator(QFrame::HLine));
  vbox->addWidget(buttons);
  setLayout(vbox);

  show();

  setModal(true);
}