/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/* wb_wtt_qt.cpp -- Display plant and node hiererachy */

#include "flow_std.h"

#include <stdio.h>
#include <stdlib.h>

#include "pwr_privilege.h"
#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
#include "pwr_baseclasses.h"
#include "wb_ldh.h"
#include "cow_wow.h"
#include "cow_login.h"
#include "wb_utl_api.h"
#include "wb_lfu.h"
#include "pwr_names.h"
#include "wb_foe_msg.h"
#include "wb_pwrb_msg.h"
#include "wb_log.h"

#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "cow_wow_qt.h"
#include "wb_wtt.h"
#include "wb_wnav_qt.h"
#include "wb_wnav_item.h"
#include "wb_pal_qt.h"
#include "wb_watt_qt.h"
#include "wb_wda_qt.h"
#include "wb_uted_qt.h"
#include "wb_wtt_qt.h"
#include "wb_wnav_msg.h"
#include "wb_volume.h"
#include "wb_env.h"
#include "wb_wpkg_qt.h"
#include "cow_rtmon_qt.h"
#include "cow_statusmon_nodelist_qt.h"
#include "cow_msgwindow.h"
#include "cow_logw_qt.h"
#include "wb_wnav_selformat.h"
#include "wb_pwrs.h"
#include "wb_build.h"
#include "wb_wcast_qt.h"
#include "wb_revision.h"
#include "ge_qt.h"

#include <QDialogButtonBox>
#include <QInputDialog>
#include <QMenu>
#include <QMenuBar>
#include <QScrollArea>
#include <QTimer>
#include <QVBoxLayout>

#define WTT_PALETTE_WIDTH 160
#define MENU_BAR      1
#define MENU_PULLDOWN 2
#define MENU_POPUP    3
#define MENU_OPTION   4

CoWowRecall WttQt::cmd_recall;
CoWowRecall WttQt::value_recall;
CoWowRecall WttQt::name_recall;

void WttQt::set_window_char(int width, int height)
{
  toplevel->resize(width, height);
}

void WttQt::get_window_char(int *w, int *h)
{
  *w = toplevel->width();
  *h = toplevel->height();
}

void WttQt::set_clock_cursor()
{
  toplevel->window()->setCursor(Qt::WaitCursor);
}

void WttQt::reset_cursor()
{
  toplevel->window()->unsetCursor();
}

void WttQt::free_cursor()
{
}

void WttQt::menu_setup()
{
  switch (wb_type) {
    case wb_eType_Directory:
      if (editmode) {
        menu_save_w->setEnabled(true);
        tools_save_w->setEnabled(true);
        menu_revert_w->setEnabled(true);
        menu_deleteobj_w->setEnabled(true);
        menu_creaobjafter_w->setEnabled(true);
        menu_creaobjfirst_w->setEnabled(true);
        menu_moveobjup_w->setEnabled(true);
        menu_moveobjdown_w->setEnabled(true);
        menu_moveobjinto_w->setEnabled(true);
        menu_moveobjontop_w->setEnabled(true);
        menu_cut_w->setEnabled(true);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(true);
        menu_pasteinto_w->setEnabled(true);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(true);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(false);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(true);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(true);
        menu_clonevolume_w->setEnabled(false);
      } else {
        menu_save_w->setEnabled(false);
        tools_save_w->setEnabled(false);
        menu_revert_w->setEnabled(false);
        menu_deleteobj_w->setEnabled(false);
        menu_creaobjafter_w->setEnabled(false);
        menu_creaobjfirst_w->setEnabled(false);
        menu_moveobjup_w->setEnabled(false);
        menu_moveobjdown_w->setEnabled(false);
        menu_moveobjinto_w->setEnabled(false);
        menu_moveobjontop_w->setEnabled(false);
        menu_cut_w->setEnabled(false);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(false);
        menu_pasteinto_w->setEnabled(false);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(false);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(false);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(true);
        menu_buildproject_w->setEnabled(true);
        menu_buildexport_w->setEnabled(true);
        menu_buildimport_w->setEnabled(true);
        menu_distribute_w->setEnabled(true);
        menu_change_value_w->setEnabled(false);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(true);
        menu_classeditor_w->setEnabled(true);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(false);
      }
      break;
    case wb_eType_Volume:
      if (editmode) {
        menu_save_w->setEnabled(true);
        tools_save_w->setEnabled(true);
        menu_revert_w->setEnabled(true);
        menu_deleteobj_w->setEnabled(true);
        menu_creaobjafter_w->setEnabled(true);
        menu_creaobjfirst_w->setEnabled(true);
        menu_moveobjup_w->setEnabled(true);
        menu_moveobjdown_w->setEnabled(true);
        menu_moveobjinto_w->setEnabled(true);
        menu_moveobjontop_w->setEnabled(true);
        menu_cut_w->setEnabled(true);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(true);
        menu_pasteinto_w->setEnabled(true);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(true);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(false);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(true);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        if (ldhses && ldh_VolRepType(ldhses) == ldh_eVolRep_Dbs) {
          menu_updateclasses_w->setEnabled(false);
        } else {
          menu_updateclasses_w->setEnabled(true);
        }
        menu_clonevolume_w->setEnabled(false);
      } else {
        menu_save_w->setEnabled(false);
        tools_save_w->setEnabled(false);
        menu_revert_w->setEnabled(false);
        menu_deleteobj_w->setEnabled(false);
        menu_creaobjafter_w->setEnabled(false);
        menu_creaobjfirst_w->setEnabled(false);
        menu_moveobjup_w->setEnabled(false);
        menu_moveobjdown_w->setEnabled(false);
        menu_moveobjinto_w->setEnabled(false);
        menu_moveobjontop_w->setEnabled(false);
        menu_cut_w->setEnabled(false);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(false);
        menu_pasteinto_w->setEnabled(false);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(false);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(true);
        menu_buildobject_w->setEnabled(true);
        if (ldhses && ldh_VolRepType(ldhses) == ldh_eVolRep_Dbs) {
          menu_buildvolume_w->setEnabled(false);
        } else {
          menu_buildvolume_w->setEnabled(true);
        }
        menu_buildnode_w->setEnabled(true);
        menu_buildproject_w->setEnabled(true);
        menu_buildexport_w->setEnabled(true);
        menu_buildimport_w->setEnabled(true);
        menu_distribute_w->setEnabled(true);
        menu_change_value_w->setEnabled(false);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(true);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(true);
      }
      break;
    case wb_eType_Class:
      if (editmode) {
        menu_save_w->setEnabled(true);
        tools_save_w->setEnabled(true);
        menu_revert_w->setEnabled(true);
        menu_deleteobj_w->setEnabled(true);
        menu_creaobjafter_w->setEnabled(true);
        menu_creaobjfirst_w->setEnabled(true);
        menu_moveobjup_w->setEnabled(true);
        menu_moveobjdown_w->setEnabled(true);
        menu_moveobjinto_w->setEnabled(true);
        menu_moveobjontop_w->setEnabled(true);
        menu_cut_w->setEnabled(true);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(true);
        menu_pasteinto_w->setEnabled(true);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(true);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(true);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(true);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(false);
      } else {
        menu_save_w->setEnabled(false);
        tools_save_w->setEnabled(false);
        menu_revert_w->setEnabled(false);
        menu_deleteobj_w->setEnabled(false);
        menu_creaobjafter_w->setEnabled(false);
        menu_creaobjfirst_w->setEnabled(false);
        menu_moveobjup_w->setEnabled(false);
        menu_moveobjdown_w->setEnabled(false);
        menu_moveobjinto_w->setEnabled(false);
        menu_moveobjontop_w->setEnabled(false);
        menu_cut_w->setEnabled(false);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(false);
        menu_pasteinto_w->setEnabled(false);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(false);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(true);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(true);
        menu_buildnode_w->setEnabled(true);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(true);
        menu_change_value_w->setEnabled(false);
        menu_edit_w->setEnabled(false);
        tools_edit_w->setEnabled(false);
        tools_buildnode_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(false);
      }
      break;
    case wb_eType_ClassEditor:
      menu_buildobject_w->setVisible(false);
      menu_utilities_w->setVisible(false);
      menu_buildnode_w->setVisible(false);
      menu_classeditor_w->setVisible(false);
      if (editmode) {
        menu_save_w->setEnabled(true);
        tools_save_w->setEnabled(true);
        menu_revert_w->setEnabled(true);
        menu_deleteobj_w->setEnabled(true);
        menu_creaobjafter_w->setEnabled(true);
        menu_creaobjfirst_w->setEnabled(true);
        menu_moveobjup_w->setEnabled(true);
        menu_moveobjdown_w->setEnabled(true);
        menu_moveobjinto_w->setEnabled(true);
        menu_moveobjontop_w->setEnabled(true);
        menu_cut_w->setEnabled(true);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(true);
        menu_pasteinto_w->setEnabled(true);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(true);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(false);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(true);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        if (ldh_VolRepType(ldhses) == ldh_eVolRep_Ced) {
          menu_updateclasses_w->setEnabled(true);
        } else {
          menu_updateclasses_w->setEnabled(false);
        }
        menu_clonevolume_w->setEnabled(false);
      } else {
        menu_save_w->setEnabled(false);
        tools_save_w->setEnabled(false);
        menu_revert_w->setEnabled(false);
        menu_deleteobj_w->setEnabled(false);
        menu_creaobjafter_w->setEnabled(false);
        menu_creaobjfirst_w->setEnabled(false);
        menu_moveobjup_w->setEnabled(false);
        menu_moveobjdown_w->setEnabled(false);
        menu_moveobjinto_w->setEnabled(false);
        menu_moveobjontop_w->setEnabled(false);
        menu_cut_w->setEnabled(false);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(false);
        menu_pasteinto_w->setEnabled(false);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(false);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(true);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(true);
        menu_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(false);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(true);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(false);
      }
      break;
    case wb_eType_Buffer:
      if (editmode) {
        menu_save_w->setEnabled(false);
        tools_save_w->setEnabled(false);
        menu_revert_w->setEnabled(false);
        menu_deleteobj_w->setEnabled(true);
        menu_creaobjafter_w->setEnabled(true);
        menu_creaobjfirst_w->setEnabled(true);
        menu_moveobjup_w->setEnabled(true);
        menu_moveobjdown_w->setEnabled(true);
        menu_moveobjinto_w->setEnabled(true);
        menu_moveobjontop_w->setEnabled(true);
        menu_cut_w->setEnabled(true);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(true);
        menu_pasteinto_w->setEnabled(true);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(true);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(false);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(true);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(false);
      } else {
        menu_save_w->setEnabled(false);
        tools_save_w->setEnabled(false);
        menu_revert_w->setEnabled(false);
        menu_cut_w->setEnabled(false);
        menu_deleteobj_w->setEnabled(false);
        menu_creaobjafter_w->setEnabled(false);
        menu_creaobjfirst_w->setEnabled(false);
        menu_moveobjup_w->setEnabled(false);
        menu_moveobjdown_w->setEnabled(false);
        menu_moveobjinto_w->setEnabled(false);
        menu_moveobjontop_w->setEnabled(false);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(false);
        menu_pasteinto_w->setEnabled(false);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(false);
        menu_utilities_w->setEnabled(true);
        menu_openplc_w->setEnabled(true);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(false);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(false);
      }
      break;
    case wb_eType_ExternVolume:
      if (editmode) {
        menu_save_w->setEnabled(true);
        tools_save_w->setEnabled(true);
        menu_revert_w->setEnabled(true);
        menu_deleteobj_w->setEnabled(true);
        menu_creaobjafter_w->setEnabled(true);
        menu_creaobjfirst_w->setEnabled(true);
        menu_moveobjup_w->setEnabled(true);
        menu_moveobjdown_w->setEnabled(true);
        menu_moveobjinto_w->setEnabled(true);
        menu_moveobjontop_w->setEnabled(true);
        menu_cut_w->setEnabled(true);
        menu_copy_w->setEnabled(true);
        menu_paste_w->setEnabled(true);
        menu_pasteinto_w->setEnabled(true);
        menu_copykeep_w->setEnabled(true);
        menu_rename_w->setEnabled(true);
        menu_utilities_w->setEnabled(false);
        menu_openplc_w->setEnabled(false);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(true);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(false);
      } else {
        menu_save_w->setEnabled(false);
        tools_save_w->setEnabled(true);
        menu_revert_w->setEnabled(false);
        menu_deleteobj_w->setEnabled(false);
        menu_creaobjafter_w->setEnabled(false);
        menu_creaobjfirst_w->setEnabled(false);
        menu_moveobjup_w->setEnabled(false);
        menu_moveobjdown_w->setEnabled(false);
        menu_moveobjinto_w->setEnabled(false);
        menu_moveobjontop_w->setEnabled(false);
        menu_cut_w->setEnabled(false);
        menu_copy_w->setEnabled(false);
        menu_paste_w->setEnabled(false);
        menu_pasteinto_w->setEnabled(false);
        menu_copykeep_w->setEnabled(false);
        menu_rename_w->setEnabled(false);
        menu_utilities_w->setEnabled(false);
        menu_openplc_w->setEnabled(false);
        menu_buildobject_w->setEnabled(false);
        menu_buildvolume_w->setEnabled(false);
        menu_buildnode_w->setEnabled(false);
        menu_buildproject_w->setEnabled(false);
        menu_buildexport_w->setEnabled(false);
        menu_buildimport_w->setEnabled(false);
        menu_distribute_w->setEnabled(false);
        menu_change_value_w->setEnabled(false);
        menu_edit_w->setEnabled(true);
        tools_edit_w->setEnabled(true);
        tools_buildnode_w->setEnabled(false);
        menu_classeditor_w->setEnabled(false);
        menu_updateclasses_w->setEnabled(false);
        menu_clonevolume_w->setEnabled(false);
      }
      break;
    default:;
  }
}

void WttQt::set_selection_owner()
{
  selection_timerid = new QTimer();
  selection_timerid->setSingleShot(true);
  QObject::connect(selection_timerid, SIGNAL(timeout()), toplevel,
                   SLOT(set_selection_owner_proc()));
  selection_timerid->start(200);
}

void WttQt::set_palette_selection_owner()
{
  selection_timerid = new QTimer();
  selection_timerid->setSingleShot(true);
  QObject::connect(selection_timerid, SIGNAL(timeout()), toplevel,
                   SLOT(set_palette_selection_owner_proc()));
  selection_timerid->start(200);
}

void WttQtWidget::set_selection_owner_proc()
{
  // Delay call to own selection, to make it possible to paste previous selection
  // to value inputwith MB2
  wtt->selection_timerid = 0;
  if (wtt->focused_wnav) {
    wtt->focused_wnav->set_selection_owner();
  }
}

void WttQtWidget::set_palette_selection_owner_proc()
{
  // Delay call to own selection, to make it possible to paste previous selection
  // to value inputwith MB2
  wtt->selection_timerid = 0;
  wtt->palette->set_selection_owner();
}

int WttQt::create_popup_menu(pwr_sAttrRef aref, int x, int y)
{
  int sts;

  // Calculate position
  if (((WNavQt *) wnavnode)->brow_widget->window()->isActiveWindow()) {
    CoWowQt::PopupPosition(((WNavQt *) wnavnode)->brow_widget, x, y,
                           &popupmenu_x, &popupmenu_y);
  } else if (((WNavQt *) wnav)->brow_widget->window()->isActiveWindow()) {
    CoWowQt::PopupPosition(((WNavQt *) wnav)->brow_widget, x, y, &popupmenu_x,
                           &popupmenu_y);
  } else {
    return 0;
  }
  popupmenu_x += 10;

  // Create the menu
  sts = get_popup_menu_items(aref, pwr_cNCid);
  if (EVEN(sts)) { return sts; }

  QMenu *popup = build_menu();
  if (!popup) {
    return 0;
  }

  popup->popup(QPoint(popupmenu_x, popupmenu_y));

  return 1;
}

int WttQt::create_pal_popup_menu(pwr_tCid cid, int x, int y)
{
  // Calculate position
  popupmenu_x = x + 5;
  popupmenu_y = y + 70;

  // Create the menu
  int sts = get_popup_menu_items(pwr_cNAttrRef, cid);
  if (EVEN(sts)) { return sts; }

  QMenu *popup = build_menu();
  if (!popup) {
    return 0;
  }

  popup->popup(QPoint(popupmenu_x, popupmenu_y));

  return 1;
}

void WttQt::set_noedit_show()
{
  int width, height;

  if (editmode == 0) {
    return;
  }

  palette_widget->setVisible(false);
  get_window_char(&width, &height);
  set_window_char(width - WTT_PALETTE_WIDTH, height);
}

void WttQt::set_edit_show()
{
  int width, height;

  palette_widget->setVisible(true);
  set_pane_position(palette_paned, WTT_PALETTE_WIDTH);
  get_window_char(&width, &height);
  set_window_char(width + WTT_PALETTE_WIDTH, height);
}

void WttQt::set_twowindows(int two, int display_wnav, int display_wnavnode)
{
  if (disable_w2) {
    display_wnav = 1;
    display_wnavnode = 0;
    two = 0;
  }
  if (display_wnav || display_wnavnode) {
    if (display_wnav && !wnav_mapped) {
      wnav_brow_widget->setVisible(true);
      set_focus(wnav);
      wnav_mapped = 1;
    }
    if (display_wnavnode && !wnavnode_mapped) {
      wnavnode_brow_widget->setVisible(true);
      set_focus(wnavnode);
      wnavnode_mapped = 1;
    }
    if (!display_wnav && wnav_mapped) {
      if (realized) {
        wnav_brow_widget->setVisible(false);
      }
      set_focus(wnavnode);
      wnav_mapped = 0;
    }
    if (!display_wnavnode && wnavnode_mapped) {
      if (realized) {
        wnavnode_brow_widget->setVisible(false);
      }
      set_focus(wnav);
      wnavnode_mapped = 0;
    }
    twowindows = display_wnav && display_wnavnode;
  } else {
    if (two == twowindows) {
      return;
    }

    if (!two) {
      // Keep the focused window
      if (focused_wnav == wnavnode) {
        if (realized) {
          wnav_brow_widget->setVisible(false);
        }
        set_focus(wnavnode);
        wnav_mapped = 0;
        wnavnode_mapped = 1;
      } else {
        if (realized) {
          wnavnode_brow_widget->setVisible(false);
        }
        set_focus(wnav);
        wnav_mapped = 1;
        wnavnode_mapped = 0;
      }
    } else {
      if (!wnav_mapped) {
        wnav_brow_widget->setVisible(true);
        set_focus(wnav);
        wnav_mapped = 1;
      }
      if (!wnavnode_mapped) {
        wnavnode_brow_widget->setVisible(true);
        set_focus(wnavnode);
        wnavnode_mapped = 1;
      }
    }
    twowindows = two;
  }
}

void WttQt::message(char severity, const char *message)
{
  msg_label->setText(QString::fromLatin1(message));
}

void WttQt::set_prompt(const char *prompt)
{
  if (strcmp(prompt, "") == 0) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setVisible(true);
    cmd_prompt->setText(fl(prompt));
  }
}

void WttQt::watt_new(pwr_tAttrRef aref)
{
  new WAttQt(toplevel, this, ldhses, aref, editmode, wnavnode->gbl.advanced_user,
             1);
}

void WttQt::wda_new(pwr_tOid oid)
{
  new WdaQt(toplevel, this, ldhses, oid, 0, "", editmode, wnav->gbl.advanced_user,
            1);
}

Ge *WttQt::ge_new(char *graph_name)
{
  unsigned int
      opt = wnavnode->gbl.enable_comment ? ge_mOption_EnableComment : 0;
  return new GeQt(this, toplevel, ldhses, 0, opt, graph_name);
}

void WttQt::wcast_new(pwr_tAttrRef aref, pwr_tStatus *sts)
{
  new WCastQt(this, toplevel, "Casting Window", ldhses, aref, sts);
}

wb_build *WttQt::build_new()
{
  return new wb_build(*(wb_session *) ldhses, focused_wnav);
}

void WttQt::wpkg_new()
{
  wpkg = new WPkgQt(toplevel, this);
  wpkg->close_cb = Wtt::wpkg_quit_cb;
}

int WttQt::ute_new(char *title)
{
  pwr_tStatus sts;
  utedctx = new WUtedQt(this, toplevel, title, "Utilites", ldh_SessionToWB(ldhses),
                        ldhses, editmode, uted_quit_cb, &sts);
  return sts;
}

void WttQt::close_change_value()
{
  if (input_open) {
    cmd_entry->setVisible(false);
    set_prompt("");
    input_open = 0;
  }
}

void WttQtWidget::open_change_value()
{
  int sts;
  brow_tObject *sellist;
  int sel_cnt1, sel_cnt2;
  char *value = 0;
  int multiline;
  int input_size;

  if (wtt->input_open) {
    wtt->cmd_entry->setVisible(false);
    wtt->set_prompt("");
    wtt->input_open = 0;
    wtt->focused_wnav->set_inputfocus(1);
    return;
  }

  sts = wtt->wnav->get_selected_nodes(&sellist, &sel_cnt1);
  if (ODD(sts)) {
    if (sel_cnt1 != 1) {
      wtt->message('E', "Select one attribute");
      return;
    }

    sts = wtt->wnav->check_attr_value(sellist[0], &multiline, &value, &input_size);
    if (EVEN(sts)) {
      wtt->message('E', wnav_get_message(sts));
      return;
    }
    if (multiline) {
      wtt->message('E', "Edit multiline attributes in the Object Editor");
      return;
    }

    wtt->input_node = sellist[0];
    wtt->input_wnav = wtt->wnav;
    wtt->wnav->node_to_objid(wtt->input_node, &wtt->input_objid);
    free(sellist);
  } else {
    sts = wtt->wnavnode->get_selected_nodes(&sellist, &sel_cnt2);
    if (ODD(sts)) {
      if (sel_cnt2 != 1) {
        wtt->message('E', "Select one attribute");
        return;
      }

      sts = wtt->wnavnode
          ->check_attr_value(sellist[0], &multiline, &value, &input_size);
      if (EVEN(sts)) {
        wtt->message('E', wnav_get_message(sts));
        return;
      }
      if (multiline) {
        wtt->message('E', "Edit multiline attributes in the attribute editor");
        return;
      }

      wtt->input_node = sellist[0];
      wtt->input_wnav = wtt->wnavnode;
      wtt->wnavnode->node_to_objid(wtt->input_node, &wtt->input_objid);
      free(sellist);
    }
  }
  if (sel_cnt1 == 0 && sel_cnt2 == 0) {
    wtt->message('E', "Select an attribute");
    return;
  }

  if (wtt->command_open) {
    wtt->command_open = 0;
  } else {
    wtt->cmd_entry->setVisible(true);
  }

  wtt->cmd_entry->setMaxLength(input_size);
  wtt->message(' ', "");
  wtt->cmd_entry->set_recall_buffer(&wtt->value_recall);
  wtt->cmd_entry->setFocus();

  if (value) {
    wtt->cmd_entry->setText(QString::fromLatin1(value));

    // Select the text
    wtt->cmd_entry->selectAll();
  } else {
    wtt->cmd_entry->setText("");
  }

  wtt->set_prompt("value >");
  wtt->input_open = 1;
  wtt->input_mode = wtt_eInputMode_Attribute;
}

void WttQtWidget::open_change_name()
{
  int sts;
  brow_tObject *sellist;
  int sel_cnt1, sel_cnt2;
  int size;
  char name[80];

  if (wtt->input_open) {
    wtt->cmd_entry->setVisible(false);
    wtt->set_prompt("");
    wtt->input_open = 0;
    return;
  }

  sts = wtt->wnav->get_selected_nodes(&sellist, &sel_cnt1);
  if (ODD(sts)) {
    if (sel_cnt1 != 1) {
      wtt->message('E', "Select one object");
      return;
    }

    sts = wtt->wnav->check_object_name(sellist[0]);
    if (EVEN(sts)) {
      wtt->message('E', wnav_get_message(sts));
      return;
    }

    wtt->input_node = sellist[0];
    wtt->input_wnav = wtt->wnav;
    wtt->wnav->node_to_objid(wtt->input_node, &wtt->input_objid);
    free(sellist);
  } else {
    sts = wtt->wnavnode->get_selected_nodes(&sellist, &sel_cnt2);
    if (ODD(sts)) {
      if (sel_cnt2 != 1) {
        wtt->message('E', "Select one object");
        return;
      }

      sts = wtt->wnavnode->check_object_name(sellist[0]);
      if (EVEN(sts)) {
        wtt->message('E', wnav_get_message(sts));
        return;
      }

      wtt->input_node = sellist[0];
      wtt->input_wnav = wtt->wnavnode;
      wtt->wnavnode->node_to_objid(wtt->input_node, &wtt->input_objid);
      free(sellist);
    }
  }
  if (sel_cnt1 == 0 && sel_cnt2 == 0) {
    wtt->message('E', "Select an object");
    return;
  }

  if (wtt->command_open) {
    wtt->command_open = 0;
  } else {
    wtt->cmd_entry->setVisible(true);
  }

  wtt->cmd_entry->setMaxLength(sizeof(pwr_tObjName) - 1);
  wtt->message(' ', "");
  wtt->cmd_entry->set_recall_buffer(&wtt->name_recall);
  wtt->cmd_entry->setFocus();

  sts =
      ldh_ObjidToName(wtt->ldhses, wtt->input_objid, ldh_eName_Object, name, sizeof(name),
                      &size);

  wtt->cmd_entry->setText(QString::fromLatin1(name));

  // Select the text
  wtt->cmd_entry->selectAll();

  wtt->set_prompt("name >");
  wtt->input_open = 1;
  wtt->input_mode = wtt_eInputMode_ObjectName;
}

//
//  Callbackfunctions from menu entries
//
void WttQtWidget::activate_change_value()
{
  wtt->open_change_value();
}

void WttQtWidget::activate_command()
{
  if (wtt->command_open) {
    wtt->cmd_entry->setVisible(false);
    wtt->set_prompt("");
    wtt->command_open = 0;
    return;
  }

  wtt->cmd_entry->setText("");

  if (wtt->input_open) {
    wtt->input_open = 0;
  } else {
    wtt->cmd_entry->setVisible(true);
  }

  wtt->cmd_entry->setMaxLength(sizeof(pwr_tCmd) - 1);
  wtt->set_prompt("wtt >");
  wtt->message(' ', "");
  wtt->cmd_entry->set_recall_buffer(&wtt->cmd_recall);
  wtt->cmd_entry->setFocus();

  wtt->command_open = 1;
}

static void wtt_help_cb(void *ctx, const char *topic)
{
  pwr_tCmd cmd;
  sprintf(cmd, "help %s", topic);
  ((Wtt *) ctx)->wnav->command(cmd);
}

void WttQtWidget::activate_rtmon()
{
  pwr_tStatus sts;
  RtMon *rtmon = new RtMonQt(this, this, "Runtime Monitor", 0, &sts);
  rtmon->help_cb = wtt_help_cb;
}

void WttQtWidget::activate_statusmon()
{
  pwr_tStatus sts;
  Nodelist *nl = new NodelistQt(this, this, "Supervision Center",
                                nodelist_eMode_SystemStatus, 0, 0, &sts);
  nl->set_scantime(3);
  nl->help_cb = wtt_help_cb;
}

void WttQtWidget::activate_print()
{
  wtt->activate_print();
}

void WttQtWidget::activate_collapse()
{
  wtt->activate_collapse();
}

void WttQtWidget::activate_save()
{
  wtt->activate_save();
}

void WttQtWidget::activate_revert()
{
  wtt->activate_revert();
}

void WttQtWidget::activate_syntax()
{
  wtt->activate_syntax();
}

void WttQtWidget::activate_history()
{
  pwr_tStatus sts;
  char categories[4][20];
  pwr_tObjName vname;
  pwr_tOid oid;
  int size;
  char title[80];

  wb_log::category_to_string(wlog_eCategory_ConfiguratorSave, categories[0]);
  wb_log::category_to_string(wlog_eCategory_VolumeBuild, categories[1]);
  wb_log::category_to_string(wlog_eCategory_VolumeClone, categories[2]);
  strcpy(categories[3], "");

  oid.oix = 0;
  oid.vid = wtt->volid;
  sts = ldh_ObjidToName(wtt->ldhses, oid, ldh_eName_Object, vname,
                        sizeof(vname), &size);
  if (EVEN(sts)) { return; }

  strcpy(title, "History Configurator ");
  strcat(title, vname);
  CoLogWQt *logw = new CoLogWQt(wtt, parentWidget(), title, 0, &sts);
  logw->CoLogW::show(categories, vname);
}

void WttQtWidget::activate_revisions()
{
  wtt->activate_revisions();
}

void WttQtWidget::activate_find()
{
  wtt->activate_find();
}

void WttQtWidget::activate_findregex()
{
  wtt->activate_findregex();
}

void WttQtWidget::activate_findnext()
{
  wtt->activate_findnext();
}

void WttQtWidget::activate_copy()
{
  wtt->activate_copy();
}

void WttQtWidget::activate_cut()
{
  wtt->activate_cut();
}

void WttQtWidget::activate_paste()
{
  wtt->activate_paste();
}

void WttQtWidget::activate_pasteinto()
{
  wtt->activate_pasteinto();
}

void WttQtWidget::activate_copykeep()
{
  wtt->activate_copykeep();
}

void WttQtWidget::activate_rename()
{
  wtt->open_change_name();
}

void WttQtWidget::activate_creaobjafter()
{
  wtt->activate_creaobj(ldh_eDest_After);
}

void WttQtWidget::activate_creaobjfirst()
{
  wtt->activate_creaobj(ldh_eDest_IntoFirst);
}

void WttQtWidget::activate_moveobjup()
{
  wtt->activate_moveobj(wnav_eDestCode_Before);
}

void WttQtWidget::activate_moveobjdown()
{
  wtt->activate_moveobj(wnav_eDestCode_After);
}

void WttQtWidget::activate_moveobjinto()
{
  wtt->activate_moveobj(wnav_eDestCode_FirstChild);
}

void WttQtWidget::activate_moveobjontop()
{
  wtt->activate_moveobj(wnav_eDestCode_LastChild);
}

void WttQtWidget::activate_deleteobj()
{
  wtt->activate_deleteobj();
}

void WttQtWidget::activate_configure()
{
  wtt->activate_configure();
}

void WttQtWidget::activate_utilities()
{
  wtt->activate_utilities();
}

void WttQtWidget::activate_openobject()
{
  wtt->activate_openobject();
}

void WttQtWidget::activate_openvolobject()
{
  wtt->activate_openvolobject();
}

void WttQtWidget::activate_openplc()
{
  wtt->activate_openplc();
}

void WttQtWidget::activate_buildobject()
{
  wtt->activate_buildobject();
}

void WttQtWidget::activate_openvolume()
{
  wtt->activate_openvolume();
}

void WttQtWidget::activate_openbuffer()
{
  wtt->activate_openbuffer();
}

void WttQtWidget::activate_confproject()
{
  wtt->activate_confproject();
}

void WttQtWidget::activate_openfile_dbs()
{
  wtt->set_clock_cursor();
  wtt->wnav->wow->CreateFileSelDia("Loadfile Selection", wtt,
                                   Wtt::file_selected_cb, wow_eFileSelType_Dbs);
  wtt->reset_cursor();
}

void WttQtWidget::activate_openfile_wbl()
{
  wtt->set_clock_cursor();
  wtt->wnav->wow->CreateFileSelDia("Loadfile Selection", wtt,
                                   Wtt::file_selected_cb, wow_eFileSelType_Wbl);
  wtt->reset_cursor();
}

void WttQtWidget::activate_openpl()
{
  wtt->activate_openpl();
}

void WttQtWidget::activate_opengvl()
{
  wtt->activate_opengvl();
}

void WttQtWidget::activate_openudb()
{
  wtt->activate_openudb();
}

void WttQtWidget::activate_spreadsheet()
{
  wtt->activate_spreadsheet();
}

void WttQtWidget::activate_openge()
{
  wtt->activate_openge();
}

void WttQtWidget::activate_openclasseditor()
{
  wtt->activate_openclasseditor();
}

void WttQtWidget::activate_buildvolume()
{
  wtt->activate_buildvolume();
}

void WttQtWidget::activate_buildnode()
{
  wtt->activate_buildnode();
}

void WttQtWidget::activate_builddirectories()
{
  wtt->activate_builddirectories();
}

void WttQtWidget::activate_buildimport()
{
  wtt->activate_buildimport();
}

void WttQtWidget::activate_buildexport()
{
  wtt->activate_buildexport();
}


void WttQtWidget::activate_distribute()
{
  wtt->activate_distribute();
}

void WttQtWidget::activate_showcrossref()
{
  wtt->activate_showcrossref();
}

void WttQtWidget::activate_updateclasses()
{
  wtt->activate_updateclasses();
}

void WttQtWidget::activate_clonevolume()
{
  wtt->activate_clonevolume();
}

void WttQtWidget::activate_backupfile()
{
  wtt->activate_backupfile();
}

void WttQtWidget::activate_zoom_in()
{
  wtt->activate_zoom_in();
}

void WttQtWidget::activate_zoom_out()
{
  wtt->activate_zoom_out();
}

void WttQtWidget::activate_zoom_reset()
{
  wtt->activate_zoom_reset();
}

void WttQtWidget::activate_twowindows()
{
  wtt->activate_twowindows();
}

void WttQtWidget::activate_set_alltoplevel()
{
  int set = ((int) ((WttQt *)wtt)->view_alltoplevel_w->isChecked());
  if (sender() != ((WttQt *)wtt)->view_alltoplevel_w) {
    set = !set;
    ((WttQt *)wtt)->view_alltoplevel_w->setChecked(set ? true : false);
  }
  wtt->activate_set_alltoplevel(set);
}

void WttQtWidget::activate_messages()
{
  wtt->activate_messages();
}

void WttQtWidget::activate_view()
{
  wtt->create_options_dialog();
  wtt->update_options_form();
}

void WttQtWidget::activate_savesettings()
{
  wtt->save_settings();
}

void WttQtWidget::activate_restoresettings()
{
  wtt->restore_settings();
}

void WttQtWidget::activate_scriptproj()
{
  wtt->activate_scriptproj();
}

void WttQtWidget::activate_scriptbase()
{
  wtt->activate_scriptbase();
}

void WttQtWidget::activate_set_advuser()
{
  pwr_tCmd cmd = "set advanceduser";
  wtt->wnav->command(cmd);
}

void WttQtWidget::activate_help()
{
  wtt->activate_help();
}

void WttQtWidget::activate_help_project()
{
  wtt->activate_help_project();
}

void WttQtWidget::activate_help_proview()
{
  wtt->activate_help_proview();
}

void WttQtWidget::valchanged_cmd_entry()
{
  int sts;

  QByteArray text = wtt->cmd_entry->text().toLatin1();

  if (!text.data()) {
    wtt->wnav->wow->DisplayError("Input error", "Invalid character");
    return;
  }

  if (wtt->input_open) {
    switch (wtt->input_mode) {
      case wtt_eInputMode_Attribute:
        wtt->input_wnav->select_object(wtt->input_node);
        sts = wtt->input_wnav->set_attr_value(wtt->input_node, wtt->input_objid,
                                              text.data());
        if (EVEN(sts)) {
          wtt->message('E', wnav_get_message(sts));
        }
        break;
      case wtt_eInputMode_ObjectName:
        wtt->input_wnav->select_object(wtt->input_node);
        sts = wtt->input_wnav->set_object_name(wtt->input_node,
                                               wtt->input_objid, text.data());
        if (EVEN(sts)) {
          wtt->message('E', wnav_get_message(sts));
        }
        break;
      default:;
    }
    if (wtt->input_open) {
      wtt->cmd_entry->setVisible(false);
      wtt->set_prompt("");
      wtt->input_open = 0;
    }
  } else if (wtt->command_open) {
    if (!wtt->focused_wnav) {
      wtt->set_focus_default();
    }
    wtt->set_clock_cursor();
    wtt->focused_wnav->command(text.data());
    wtt->reset_cursor();
    wtt->cmd_entry->setVisible(false);
    wtt->set_prompt("");
    wtt->command_open = 0;
    wtt->focused_wnav->set_inputfocus(1);
  }
}

void WttQtWidget::focusInEvent(QFocusEvent *event)
{
  if (!wtt->focustimer.disabled()) {
    if (wtt->focused_wnav) {
      wtt->set_focus(wtt->focused_wnav);
    }
    wtt->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void WttQtWidget::hide_cmd_entry()
{
  if (wtt->input_open) {
    wtt->input_wnav->select_object(wtt->input_node);
    wtt->set_prompt("");
    wtt->input_open = 0;
  }
}

void WttQt::open_input_dialog(const char *text, const char *title,
                              const char *init_text,
                              void (*ok_cb)(Wtt *, char *))
{
  bool ok;
  india_ok_cb = ok_cb;
  QString str = QInputDialog::getText(toplevel, translate_utf8(title),
                                      translate_utf8(text), QLineEdit::Normal,
                                      fl(init_text), &ok);
  if (ok) {
    QByteArray ba = str.toLatin1();
    char *text = ba.data();

    (ok_cb)(this, text);
  }
}

void WttQt::open_confirm(const char *text, const char *title,
                         void (*ok_cb)(Wtt *), void (*no_cb)(Wtt *))
{
  message(' ', "");

  confirm_ok_cb = ok_cb;
  confirm_no_cb = no_cb;
  QMessageBox::StandardButton reply = QMessageBox::question(
      toplevel, translate_utf8(title), translate_utf8(text),
      QMessageBox::Ok | QMessageBox::No | QMessageBox::Cancel);
  if (reply == QMessageBox::Yes) {
    if (ok_cb) {
      (ok_cb)(this);
    }
  } else if (reply == QMessageBox::No) {
    if (no_cb) {
      (no_cb)(this);
    }
  }
}

void WttQtWidget::activate_selmode(bool set)
{
  if (sender() == wtt->cm_normal_syntax) {
    if (!set) {
      return;
    }
    wtt->cm_add_type->setEnabled(true);
    wtt->cm_add_type->setChecked(false);
    wtt->select_type = 0;
    wtt->cm_add_volume->setEnabled(true);
    wtt->select_syntax = wnav_eSelectionMode_Normal;
  }
  if (sender() == wtt->cm_gms_syntax) {
    if (!set) {
      return;
    }
    wtt->cm_add_type->setEnabled(true);
    wtt->cm_add_volume->setEnabled(true);
    wtt->select_syntax = wnav_eSelectionMode_GMS;
  }
  if (sender() == wtt->cm_extern_syntax) {
    if (!set) {
      return;
    }
    wtt->cm_add_type->setEnabled(false);
    wtt->cm_add_type->setChecked(false);
    wtt->select_type = 0;
    wtt->cm_add_volume->setEnabled(false);
    wtt->cm_add_volume->setChecked(false);
    wtt->select_syntax = wnav_eSelectionMode_Extern;
    wtt->select_volume = 0;
  }
  if (sender() == wtt->cm_add_volume) {
    wtt->select_volume = (int) set;
  }
  if (sender() == wtt->cm_add_attribute) {
    wtt->select_attr = (int) set;
  }
  if (sender() == wtt->cm_add_type) {
    wtt->select_type = (int) set;
    if (wtt->select_type && !wtt->select_attr) {
      wtt->cm_add_attribute->setChecked(true);
      wtt->select_attr = 1;
    }
  }
}

BootDialog::BootDialog(WttQt *parent_ctx, QWidget *parent) : QDialog(parent),
                                                             wtt(parent_ctx)
{
  setMinimumSize(300, 200);
  setWindowTitle(fl("Build Node"));
  setAttribute(Qt::WA_DeleteOnClose);

  boot_list = new QTreeWidget();
  boot_list->setColumnCount(1);

  pwr_tString40 nodename;
  strcpy(nodename, "");
  lfu_t_volumelist *volumelist_ptr = (lfu_t_volumelist *) wtt->boot_volumelist;
  for (int i = 0; i < wtt->boot_volumecount; i++) {
    if (strcmp(volumelist_ptr->p1, nodename)) {
      strcpy(nodename, volumelist_ptr->p1);
      QTreeWidgetItem *item = new QTreeWidgetItem(boot_list);
      item->setText(0, fl(nodename));
      boot_list->addTopLevelItem(item);
    }
    volumelist_ptr++;
  }

  connect(boot_list, SIGNAL(itemActivated(QTreeWidgetItem * , int)), this,
          SLOT(boot_row_activated_cb(QTreeWidgetItem * , int)));

  QDialogButtonBox *buttons = new QDialogButtonBox(this);
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
  buttons->addButton(QDialogButtonBox::Cancel);
  buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
  connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()), this,
          SLOT(boot_ok_cb()));
  connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()), this,
          SLOT(boot_cancel_cb()));

  QScrollArea *scrolled_window = new QScrollArea();
  scrolled_window->setWidgetResizable(true);
  scrolled_window->setWidget(boot_list);

  QVBoxLayout *vbox = new QVBoxLayout(this);
  add_expanding(vbox, scrolled_window);
  vbox->addWidget(buttons);

  setLayout(vbox);
  show();

  // Set input focus to the scrolled list widget
  boot_list->setFocus();
}

// Open a Create Boot File window
void WttQt::open_boot_window()
{
  // Load the bootlist
  pwr_tStatus sts = lfu_volumelist_load(pwr_cNameBootList,
                                        (lfu_t_volumelist **) &
                                        boot_volumelist, &boot_volumecount);
  if (sts == FOE__NOFILE) {
    message('E', "Project is not configured");
    return;
  } else if (EVEN(sts)) {
    message('E', "Syntax error in bootlist file");
    return;
  }

  // Create the dialog
  boot_dia = new BootDialog(this, toplevel);
}

// Callbacks for the Create Boot Files window

// Widget callbacks for Cancel button
void BootDialog::boot_cancel_cb()
{
  close();
}

// Destroy callback
void BootDialog::closeEvent(QCloseEvent *event)
{
  if (wtt->boot_volumelist && wtt->boot_volumecount) {
    free((char *) wtt->boot_volumelist);
    wtt->boot_volumelist = 0;
  }
  wtt->boot_dia = 0;
}

void BootDialog::boot_row_activated_cb(QTreeWidgetItem *item, int idx)
{
  boot_ok_cb();
}

// Widget callbacks for OK button
void BootDialog::boot_ok_cb()
{
  if (!wtt->focused_wnav) {
    wtt->set_focus_default();
  }

  wtt->message(' ', "");

  int nodecount = 0;
  int bootfile_count = 0;
  lfu_t_volumelist *volumelist_ptr = (lfu_t_volumelist *) wtt->boot_volumelist;

  QList < QTreeWidgetItem * > selection = boot_list->selectedItems();
  if (selection.size() > 0) {
    QString text = selection[0]->text(0);

    pwr_tString40 nodeconfigname;
    strcpy(nodeconfigname, "");
    for (int j = 0; j < wtt->boot_volumecount; j++) {
      if (strcmp(volumelist_ptr->p1, nodeconfigname) != 0) {
        nodecount++;

        strcpy(nodeconfigname, volumelist_ptr->p1);
        if (text.compare(fl(nodeconfigname)) == 0) {
          int node_type = atoi(volumelist_ptr->p6);
          wb_build build(*((wb_session *) wtt->ldhses), wtt->focused_wnav);
          build.opt = wtt->focused_wnav->gbl.build;
          build.node(nodeconfigname, node_type, wtt->boot_volumelist,
                     wtt->boot_volumecount);
          if (build.evenSts()) {
            close();
            char msg[200];
            sprintf(msg, "Error building node %s", nodeconfigname);
            wtt->message('E', msg);
            return;
          } else if (build.sts() != PWRB__NOBUILT) {
            bootfile_count++;
          }
        }
      }
      volumelist_ptr++;
    }
  }

  close();
  if (!bootfile_count) {
    wtt->message('E', "Nothing to build");
    return;
  }
  char msg[200];
  sprintf(msg, "Node%s built", (bootfile_count == 1) ? "" : "s");
  wtt->message('I', msg);
}

/************************************************************************
*
* Name: update_options_form
*
* Description: This routine must be called when the configurator/navigator is
*	       managed.
*
*************************************************************************/
void WttQt::update_options_form()
{
  // Hierarchies
  enable_comment_w->setChecked(enable_comment ? true : false);
  enable_revisions_w->setChecked(enable_revisions ? true : false);
  show_plant_w->setChecked(wnav_mapped ? true : false);
  show_node_w->setChecked(wnavnode_mapped ? true : false);

  // entry components
  show_class_w->setChecked(show_class ? true : false);
  show_alias_w->setChecked(show_alias ? true : false);
  show_descrip_w->setChecked(show_descrip ? true : false);
  show_objref_w->setChecked(show_objref ? true : false);
  show_objxref_w->setChecked(show_objxref ? true : false);
  show_attrref_w->setChecked(show_attrref ? true : false);
  show_attrxref_w->setChecked(show_attrxref ? true : false);
  build_force_w->setChecked(build_force ? true : false);
  build_debug_w->setChecked(build_debug ? true : false);
  build_crossref_w->setChecked(build_crossref ? true : false);
  build_crossrefsim_w->setChecked(build_crossref_sim ? true : false);
  build_crossrefgraph_w->setChecked(build_crossref_graph ? true : false);
  build_manual_w->setChecked(build_manual ? true : false);
  build_nocopy_w->setChecked(build_nocopy ? true : false);
}

/************************************************************************
*
* Name: set_options
*
*
*************************************************************************/
void WttQt::set_options()
{
  enable_comment = (int) enable_comment_w->isChecked();
  enable_revisions = (int) enable_revisions_w->isChecked();
  show_class = (int) show_class_w->isChecked();
  show_alias = (int) show_alias_w->isChecked();
  show_descrip = (int) show_descrip_w->isChecked();
  show_objref = (int) show_objref_w->isChecked();
  show_objxref = (int) show_objxref_w->isChecked();
  show_attrref = (int) show_attrref_w->isChecked();
  show_attrxref = (int) show_attrxref_w->isChecked();
  build_force = (int) build_force_w->isChecked();
  build_debug = (int) build_debug_w->isChecked();
  build_crossref = (int) build_crossref_w->isChecked();
  build_crossref_sim = (int) build_crossrefsim_w->isChecked();
  build_crossref_graph = (int) build_crossrefgraph_w->isChecked();
  build_manual = (int) build_manual_w->isChecked();
  build_nocopy = (int) build_nocopy_w->isChecked();

  wnav->set_options(enable_comment, enable_revisions, show_class, show_alias, 
                    show_descrip, show_objref, show_objxref, show_attrref,
                    show_attrxref, build_force, build_debug, build_crossref,
                    build_crossref_sim, build_crossref_graph, build_manual,
                    build_nocopy);
  wnavnode->set_options(enable_comment, enable_revisions, show_class, show_alias, 
                        show_descrip, show_objref, show_objxref, show_attrref, 
                        show_attrxref, build_force, build_debug, build_crossref, 
                        build_crossref_sim, build_crossref_graph, build_manual,
                        build_nocopy);
}

void WttQtWidget::closeEvent(QCloseEvent *event)
{
  Wtt::close(wtt);
  QWidget::closeEvent(event);
}

WttQt::WttQt(void *wt_parent_ctx, QWidget *wt_parent_wid, const char *wt_name,
             const char *iconname, void *wt_wbctx, pwr_tVolumeId wt_volid,
             ldh_tVolume wt_volctx, wnav_sStartMenu *root_menu,
             pwr_tStatus *status)
    : Wtt(wt_parent_ctx, wt_name, iconname, wt_wbctx, wt_volid, wt_volctx,
          root_menu, status), boot_dia(0), options_form(0),
      set_focus_disabled(0), disfocus_timerid(0), selection_timerid(0),
      avoid_deadlock(0), realized(0)
{
  int window_width = 900;
  int window_height = 800;
  pwr_tStatus sts;
  char title[80];
  char volname[80];
  pwr_tClassId volclass;
  int size;
  char layout_w1[80];
  char layout_w2[80];
  char layout_palette[80];
  char title_w1[40];
  char title_w2[40];
  pwr_tFileName fname;
  wb_rev_info rev_info;
  char version[80];

  pwr_tStatus revsts;
  revsts = wb_revision::info(&rev_info);
  if (ODD(revsts) && !rev_info.in_master) {
    strcpy(version, rev_info.name);
  } else {
    strcpy(version, "");
  }

  if (wbctx && volid) {
    // Get the volume class and decide what type of navigator */
    sts = ldh_GetVolumeClass(wbctx, volid, &volclass);
    if (EVEN(sts)) {
      *status = sts;
      return;
    }
    if (volid == ldh_cDirectoryVolume) {
      volclass = pwr_eClass_DirectoryVolume;
    } // Fix

    sts = ldh_VolumeIdToName(wbctx, volid, volname, sizeof(volname), &size);
    if (EVEN(sts)) {
      *status = sts;
      return;
    }
    if (!volctx) {
      sts = ldh_AttachVolume(wbctx, volid, &volctx);
      if (EVEN(sts)) {
        printf("-- Volume '%s' is already attached\n", volname);
        putchar('\7');
        *status = sts;
        return;
      }
    }

    sts = ldh_OpenSession(&ldhses, volctx, ldh_eAccess_ReadOnly,
                          ldh_eUtility_Navigator);
    if (EVEN(sts)) {
      printf("Navigator: Can't open session\n");
      *status = sts;
      return;
    }
    ldh_AddOtherSessionCallback(ldhses, (void *) this,
                                Wtt::ldh_other_session_cb);

    switch (volclass) {
      case pwr_eClass_DirectoryVolume:
        wb_type = wb_eType_Directory;
        sprintf(title, "PwR Directory,   %s  %s", name, version);
        strcpy(layout_w1, "ProjectNavigatorW1");
        strcpy(layout_w2, "ProjectNavigatorW2");
        strcpy(layout_palette, "ProjectNavigatorPalette");
        strcpy(title_w1, "Volume Configuration");
        strcpy(title_w2, "Node Configuration");
        window_width = 900;
        window_height = 400;
        break;
      case pwr_eClass_ClassVolume:
      case pwr_eClass_DetachedClassVolume:
        if (ldh_VolRepType(ldhses) == ldh_eVolRep_Mem ||
            ldh_VolRepType(ldhses) == ldh_eVolRep_Ced) {
          wb_type = wb_eType_ClassEditor;
          sprintf(title, "PwR ClassEditor %s,   %s  %s", volname, name,
                  version);
        } else {
          wb_type = wb_eType_Class;
          sprintf(title, "PwR %s,   %s  %s", volname, name, version);
        }
        strcpy(layout_w1, "ClassNavigatorW1");
        strcpy(layout_w2, "ClassNavigatorW2");
        strcpy(layout_palette, "ClassNavigatorPalette");
        strcpy(title_w1, "Class Configuration");
        strcpy(title_w2, "Node Configuration");
        break;
      case pwr_eClass_VolatileVolume:
        wb_type = wb_eType_Buffer;
        strcpy(layout_w1, "");
        strcpy(layout_w2, "");
        strcpy(layout_palette, "NavigatorPalette");
        strcpy(title_w1, "Plant Configuration");
        strcpy(title_w2, "Node Configuration");
        sprintf(title, "PwR Buffer %s,   %s", volname, name);
        window_width = 500;
        window_height = 400;
        disable_w2 = 1;
        break;
      case pwr_eClass_ExternVolume: {
        switch (volid) {
          case ldh_cProjectListVolume:
            wb_type = wb_eType_ExternVolume;
            strcpy(layout_w1, "PrListNavigatorW1");
            strcpy(layout_w2, "PrListNavigatorW1");
            strcpy(layout_palette, "PrListNavigatorPalette");
            strcpy(title_w1, "Project List");
            strcpy(title_w2, "");
            sprintf(title, "PwR Project List");
            window_width = 500;
            window_height = 400;
            disable_w2 = 1;
            break;
          case ldh_cGlobalVolumeListVolume:
            wb_type = wb_eType_ExternVolume;
            strcpy(layout_w1, "GvListNavigatorW1");
            strcpy(layout_w2, "GvListNavigatorW1");
            strcpy(layout_palette, "GvListNavigatorPalette");
            strcpy(title_w1, "Global Volume List");
            strcpy(title_w2, "");
            sprintf(title, "PwR Global Volume List");
            window_width = 500;
            window_height = 400;
            disable_w2 = 1;
            break;
          case ldh_cUserDatabaseVolume:
            wb_type = wb_eType_ExternVolume;
            strcpy(layout_w1, "UserDbNavigatorW1");
            strcpy(layout_w2, "UserDbNavigatorW1");
            strcpy(layout_palette, "UserDbNavigatorPalette");
            strcpy(title_w1, "User Database");
            strcpy(title_w2, "");
            sprintf(title, "PwR User Database");
            window_width = 500;
            window_height = 400;
            disable_w2 = 1;
            break;
          default:
            wb_type = wb_eType_ExternVolume;
            strcpy(layout_w1, "NavigatorW1");
            strcpy(layout_w2, "NavigatorW2");
            strcpy(layout_palette, "NavigatorPalette");
            strcpy(title_w1, "Plant Configuration");
            strcpy(title_w2, "Node Configuration");
            sprintf(title, "PwR %s,   %s  %s", volname, name, version);
        }
        break;
      }
      default:
        wb_type = wb_eType_Volume;
        strcpy(layout_w1, "NavigatorW1");
        strcpy(layout_w2, "NavigatorW2");
        strcpy(layout_palette, "NavigatorPalette");
        strcpy(title_w1, "Plant Configuration");
        strcpy(title_w2, "Node Configuration");
        sprintf(title, "PwR %s,   %s  %s", volname, name, version);
    }
  } else {
    strcpy(layout_w1, "NavigatorW1");
    strcpy(layout_w2, "NavigatorW2");
    strcpy(title_w1, "Plant Configuration");
    strcpy(title_w2, "Node Configuration");
    strcpy(title, "PwR Wtt");
  }

  // Qt
  toplevel = new WttQtWidget(this, wt_parent_wid);
  toplevel->setMinimumSize(window_width, window_height);
  toplevel->setWindowTitle(fl(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QMenuBar *menu_bar = new QMenuBar();

  // File Entry
  QMenu *file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Open Volume", SLOT(activate_openvolume()));

  // Submenu open
  QMenu *file_open = file->addMenu(translate_utf8("&Open"));
  addMenuItem(toplevel, file_open, "&Dbs File...", SLOT(activate_openfile_dbs()));
  addMenuItem(toplevel, file_open, "&Wbl File...", SLOT(activate_openfile_wbl()));
  addMenuItem(toplevel, file_open, "&Buffer...", SLOT(activate_openbuffer()));
  addMenuItem(toplevel, file_open, "&ProjectList.", SLOT(activate_openpl()));
  addMenuItem(toplevel, file_open, "&GlobalVolumeList", SLOT(activate_opengvl()));
  addMenuItem(toplevel, file_open, "&UserDataBase", SLOT(activate_openudb()));
  // End submenu

  addMenuItem(toplevel, file, "Volume &Attributes...",
              SLOT(activate_openvolobject()));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()), "",
              "document-print");
  menu_save_w =
      addMenuItem(toplevel, file, "&Save", SLOT(activate_save()), "CTRL+S",
                  "document-save");
  menu_revert_w =
      addMenuItem(toplevel, file, "&Revert", SLOT(activate_revert()), "",
                  "document-revert");
  addMenuItem(toplevel, file, "&History", SLOT(activate_history()));
  addMenuItem(toplevel, file, "R&evisions", SLOT(activate_revisions()));
  addMenuItem(toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Edit Entry
  QMenu *edit = menu_bar->addMenu(translate_utf8("&Edit"));
  menu_edit_w =
      addMenuItem(toplevel, edit, "&Edit Mode", SLOT(activate_configure()),
                  "CTRL+E");

  // Submenu Search
  QMenu *edit_search = edit->addMenu(translate_utf8("&Search"));
  addMenuItem(toplevel, edit_search, "&Find Object", SLOT(activate_find()),
              "CTRL+F");
  addMenuItem(toplevel, edit_search, "Find &Regular expression",
              SLOT(activate_findregex()));
  addMenuItem(toplevel, edit_search, "Find &Next", SLOT(activate_findnext()),
              "CTRL+SHIFT+F");

  // Submenu CopyMode
  QActionGroup *cm_group = new QActionGroup(toplevel);
  QMenu *edit_cm = edit->addMenu(translate_utf8("&CopyMode"));
  cm_normal_syntax = addMenuRadioItem(toplevel, edit_cm, "&Normal Syntax",
                                      SLOT(activate_selmode()), cm_group);
  cm_gms_syntax =
      addMenuRadioItem(toplevel, edit_cm, "&GMS Syntax", SLOT(activate_selmode()),
                       cm_group);
  cm_extern_syntax = addMenuRadioItem(toplevel, edit_cm, "&Extern Syntax",
                                      SLOT(activate_selmode()), cm_group);
  edit_cm->addSeparator();
  cm_add_volume = addCheckableMenuItem(toplevel, edit_cm, "Add &Volume",
                                       SLOT(activate_selmode(bool)));
  cm_add_attribute = addCheckableMenuItem(toplevel, edit_cm, "&Add Attribute",
                                          SLOT(activate_selmode(bool)));
  cm_add_type = addCheckableMenuItem(toplevel, edit_cm, "Add &Type",
                                     SLOT(activate_selmode(bool)));

  // Submenu Create Object
  QMenu *edit_creaobj = edit->addMenu(translate_utf8("C&reate Object"));
  menu_creaobjafter_w =
      addMenuItem(toplevel, edit_creaobj, "&After", SLOT(activate_creaobjafter()),
                  "CTRL+D");
  menu_creaobjfirst_w = addMenuItem(toplevel, edit_creaobj, "&First Child",
                                    SLOT(activate_creaobjfirst()),
                                    "CTRL+SHIFT+D");

  // Submenu Move Object
  QMenu *edit_moveobj = edit->addMenu(translate_utf8("&Move Object"));
  menu_moveobjup_w =
      addMenuItem(toplevel, edit_moveobj, "&Up", SLOT(activate_moveobjup()),
                  "CTRL+SHIFT+UP");
  menu_moveobjdown_w =
      addMenuItem(toplevel, edit_moveobj, "&Down", SLOT(activate_moveobjdown()),
                  "CTRL+SHIFT+DOWN");
  menu_moveobjinto_w =
      addMenuItem(toplevel, edit_moveobj, "&Into", SLOT(activate_moveobjinto()),
                  "CTRL+SHIFT+RIGHT");
  menu_moveobjontop_w =
      addMenuItem(toplevel, edit_moveobj, "&OnTop", SLOT(activate_moveobjontop()),
                  "CTRL+SHIFT+LEFT");

  menu_deleteobj_w =
      addMenuItem(toplevel, edit, "&Delete Object", SLOT(activate_deleteobj()),
                  "DELETE");
  addMenuItem(toplevel, edit, "Co&llapse", SLOT(activate_collapse()));
  menu_cut_w = addMenuItem(toplevel, edit, "&Cut", SLOT(activate_cut()), "CTRL+X");
  menu_copy_w =
      addMenuItem(toplevel, edit, "&Copy", SLOT(activate_copy()), "CTRL+C");
  menu_copykeep_w =
      addMenuItem(toplevel, edit, "Copy Keep Reference", SLOT(activate_copykeep()));
  menu_paste_w =
      addMenuItem(toplevel, edit, "&Paste", SLOT(activate_paste()), "CTRL+V");
  menu_pasteinto_w =
      addMenuItem(toplevel, edit, "Paste Into", SLOT(activate_pasteinto()),
                  "CTRL+SHIFT+V");
  menu_rename_w = addMenuItem(toplevel, edit, "Rename", SLOT(open_change_name()),
                              "CTRL+SHIFT+N");

  // Functions menu
  QMenu *functions = menu_bar->addMenu(translate_utf8("&Functions"));

  // Submenu Build
  QMenu *functions_build = functions->addMenu(translate_utf8("&Build"));
  menu_buildnode_w = addMenuItem(toplevel, functions_build, "&Build Node",
                                 SLOT(activate_buildnode()), "CTRL+SHIFT+B",
                                 "system-run");
  menu_buildvolume_w = addMenuItem(toplevel, functions_build, "B&uild Volume",
                                   SLOT(activate_buildvolume()));
  menu_buildobject_w = addMenuItem(toplevel, functions_build, "Bu&ild Object",
                                   SLOT(activate_buildobject()));
  menu_buildproject_w = addMenuItem(toplevel, functions_build, "Bui&ld Directories",
                                    SLOT(activate_builddirectories()));
  menu_buildimport_w = addMenuItem(toplevel, functions_build, "&Import",
                                   SLOT(activate_buildimport()));
  menu_buildexport_w = addMenuItem(toplevel, functions_build, "&Export",
                                   SLOT(activate_buildexport()));

  menu_utilities_w =
      addMenuItem(toplevel, functions, "&Utilities...", SLOT(activate_utilities()),
                  "CTRL+U");
  addMenuItem(toplevel, functions, "&Spreadsheet...", SLOT(activate_spreadsheet()));
  menu_distribute_w = addMenuItem(toplevel, functions, "&Distribute...",
                                  SLOT(activate_distribute()));
  addMenuItem(toplevel, functions, "&Open Object...", SLOT(activate_openobject()),
              "CTRL+A");
  menu_openplc_w =
      addMenuItem(toplevel, functions, "Open &Program", SLOT(activate_openplc()),
                  "CTRL+L");
  addMenuItem(toplevel, functions, "Open &Ge...", SLOT(activate_openge()),
              "CTRL+K");
  menu_classeditor_w = addMenuItem(toplevel, functions, "Open &ClassEditor",
                                   SLOT(activate_openclasseditor()));
  menu_updateclasses_w = addMenuItem(toplevel, functions, "U&pdate Classes",
                                     SLOT(activate_updateclasses()));
  addMenuItem(toplevel, functions, "Show C&rossreferences",
              SLOT(activate_showcrossref()), "CTRL+R");
  addMenuItem(toplevel, functions, "S&yntax Check", SLOT(activate_syntax()));
  menu_change_value_w =
      addMenuItem(toplevel, functions, "Change &Value", SLOT(open_change_value()),
                  "CTRL+Q");
  addMenuItem(toplevel, functions, "Co&mmand", SLOT(activate_command()), "CTRL+B");

  // Submenu More
  QMenu *functions_more = functions->addMenu(translate_utf8("&More"));
  menu_clonevolume_w = addMenuItem(toplevel, functions_more, "C&lone Volume",
                                   SLOT(activate_clonevolume()));
  addMenuItem(toplevel, functions_more, "&Backupfile Utility",
              SLOT(activate_backupfile()));

  // View menu
  QMenu *view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
              "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
              "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
              "zoom-original");
  addMenuItem(toplevel, view, "T&wo Windows", SLOT(activate_twowindows()),
              "CTRL+T");
  view_alltoplevel_w = addMenuItem(toplevel, view, "V&iew all toplevel",
              SLOT(activate_set_alltoplevel()));
  addMenuItem(toplevel, view, "&Messages", SLOT(activate_messages()));

  // Options menu
  QMenu *options = menu_bar->addMenu(translate_utf8("&Options"));
  addMenuItem(toplevel, options, "&Settings...", SLOT(activate_view()));
  addMenuItem(toplevel, options, "S&ave Settings", SLOT(activate_savesettings()));
  addMenuItem(toplevel, options, "&Restore Settings", SLOT(activate_restoresettings()));

  // Submenu Script
  QMenu *options_script = options->addMenu(translate_utf8("&Script"));
  addMenuItem(toplevel, options_script, "&Project...", SLOT(activate_scriptproj()));
  addMenuItem(toplevel, options_script, "&Base...", SLOT(activate_scriptbase()));

  // Tools menu
  QMenu *mtools = menu_bar->addMenu(translate_utf8("&Tools"));
  addMenuItem(toplevel, mtools, "&Runtime Monitor", SLOT(activate_rtmon()));
  addMenuItem(toplevel, mtools, "&Supervision Center", SLOT(activate_statusmon()));

  // Menu Help
  QMenu *help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Overview", SLOT(activate_help()), "CTRL+H",
              "system-help");
  addMenuItem(toplevel, help, "&Project", SLOT(activate_help_project()));
  addMenuItem(toplevel, help, "&About Proview", SLOT(activate_help_proview()));

  // Toolbar
  QToolBar *tools = new QToolBar();
  tools_save_w =
      addToolItem(toplevel, tools, "Save", SLOT(activate_save()), "document-save");
  tools_edit_w = addToolItem(toplevel, tools, "Edit", SLOT(activate_configure()),
                             "$pwr_exe/foe_edit.png");

  if (wb_type == wb_eType_ClassEditor || (wbctx && volid && (volclass ==
                                                             pwr_eClass_SharedVolume ||
                                                             volclass ==
                                                             pwr_eClass_SubVolume))) {
    tools_buildnode_w =
        addToolItem(toplevel, tools, "Build Volume", SLOT(activate_buildvolume()),
                    "system-run");
  } else {
    tools_buildnode_w =
        addToolItem(toplevel, tools, "Build Node", SLOT(activate_buildnode()),
                    "system-run");
  }

  addToolItem(toplevel, tools, "Distribute", SLOT(activate_distribute()),
              "$pwr_exe/wpkg_distribute.png");
  addToolItem(toplevel, tools, "Open Program", SLOT(activate_openplc()),
              "$pwr_exe/wtt_program.png");
  addToolItem(toplevel, tools, "Open Ge", SLOT(activate_openge()),
              "$pwr_exe/wtt_ge.png");
  addToolItem(toplevel, tools, "Utilities", SLOT(activate_utilities()),
              "$pwr_exe/wtt_utilities.png");
  addToolItem(toplevel, tools, "Two windows/One window",
              SLOT(activate_twowindows()), "$pwr_exe/wtt_twowindows.png");
  addToolItem(toplevel, tools, "Show Messages", SLOT(activate_messages()),
              "$pwr_exe/wtt_messages.png");
  addToolItem(toplevel, tools, "Options", SLOT(activate_view()),
              "preferences-system");
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
              "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
              "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
              "$pwr_exe/xtt_zoom_reset.png");
  QAction *tools_set_advuser =
      addToolItem(toplevel, tools, "Advanced user", SLOT(activate_set_advuser()),
                  "$pwr_exe/xtt_advuser.png");

  // Vertical palette pane
  palette_paned = new QSplitter(Qt::Horizontal);
  wnav_paned = new QSplitter(Qt::Horizontal);

  Wtt::palette =
      new PalQt(this, palette_paned, "Objects", ldhses, layout_palette,
                &palette_widget, &sts);
  Wtt::palette->set_focus_cb = &Wtt::set_focus_cb;
  Wtt::palette->traverse_focus_cb = &Wtt::traverse_focus;
  Wtt::palette->create_popup_menu_cb = &Wtt::create_pal_popup_menu_cb;
  palette_paned->addWidget(palette_widget);
  add_expanding(palette_paned, wnav_paned);

  wnav = new WNavQt(this, wnav_paned, title_w2, layout_w1, &wnav_brow_widget,
                    ldhses, root_menu, wnav_eWindowType_W1, &sts);
  wnav->message_cb = &Wtt::message_cb;
  wnav->close_cb = &Wtt::close;
  wnav->change_value_cb = &Wtt::change_value;
  wnav->get_wbctx_cb = &Wtt::get_wbctx;
  wnav->attach_volume_cb = &Wtt::attach_volume_cb;
  wnav->detach_volume_cb = &Wtt::detach_volume_cb;
  wnav->get_palette_select_cb = &Wtt::get_palette_select_cb;
  wnav->set_focus_cb = &Wtt::set_focus_cb;
  wnav->traverse_focus_cb = &Wtt::traverse_focus;
  wnav->set_twowindows_cb = &Wtt::set_twowindows_cb;
  wnav->set_configure_cb = &Wtt::configure_cb;
  wnav->gbl_command_cb = &Wtt::gbl_command_cb;
  wnav->create_popup_menu_cb = &Wtt::create_popup_menu_cb;
  wnav->save_cb = &Wtt::save_cb;
  wnav->revert_cb = &Wtt::revert_cb;
  wnav->script_filename_cb = &Wtt::script_filename_cb;
  wnav->format_selection_cb = WttQt::format_selection;
  wnav->get_global_select_cb = Wtt::get_global_select_cb;
  wnav->global_unselect_objid_cb = Wtt::global_unselect_objid_cb;
  wnav->set_window_char_cb = Wtt::set_window_char_cb;
  wnav->open_vsel_cb = Wtt::open_vsel_cb;
  focused_wnav = wnav;
  wnav_mapped = 1;

  wnavnode =
      new WNavQt(this, wnav_paned, title_w2, layout_w2, &wnavnode_brow_widget,
                 ldhses, root_menu, wnav_eWindowType_W2, &sts);
  wnavnode->message_cb = &Wtt::message_cb;
  wnavnode->close_cb = &Wtt::close;
  wnavnode->change_value_cb = &Wtt::change_value;
  wnavnode->get_wbctx_cb = &Wtt::get_wbctx;
  wnavnode->attach_volume_cb = &Wtt::attach_volume_cb;
  wnavnode->detach_volume_cb = &Wtt::detach_volume_cb;
  wnavnode->get_palette_select_cb = &Wtt::get_palette_select_cb;
  wnavnode->set_focus_cb = &Wtt::set_focus_cb;
  wnavnode->traverse_focus_cb = &Wtt::traverse_focus;
  wnavnode->set_twowindows_cb = &Wtt::set_twowindows_cb;
  wnavnode->set_configure_cb = &Wtt::configure_cb;
  wnavnode->gbl_command_cb = &Wtt::gbl_command_cb;
  wnavnode->create_popup_menu_cb = &Wtt::create_popup_menu_cb;
  wnavnode->save_cb = &Wtt::save_cb;
  wnavnode->revert_cb = &Wtt::revert_cb;
  wnavnode->script_filename_cb = &Wtt::script_filename_cb;
  wnavnode->format_selection_cb = WttQt::format_selection;
  wnavnode->get_global_select_cb = Wtt::get_global_select_cb;
  wnavnode->global_unselect_objid_cb = Wtt::global_unselect_objid_cb;
  wnavnode->set_window_char_cb = Wtt::set_window_char_cb;
  wnavnode->open_vsel_cb = Wtt::open_vsel_cb;
  wnavnode_mapped = 1;

  add_expanding(wnav_paned, wnav_brow_widget);
  wnav_paned->addWidget(wnavnode_brow_widget);
  wnav_paned->show();

  // Statusbar and cmd input
  QStatusBar *statusbar = new QStatusBar();
  msg_label = new QLabel("");
  msg_label->setFixedHeight(25);
  cmd_prompt = new QLabel(fl("value > "));
  cmd_prompt->setFixedHeight(25);
  cmd_entry = new CoWowEntryQt(&cmd_recall);
  cmd_entry->set_hide_on_esc(true);
  cmd_entry->setFixedHeight(25);
  QObject::connect(cmd_entry, SIGNAL(editingFinished()), toplevel,
                   SLOT(valchanged_cmd_entry()));
  QObject::connect(cmd_entry, SIGNAL(hidden()), toplevel, SLOT(hide_cmd_entry()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);

  QVBoxLayout *vbox1 = new QVBoxLayout();
  vbox1->addWidget(menu_bar);
  vbox1->addWidget(tools);

  dcli_translate_filename(fname, "$pwr_exe/pwr_logohalf2.png");
  QLabel *wb_image = new_image_label(toplevel, fname);

  QHBoxLayout *hbox1 = new QHBoxLayout();
  hbox1->addLayout(vbox1);
  hbox1->addWidget(wb_image);

  QVBoxLayout *vbox = new QVBoxLayout(toplevel);
  vbox->addLayout(hbox1);
  add_expanding(vbox, palette_paned);
  vbox->addWidget(statusbar);

  toplevel->setLayout(vbox);
  toplevel->show();
  realized = 1;

  if (disable_w2) {
    wnavnode_mapped = 0;
  }

  if (!wnav_mapped) {
    wnav_brow_widget->setVisible(false);
  }
  if (!wnavnode_mapped) {
    wnavnode_brow_widget->setVisible(false);
  }
  twowindows = wnav_mapped && wnavnode_mapped ? 1 : 0;

  if (!editmode) {
    palette_widget->setVisible(false);
  }
  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);
  set_pane_position(wnav_paned, window_width / 2);

  wnav->get_options(&enable_comment, &enable_revisions, &show_class,
                    &show_alias, &show_descrip, &show_objref, &show_objxref,
                    &show_attrref, &show_attrxref, &build_force, &build_debug,
                    &build_crossref, &build_crossref_sim, &build_crossref_graph,
                    &build_manual, &build_nocopy);

  if (wbctx && volid) {
    wnav->volume_attached(wbctx, ldhses, 0);
    wnavnode->volume_attached(wbctx, ldhses, 0);
  }

  if ((wb_type == wb_eType_Directory || wb_type == wb_eType_Volume) && ldhses) {
    // Start configuration wizard if volume is empty
    pwr_tOid oid;

    sts = ldh_GetRootList(ldhses, &oid);
    if (EVEN(sts)) {
      pwr_tCid vcid;

      if (wbctx && volid) {
        sts = ldh_GetVolumeClass(wbctx, volid, &vcid);
        if (vcid == pwr_eClass_RootVolume ||
            vcid == pwr_eClass_DirectoryVolume) {
          wnav->wow
              ->HideWarranty(); // Warranty window is hidden behind the wizard
          set_edit();
          start_wizard(this, vcid);
        }
      }
    }
  }
  if (wnav->gbl.advanced_user) {
    tools_set_advuser->setVisible(false);
  }

  menu_setup();
  update_title();

  if (ODD(revsts) && !rev_info.in_end_of_branch) {
    wnav->wow->DisplayError("Revision",
                            "Revision is not at end o branch.\nNo changes can be made.");
    CoLogin::reduce_privilege(
        pwr_mPrv_DevConfig | pwr_mPrv_DevPlc | pwr_mPrv_DevClass);
  }

  *status = 1;
}

WttQt::~WttQt()
{
  if (close_cb) {
    (close_cb)(this);
  }

  if (selection_timerid) {
    delete selection_timerid;
  }

  wnav->closing_down = 1;
  wnavnode->closing_down = 1;
  if (mcp) {
    free(mcp);
  }
  delete Wtt::palette;

  if (options_form) {
    options_form->close();
  }

  if (!close_cb) {
    exit(0);
  }
}

void WttQt::pop()
{
  ::pop(toplevel);
}

void OptionsDialog::closeEvent(QCloseEvent *event)
{
  wtt->update_options_form();
  QWidget::closeEvent(event);
}

// Callbacks from the options form
void OptionsDialog::activate_options_ok()
{
  wtt->message(' ', "");

  setVisible(false);
  wtt->set_twowindows(0, (int) wtt->show_plant_w->isChecked(),
                      (int) wtt->show_node_w->isChecked());
  wtt->set_options();
}

void OptionsDialog::activate_options_apply()
{
  wtt->message(' ', "");

  wtt->set_twowindows(0, (int) wtt->show_plant_w->isChecked(),
                      (int) wtt->show_node_w->isChecked());
  wtt->set_options();
}

void OptionsDialog::activate_options_cancel()
{
  wtt->message(' ', "");
  wtt->update_options_form();
}

OptionsDialog::OptionsDialog(WttQt *parent_ctx, QWidget *parent)
    : QDialog(parent), wtt(parent_ctx)
{
  setMinimumSize(650, 450);
  setWindowTitle(fl("Options"));
  setAttribute(Qt::WA_DeleteOnClose);

  QLabel *hier_label = new QLabel(fl("Hierarchy"), this);
  wtt->enable_comment_w = new QCheckBox(fl("Enable Comment"), this);
  wtt->enable_revisions_w = new QCheckBox(fl("Enable Revisions"), this);
  wtt->show_plant_w = new QCheckBox(fl("Plant Configuration"), this);
  wtt->show_node_w = new QCheckBox(fl("Node Configuration"), this);

  QVBoxLayout *hier_vbox = new QVBoxLayout(this);
  hier_vbox->addWidget(hier_label);
  hier_vbox->addWidget(wtt->enable_comment_w);
  hier_vbox->addWidget(wtt->enable_revisions_w);
  hier_vbox->addWidget(wtt->show_plant_w);
  hier_vbox->addWidget(wtt->show_node_w);

  QLabel *entry_label = new QLabel(fl("Entry"), this);
  wtt->show_class_w = new QCheckBox(fl("Class"), this);
  wtt->show_alias_w = new QCheckBox(fl("Alias"), this);
  wtt->show_descrip_w = new QCheckBox(fl("Description"), this);
  wtt->show_objref_w = new QCheckBox(fl("Object Reference"), this);
  wtt->show_objxref_w = new QCheckBox(fl("Object Cross Reference"), this);
  wtt->show_attrref_w = new QCheckBox(fl("Attribute Reference"), this);
  wtt->show_attrxref_w = new QCheckBox(fl("Attribute Cross Reference"), this);

  QVBoxLayout *entry_vbox = new QVBoxLayout(this);
  entry_vbox->addWidget(entry_label);
  entry_vbox->addWidget(wtt->show_class_w);
  entry_vbox->addWidget(wtt->show_alias_w);
  entry_vbox->addWidget(wtt->show_descrip_w);
  entry_vbox->addWidget(wtt->show_objref_w);
  entry_vbox->addWidget(wtt->show_objxref_w);
  entry_vbox->addWidget(wtt->show_attrref_w);
  entry_vbox->addWidget(wtt->show_attrxref_w);

  QLabel *build_label = new QLabel(fl("Build"), this);
  wtt->build_force_w = new QCheckBox(fl("Force"), this);
  wtt->build_debug_w = new QCheckBox(fl("Debug"), this);
  wtt->build_crossref_w = new QCheckBox(fl("Crossreference"), this);
  wtt->build_crossrefsim_w = new QCheckBox(fl("      Simulation"), this);
  wtt->build_crossrefgraph_w = new QCheckBox(fl("      Graph"), this);
  wtt->build_manual_w = new QCheckBox(fl("Manual"), this);
  wtt->build_nocopy_w = new QCheckBox(fl("Disable Copy"), this);

  QVBoxLayout *build_vbox = new QVBoxLayout(this);
  build_vbox->addWidget(build_label);
  build_vbox->addWidget(wtt->build_force_w);
  build_vbox->addWidget(wtt->build_debug_w);
  build_vbox->addWidget(wtt->build_crossref_w);
  build_vbox->addWidget(wtt->build_crossrefsim_w);
  build_vbox->addWidget(wtt->build_crossrefgraph_w);
  build_vbox->addWidget(wtt->build_manual_w);
  build_vbox->addWidget(wtt->build_nocopy_w);

  QHBoxLayout *hbox = new QHBoxLayout(this);
  hbox->addLayout(hier_vbox);
  hbox->addWidget(separator(QFrame::VLine));
  hbox->addLayout(entry_vbox);
  hbox->addWidget(separator(QFrame::VLine));
  hbox->addLayout(build_vbox);

  QDialogButtonBox *buttons = new QDialogButtonBox(this);
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Apply);
  buttons->addButton(QDialogButtonBox::Cancel);
  buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
  buttons->button(QDialogButtonBox::Apply)->setFixedSize(70, 25);
  buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
  connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()), this,
          SLOT(activate_options_ok()));
  connect(buttons->button(QDialogButtonBox::Apply), SIGNAL(clicked()), this,
          SLOT(activate_options_apply()));
  connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()), this,
          SLOT(activate_options_cancel()));

  QVBoxLayout *vbox = new QVBoxLayout(this);
  add_expanding(vbox, hbox);
  vbox->addWidget(separator(QFrame::HLine));
  vbox->addWidget(buttons);

  setLayout(vbox);
  show();
}

void WttQt::create_options_dialog()
{
  if (options_form) {
    options_form->setVisible(true);
    return;
  }

  // Create the options dialog
  options_form = new OptionsDialog(this, toplevel);
}

QMenu *WttQt::build_menu()
{
  return build_submenu(MENU_POPUP, "", SLOT(popup_button_cb()),
                       (ldh_sMenuItem *) mcp->ItemList, 0);
}

QMenu *WttQt::build_submenu(int MenuType, const char *MenuTitle,
                            const char *Callback, ldh_sMenuItem *Items, int idx)
{
  QMenu *menu = new QMenu(toplevel);

  unsigned int Level = Items[idx].Level;

  for (; Items[idx].Level != 0 && Items[idx].Level >= Level; idx++) {
    if (Items[idx].Disabled) {
      continue;
    }

    if (Items[idx].Item == ldh_eMenuItem_Cascade) {
      QMenu *sub = menu->addMenu(fl(Items[idx].Name));
      QMenu *w = build_submenu(MENU_PULLDOWN, Items[idx].Name, Callback, Items,
                               idx + 1);
      sub->addMenu(w);
    } else {
      if (Items[idx].Item == ldh_eMenuItem_Separator) {
        // Separator
        menu->addSeparator();
      } else {
        // Pushbutton
        QAction *w = menu->addAction(fl(Items[idx].Name));
        w->setEnabled(Items[idx].Flags.f.Sensitive ? true : false);
        w->setData(idx);
        if (Callback) {
          QObject::connect(w, SIGNAL(triggered()), toplevel, Callback);
        }
      }
    }
  }

  return menu;
}

void WttQtWidget::popup_button_cb()
{
  wtt->mcp->ChosenItem = ((QAction *) sender())->data().toInt();
  wtt->set_clock_cursor();
  pwr_tStatus sts = ldh_CallMenuMethod(wtt->mcp, wtt->mcp->ChosenItem);
  if (EVEN(sts)) {
    wtt->message('E', wnav_get_message(sts));
  }
  wtt->reset_cursor();
}

void WttQt::disable_focus()
{
  focustimer.disable(400);
  focustimer.disabled();
}

void WttQt::update_title()
{
  CoWowQt::update_title(toplevel, editmode);
}