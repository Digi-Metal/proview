/** 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2012 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 **/

/* wb_bckw.cpp -- Backupfile display window */

#include "glow_std.h"

#include <stdio.h>
#include <stdlib.h>

#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"

#include "co_lng.h"
#include "cow_xhelp.h"
#include "cow_wow.h"
#include "wb_ldh.h"
#include "wb_bckw.h"


WbBckW::WbBckW(
	void *l_parent_ctx,
	ldh_tSesContext l_ldhses,
	const char *bckw_name,
	wb_bck_list *l_list,
	int l_editmode,
	pwr_tStatus *status) :
  parent_ctx(l_parent_ctx), ldhses(l_ldhses), bckwnav(NULL),
  size(0), max_size(500), list(l_list), editmode(l_editmode), wow(0)
{
  *status = 1;
  strcpy( name, bckw_name);
}

WbBckW::~WbBckW() { 
  if ( list) 
    delete list;
}

void WbBckW::show()
{
  bckwnav->show();
}

void WbBckW::activate_transfer_wb() 
{ 
  wow->DisplayQuestion( this, "Transfer to database", 
			"Do you want to transfer the marked values to database",
			transfer_wb_ok, 0, 0);
}

void WbBckW::transfer_wb_ok( void *ctx, void *data)
{
  WbBckW *bckw = (WbBckW *)ctx;

  bckw->bckwnav->transfer_wb();
}

void WbBckW::activate_filter() 
{ 
  wow->CreateInputDialog( this, "Filter", "Enter hierarchy",
			  filter_cb, 0, 40, 0, 0);
}

void WbBckW::filter_cb( void *ctx, void *data, char *text)
{
  WbBckW *bckw = (WbBckW *)ctx;
  pwr_tStatus sts;

  sts = bckw->bckwnav->filter( text);
  if ( EVEN(sts)) 
    bckw->wow->DisplayError( "Error Message", "Hierarchy not found");
}

void WbBckW::activate_open() 
{ 
  wow->CreateFileSelDia( "Backup File Selection", (void *)this,
			 file_selected_cb, wow_eFileSelType_Backup);
}

void WbBckW::file_selected_cb( void *ctx, char *filename, wow_eFileSelType file_type)
{
  WbBckW *bckw = (WbBckW *)ctx;
  pwr_tStatus sts;

  printf( "File : %s\n", filename);

  wb_bck_list *slist = new wb_bck_list( bckw->ldhses, filename);

  sts = slist->read();
  if ( EVEN(sts)) {    
    return;
  }

  bckw->bckwnav->clear();
  if ( bckw->list)
    delete bckw->list;

  bckw->list = bckw->bckwnav->list = slist;

  bckw->bckwnav->show();
  bckw->set_title( filename);
}

void WbBckW::activate_diff() 
{ 
  if ( !list)
    return;

  wow->CreateFileSelDia( "Backup File Selection", (void *)this,
			 diff_file_selected_cb, wow_eFileSelType_Backup);
}

void WbBckW::diff_file_selected_cb( void *ctx, char *filename, wow_eFileSelType file_type)
{
  WbBckW *bckw = (WbBckW *)ctx;
  pwr_tStatus sts;

  printf( "File : %s\n", filename);

  if ( !bckw->list)
    return;

  wb_bck_list *dlist = new wb_bck_list( bckw->ldhses, filename);

  sts = dlist->read();
  if ( EVEN(sts)) {    
    bckw->wow->DisplayError( "Error Message", "Read error");
    return;
  }

  wb_bck_list *outlist = new wb_bck_list( bckw->ldhses,  (char *)"Difference list");

  sts = bckw->list->diff( dlist, outlist);

  bckw->bckwnav->clear();

  delete bckw->list;
  delete dlist;

  bckw->list = bckw->bckwnav->list = outlist;

  bckw->bckwnav->show();
  bckw->set_title( (char *)"File Difference");

}

void WbBckW::activate_diff_wb() 
{ 
  pwr_tStatus sts;

  if ( !list)
    return;

  wb_bck_list *listdb = new wb_bck_list( ldhses, (char *)"Workbench");

  sts = listdb->read_db( list);
  if ( EVEN(sts)) {    
    bckw->wow->DisplayError( "Error Message", "Read error");
    return;
  }

  wb_bck_list *outlist = new wb_bck_list( ldhses,  (char *)"Difference list");

  sts = list->diff( listdb, outlist);

  bckwnav->clear();

  delete list;
  delete listdb;

  list = bckwnav->list = outlist;

  bckwnav->show();

  set_title( (char *)"Database Difference");
}



