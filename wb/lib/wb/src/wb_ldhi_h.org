#ifndef wb_ldhi_h
#define wb_ldhi_h

/* wb_ldhi.h -- <short description>

   PROVIEW/R
   Copyright (C) 1991-1996 by Comator Process AB.

   This include file contains the basic datastructures and
   data entities internal to LDH.

   This include file allso defines the entry points to ldhi, the
   internal ldh routines.  */

#ifndef __STDIO_LOADED
#include <stdio.h>
#endif

#ifndef __TIME_LOADED
#include <time.h>
#endif

#ifndef pwr_h
#include "pwr.h"
#endif

#ifndef pwr_class_h
#include "pwr_class.h"
#endif

#ifndef rt_load_h
#include "rt_load.h"
#endif

#ifndef wb_ldh_h
#include "wb_ldh.h"
#endif

#ifndef wb_ldh_tree_h
#include "wb_ldh_tree.h"
#endif

#define ldhi_cSizBody 65508
#define ldhi_cSizDbName	80
#define ldhi_cMaxUserOix 2147483647

#define ldhi_cAlignInc 3
#define ldhi_dAlign(size) ((size + ldhi_cAlignInc) & ~ldhi_cAlignInc)


typedef struct ldhi_s_NormName		ldhi_sNormName;
typedef struct ldhi_s_RefEntry		ldhi_sRefEntry;
typedef struct ldhi_s_RefTable		ldhi_sRefTable;
typedef struct ldhi_s_ObjName		ldhi_sObjName;
typedef struct ldhi_s_ObjBody		ldhi_sObjBody;
typedef struct ldhi_s_ObjLink		ldhi_sObjLink;
typedef struct ldhi_s_OixEntry		ldhi_sOixEntry;
typedef struct ldhi_s_OctxEntry		ldhi_sOctxEntry;
typedef struct ldhi_s_VidEntry		ldhi_sVidEntry;
typedef struct ldhi_s_ObjDbHead		ldhi_sObjDbHead;
typedef struct ldhi_s_Binding		ldhi_sBinding;
typedef struct ldhi_s_ObjHead		ldhi_sObjHead;
typedef struct ldhi_s_SesContext	ldhi_sSesContext;
typedef struct ldhi_s_WBContext		ldhi_sWBContext;
typedef struct ldhi_s_VolHead		ldhi_sVolHead;
typedef struct ldhi_s_VolContext	ldhi_sVolContext;
typedef struct ldhi_s_LFCB		ldhi_sLFCB;
typedef struct ldhi_s_LSCB		ldhi_sLSCB;
typedef struct ldhi_s_LCB		ldhi_sLCB;
typedef struct ldhi_s_FreeOix		ldhi_sFreeOix;

typedef char ldhi_tDbName[ldhi_cSizDbName+1];
typedef unsigned long ldhi_tLockSts;
typedef pwr_tStatus (*ldhi_tSesEventCB)(
    void *EditorContext,
    ldh_sEvent *Event
  );

typedef enum {
  ldhi_eDbCallBack__ = 0,
  ldhi_eDbCallBack_AnteCreate,
  ldhi_eDbCallBack_PostCreate,
  ldhi_eDbCallBack_AnteDelete,
  ldhi_eDbCallBack_PostDelete,
  ldhi_eDbCallBack_AnteMove,
  ldhi_eDbCallBack_PostMove,
  ldhi_eDbCallBack_AnteRename,
  ldhi_eDbCallBack_PostRename,
  ldhi_eDbCallBack_AnteAdopt,
  ldhi_eDbCallBack_PostAdopt,
  ldhi_eDbCallBack_AnteUnadopt,
  ldhi_eDbCallBack_PostUnadopt,
  ldhi_eDbCallBack_AnteUpdate,
  ldhi_eDbCallBack_PostUpdate,
  ldhi_eDbCallBack_SyntaxCheck,
  ldhi_eDbCallBack_
} ldhi_eDbCallBack;

typedef union {
  struct {
    pwr_tBit IsCreated : 1;		/* Object is created */
    pwr_tBit IsDeleted : 1;		/* Object is deleted */
    pwr_tBit IsMoved : 1;		/* Object is moved */
    pwr_tBit IsRenamed : 1;		/* Object is renamed */
    pwr_tBit BrotherIsNew : 1;		/* Object has new brother */
    pwr_tBit RBodyIsModified :1;	/* Runtime body is changed */
    pwr_tBit DBodyIsModified :1;	/* Development body is changed */
    pwr_tBit FlagsAreModified : 1;	/* Object flags are changed */
    pwr_tBit FatherIsNew : 1;		/* Object has new brother */
    pwr_tBit IsTouched : 1;		/* Object has been touched but must
					   not necessarily be saved. */
  } f;

  pwr_tBitMask	m;

#define ldhi_mChange_IsCreated		  1
#define ldhi_mChange_IsDeleted		  2
#define ldhi_mChange_IsMoved		  4
#define ldhi_mChange_IsRenamed		  8
#define ldhi_mChange_BrotherIsNew	 16
#define ldhi_mChange_RBodyIsModified     32
#define ldhi_mChange_DBodyIsModified     64
#define ldhi_mChange_FlagsAreModified   128
#define ldhi_mChange_FatherIsNew	256
#define ldhi_mChange_IsTouched		512
#define ldhi_mChange_Created		(1 | 4 | 8 | 16 | 32 | 64 | 128 | 256)
#define ldhi_mChange_HeadIsModified	(4 | 8 | 16 | 128)
#define ldhi_mChange_BodyIsModified	(32 | 64)
#define ldhi_mChange_RtHeadIsModified	(1 | 8 | 256)
} ldhi_mChange;

typedef union {
  struct {
    pwr_tBit CanBeLoaded : 1;
    pwr_tBit Load : 1;
    pwr_tBit HeadIsInOldFile : 1;
    pwr_tBit UseOldBody : 1;
    pwr_tBit LoadBody : 1;
    pwr_tBit FreeBody : 1;
    pwr_tBit OldBodyIsWritten : 1;
    pwr_tBit MountClean : 1;
  } f;

  pwr_tBitMask m;

#define ldhi_mLoad_CanBeLoaded		1
#define ldhi_mLoad_Load			2
#define ldhi_mLoad_HeadIsInOldFile	4
#define ldhi_mLoad_UseOldBody		8
#define ldhi_mLoad_LoadBody		16
#define ldhi_mLoad_FreeBody		32
#define ldhi_mLoad_OldBodyIsWritten	64
#define ldhi_mLoad_MountClean		128
} ldhi_mLoad;

typedef union {
  struct {
    pwr_tBit		Load		: 1;
    pwr_tBit		CreateNewFile	: 1;
    pwr_tBit		UseOldFile	: 1;
    pwr_tBit		Debug		: 1;
  } f;

  pwr_tBitMask m;

#define ldhi_mLSCB_Load		    1
#define ldhi_mLSCB_CreateNewFile    2
#define ldhi_mLSCB_UseOldFile	    4
#define ldhi_mLSCB_Debug	    8
} ldhi_mLSCB;

typedef enum {
  ldhi_eBid__ = -1,
  ldhi_eBid_RtBody = 0,
  ldhi_eBid_SysBody = 0,
  ldhi_eBid_DevBody = 1,
  ldhi_eBid_NoBody = 2,
  ldhi_eBid_
} ldhi_eBid;

/* A name packed to 4 bytes. */

typedef union {
  pwr_tUInt32		key;
  struct {
    pwr_tUInt16		len;		/* Size of name. */
    char		first;		/* First char of name. */
    char		last;		/* Last char of name. */
  } cont;				
} ldhi_uPackName;

struct ldhi_s_NormName {
  char			*username;	/* User-provided name string */
  char			*namebuf;	/* Buffer containing our string info (malloced) */
  char			*volume;	/* Volume pointer */
  char			*object;
  char			*body;
  pwr_tObjid		parent;		/* Parent objid, or NOBJID */
  char			*parstr;	/* Parameter pointer */
  pwr_tUInt32		index;		/* Index if positive */
  pwr_tUInt32		offset;
  pwr_tUInt32		size;
  pwr_tUInt32		nseg;		/* # of segments in name */
  char			*seg[1];	/* start of each segment. Terminated with an extra NULL entry, i.e. nseg+1 slots needed */
};

#define	ldhi_mNormName_NoPath	1	/* Suppress parent info */
#define	ldhi_mNormName_NoAttr	2	/* Suppress parameter info */
#define	ldhi_mNormName_NoIndex	4	/* Suppress parameter index info */
#define	ldhi_mNormName_NoVolume	8	/* Suppress volume */

#if 0
struct ldhi_s_IdName {
  char			*username;	/* User-provided name string */
  char			*namebuf;	/* Buffer containing our string info (malloced) */
  char			idtype;		/* A, C, O, T, V, X */
  char			*volume;
  char			*body;
  char			*attr;
  pwr_tInt32		index;		/* Index if positive */
  pwr_tUInt32		nseg;		/* # of segments in name */
  char			*seg[1];	/* start of each segment. Terminated with an extra NULL entry, i.e. nseg+1 slots needed */
};
#endif

struct ldhi_s_RefEntry {
  ldh_sTreeNode		TreeNode;
  pwr_tObjid		OldObject;
  ldhi_sObjHead		*oohp;
  pwr_tObjid		NewObject;
  ldhi_sObjHead		*nohp;
};

struct ldhi_s_RefTable {
  ldh_sTree		*tp;		/* Reference table root */
};

struct ldhi_s_ObjName {
  pwr_tUInt16		len;
  pwr_tObjName		data;
  ldhi_uPackName	packname;
};

struct ldhi_s_ObjBody {
  pwr_tUInt32		size;		/* Body size. */
  char			*body;		/* Pointer to body. */
  int			exist;
};

struct ldhi_s_ObjLink {
  ldhi_sObjHead		*fwhp;		/* Pointer to forward header. */
  ldhi_sObjHead		*bwhp;		/* Pointer to backward header. */
};

struct ldhi_s_OixEntry {
  ldh_sTreeNode		TreeNode;
  pwr_tObjectIx		oix;
  ldhi_sObjHead		*ohp;
};

struct ldhi_s_OctxEntry {
  ldh_sTreeNode		TreeNode;
  ldh_sObjContext	octx;
};

struct ldhi_s_VidEntry {
  ldh_sTreeNode		TreeNode;
  pwr_tVolumeId		vid;
  ldhi_sVolHead		*vhp;
};

struct ldhi_s_ObjDbHead {
  pwr_tObjid		objid;
  pwr_tClassId		class;
  ldhi_sObjName		name;		/* Name of object segment */
  ldhi_sObjName		normname;	/* Name of object segment */
  pwr_tObjid		father;
  pwr_tObjid		bwsoid;		/* Previous object among siblings. */
  pwr_tObjid		fwsoid;		/* Next object among siblings. */
  pwr_tGeneration	rh_gen;		/* Runtime header generation */
  pwr_tGeneration	dh_gen;
  pwr_tGeneration	b_gen[2];
  pwr_tUInt32		b_siz[2];
  pwr_mClassDef		flags;
  char			dbkey[8];	/* DBKEY to object */
};

struct ldhi_s_Binding {
  ldh_sTreeNode		TreeNode;
  pwr_tString80		MethodName;
  pwr_tStatus		(*Method)();
};

struct ldhi_s_ObjHead {
  ldhi_sObjHead		*hdlst;		/* Next head in database headlist. */
  ldhi_mChange		change;		/* Object change mask. */
  ldhi_sObjDbHead	db;		/* Reflects the current state of the object. */
  ldhi_sObjDbHead	dbcpy;		/* Reflects the database state of the object. */
  ldhi_sVolHead		*vhp;
  ldhi_sObjHead		*fahp;		/* Pointer to objhd of father or NULL */
  ldhi_sObjHead		*chhp;		/* Pointer to objhd of first child or NULL */
  ldhi_sObjHead		*tmphp;		/* If ClassDef, pointer to template objhd. */
  ldhi_sObjHead		*chp;		/* Pointer to class objhd. */
  ldhi_sObjLink		silst;		/* Sibling list. */
  ldhi_sObjBody		body[2];	/* List of all bodies owned by object. */

  ldhi_mLoad		load;		/* Object load flags. */
  pwr_tStatus		(*DbCallBack[ldhi_eDbCallBack_])();
};

struct ldhi_s_SesContext {
  clock_t		time;
  ldhi_sSesContext	*seslst;	/* List of sessions. */
  ldhi_sWBContext	*wb;
  ldhi_sVolHead		*vhp;
  ldhi_sVolContext	*volctx;
  ldh_sTree		*oixtab;	/* Table of modified objects */
  ldh_sTree		*octxtab;	/* Table of object contexts */
  ldh_eAccess		Access;
  ldh_eUtility		Utility;
  ldh_sEvent		*fep;
  ldh_sEvent		*lep;
  void			*EditorContext;
  ldhi_tSesEventCB	SendThisSession;
  ldhi_tSesEventCB	SendOtherSession;
};

struct ldhi_s_WBContext {
  ldh_sTree		*vidtab;	/* Volume table */
#if 0
  ldhi_sObjTree		*treeroot;	/* Root to tree of volumes,  */
  ldhi_sObjHead		*rootlst;	/* List of root volume objects.  */
#endif
  ldh_sTree		*bindtab;	/* Binding table.  */
  ldhi_tDbName		wbname;
  ldhi_sObjHead		*hdlst;		/* List of all heads to be read/written to DB.  */
  ldhi_sObjBody		*bdlst;		/* List of all bodies to be read/written to DB.  */
  ldh_sEvent		*fep;		/* First free event */
  ldh_sEvent		*lep;		/* Last free event */
};

struct ldhi_s_FreeOix {
  pwr_tObjectIx		next;
  pwr_tObjectIx		high;
};

struct ldhi_s_VolHead {
  pwr_tVolumeId		vid;
  ldh_sTree		*oixtab;	/* Oix table of volume.  */
  ldhi_sObjHead		*ohp;		/* Root volume object header.  */
  ldhi_sVolContext	*volctx;	/* Attached volume context.  */
  ldhi_sFreeOix		freeOix;
};

struct ldhi_s_VolContext {
  ldhi_sVolHead		*vhp;		/* Volume of this attachment.  */
  ldhi_sObjHead		*hdlst;		/* List of all heads to be read/written to DB. */
  ldhi_sObjBody		*bdlst;		/* List of all bodies to be read/written to DB. */
  ldhi_sWBContext	*wb;
  ldhi_sSesContext	*Utility[ldh_eUtility_];	/* Session lists */
};

extern struct ldhi_s_WBContext ldhi_gWB;

struct ldhi_s_LFCB {			/* Load File Control Block */
  FILE			*fp;		/* File pointer */
  char			Name[100];	/* Name of load file */
  load_sHead		Head;		/* Section header */
  fpos_t		SectPos;	/* Section position in file */
  fpos_t		IdentSectPos;	/* Identity Section position in file */
  pwr_tBoolean		New;		/* True if new load file, else false */
};

struct ldhi_s_LCB {			/* Load Control Block.  */
  ldhi_sSesContext	*sp;		/* Session context.  */
  ldhi_sObjHead		*ohp;		/* Volume object header.  */
  pwr_uVolume		*Volume;
  pwr_tVolumeId		vid;
  pwr_tObjid		oid;
  pwr_tClassId		cid;
  pwr_tTime		Time;
  pwr_tUInt32		NofNodes;
  ldhi_mLSCB		Flags;
  pwr_tProjVersion	Version;
  pwr_tUInt32		Cardinality;
  pwr_tUInt32		BodySize;
  load_eFile		File;
#if 0
  char			Name[256];	/* Name of load set */
#endif
  ldhi_sLFCB		OldFile;
  ldhi_sLFCB		NewFile;

};


/*============================================================================*\
  Function prototypes to exported functions.
\*============================================================================*/

pwr_tStatus
ldhi_AllocNormName (
  pwr_tObjid		parent,
  char			*instr,
  ldhi_sNormName	**nname
);

pwr_tStatus
ldhi_BindMethod (
  char			*ClassName,
  char			*MethodName,
  pwr_tStatus		(*Entry)()
);

pwr_tStatus
ldhi_BodyNameToBid (
  char			*name,
  ldhi_eBid		*bid
);

pwr_tStatus
ldhi_ConnectObject (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp
);

pwr_tStatus
ldhi_CopyObjectBody (
  ldhi_sSesContext	*sesctx,
  ldhi_sObjHead		*ohp,
  ldhi_sObjHead		*shp,
  ldhi_sObjHead		*clbhp
);

pwr_tStatus
ldhi_CopyObjectFamily (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*oohp,
  ldhi_sObjHead		**nohp,
  ldhi_sRefTable	*rtp,
  int			istop
);

pwr_tStatus
ldhi_CreateObjectBody (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp,
  ldhi_sObjHead		*clbhp
);

pwr_tStatus
ldhi_DeleteObjectTree (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp
);

pwr_tStatus
ldhi_EvalClassDef (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*chp
);

pwr_tStatus
ldhi_EvalObjectBodyDef (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*obhp
);

pwr_tStatus
ldhi_EvalParamDef (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*php,
  int			offset,
  int			*csize,
  int			index
);

ldhi_eDbCallBack
ldhi_FindDbCallBack (
  pwr_tString32		Name
);

pwr_tStatus
ldhi_FindSiblingByName (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp,
  ldhi_sObjName		*nn,
  ldhi_sObjHead		**shp
);

pwr_tStatus
ldhi_FixObjectReferences (
  ldhi_sSesContext *sp,
  ldhi_sObjHead *ohp,
  ldhi_sObjHead *fphp,
  ldhi_sRefTable *rtp,
  ldhi_sRefEntry *irep,
  void *bp,
  pwr_tUInt32 Offset
);

void
ldhi_FreeNormName (
  ldhi_sNormName	*nname
);

pwr_tStatus
ldhi_FreeObjectBodies (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp
);

pwr_tStatus
ldhi_GetObjectBody (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp,
  ldhi_eBid		bid,
  ldhi_sObjBody		**obp
);

pwr_tStatus
ldhi_GetUniqueOix (
  ldhi_sSesContext	*sp,
  pwr_tObjectIx		*oix
);

pwr_tStatus
ldhi_GetUniqueObjectName (
  ldhi_sSesContext	*sp,
  pwr_tObjectIx		oix,
  char			*name
);

pwr_tStatus
ldhi_AdoptObject (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp,		/* Object head to be inserted. */
  ldhi_sObjHead		*dhp,		/* Object head of destination. */
  ldh_eDest		dest
);

pwr_tStatus
ldhi_MapAttribute (
  ldhi_sSesContext	*sp,
  pwr_sAttrRef		*AttrRef,
  void			**ap
);

pwr_tStatus
ldhi_MarkObject (
  ldhi_sSesContext	*sp,
  pwr_tBitMask		change,
  ldhi_sObjHead		*ohp
);

pwr_tStatus
ldhi_MarkObjectAsSaved (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp
);

pwr_tStatus
ldhi_MarkObjectForSave (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp
);

pwr_tStatus
ldhi_NormNamePretty (
  ldhi_sNormName	*nn,
  pwr_tUInt32		attr,
  char			*namebuf,
  pwr_tInt32		namebuflen
);

pwr_tStatus
ldhi_NormNamePrettylen (
  ldhi_sNormName	*nn,
  pwr_tUInt32		attr
);

pwr_tStatus
ldhi_SetNormObjName (
  ldhi_sObjName		*nn,
  char			*name
);

pwr_tStatus
ldhi_NormalizePathName (
  char			*outbuf,
  char			*instr,
  long			bufsiz
);

pwr_tStatus
ldhi_ObjidToOh (
  ldhi_sWBContext	*wb,
  pwr_tObjid		objid,
  ldhi_sObjHead		**objhdp
);

pwr_tStatus
ldhi_RemoveObjhd (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp,
  int			mark
);

pwr_tStatus
ldhi_RevertObject (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp
);

pwr_tStatus
ldhi_SetObjName (
  ldhi_sObjName		*nn,
  char			*name
);

pwr_tStatus
ldhi_UnadoptObject (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp,
  int			mark
);

pwr_tStatus
ldhi_UnNatObjectName (
  char			*outbuf,
  char			*instr,
  unsigned long int	bufsiz
);

pwr_tStatus
ldhi_StringToObjid (
  char			*s,
  pwr_tObjid		*oid
);

char *
ldhi_TrimName (
  char			*name
);

pwr_tStatus
ldhi_VolumeNameToOh (
  ldhi_sSesContext	*sp,
  char			*name,
  ldhi_sObjHead		**ohp
);

char *
ldhi_ArefToAname (
  ldhi_sSesContext	*sp,
  ldhi_sObjHead		*ohp,
  pwr_sAttrRef		*arp
);

char *
ldhi_PathName (
  ldhi_sObjHead		*ohp,
  int			volume
);

ldhi_sObjHead *
ldhi_AllocObjHead (
			void
);

void
ldhi_FreeObjHead (
  ldhi_sObjHead		*ohp
);

ldhi_sVolHead *
ldhi_AllocVolHead (
			void
);

void
ldhi_FreeVolHead (
  ldhi_sVolHead		*vhp
);

pwr_tStatus
ldhi_AssignOix (
  ldhi_sSesContext	*sp,
  pwr_tObjectIx		*oix,
  pwr_tClassId		cid,
  ldhi_sObjHead		*chp,
  ldhi_sObjHead		*fhp,	/* Father object header.  */
  char			*name
);
#endif
