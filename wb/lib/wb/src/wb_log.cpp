/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2012 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 **/


#include <iostream>
#include <fstream>
#include <stdio.h>

#include "pwr.h"
#include "co_time.h"
#include "cow_log.h"
#include "co_time.h"
#include "wb_session.h"
#include "wb_object.h"
#include "wb_utl_api.h"
#include "wb_log.h"
#include "wb_wnav_msg.h"

typedef struct {
  vector<string> v;
} log_sCbCtx;


void wb_log::log( wlog_eCategory category, const char *str, const char *comment, unsigned int opt)
{  
  char category_str[40];

  category_to_string(category, category_str);

  CoLog::dlog( category_str, str, comment, opt);
}

void wb_log::log( wb_session *session, wlog_eCategory category, pwr_tVid vid, unsigned int opt)
{
  pwr_tOid oid;
  oid.oix = 0;
  oid.vid = vid;
  wb_object o = session->object( oid);

  log( category, o.name(), 0, opt);
}

void wb_log::log( wb_session *session, wlog_eCategory category, pwr_tOid oid, unsigned int opt)
{
  wb_object o = session->object( oid);

  log( category, o.longName().c_str(), 0, opt);
}

void wb_log::log( wb_session *session, wlog_eCategory category, pwr_tAttrRef aref, unsigned int opt)
{
#if 0
  wb_object o = session->object( oid);

  log( category, o.longName().c_str(), 0, opt);
#endif
}

void wb_log::category_to_string( wlog_eCategory category, char *str)
{
  switch ( category) {
  case wlog_eCategory_WbLogin:
    strcpy( str, "WbLogin");
    break;
  case wlog_eCategory_ConfiguratorSave:
    strcpy( str, "ConfigSave");
    break;
  case wlog_eCategory_PlcSave:
    strcpy( str, "PlcSave");
    break;
  case wlog_eCategory_GeSave:
    strcpy( str, "GeSave");
    break;
  case wlog_eCategory_PlcBuild:
    strcpy( str, "PlcBuild");
    break;
  case wlog_eCategory_GeBuild:
    strcpy( str, "GeBuild");
    break;
  case wlog_eCategory_VolumeBuild:
    strcpy( str, "VolumeBuild");
    break;
  case wlog_eCategory_NodeBuild:
    strcpy( str, "NodeBuild");
    break;
  case wlog_eCategory_CreatePackage:
    strcpy( str, "CreatePackage");
    break;
  case wlog_eCategory_CopyPackage:
    strcpy( str, "CopyPackage");
    break;
  case wlog_eCategory_GeExport:
    strcpy( str, "GeExport");
    break;
  case wlog_eCategory_UpdateClasses:
    strcpy( str, "UpdateClasses");
    break;
  case wlog_eCategory_WbLoad:
    strcpy( str, "WbLoad");
    break;
  case wlog_eCategory_VolumeClone:
    strcpy( str, "VolumeClone");
    break;
  default:
    strcpy( str, "");
  }
}

void wb_log::string_to_category( char *str, wlog_eCategory *category)
{
  if ( strcmp( str, "WbLogin") == 0)
    *category = wlog_eCategory_WbLogin;
  else if ( strcmp( str, "ConfigSave") == 0)
    *category = wlog_eCategory_ConfiguratorSave;
  else if ( strcmp( str, "PlcSave") == 0)
    *category = wlog_eCategory_PlcSave;
  else if ( strcmp( str, "GeSave") == 0)
    *category = wlog_eCategory_GeSave;
  else if ( strcmp( str, "PlcBuild") == 0)
    *category = wlog_eCategory_PlcBuild;
  else if ( strcmp( str, "GeBuild") == 0)
    *category = wlog_eCategory_GeBuild;
  else if ( strcmp( str, "VolumeBuild") == 0)
    *category = wlog_eCategory_VolumeBuild;
  else if ( strcmp( str, "NodeBuild") == 0)
    *category = wlog_eCategory_NodeBuild;
  else if ( strcmp( str, "CreatePackage") == 0)
    *category = wlog_eCategory_CreatePackage;
  else if ( strcmp( str, "CopyPackage") == 0)
    *category = wlog_eCategory_CopyPackage;
  else if ( strcmp( str, "GeExport") == 0)
    *category = wlog_eCategory_GeExport;
  else if ( strcmp( str, "UpdateClasses") == 0)
    *category = wlog_eCategory_UpdateClasses;
  else if ( strcmp( str, "WbLoad") == 0)
    *category = wlog_eCategory_WbLoad;
  else if ( strcmp( str, "VolumeClone") == 0)
    *category = wlog_eCategory_VolumeClone;
  else
    *category = wlog_eCategory_;
}

void wb_log::generate_html( char *filename, pwr_tStatus *sts)
{
  log_sCbCtx cbctx;
  pwr_tFileName fname;
  FILE *fp;
  char timstr[24];
  char pname[80];

  time_AtoAscii( 0, time_eFormat_DateAndTime, timstr, sizeof(timstr));
  utl_get_projectname( pname);

  CoLog::dget( 0, 0, gen_cb, &cbctx);

  dcli_translate_filename( fname, filename);

  fp = fopen( fname, "w");
  if ( !fp) {
    *sts = WNAV__NOFILE;
    return;
  }
  fprintf( fp, "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd>\n\
<!-- Generated by wb_log %s  -->\n", timstr);
  fprintf( fp, "<HTML>\n<HEAD>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n\
<TITLE>\nWorkbench History\n</TITLE>\n</HEAD>\n<BODY BGCOLOR=\"white\"><XMP>\n");
  
  fprintf( fp, "Workbench History %s %s\n\n", pname, timstr);
  fprintf( fp, "%-20s  %-10s %-20s %-20s %s\n", "Date", "User", "Action", "Item", "Comment");
  fprintf( fp, "----------------------------------------------------------------------------------------------\n");
  for ( int i = cbctx.v.size() - 1; i >= 0; i--)
    fprintf( fp, "%s\n", cbctx.v[i].c_str());
  fprintf( fp, "</XMP>\n</BODY>\n</HTML>\n");
  fclose( fp);
}

void wb_log::gen_cb( void *ctx, pwr_tTime time, char *s1, char *s2, char *s3, char *s4)
{
  log_sCbCtx *cbctx = (log_sCbCtx *)ctx;
  char timstr[21];
  char str[200];
  
  time_AtoAscii( &time, time_eFormat_DateAndTime, timstr, sizeof(timstr));

  snprintf( str, sizeof(str), "%-20s  %-10s %-20s %-20s %s", timstr, s2, s1, s3, s4 ? s4 : "");
  string s(str);
  cbctx->v.push_back(s);
}

