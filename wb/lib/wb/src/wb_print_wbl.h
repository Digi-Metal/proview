/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/**
 * @file wb_print_wbl.h
 *
 * Prints a volume on wbl format
 *
 */

#ifndef wb_print_wbl_h
#define wb_print_wbl_h

#include <ostream>

#include "wb_ldh.h"
#include "co_tree.h"

class wb_adef;
class wb_attribute;
class wb_cdef;
class wb_object;
class wb_volume;

class wb_print_wbl {
protected:
  int m_errCnt;
  int m_lineCnt;
  bool m_idxFlag;
  bool m_noFoCodeFlag;
  bool m_timeFlag;
  int m_level;
  int m_levelInd;
  char m_indBuf[256];
  bool m_keepName;
  bool m_isTemplateObject;
  std::ostream& m_os;
  tree_sTable* m_body_cache;

  std::ostream& indent(int levelIncr = 0);

  void printBody(
      wb_volume& vol, pwr_tOid oid, pwr_tOid toid, pwr_tCid cid, pwr_eBix bix);
  bool printValue(wb_volume& v, pwr_eType type, unsigned int flags, void* val,
      int varSize, char** svalp);
  void printBuffer(wb_volume& vol, ldh_sParDef* par_bd, char* body);
  void printClass(wb_volume& vol, ldh_sParDef* par_bd, char* body, char* tbody,
      char* par_path);
  void printText(
      wb_volume& v, const char* aname, const char* text, int varSize);
  pwr_tStatus getBody(wb_volume& vol, pwr_tCid cid, const char* bname,
      int tsize, ldh_sParDef** bdef, int* rows, char** tbody);
  void bodyCacheFree();
  int attrCmp(char* a1, char* a2, int size, pwr_eType type);
  bool isFoCodeObject(wb_volume& v, wb_object& o);

public:
  wb_print_wbl(std::ostream& os, int levelIndentation = 2);
  ~wb_print_wbl();

  int getErrCnt() const
  {
    return m_errCnt;
  }
  void resetErrCnt()
  {
    m_errCnt = 0;
  }
  void keepName()
  {
    m_keepName = true;
  }
  void noIndex()
  {
    m_idxFlag = false;
    m_timeFlag = false;
  }
  void noFoCode()
  {
    m_noFoCodeFlag = true;
  }

  void printHierarchy(wb_volume& v, wb_object& o); //< Prints a hierarchy
  void printObject(
      wb_volume& v, wb_object& o, bool recursive = true); //< Prints an object
  void printVolume(wb_volume& v, bool recursive = true); //< Prints the volume
};

#endif
