! 
!  Proview   $Id: wb_msgwindow.uil,v 1.2 2005-09-06 10:39:34 claes Exp $
!  Copyright (C) 2005 SSAB Oxelösund AB.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with the program, if not, write to the Free Software 
!  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
!
module co_msgwindow
        version = 'v1.0'
        names = case_sensitive
        objects = {
                XmSeparator = gadget ;
                }

identifier
	msg_ctx;
procedure
	msg_activate_exit(integer);
	msg_activate_clear(integer);
	msg_activate_zoom_in(integer);
	msg_activate_zoom_out(integer);
	msg_activate_zoom_reset(integer);
	msg_activate_help(integer);
	msg_activate_help_message(integer);
	msg_create_form(integer);

value
	menu_font : font ('-*-Helvetica-Bold-R-Normal--12-*-*-*-P-*-ISO8859-1');

!----------------------------------------
! First declare the 'top level' widgets.  These are not controlled by
! any other widgets.  They are each fetched individually as needed.
!----------------------------------------

object  msg_window : XmMainWindow
{
  arguments
  {
    XmNx = 0;
    XmNy = 0;
  };
  controls
  {
     XmMenuBar	msg_menu;
     XmForm     msg_form;
  };
};


object msg_form : XmForm
{
  arguments
  {
     XmNwidth = 200;
     XmNheight = 200;
     XmNresizePolicy = XmRESIZE_NONE;
  };
  controls
  {
     XmPanedWindow msg_pane;
  };
};

object msg_menu : XmMenuBar
{
  arguments
  {
    XmNorientation 	= XmHORIZONTAL;
    XmNspacing  	= 15;
    XmNmenuHelpWidget 	= XmCascadeButton msg_help_entry;
  };
  controls
  {
    XmCascadeButton msg_file_entry;
    XmCascadeButton msg_view_entry;
    XmCascadeButton msg_help_entry;
  };
};

object msg_file_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString  = "File";
    XmNfontList	    = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = "Clear";
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure msg_activate_clear(msg_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = "Close";
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure msg_activate_exit(msg_ctx);
          };
	};
      };
    };
  };
};

object msg_view_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = "View";
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = "Zoom in";
            XmNmnemonic = keysym('I');
	    XmNaccelerator = "Ctrl<Key>I";
	    XmNacceleratorText = compound_string('Ctrl+I');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure msg_activate_zoom_in(msg_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = "Zoom out";
            XmNmnemonic = keysym('O');
	    XmNaccelerator = "Ctrl<Key>O";
	    XmNacceleratorText = compound_string('Ctrl+O');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure msg_activate_zoom_out(msg_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = "Zoom reset";
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure msg_activate_zoom_reset(msg_ctx);
          };
	};
      };
    };
  };
};

object msg_help_entry : XmCascadeButton      
{
  arguments
  {
      XmNlabelString = "Help";
      XmNfontList    = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
            XmNlabelString = "Help";
            XmNfontList	   = menu_font;
          };
          callbacks
          {
            XmNactivateCallback = procedure msg_activate_help(msg_ctx);
          };
        };
        XmPushButton
        {
          arguments
          {
            XmNlabelString = "Message";
            XmNfontList	   = menu_font;
          };
          callbacks
          {
            XmNactivateCallback = procedure msg_activate_help_message(msg_ctx);
          };
        };
      }; !Controls
    }; !Pulldown_menu
  }; !Controls
}; ! help_entry

object msg_pane : XmPanedWindow
{
   arguments
   {
     XmNleftAttachment 		= XmATTACH_FORM;
     XmNrightAttachment 	= XmATTACH_FORM;
     XmNbottomAttachment    	= XmATTACH_FORM;
     XmNtopAttachment    	= XmATTACH_FORM;
   };
   controls
   {
   };
   callbacks
   {
     MrmNcreateCallback = procedure msg_create_form( msg_ctx);
   };
};


end module;
