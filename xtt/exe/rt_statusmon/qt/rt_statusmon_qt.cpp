/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

/* rt_statusmon_qt.cpp -- Status Monitor */

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

#include "pwr.h"
#include "cow_msgwindow.h"
#include "co_lng.h"
#include "cow_xhelp_qt.h"
#include "cow_statusmon_nodelist_qt.h"

#include <QApplication>

static void usage()
{
  printf("\n\
  Proview Status Monitor\n\n\
  rt_statusmon [-m 'n'][-e]\n\n\
  -m 'n'  Mode display UserStatus 'n', where 1 <= n <= 5.\n\
  -e      Show node description from setup file.\n\
  -l      Language, e.g. en_us, sv_se, de_de.\n\n\
  $HOME/rt_statusmon.dat : setup file with requested nodes\n\n");
}

static void statusmon_close(void *ctx)
{
  exit(0);
}

int main(int argc, char *argv[])
{
  int sts;
  int mode = nodelist_eMode_SystemStatus;
  int view_descr = 0;
  char language[20] = "";

  if (argc > 1) {
    for (int i = 1; i < argc; i++) {
      if (strcmp(argv[i], "-h") == 0) {
        usage();
        exit(0);
      } else if (strcmp(argv[i], "-l") == 0 && i + 1 < argc) {
        strncpy(language, argv[i + 1], sizeof(language));
        Lng::set(language);
      } else if (strcmp(argv[i], "-m") == 0) {
        if (argc == i) {
          usage();
          exit(0);
        }
        if (strcmp(argv[i + 1], "1") == 0) {
          mode = nodelist_eMode_Status1;
        } else if (strcmp(argv[i + 1], "2") == 0) {
          mode = nodelist_eMode_Status2;
        } else if (strcmp(argv[i + 1], "3") == 0) {
          mode = nodelist_eMode_Status3;
        } else if (strcmp(argv[i + 1], "4") == 0) {
          mode = nodelist_eMode_Status4;
        } else if (strcmp(argv[i + 1], "5") == 0) {
          mode = nodelist_eMode_Status5;
        } else {
          usage();
          exit(0);
        }
        i++;
      } else if (strcmp(argv[i], "-e") == 0) {
        view_descr = 1;
      }
    }
  }

  QApplication app(argc, argv);

  setlocale(LC_NUMERIC, "POSIX");
  setlocale(LC_TIME, "en_US");

  CoXHelp *xhelp = new CoXHelpQt(0, 0, xhelp_eUtility_Xtt, &sts);
  CoXHelp::set_default(xhelp);

  Nodelist *nl =
      new NodelistQt(0, 0, "Status Monitor", mode, view_descr, msgw_ePop_No,
                     &sts);
  nl->close_cb = statusmon_close;
  nl->set_scantime(3);

  return app.exec();
}