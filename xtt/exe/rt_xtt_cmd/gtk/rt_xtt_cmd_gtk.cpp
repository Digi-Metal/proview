/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2015 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

/* wb_cmd_gtk.c -- command file processing
   The main program of pwrc.  */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>

#include "pwr.h"
#include "pwr_class.h"
#include "co_dcli.h"
#include "rt_load.h"
#include "co_dcli_input.h"
#include "co_lng.h"
#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "rt_xtt_gtk.h"
#include "xtt_xnav_gtk.h"
#include "xtt_item.h"
#include "xtt_url.h"
#include "xtt_xcolwind.h"
#include "co_lng.h"
#include "cow_xhelp_gtk.h"
#include "cow_wow_gtk.h"
#include "rt_xnav_msg.h"
#include "co_syi.h"
#include "rt_xtt_cmd_gtk.h"


XttCmdGtk::XttCmdGtk( GtkWidget *w)
{
  pwr_tStatus	sts;
  pwr_tOName   	opplace = "";

  xnav = new XNavGtk( this, (GtkWidget *)w, "Plant",
		&brow_widget, (xnav_sStartMenu *)root_menu, 
		opplace, 0, &sts);
  
  xnav->message_cb = &message_cb;
  xnav->close_cb = XttCmd::close_cb;
  xnav->login();
}

static int timeout_func()
{
  while ( gtk_events_pending())
    gtk_main_iteration();
  return 1;
}

int main(int argc, char *argv[])
{

  pwr_tStatus	sts;
  int		i;
  char 		str[256] ;
  XttCmdGtk     *cmd;
  int 		quiet = 0;
  int 		hide = 0;
  const int	window_width = 400;
  const int    	window_height = 700;
  GtkWidget	*toplevel;
  char		title[80];
  
  /* If arguments, treat them as a command and then exit */
  // Open directory volume as default

  str[0] = 0;
  for ( i = 1; i < argc; i++) {
    if ( argv[i][0] == '-') {
      switch ( argv[i][1]) {
      case 'h':
	XttCmd::usage();
	exit(0);
      case 'q':
	// Quiet
	quiet = 1;
	break;
      case 'i':
	// Hide
	hide = 1;
	break;
      case '-':
	// Display sent to gtk
	i++;
	break;
      default:
	cout << "Unknown argument: " << argv[i] << endl;
      }
    }
    else {
      if ( str[0] != 0)
	strcat( str, " ");
      strcat( str, argv[i]);
    }
  }

  sts = gdh_Init("rt_xtt_cmd");
  if (EVEN(sts)) {
    printf( "Unable to connect to database\n");
    exit(0);
  }

  gtk_init( &argc, &argv);

  setlocale( LC_TIME, "en_US");
  setlocale( LC_NUMERIC, "POSIX");

  strcat( title, "Xtt Cmd");

  // Gtk
  toplevel = (GtkWidget *) g_object_new( GTK_TYPE_WINDOW, 
					 "default-height", window_height,
					 "default-width", window_width,
					 "title", title,
					 NULL);
  cmd = new XttCmdGtk( toplevel);

  gtk_container_add( GTK_CONTAINER(toplevel), cmd->brow_widget);
  gtk_widget_show_all( toplevel);
  if ( hide)
    g_object_set( toplevel, "visible", FALSE, NULL);


  if ( !quiet)
    cout << "\n\
Proview is free software; covered by the GNU General Public License.\n\
You can redistribute it and/or modify it under the terms of this license.\n\
\n\
Proview is distributed in the hope that it will be useful \n\
but WITHOUT ANY WARRANTY; without even the implied warranty of \n\
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the \n\
GNU General Public License for more details.\n\n";

  if ( str[0] != 0) {
    dcli_remove_blank( str, str);
    sts = cmd->xnav->command(str);
    if ( ODD(sts))
      return 0;
    exit(sts);
  }
  sts = dcli_input_init( &cmd->chn, &cmd->recall_buf);
  if ( EVEN(sts)) exit(sts);

  // Init input

  while ( 1 )
  {
    unsigned long terminator;
    unsigned long option = DCLI_OPT_TIMEOUT;

    /* get and parse the command */

    /* get input */
    dcli_qio_set_attr( &cmd->chn, 1);
    sts = dcli_get_input_string( &cmd->chn, str, &terminator, sizeof(str), cmd->recall_buf, option, 
				 1, timeout_func, 0, "xttc> ");
    dcli_qio_reset( &cmd->chn);

//    sts = scanf( "%s", str);
      
    if ( strcmp( str, "") == 0)
      continue;

    dcli_remove_blank( str, str);
    sts = cmd->xnav->command(str);
  
    while ( gtk_events_pending())
      gtk_main_iteration();
  }
  dcli_input_end( &cmd->chn, cmd->recall_buf);
}
