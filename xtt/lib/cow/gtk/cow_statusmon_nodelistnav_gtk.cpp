/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2012 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

/* co_statusmon_nodelistnav_gtk.cpp -- Console message window. */

#include "glow_std.h"

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <gtk/gtk.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_time.h"
#include "cow_wow_gtk.h"
#include "rt_gdh.h"
#include "co_syi.h"
#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "flow_browwidget_gtk.h"
#include "cow_statusmon_nodelistnav_gtk.h"

NodelistNavGtk::NodelistNavGtk( void *nodelist_parent_ctx,
				GtkWidget *nodelist_parent_wid,
				MsgWindow *nodelist_msg_window,
				char *nodelist_nodename,
				int nodelist_mode,
				int nodelist_view_node_descr,
				int nodelist_msgw_pop,
				GtkWidget **w) :
  NodelistNav( nodelist_parent_ctx, nodelist_msg_window, nodelist_nodename,
	       nodelist_mode, nodelist_view_node_descr, nodelist_msgw_pop), 
  parent_wid(nodelist_parent_wid)
{
  form_widget = scrolledbrowwidgetgtk_new( init_brow_cb, this, &brow_widget);

  gtk_widget_show_all( brow_widget);

  *w = form_widget;

  wow = new CoWowGtk( parent_wid);
}


//
//  Delete ev
//
NodelistNavGtk::~NodelistNavGtk()
{
  if ( trace_started)
    g_source_remove( trace_timerid);

  delete brow;
  gtk_widget_destroy( form_widget);
}

void NodelistNavGtk::beep()
{
  gdk_display_beep( gtk_widget_get_display( form_widget));
}

void NodelistNavGtk::set_input_focus()
{
  gtk_widget_grab_focus( brow_widget);
}

void NodelistNavGtk::trace_start()
{
  NodelistNavGtk::trace_scan( this);
}

static gboolean nodelistnavgtk_trace_scan( void *data)
{
  NodelistNavGtk::trace_scan( (NodelistNav *)data);
  return FALSE;
}

void NodelistNavGtk::trace_scan( NodelistNav *nodelistnav)
{
  if ( nodelistnav->trace_started) {
    nodelistnav->update_nodes();

    brow_TraceScan( nodelistnav->brow->ctx);

    ((NodelistNavGtk *)nodelistnav)->trace_timerid = g_timeout_add( nodelistnav->scantime,
	nodelistnavgtk_trace_scan, nodelistnav);
  }
}








