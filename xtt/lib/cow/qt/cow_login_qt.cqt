/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>

#include "co_dcli.h"
#include "co_login_msg.h"

#include "cow_login_qt.h"
#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include <QHBoxLayout>
#include <QPushButton>
#include <QVBoxLayout>

void CoLoginQt::pop()
{
  username->setText("");
  password->setText("");
  ::pop(toplevel);
}

void CoLoginQtWidget::activate_ok()
{
  if (del) {
    login->activate_ok();
    if (login->sts == LOGIN__SUCCESS) {
      del = false;
      close();
    }
  }
}

void CoLoginQtWidget::activate_cancel()
{
  if (del) {
    login->activate_cancel();
    del = false;
    close();
  }
}

void CoLoginQtWidget::valchanged_password()
{
  if (del && !login->password->text().isEmpty()) {
    activate_ok();
  }
}

void CoLoginQtWidget::valchanged_username()
{
  if (!login->username->text().isEmpty()) {
    login->password->setFocus();
  }
}

void CoLoginQtWidget::closeEvent(QCloseEvent* event)
{
  if (del) {
    login->activate_cancel();
    del = false;
  }
  QDialog::closeEvent(event);
}

CoLoginQt::CoLoginQt(void* wl_parent_ctx, QWidget* wl_parent_wid,
    const char* wl_name, const char* wl_groupname, void (*wl_bc_success)(void*),
    void (*wl_bc_cancel)(void*), void* basewidget, pwr_tStatus* status)
    : CoLogin(wl_parent_ctx, wl_name, wl_groupname, wl_bc_success, wl_bc_cancel,
          status)
{
  // Create an input dialog
  toplevel = new CoLoginQtWidget(this, wl_parent_wid);
  toplevel->setWindowTitle(fl("Proview Login"));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  username = new QLineEdit();
  username->setFixedHeight(20);
  QObject::connect(username, SIGNAL(editingFinished()), toplevel,
      SLOT(valchanged_username()));

  QWidget* usernamelabel = new QLabel("Username");
  usernamelabel->setFixedHeight(20);

  password = new QLineEdit();
  password->setFixedHeight(20);
  QObject::connect(password, SIGNAL(editingFinished()), toplevel,
      SLOT(valchanged_password()));

  QWidget* passwordlabel = new QLabel("Password");
  passwordlabel->setFixedHeight(20);
  password->setEchoMode(QLineEdit::Password);

  pwr_tFileName fname;
  dcli_translate_filename(fname, "$pwr_exe/pwr_logofull.png");
  QLabel* image = new_image_label(toplevel, fname);

  buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Cancel);
  buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
  buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      toplevel, SLOT(activate_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
      toplevel, SLOT(activate_cancel()));

  label = new QLabel("");

  QVBoxLayout* vbox1 = new QVBoxLayout();
  vbox1->addWidget(usernamelabel);
  vbox1->addWidget(passwordlabel);

  QVBoxLayout* vbox2 = new QVBoxLayout();
  vbox2->addWidget(username);
  vbox2->addWidget(password);

  QHBoxLayout* hbox = new QHBoxLayout();
  hbox->addWidget(image);
  hbox->addLayout(vbox1);
  add_expanding(hbox, vbox2);

  QVBoxLayout* vbox = new QVBoxLayout();
  add_expanding(vbox, hbox);
  vbox->addWidget(label);
  vbox->addWidget(separator(QFrame::HLine));
  vbox->addWidget(buttons);
  toplevel->setLayout(vbox);

  toplevel->show();

  if (basewidget) {
    toplevel->setModal(true);
  }

  username->setFocus();

  *status = 1;
}

//
//	Get values in username and password.
//
pwr_tStatus CoLoginQt::get_values()
{
  char passwd[40];
  char user[40];

  /* Get UserName */
  strcpy(user, qPrintable(username->text()));

  /* Get Password */
  strcpy(passwd, qPrintable(password->text()));

  pwr_tStatus sts = user_check(groupname, user, passwd);
  if (EVEN(sts)) {
    return sts;
  }

  this->sts = LOGIN__SUCCESS;
  return this->sts;
}

//
//	Displays a message in the login window.
//
void CoLoginQt::message(const char* new_label)
{
  label->setText(fl(new_label));
}