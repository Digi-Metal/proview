/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* co_msgwindow_qt.cpp -- Message window */

#include "cow_msglist_qt.h"
#include "cow_msgwindow_qt.h"
#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"
#include "cow_xhelp.h"

#include <QCloseEvent>
#include <QMenu>
#include <QMenuBar>
#include <QVBoxLayout>

void MsgWindowQtWidget::closeEvent(QCloseEvent* event)
{
  activate_exit();
  event->ignore();
}

MsgWindowQt::MsgWindowQt(void* msg_parent_ctx, const char* msg_name,
    pwr_tStatus* status) : MsgWindow(msg_parent_ctx, msg_name, status)
{
  toplevel = new MsgWindowQtWidget(this);
  toplevel->setWindowTitle(translate_utf8(msg_name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QMenuBar* menu_bar = new QMenuBar();

  // File Entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "C&lear", SLOT(activate_clear()));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "zoom-original");

  // Create msgnav
  QVBoxLayout* form = new QVBoxLayout();
  msgnav = new MsgListQt(this, &nav_widget);
  msgnav->find_wnav_cb = MsgWindow::msgw_find_wnav_cb;
  msgnav->find_plc_cb = MsgWindow::msgw_find_plc_cb;
  msgnav->find_ge_cb = MsgWindow::msgw_find_ge_cb;

  form->setMenuBar(menu_bar);
  add_expanding(form, nav_widget);

  toplevel->setLayout(form);
  toplevel->resize(800, 600);
  toplevel->show(); // The MsgList must be realized.
  toplevel->hide();

  wow = new CoWowQt(toplevel);
}

void MsgWindowQt::map()
{
  if (nodraw) {
    deferred_map = 1;
    return;
  } else {
    deferred_map = 0;
  }

  if (maptimer.disabled()) {
    return;
  }

  if (!displayed) {
    toplevel->show();
    displayed = 1;
  } else {
    pop(toplevel);
  }

  maptimer.disable(400);
}

void MsgWindowQt::unmap()
{
  if (displayed) {
    toplevel->hide();
    displayed = 0;
  }
}

void MsgWindowQt::print()
{
  char title[80];
  strncpy(title, qPrintable(translate_utf8(name)), sizeof(title));

  CoWowQt::CreateBrowPrintDialogQt(title, msgnav->brow->ctx, ((MsgListQt*)msgnav)->brow_widget);
}

void MsgWindowQtWidget::focusInEvent(QFocusEvent* event)
{
  if (msgwin->displayed && !msgwin->focustimer.disabled()) {
    msgwin->msgnav->set_input_focus();
    msgwin->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void MsgWindowQtWidget::activate_print()
{
  msgwin->activate_print();
}

void MsgWindowQtWidget::activate_exit()
{
  setVisible(false);
  msgwin->displayed = 0;
}

void MsgWindowQtWidget::activate_clear()
{
  msgwin->msgnav->clear();
  msgwin->size = 0;
}

void MsgWindowQtWidget::activate_zoom_in()
{
  msgwin->msgnav->zoom(1.2);
}

void MsgWindowQtWidget::activate_zoom_out()
{
  msgwin->msgnav->zoom(5.0 / 6);
}

void MsgWindowQtWidget::activate_zoom_reset()
{
  msgwin->msgnav->unzoom();
}

void MsgWindowQtWidget::activate_help()
{
  CoXHelp::dhelp("messagewindow_refman", 0, navh_eHelpFile_Other,
      "$pwr_lang/man_dg.dat", true);
}

void MsgWindowQtWidget::activate_help_message()
{
  CoXHelp::dhelp("message window", 0, navh_eHelpFile_Base, 0, true);
}
