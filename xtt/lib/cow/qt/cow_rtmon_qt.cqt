/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* co_rtmon_qt.cpp -- Console log in statusmon */

#include "glow_std.h"

#include <stdio.h>
#include <stdlib.h>

#include "co_cdh.h"
#include "co_time.h"
#include "co_syi.h"
#include "rt_gdh.h"

#include "co_lng.h"
#include "cow_wow_qt.h"
#include "cow_msgwindow_qt.h"
#include "cow_rtmon.h"
#include "co_dcli.h"
#include "rt_pwr_msg.h"
#include "cow_rtmon_qt.h"
#include "cow_statusmon_nodelistnav_qt.h"

#include <QAction>
#include <QHBoxLayout>
#include <QLabel>
#include <QMenu>
#include <QMenuBar>
#include <QPalette>
#include <QPushButton>
#include <QTimer>
#include <QToolBar>
#include <QVBoxLayout>

void RtMonQtWidget::closeEvent(QCloseEvent *event)
{
  if (rtmon->close_cb) {
    (rtmon->close_cb)(rtmon->parent_ctx);
  } else {
    delete rtmon;
  }
  QWidget::closeEvent(event);
}

static QPushButton *addButton(QWidget *parent, QBoxLayout *layout,
                              const char *text, void (RtMonQt::*callback)(void))
{
  QPushButton *button = new QPushButton(fl(text));
  button->setFixedSize(170, 25);
  QObject::connect(button, SIGNAL(pressed()), parent, SLOT(callback()));
  layout->addWidget(button);
  return button;
}

RtMonQt::RtMonQt(void *rtmon_parent_ctx, QWidget *rtmon_parent_wid,
                 const char *rtmon_name, const char *rtmon_display,
                 pwr_tStatus *status)
    : RtMon(rtmon_parent_ctx, rtmon_name, rtmon_display, status), timerid(0),
      old_status(9999)
{
  char nodename[80];
  char title[200];
  pwr_tStatus sts;

  syi_NodeName(&sts, nodename, sizeof(nodename));
  strcpy(title, nodename);
  strcat(title, " ");
  strcat(title, rtmon_name);

  toplevel = new RtMonQtWidget(this, rtmon_parent_wid);
  toplevel->setToolTip(fl("cow_rtmon widget"));
  toplevel->setMinimumSize(480, 340);
  toplevel->setWindowTitle(fl(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar *menu_bar = new QMenuBar();

  // File entry
  QMenu *file = menu_bar->addMenu(translate_utf8("&File"));
  file_xtt =
      addMenuItem(toplevel, file, "&Start Runtime Navigator", SLOT(activate_xtt()));
  file_op = addMenuItem(toplevel, file, "&Start Operator Environment",
                        SLOT(activate_op()));
  addMenuItem(toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // View menu
  QMenu *view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
              "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
              "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
              "zoom-original");

  // Menu Help
  QMenu *help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H",
              "system-help");

  QVBoxLayout *vbox = new QVBoxLayout();
  nodelistnav =
      new NodelistNavQt(this, toplevel, 0, nodename, nodelist_eMode_SystemStatus, 0,
                        0, &nodelistnav_widget);

  // Toolbar
  QToolBar *tools = new QToolBar();
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
              "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
              "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
              "$pwr_exe/xtt_zoom_reset.png");

  tools_xtt =
      addToolItem(toplevel, tools, "Start Runtime Navigator", SLOT(activate_xtt()),
                  "$pwr_exe/xtt_navigator.png");
  tools_op = addToolItem(toplevel, tools, "Start Operator Environment",
                         SLOT(activate_op()), "$pwr_exe/xtt_op.png");

  // Button box
  pwr_tFileName fname;
  dcli_translate_filename(fname, "$pwr_exe/pwr_logofully.png");
  bbox_image = new_image_label(toplevel, fname);

  dcli_translate_filename(fname, "$pwr_exe/pwr_logofullg.png");
  bbox_image_gray = new_image_label(toplevel, fname);

  bbox_label = new QPushButton("Down");
  bbox_label->setFixedSize(170, 25);
  bbox_label->setEnabled(false);

  QVBoxLayout *bbox = new QVBoxLayout();
  bbox_start = addButton(toplevel, bbox, "Start Runtime", &RtMonQt::activate_start);
  bbox_restart =
      addButton(toplevel, bbox, "Restart Runtime", &RtMonQt::activate_restart);
  bbox_stop = addButton(toplevel, bbox, "Stop Runtime", &RtMonQt::activate_stop);

  QVBoxLayout *lbox = new QVBoxLayout();
  lbox->setSpacing(33);
  lbox->addWidget(bbox_label);
  addButton(toplevel, lbox, "Reset Runtime", &RtMonQt::activate_reset);

  QHBoxLayout *bbox_vbox = new QHBoxLayout();
  bbox_vbox->addWidget(bbox_image);
  bbox_vbox->addWidget(bbox_image_gray);
  bbox_vbox->addLayout(bbox);
  bbox_vbox->addLayout(lbox);

  vbox->setMenuBar(menu_bar);
  vbox->addWidget(tools);
  vbox->addLayout(bbox_vbox);
  add_expanding(vbox, nodelistnav_widget);

  toplevel->setLayout(vbox);
  toplevel->show();

  bbox_image->setVisible(false);

  wow = new CoWowQt(toplevel);

  timerid = new QTimer();
  QObject::connect(timerid, SIGNAL(timeout()), toplevel, SLOT(rtmon_scan()));
  timerid->start(1000);

  *status = 1;
}

void RtMonQtWidget::rtmon_scan()
{
  if (rtmon->nodelistnav->node_list[0].item->data.SystemStatus !=
      rtmon->old_status) {
    QColor color;
    char text[20];
    char color_name[20];
    pwr_tStatus sts = rtmon->nodelistnav->node_list[0].item->data.SystemStatus;

    if (sts == PWR__SRVCONNECTION) {
      strcpy(color_name, "Gray");
      strcpy(text, "Down");
      rtmon->bbox_start->setEnabled(TRUE);
      rtmon->bbox_restart->setEnabled(FALSE);
      rtmon->bbox_stop->setEnabled(FALSE);
      rtmon->tools_xtt->setEnabled(FALSE);
      rtmon->tools_op->setEnabled(FALSE);
      rtmon->file_xtt->setEnabled(FALSE);
      rtmon->file_op->setEnabled(FALSE);

      rtmon->bbox_image->setVisible(FALSE);
      rtmon->bbox_image_gray->setVisible(TRUE);
    } else {
      if (((sts & 7) == 2) || ((sts & 7) == 4)) {
        strcpy(color_name, "Red");
        strcpy(text, "Running");
      } else if ((sts & 7) == 0) {
        strcpy(color_name, "Yellow");
        strcpy(text, "Running");
      } else {
        strcpy(color_name, "Green");
        strcpy(text, "Running");
      }
      rtmon->bbox_start->setEnabled(FALSE);
      rtmon->bbox_restart->setEnabled(TRUE);
      rtmon->bbox_stop->setEnabled(TRUE);
      rtmon->tools_xtt->setEnabled(TRUE);
      rtmon->tools_op->setEnabled(TRUE);
      rtmon->file_xtt->setEnabled(TRUE);
      rtmon->file_op->setEnabled(TRUE);
      rtmon->bbox_image->setVisible(TRUE);
      rtmon->bbox_image_gray->setVisible(FALSE);
    }

    QPalette pal;
    pal.setColor(QPalette::Background, QColor(fl(color_name)));
    rtmon->bbox_label->setAutoFillBackground(true);
    rtmon->bbox_label->setPalette(pal);
    rtmon->bbox_label->setText(fl(text));
    rtmon->bbox_label->update();

    rtmon->old_status = sts;
  }
}

RtMonQt::~RtMonQt()
{
  if (timerid) {
    delete timerid;
  }
}

void RtMonQt::pop()
{
  ::pop(toplevel);
}

void RtMonQt::set_clock_cursor()
{
  toplevel->setCursor(Qt::WaitCursor);
  toplevel->update();
}

void RtMonQt::reset_cursor()
{
  toplevel->unsetCursor();
}

void RtMonQtWidget::focusInEvent(QFocusEvent *event)
{
  if (rtmon->rtmon_displayed) {
    rtmon->nodelistnav->set_input_focus();
  }

  QWidget::focusInEvent(event);
}

void RtMonQtWidget::activate_xtt()
{
  rtmon->activate_xtt();
}

void RtMonQtWidget::activate_op()
{
  rtmon->activate_op();
}

void RtMonQtWidget::activate_zoom_in()
{
  rtmon->nodelistnav->zoom(1.2);
}

void RtMonQtWidget::activate_zoom_out()
{
  rtmon->nodelistnav->zoom(5.0 / 6);
}

void RtMonQtWidget::activate_zoom_reset()
{
  rtmon->nodelistnav->unzoom();
}

void RtMonQtWidget::activate_help()
{
  rtmon->activate_help();
}