/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* co_statusmon_nodelist_qt.cpp -- Console log in statusmon */

#include "co_dcli.h"

#include "cow_msgwindow_qt.h"
#include "cow_qt_helpers.h"
#include "cow_statusmon_nodelist_qt.h"
#include "cow_statusmon_nodelistnav_qt.h"

#include <QApplication>
#include <QMenu>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

void NodelistQtWidget::closeEvent(QCloseEvent* event)
{
  if (nodelist->close_cb) {
    (nodelist->close_cb)(nodelist->parent_ctx);
  } else {
    delete nodelist;
  }
  QWidget::closeEvent(event);
}

NodelistQt::NodelistQt(void* nodelist_parent_ctx, QWidget* nodelist_parent_wid,
    const char* nodelist_name, int nodelist_mode, int nodelist_view_node_descr,
    int msgw_pop, pwr_tStatus* status)
    : Nodelist(nodelist_parent_ctx, nodelist_name, nodelist_mode,
          nodelist_view_node_descr, status)
{
  pwr_tStatus sts;

  toplevel = new NodelistQtWidget(this, nodelist_parent_wid);
  toplevel->setMinimumSize(850, 300);
  toplevel->setWindowTitle(fl(nodelist_name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Save Configuration", SLOT(activate_save()), "",
      "document-save");
  addMenuItem(toplevel, file, "&Add Node", SLOT(activate_add_node()));
  addMenuItem(toplevel, file, "&Modify Node", SLOT(activate_modify_node()));
  addMenuItem(toplevel, file, "&Remove Node", SLOT(activate_remove_node()));

  pwr_tFileName fname;
  dcli_translate_filename(fname, "$pwr_exe/xtt_navigator.png");
  addMenuItem(toplevel, file, "Open Runtime &Navigator",
      SLOT(activate_open_xtt()), "", fname);
  dcli_translate_filename(fname, "$pwr_exe/xtt_op.png");
  addMenuItem(toplevel, file, "&Open Operatorplace",
      SLOT(activate_open_opplace()), "", fname);
  dcli_translate_filename(fname, "$pwr_exe/xtt_rtmon.png");
  addMenuItem(toplevel, file, "Open Runtime &Monitor",
      SLOT(activate_open_rtmon()), "", fname);
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Show &Events", SLOT(activate_show_events()));
  addMenuItem(toplevel, view, "&Pop Events", SLOT(activate_pop_events()));

  // Submenu Remote GUI
  QMenu* view_gui = view->addMenu(fl("&Remote GUI"));
  QActionGroup* rg_group = new QActionGroup(toplevel);
  addMenuRadioItem(
      toplevel, view_gui, "&QT", SLOT(activate_gui_qt()), rg_group);
  addMenuRadioItem(
      toplevel, view_gui, "&GTK", SLOT(activate_gui_gtk()), rg_group);
  addMenuRadioItem(
      toplevel, view_gui, "&Motif", SLOT(activate_gui_motif()), rg_group);

  // Submenu Mode
  QMenu* view_mode = view->addMenu(fl("&Mode"));
  QActionGroup* mode_group = new QActionGroup(toplevel);
  QAction *a = addMenuRadioItem(toplevel, view_mode, "&SystemStatus",
      SLOT(activate_mode()), mode_group);
  a->setData(nodelist_eMode_SystemStatus);
  a = addMenuRadioItem(toplevel, view_mode, "UserStatus&1",
      SLOT(activate_mode()), mode_group);
  a->setData(nodelist_eMode_Status1);
  a = addMenuRadioItem(toplevel, view_mode, "UserStatus&2",
      SLOT(activate_mode()), mode_group);
  a->setData(nodelist_eMode_Status2);
  a = addMenuRadioItem(toplevel, view_mode, "UserStatus&3",
      SLOT(activate_mode()), mode_group);
  a->setData(nodelist_eMode_Status3);
  a = addMenuRadioItem(toplevel, view_mode, "UserStatus&4",
      SLOT(activate_mode()), mode_group);
  a->setData(nodelist_eMode_Status4);
  a = addMenuRadioItem(toplevel, view_mode, "UserStatus&5",
      SLOT(activate_mode()), mode_group);
  a->setData(nodelist_eMode_Status5);

  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "zoom-original");

  // Menu Help
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  msg_window = new MsgWindowQt(this, toplevel, "Status Events", &sts);
  msg_window->find_wnav_cb = find_node_cb;
  msg_window->msg('I', "Status Montitor started");

  QVBoxLayout* vbox = new QVBoxLayout();
  nodelistnav = new NodelistNavQt(this, toplevel, msg_window, 0, mode,
      view_node_descr, msgw_pop, &nodelistnav_widget);

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Save configuration", SLOT(activate_save()),
      "document-save");
  addToolItem(
      toplevel, tools, "Add node", SLOT(activate_add_node()), "list-add");
  addToolItem(toplevel, tools, "Remove node", SLOT(activate_remove_node()),
      "list-remove");
  addToolItem(toplevel, tools, "Start Runtime Navigator on selected node",
      SLOT(activate_open_xtt()), "$pwr_exe/xtt_navigator.png");
  addToolItem(toplevel, tools, "Start Operatorplace on selected node",
      SLOT(activate_open_opplace()), "$pwr_exe/xtt_op.png");
  addToolItem(toplevel, tools, "Start Runtime Monitor on selected node",
      SLOT(activate_open_rtmon()), "$pwr_exe/xtt_rtmon.png");
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  vbox->setMenuBar(menu_bar);
  vbox->addWidget(tools);
  add_expanding(vbox, nodelistnav_widget);

  toplevel->setLayout(vbox);
  toplevel->show();

  wow = new CoWowQt(toplevel);

  *status = 1;
}

NodelistQt::~NodelistQt()
{
  delete nodelistnav;
}

void NodelistQt::pop()
{
  ::pop(toplevel);
}

void NodelistQt::set_clock_cursor()
{
  toplevel->setCursor(Qt::WaitCursor);
  toplevel->update();
}

void NodelistQt::reset_cursor()
{
  toplevel->unsetCursor();
}

void NodelistQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!nodelist->focustimer.disabled()) {
    if (nodelist->nodelist_displayed) {
      nodelist->nodelistnav->set_input_focus();
    }

    nodelist->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void NodelistQtWidget::activate_add_node()
{
  nodelist->activate_add_node();
}

void NodelistQtWidget::activate_modify_node()
{
  nodelist->activate_modify_node();
}

void NodelistQtWidget::activate_remove_node()
{
  nodelist->activate_remove_node();
}

void NodelistQtWidget::activate_open_xtt()
{
  nodelist->activate_open_xtt();
}

void NodelistQtWidget::activate_open_opplace()
{
  nodelist->activate_open_opplace();
}

void NodelistQtWidget::activate_open_rtmon()
{
  nodelist->activate_open_rtmon();
}

void NodelistQtWidget::activate_save()
{
  nodelist->activate_save();
}

void NodelistQtWidget::activate_show_events()
{
  nodelist->msg_window->map();
}

void NodelistQtWidget::activate_pop_events()
{
  nodelist->nodelistnav->set_msgw_pop(1);
}

void NodelistQtWidget::activate_gui_motif()
{
  strcpy(nodelist->remote_gui, "motif");
}

void NodelistQtWidget::activate_gui_gtk()
{
  strcpy(nodelist->remote_gui, "gtk");
}

void NodelistQtWidget::activate_gui_qt()
{
  strcpy(nodelist->remote_gui, "qt");
}

void NodelistQtWidget::activate_mode()
{
  int data = ((QAction*)sender())->data().toInt();
  nodelist->nodelistnav->set_mode(data);
}

void NodelistQtWidget::activate_zoom_in()
{
  nodelist->nodelistnav->zoom(1.2);
}

void NodelistQtWidget::activate_zoom_out()
{
  nodelist->nodelistnav->zoom(5.0 / 6);
}

void NodelistQtWidget::activate_zoom_reset()
{
  nodelist->nodelistnav->unzoom();
}

void NodelistQtWidget::activate_help()
{
  nodelist->activate_help();
}

void NodelistQt::open_add_input_dialog(const char* text, const char* text2,
    const char* text3, const char* title, const char* init_text,
    void (*ok_cb)(Nodelist*, char*, char*, char*))
{
  NodelistInputDialogQt *w = new NodelistInputDialogQt(
    this, toplevel, title, text, text2, text3, init_text);
  w->ok_cb = ok_cb;
}

void NodelistQt::open_mod_input_dialog(const char* text, const char* text2,
    const char* text3, const char* title, const char* init_text,
    const char* init_text2, const char* init_text3,
    void (*ok_cb)(Nodelist*, char*, char*, char*))
{
  NodelistInputDialogQt *w = new NodelistInputDialogQt(
    this, toplevel, title, text, text2, text3,
    init_text, init_text2, init_text3, false);
  w->ok_cb = ok_cb;
}

void NodelistInputDialogQt::activate_ok()
{
  (ok_cb)(nodelist, qPrintableLatin1(text->text()),
          qPrintableLatin1(text2->text()), qPrintableLatin1(text3->text()));

  accept();
}

void NodelistInputDialogQt::activate_cancel()
{
  reject();
}

NodelistInputDialogQt::NodelistInputDialogQt(
    NodelistQt* parent_ctx, QWidget* parent, const char* title,
    const char* l1, const char* l2, const char* l3,
    const char* txt1, const char* txt2, const char* txt3, bool input_callback)
    : QDialog(parent), nodelist(parent_ctx)
{
  setMinimumSize(600, 150);
  setWindowTitle(fl(title));
  setAttribute(Qt::WA_DeleteOnClose);

  text = new QLineEdit(txt1);
  text2 = new QLineEdit(txt2);
  text3 = new QLineEdit(txt3);
  if (input_callback) {
    connect(text, SIGNAL(returnPressed()), this, SLOT(activate_ok()));
    connect(text2, SIGNAL(returnPressed()), this, SLOT(activate_ok()));
    connect(text3, SIGNAL(returnPressed()), this, SLOT(activate_ok()));
  }

  label = new QLabel(l1);
  label2 = new QLabel(l2);
  label3 = new QLabel(l3);

  QLabel* image = new QLabel();
  image->setPixmap(QApplication::style()
                       ->standardIcon(QStyle::SP_MessageBoxQuestion)
                       .pixmap(48));

  QPushButton* ok = new QPushButton(fl("Ok"));
  connect(ok, SIGNAL(clicked()), this, SLOT(activate_ok()));

  QPushButton* cancel = new QPushButton(fl("Cancel"));
  connect(cancel, SIGNAL(clicked()), this, SLOT(activate_cancel()));

  QVBoxLayout* vboxtext = new QVBoxLayout();
  vboxtext->addWidget(text);
  vboxtext->addWidget(text2);
  vboxtext->addWidget(text3);

  QVBoxLayout* vboxlabel = new QVBoxLayout();
  vboxlabel->addWidget(label);
  vboxlabel->addWidget(label2);
  vboxlabel->addWidget(label3);

  QHBoxLayout* hboxtext = new QHBoxLayout();
  hboxtext->addWidget(image);
  hboxtext->addLayout(vboxlabel);
  add_expanding(hboxtext, vboxtext);

  QHBoxLayout* hboxbuttons = new QHBoxLayout();
  hboxbuttons->addWidget(ok);
  hboxbuttons->addWidget(cancel);

  QVBoxLayout* vbox = new QVBoxLayout(this);
  add_expanding(vbox, hboxtext);
  vbox->addWidget(separator(QFrame::HLine));
  vbox->addLayout(hboxbuttons);

  setLayout(vbox);
  setVisible(true);
}