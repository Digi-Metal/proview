/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* cow_tree_qt.cpp -- Tree viewer */

#include "cow_qt_helpers.h"
#include "cow_tree_qt.h"
#include "cow_treenav_qt.h"
#include "cow_wow_qt.h"

#include <QDialogButtonBox>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

void CowTreeQt::message(char severity, const char* message)
{
  msg_label->setText(fl(message));
}

void CowTreeQtWidget::closeEvent(QCloseEvent* event)
{
  if (tree->close_cb) {
    (tree->close_cb)(tree->parent_ctx);
  } else {
    delete tree;
  }
  QWidget::closeEvent(event);
}

void CowTreeQtWidget::focusInEvent(QFocusEvent* event)
{
  if (tree->treenav) {
    tree->treenav->set_inputfocus();
  }

  QWidget::focusInEvent(event);
}

void CowTreeQtWidget::activate_print()
{
  tree->activate_print();
}

void CowTreeQtWidget::activate_zoom_in()
{
  tree->activate_zoom_in();
}

void CowTreeQtWidget::activate_zoom_out()
{
  tree->activate_zoom_out();
}

void CowTreeQtWidget::activate_zoom_reset()
{
  tree->activate_zoom_reset();
}

void CowTreeQtWidget::activate_help()
{
  tree->activate_help();
}

void CowTreeQtWidget::activate_tree_layout()
{
  tree->treenav->show_tree();
}

void CowTreeQtWidget::activate_list_layout()
{
  tree->treenav->show_list();
}

void CowTreeQtWidget::activate_button_ok()
{
  pwr_tStatus sts = tree->activate_button_ok();
  if (ODD(sts)) {
    close();
  }
}

void CowTreeQt::pop()
{
  ::pop(toplevel);
}

CowTreeQt::CowTreeQt(void* a_parent_ctx, const char* title,
    pwr_tAttrRef* itemlist, int item_cnt, unsigned int options, pwr_tStatus
    (*get_object_info)(void*, pwr_tAttrRef*, char*, int, char*, char*, int),
    pwr_tStatus (*get_node_info)(void*, char*, char*, int),
    pwr_tStatus (*action)(void*, pwr_tAttrRef*))
    : CowTree(a_parent_ctx, itemlist, item_cnt, options, get_object_info,
          get_node_info, action)
{
  int sts;

  toplevel = new CowTreeQtWidget(this);
  toplevel->setMinimumSize(600, 400);
  toplevel->setWindowTitle(fl(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "&Tree Layout", SLOT(activate_tree_layout()));
  addMenuItem(toplevel, view, "&List Layout", SLOT(activate_list_layout()));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "zoom-original");

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Overview", SLOT(activate_help()), "CTRL+H",
      "system-help");

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  // Ok can Cancel buttons
  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Apply);
  buttons->addButton(QDialogButtonBox::Cancel);

  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      toplevel, SLOT(activate_button_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Apply), SIGNAL(clicked()),
      toplevel, SLOT(activate_button_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
      toplevel, SLOT(close()));

  // Statusbar
  QStatusBar* statusbar = new QStatusBar();
  statusbar->setFixedHeight(25);
  msg_label = new QLabel("");
  statusbar->addWidget(msg_label);

  treenav = new TreeNavQt(this, itemlist, item_cnt, options, get_object_info,
      get_node_info, &brow_widget, &sts);
  treenav->message_cb = &CowTree::message;

  vbox->setMenuBar(menu_bar);
  vbox->addWidget(tools);
  add_expanding(vbox, brow_widget);
  vbox->addWidget(buttons);
  vbox->addWidget(statusbar);

  toplevel->setLayout(vbox);
  toplevel->show();

  wow = new CoWowQt(toplevel);
}