/**
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/* cow_wow_qt.cpp -- useful windows */

#include <stdio.h>
#include <string.h>

#include "pwr.h"

#include "co_api.h"
#include "co_cdh.h"
#include "co_dcli.h"

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include "flow_api.h"
#include "flow_browapi.h"

#include <QApplication>
#include <QDialogButtonBox>
#include <QFileDialog>
#include <QHBoxLayout>
#include <QInputDialog>
#include <QKeyEvent>
#include <QMenu>
#include <QMenuBar>
#include <QMessageBox>
#include <QPainter>
#include <QPixmap>
#include <QPrintDialog>
#include <QPrinter>
#include <QPushButton>
#include <QScrollArea>
#include <QTimer>
#include <QVBoxLayout>

#include <qlocalsocket.h>

#define WOW_MAXNAMES 400

typedef struct {
  char str[200];
  int len;
  int received;
  pwr_tStatus sts;
  const char* atom;
  int new_main;
} wow_sSelection;

typedef struct {
  char title[80];
  flow_tCtx flow_ctx;
  flow_eOrientation orientation;
  double scale;
  QPainter* painter;
} wow_sPrintData;

/************************************************************************
*
* Name: DisplayQuestion
*
* Description:	Displays an question box widget
*
*************************************************************************/
void CoWowQt::DisplayQuestion(void* ctx, const char* title, const char* text,
    void (*questionbox_ok)(void*, void*),
    void (*questionbox_cancel)(void*, void*), void* data)
{
  QMessageBox::StandardButton reply = QMessageBox::question(
      object->parent_wid, translate_utf8(title), translate_utf8(text));

  if (reply == QMessageBox::Yes) {
    if (questionbox_ok) {
      (questionbox_ok)(ctx, data);
    }
  } else {
    if (questionbox_cancel) {
      (questionbox_cancel)(ctx, data);
    }
  }
}

/************************************************************************
*
* Name: CreateInputDialog
*
* Description:	Create an input dialog widget
*
*************************************************************************/
void CoWowQt::CreateInputDialog(void* ctx, const char* title, const char* text,
    void (*inputdialogbox_ok)(void*, void*, char*),
    void (*inputdialogbox_cancel)(void*, void*), int input_length,
    char* init_text, void* data)
{
  QString temp_txt;
  if (init_text && strcmp(init_text, "") != 0) {
    temp_txt = QString::fromLatin1(init_text);
  }

  bool ok;
  QString str = QInputDialog::getText(object->parent_wid, translate_utf8(title),
      translate_utf8(text), QLineEdit::Normal, temp_txt, &ok);
  if (ok) {
    QByteArray ba = str.toLatin1();
    char* text = ba.data();

    if (inputdialogbox_ok) {
      (inputdialogbox_ok)(ctx, data, text);
    }
  } else {
    if (inputdialogbox_cancel) {
      (inputdialogbox_cancel)(ctx, data);
    }
  }
}

/************************************************************************
*
* Description: Create an Error message dialog.
*
*************************************************************************/
void CoWowQt::DisplayError(
    const char* title, const char* text, lng_eCoding coding)
{
  QString ctext;
  if (coding != lng_eCoding_UTF_8) {
    ctext = QString::fromLatin1(text);
    if (ctext[0] == '%') {
      ctext[0] = ' ';
    }
  } else {
    ctext = QString::fromUtf8(text);
  }

  QMessageBox msgBox(QMessageBox::Critical, fl(title), ctext,
      QMessageBox::NoButton, object->parent_wid->window());
  QDialogButtonBox* buttonBox = qFindChild<QDialogButtonBox*>(&msgBox);
  Q_ASSERT(buttonBox != 0);

  QPushButton* button = msgBox.addButton(QMessageBox::Ok);
  if ((buttonBox->buttonRole(button) == QDialogButtonBox::AcceptRole)) {
    msgBox.setDefaultButton(button);
  }

  QTimer::singleShot(1000, &msgBox, SLOT(close()));

  msgBox.exec();
}

/************************************************************************
*
* Description: Create a text window.
*
*************************************************************************/
void CoWowQt::DisplayText(
    const char* title, const char* text, int width, int height)
{
  QMessageBox::information(
      object->parent_wid, translate_utf8(title), QString::fromLatin1(text));
}

/************************************************************************
*
* Description: Create a window with a scrolled list and Ok and Cancel
*              buttons.
*
*************************************************************************/

void CoWowListWidgetQt::list_row_activated_cb(QTreeWidgetItem* item, int i)
{
  list_ok_cb();
}

void CoWowListWidgetQt::list_apply_cb()
{
  QString selected_text;

  QList<QTreeWidgetItem*> selected_items = list->selectedItems();
  if (selected_items.size() > 0) {
    QTreeWidgetItem* item = selected_items[0];
    selected_text = item->text(0);
  }
  if (action_cb) {
    QByteArray ba = selected_text.toLatin1();
    char* text = ba.data();

    (action_cb)(parent_ctx, text, ok_pressed);
  }
}

void CoWowListWidgetQt::list_ok_cb()
{
  ok_pressed = 1;
  list_apply_cb();
}

void CoWowListWidgetQt::list_cancel_cb()
{
  if (cancel_cb) {
    (cancel_cb)(parent_ctx);
  }
}

CoWowListWidgetQt::CoWowListWidgetQt(QWidget* parent, const char* title,
    const char* texts, int textsize, void(action_cb)(void*, char*, int),
    void(cancel_cb)(void*), void* parent_ctx, int show_apply_button)
    : QWidget(parent, Qt::Window), action_cb(action_cb), cancel_cb(cancel_cb),
      parent_ctx(parent_ctx)
{
  QVBoxLayout* vbox = new QVBoxLayout(this);
  QHBoxLayout* hbox = new QHBoxLayout(this);

  QPushButton* ok_button = new QPushButton("OK", this);
  connect(ok_button, SIGNAL(clicked()), this, SLOT(list_ok_cb()));
  hbox->addWidget(ok_button, 1, Qt::AlignRight);

  if (show_apply_button) {
    QPushButton* apply_button = new QPushButton(translate_utf8("Apply"), this);
    connect(apply_button, SIGNAL(clicked()), this, SLOT(list_apply_cb()));
    hbox->addWidget(apply_button, 0);
  }

  QPushButton* cancel_button = new QPushButton("Cancel", this);
  connect(cancel_button, SIGNAL(clicked()), this, SLOT(list_cancel_cb()));
  hbox->addWidget(cancel_button, 0);

  QTreeWidget* list = new QTreeWidget(this);

  // list->setColumnCount(2);

  char* name_p = (char*)texts;
  while (strcmp(name_p, "") != 0) {
    QTreeWidgetItem* item = new QTreeWidgetItem(list);
    item->setText(0, QString::fromLatin1(name_p));
    // item->setText(1, "");
    list->addTopLevelItem(item);
    name_p += textsize;
  }
  delete texts;

  connect(list, SIGNAL(itemActivated(QTreeWidgetItem*, int)), this,
      SLOT(list_row_activated_cb(QTreeWidgetItem*, int)));

  vbox->addWidget(list, 1, Qt::AlignTop);
  vbox->addLayout(hbox);

  setLayout(vbox);

  setFixedSize(200, 400);
  setWindowTitle(translate_utf8(title));
  setAttribute(Qt::WA_DeleteOnClose);

  show();

  list->setFocus();
}

void CoWowListWidgetQt::focusInEvent(QFocusEvent* event)
{
  QWidget::focusInEvent(event);
  pop(this);
}

void CoWowListWidgetQt::closeEvent(QCloseEvent* event)
{
  QWidget::closeEvent(event);
  list_cancel_cb();
}

void* CoWowQt::CreateList(const char* title, const char* texts, int textsize,
    void(action_cb)(void*, char*, int), void(cancel_cb)(void*),
    void* parent_ctx, int show_apply_button)
{
  CoWowListWidgetQt* tree = new CoWowListWidgetQt(object->parent_wid, title,
      texts, textsize, action_cb, cancel_cb, parent_ctx, show_apply_button);
  return tree;
}

void CoWowQt::PopList(void* data)
{
  CoWowListWidgetQt* ctx = (CoWowListWidgetQt*)data;
  pop(ctx);
}

void CoWowQt::DeleteList(void* data)
{
  CoWowListWidgetQt* ctx = (CoWowListWidgetQt*)data;
  ctx->close();
}

void CoWowWarrantQt::display_license()
{
  ((CoWowQtObject*)parentWidget())->DisplayLicense();
}

void CoWowWarrantQt::reject()
{
  QDialog::reject();
  exit(0);
}

void CoWowWarrantQt::destroy(bool destroyWindow, bool destroySubWindows)
{
  QDialog::destroy(destroyWindow, destroySubWindows);
  exit(0);
}

QString loadText(std::string filename)
{
  pwr_tFileName fname;

  sprintf(fname, "$pwr_exe/%s/%s", lng_get_language_str(), filename.c_str());
  dcli_translate_filename(fname, fname);

  FILE* fp = fopen(fname, "r");
  if (!fp) {
    sprintf(fname, "$pwr_exe/en_us/%s", filename.c_str());
    dcli_translate_filename(fname, fname);
    fp = fopen(fname, "r");
    if (!fp) {
      return QString();
    }
  }

  char text[4000];
  int i;
  for (i = 0; i < (int)sizeof(text) - 1; i++) {
    int c = fgetc(fp);
    if (c == EOF) {
      break;
    }
    text[i] = c;
  }
  text[i] = 0;
  fclose(fp);

  if (strncmp(text, "Coding:UTF-8", 12) == 0) {
    cdh_Strcpy(text, &text[13]);
    return QString::fromUtf8(text);
  } else {
    return QString::fromLatin1(text);
  }
}

CoWowWarrantQt::CoWowWarrantQt(CoWowQtObject* parent)
    : QDialog(parent->parent_wid)
{
  QVBoxLayout* main_layout = new QVBoxLayout();

  QHBoxLayout* inner_layout = new QHBoxLayout();

  pwr_tFileName fname;
  dcli_translate_filename(fname, "$pwr_exe/pwr_logofull.png");
  QLabel* image = new_image_label(this, fname);
  inner_layout->addWidget(image);
  inner_layout->setAlignment(image, Qt::AlignTop);

  QLabel* label = new QLabel(loadText("acceptlicense.txt"), this);
  label->adjustSize();
  label->setMinimumWidth(label->width());
  label->setWordWrap(true);
  add_expanding(inner_layout, label);

  main_layout->addLayout(inner_layout, 1);

  QDialogButtonBox* buttons = new QDialogButtonBox();
  QPushButton* reject = buttons->addButton(
      translate_utf8("Quit"), QDialogButtonBox::RejectRole);
  QPushButton* accept = buttons->addButton(
      translate_utf8("I Accept"), QDialogButtonBox::HelpRole);
  QPushButton* help = buttons->addButton(
      translate_utf8("Show License"), QDialogButtonBox::AcceptRole);

  connect(accept, SIGNAL(clicked()), this, SLOT(accept()));
  connect(reject, SIGNAL(clicked()), this, SLOT(reject()));
  connect(help, SIGNAL(clicked()), this, SLOT(display_license()));

  main_layout->addWidget(buttons);

  setLayout(main_layout);

  adjustSize();
  setWindowTitle(translate_utf8("Accept License Terms"));
  setAttribute(Qt::WA_DeleteOnClose);

  pop(this);
}

void CoWowQtObject::DisplayWarranty()
{
  new CoWowWarrantQt(this);
}

void CoWowQtObject::DisplayLicense()
{
  QMessageBox* mbox = new QMessageBox(0);
  mbox->setWindowTitle(translate_utf8("License"));
  mbox->setWindowFlags(Qt::Window);
  mbox->setAttribute(Qt::WA_DeleteOnClose);

  QScrollArea* scroll = new QScrollArea(mbox);
  scroll->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);

  scroll->setWidget(new QLabel(loadText("license.txt")));
  scroll->adjustSize();
  scroll->setFixedWidth(scroll->width());
  scroll->setFixedHeight(600);
  scroll->setWidgetResizable(true);

  QGridLayout* dialog_layout = ((QGridLayout*)mbox->layout());
  dialog_layout->addWidget(scroll, 0, 0);

  pop(mbox);
}

int CoWowQt::GetSelection(char* str, int size, const char* atom)
{
  static wow_sSelection data;

  data.received = 0;
  data.sts = 0;
  data.atom = atom;
  data.new_main = 0;

  QLocalSocket* socket = new QLocalSocket();
  socket->connectToServer(fl(atom));

  while (!data.received) {
    if (socket->waitForReadyRead(50)) {
      if (socket->bytesAvailable() > 0) {
        QDataStream in(socket);
        if (socket->bytesAvailable() > int(sizeof(data.str) - 1)
            || in.atEnd()) {
          data.sts = 0;
          continue;
        }
        in.readRawData(data.str, socket->bytesAvailable());
        data.str[socket->bytesAvailable()] = 0;
        data.len = socket->bytesAvailable();
        data.sts = 1;
      } else {
        data.sts = 0;
      }

      data.received = 1;
    }
    QApplication::processEvents();
  }

  delete socket;

  if (data.sts && data.len < size) {
    strcpy(str, data.str);
  }

  return data.sts;
}

void CoWowQt::CreateFileSelDia(const char* title, void* parent_ctx,
    void (*file_selected_cb)(void*, char*, wow_eFileSelType),
    wow_eFileSelType file_type)
{
  pwr_tFileName fname;

  QFileDialog dialog(object->parent_wid);

  pwr_tFileName folder;
  QString filter;
  if (file_type == wow_eFileSelType_Dbs) {
    dcli_translate_filename(folder, "$pwrp_load");
    filter = "*.dbs";
  } else if (file_type == wow_eFileSelType_Wbl) {
    dcli_translate_filename(folder, "$pwrp_db");
    filter = "*.wb_load, *.wb_dmp;;All Files (*)";
  } else if (file_type == wow_eFileSelType_Graph) {
    dcli_translate_filename(folder, "$pwrp_pop");
    filter = "*.pwg";
  } else if (file_type == wow_eFileSelType_ColorTheme) {
    dcli_translate_filename(folder, "$pwrp_pop");
    filter = "*.pwgc";
  } else if (file_type == wow_eFileSelType_Image) {
    dcli_translate_filename(folder, "$pwrp_pop");
    filter = "*.png,*.jpg,*.gif,*.svg;;All Files (*)";
  } else if (file_type == wow_eFileSelType_History) {
    dcli_translate_filename(folder, "~");
    filter = "*.txt,*.csv,*.skv;;All Files (*)";
  } else if (file_type == wow_eFileSelType_Backup) {
    dcli_translate_filename(folder, "$pwrp_load");
    filter = "*.bck;;All Files (*)";
  }

  QString filename = QFileDialog::getOpenFileName(
      object->parent_wid, fl(title), fl(folder), filter);

  if (!filename.isNull()) {
    strcpy(fname, qPrintable(filename));
  }

  if (file_selected_cb) {
    (file_selected_cb)(parent_ctx, fname, file_type);
  }
}

CoWowTimer* CoWowQt::timer_new()
{
  return new CoWowTimerQt();
}

CoWowTimerQt::CoWowTimerQt()
{
  object = new CoWowTimerQtObject(this);
}

CoWowTimerQt::~CoWowTimerQt()
{
  delete object;
}

void CoWowTimerQt::add(int time, void (*callback)(void*), void* data)
{
  m_callback = callback;
  m_data = data;
  timer = new QTimer(object);
  timer->setSingleShot(true);
  QObject::connect(timer, SIGNAL(timeout()), object, SLOT(timer_cb()));
  timer->start(time);
}

void CoWowTimerQt::remove()
{
  timer->stop();
}

void CoWowTimerQtObject::timer_cb()
{
  (wow_timer->m_callback)(wow_timer->m_data);
}

//
// Calculate position for a popup menu
//
void CoWowQt::PopupPosition(
    QWidget* parent, int x_event, int y_event, int* x, int* y)
{
  QWidget* grandparent;
  int x1 = 0;
  int y1 = 0;

  QPoint p0((int)x_event, (int)y_event);

  grandparent = parent->parentWidget();
  while (!grandparent->isWindow()) {
    if (!x1 && !y1 && (parent->geometry().x() || parent->geometry().y())) {
      x1 = parent->geometry().x();
      y1 = parent->geometry().y();
      p0 = parent->mapToParent(p0);
    }
    parent = grandparent;
    grandparent = parent->parentWidget();
  }
  if (grandparent) {
    // Add window widget position
    p0 = grandparent->mapToParent(p0);
  }

  *x = p0.x();
  *y = p0.y();
}

//
//  FocusTimer
//
void CoWowFocusTimerQt::disable(int time)
{
  set_focus_disabled++;
  if (request_cnt > 1) {
    request_cnt = 0;
  }
  timer = new QTimer();
  timer->setSingleShot(true);
  connect(timer, SIGNAL(timeout()), this, SLOT(enable_set_focus()));
  timer->start(time);
}

int CoWowFocusTimerQt::disabled()
{
  // Return false on first request after disable
  request_cnt++;
  return (request_cnt > 1);
}

void CoWowFocusTimerQt::enable_set_focus()
{
  set_focus_disabled--;
  request_cnt = 0;
}

CoWowFocusTimerQt::~CoWowFocusTimerQt()
{
  if (set_focus_disabled) {
    delete timer;
  }
}

void CoWowQt::SetWindowIcon(QWidget* w)
{
  static QIcon* icon = 0;

  if (!icon) {
    pwr_tFileName fname;
    dcli_translate_filename(fname, "$pwr_exe/pwr_icon16.png");
    icon = new QIcon(fl(fname));
  }
  w->setWindowIcon(*icon);
}

CoWowEntryQt::CoWowEntryQt(CoWowRecall* re) : m_re(re), m_hide_on_esc(false)
{
  if (!m_re) {
    m_re = new CoWowRecall();
  }
  setMaxLength(m_re->m_line_size - 1);
}

void CoWowEntryQt::keyPressEvent(QKeyEvent* event)
{
  int keysym = event->key();
  QString txt = text();

  switch (keysym) {
  case Qt::Key_Return:
  case Qt::Key_Enter: {
    // Insert in recall buffer
    if (txt.compare("") != 0) {
      for (int i = m_re->m_recall_size - 2; i >= 0; i--) {
        strcpy(m_re->m_recall[i + 1], m_re->m_recall[i]);
      }
      strncpy(m_re->m_recall[0], qPrintable(txt), m_re->m_line_size);
      m_re->m_recall[0][m_re->m_line_size - 1] = 0;
    }
    m_re->m_current_recall_line = 0;
    break;
  }
  case Qt::Key_Up: {
    m_re->m_current_recall_line++;
    if (m_re->m_current_recall_line > m_re->m_recall_size - 1) {
      m_re->m_current_recall_line = m_re->m_recall_size - 1;
    }

    setText(QString::fromLocal8Bit(
        m_re->m_recall[m_re->m_current_recall_line - 1]));
    end(false);
    break;
  }
  case Qt::Key_Down: {
    if (m_re->m_current_recall_line == 0) {
      setText("");
    } else if (m_re->m_current_recall_line == 1) {
      setText("");
      m_re->m_current_recall_line--;
    } else {
      m_re->m_current_recall_line--;
      setText(m_re->m_recall[m_re->m_current_recall_line - 1]);
      end(false);
    }
    break;
  }
  case Qt::Key_Escape:
    if (m_hide_on_esc) {
      hide();
    }
    break;
  default:
    QLineEdit::keyPressEvent(event);
    break;
  }
}

void CoWowEntryQt::hideEvent(QHideEvent* event)
{
  emit hidden();
  QWidget::hideEvent(event);
}

//
//  Modal Dialog with text and tree buttons
//
CoWowModalDialogQt::CoWowModalDialogQt(QWidget* parent, const char* title,
    const char* text, const char* button1, const char* button2,
    const char* button3, const char* image, int input_length,
    CoWowRecall* recall)
    : QDialog(parent)
{
  QPixmap* image_w;
  pwr_tFileName fname;

  setFixedSize(400, 150);
  setWindowTitle(fl(title));
  setAttribute(Qt::WA_DeleteOnClose);

  QLabel* text_w = new QLabel(fl(text));
  text_w->setWordWrap(true);

  if (image) {
    dcli_translate_filename(fname, image);
    image_w = new QPixmap(fname);
  }
  if (!image) {
    *image_w = QApplication::style()
                   ->standardIcon(QStyle::SP_MessageBoxQuestion)
                   .pixmap(48);
  }
  QLabel* image_widget = new QLabel(this);
  image_widget->setPixmap(*image_w);

  QHBoxLayout* hboxtext = new QHBoxLayout();
  // hboxtext->setSpacing(15);
  hboxtext->addWidget(image_widget);
  hboxtext->addWidget(text_w);

  if (recall || input_length > 0) {
    QLineEdit* textinput;

    if (!recall) {
      textinput = new QLineEdit(this);
      textinput->setMaxLength(input_length);
      connect(textinput, SIGNAL(editingFinished()), this,
          SLOT(modaldia_activate_cb()));
    } else {
      CoWowEntryQt* entry = new CoWowEntryQt(recall);
      textinput = entry;
      connect(textinput, SIGNAL(editingFinished()), this,
          SLOT(modaldia_activate_cb()));
    }

    hboxtext->addWidget(textinput);
  }

  QHBoxLayout* hboxbuttons = new QHBoxLayout();
  // hboxbuttons->setSpacing(40);

  if (button1) {
    QWidget* button1_w = new QPushButton(translate_utf8(button1), this);
    button1_w->setFixedSize(90, 28);
    connect(button1_w, SIGNAL(clicked()), this, SLOT(modaldia_button1_cb()));
    hboxbuttons->addWidget(button1_w);
  }
  if (button2) {
    QWidget* button2_w = new QPushButton(translate_utf8(button2), this);
    button2_w->setFixedSize(90, 28);
    connect(button2_w, SIGNAL(clicked()), this, SLOT(modaldia_button2_cb()));
    hboxbuttons->addWidget(button2_w);
  }
  if (button3) {
    QWidget* button3_w = new QPushButton(translate_utf8(button3), this);
    button3_w->setFixedSize(90, 28);
    connect(button3_w, SIGNAL(clicked()), this, SLOT(modaldia_button3_cb()));
    hboxbuttons->addWidget(button3_w);
  }

  QVBoxLayout* vbox = new QVBoxLayout(this);
  vbox->setSpacing(15);
  vbox->addLayout(hboxtext, 1);
  vbox->addWidget(separator(QFrame::HLine));
  vbox->addLayout(hboxbuttons);

  setLayout(vbox);
}

void CoWowModalDialogQt::destroy(bool destroyWindow, bool destroySubWindows)
{
  setResult(wow_eModalDialogReturn_Deleted);
  QDialog::destroy(destroyWindow, destroySubWindows);
}

void CoWowModalDialogQt::modaldia_activate_cb(QKeyEvent* e)
{
  done(wow_eModalDialogReturn_ReturnPressed);
}

void CoWowModalDialogQt::modaldia_button1_cb()
{
  done(wow_eModalDialogReturn_Button1);
}

void CoWowModalDialogQt::modaldia_button2_cb()
{
  done(wow_eModalDialogReturn_Button2);
}

void CoWowModalDialogQt::modaldia_button3_cb()
{
  done(wow_eModalDialogReturn_Button3);
}

QString CoWowModalDialogQt::text()
{
  if (textinput) {
    return textinput->text();
  }
  return QString();
}

int CoWowQt::CreateModalDialog(const char* title, const char* text,
    const char* button1, const char* button2, const char* button3,
    const char* image)
{
  QDialog* dialog_w = new CoWowModalDialogQt(
      object->parent_wid, title, text, button1, button2, button3, image);
  return dialog_w->exec();
}

wow_sModalInputDialog* CoWowQt::CreateModalInputDialog(const char* title,
    const char* text, const char* button1, const char* button2,
    const char* button3, const char* image, int input_length,
    CoWowRecall* recall)
{
  CoWowModalDialogQt* dialog_w = new CoWowModalDialogQt(object->parent_wid,
      title, text, button1, button2, button3, image, input_length, recall);

  int status = dialog_w->exec();

  wow_sModalInputDialog* ret = new wow_sModalInputDialog();
  ret->status = status;

  QString valueutf8 = dialog_w->text();
  QByteArray ba = valueutf8.toLatin1();
  strncpy(ret->input_str, ba.data(), sizeof(ret->input_str));

  return ret;
}

pwr_tStatus CoWowQt::CreateMenuItem(
    const char* name, void* menu, int pixmap, int append, void* w)
{
  char name_array[10][40];
  int name_cnt;
  pwr_tFileName fname;

  name_cnt = dcli_parse(name, "-", "", (char*)name_array,
      sizeof(name_array) / sizeof(name_array[0]), sizeof(name_array[0]), 0);
  if (!name_cnt) {
    return 0;
  }

  if (name_cnt == 1) {
    *(QMenu**)w = new QMenu(translate_utf8(name_array[0]), object->parent_wid);

    if (pixmap != wow_ePixmap_No && pixmap < wow_ePixmap__) {
      switch (pixmap) {
      case wow_ePixmap_Graph:
        dcli_translate_filename(fname, "$pwr_exe/wtt_ge.png");
        break;
      default:
        dcli_translate_filename(fname, "$pwr_exe/wtt_ge.png");
      }
      (*(QMenu**)w)->setIcon(QIcon(fname));
    }

    if (append) {
      (*(QMenu**)menu)->addMenu(*(QMenu**)w);
    } else {
      QAction* first = (*(QMenu**)menu)->actions()[0];
      (*(QMenu**)menu)->insertMenu(first, *(QMenu**)w);
    }

    (*(QMenu**)w)->show();
  } else {
    // Find or create the parent menues
    QMenu* parent = (QMenu*)menu;

    for (int i = 0; i < name_cnt; i++) {
      QWidget* child
          = parent->findChild<QWidget*>(QString::fromLatin1(name_array[i]));

      if (!child) {
        // Create the menu item
        QMenu* item
            = new QMenu(translate_utf8(name_array[i]), object->parent_wid);
        if (i == name_cnt - 1 && pixmap != wow_ePixmap_No
            && pixmap <= wow_ePixmap__) {
          switch (pixmap) {
          case wow_ePixmap_Graph:
            dcli_translate_filename(fname, "$pwr_exe/wtt_ge.png");
            break;
          default:
            dcli_translate_filename(fname, "$pwr_exe/wtt_ge.png");
          }
          item->setIcon(QIcon(fname));
        }

        if (append) {
          (*(QMenu**)menu)->addMenu(*(QMenu**)w);
        } else {
          QAction* first = (*(QMenu**)menu)->actions()[0];
          (*(QMenu**)menu)->insertMenu(first, *(QMenu**)w);
        }

        item->show();

        if (i != name_cnt - 1) {
          QMenu* submenu = new QMenu();
          item->addMenu(submenu);
          parent = submenu;
          submenu->show();
        } else {
          parent = item;
        }
      } else {
        parent = child->findChild<QMenu*>();
      }

      if (!parent) {
        return 0;
      }
    }
    *(QMenu**)w = parent;
  }
  return 1;
}

pwr_tStatus CoWowQt::DeleteMenuItem(const char* name, void* menu)
{
  char name_array[10][40];
  int name_cnt;

  name_cnt = dcli_parse(name, "-", "", (char*)name_array,
      sizeof(name_array) / sizeof(name_array[0]), sizeof(name_array[0]), 0);
  if (!name_cnt) {
    return 0;
  }

  QWidget* parent = (QMenuBar*)menu;

  for (int i = 0; i < name_cnt; i++) {
    QWidget* child = parent->findChild<QWidget*>(name_array[i]);

    if (!child) {
      return 0;
    }

    if (i == name_cnt - 1) {
      child->setParent(0);
    } else {
      parent = child->findChild<QMenu*>();
    }

    if (!parent) {
      return 0;
    }
  }
  return 1;
}

void CoWowQtObject::wait_cb()
{
}

void CoWowQt::Wait(float time)
{
  m_wait_timerid = new QTimer(object);
  m_wait_timerid->setSingleShot(true);
  QObject::connect(m_wait_timerid, SIGNAL(timeout()), object, SLOT(wait_cb()));
  m_wait_timerid->start(int(time * 1000));
}

void CoWowQt::CreateBrowPrintDialogQt(const char* title, void* brow_ctx,
    int orientation, double scale, void* parent_widget, pwr_tStatus* sts)
{
  if (m_printdialog_disable && strcmp(m_default_printer, "") == 0) {
    *sts = WOW__PRINTDIALOGDISABLED;
    return;
  }

  wow_sPrintData* print_data = new wow_sPrintData();
  print_data->flow_ctx = (flow_tCtx)brow_ctx;
  print_data->orientation = (flow_eOrientation)orientation;
  print_data->scale = scale;
  strncpy(print_data->title, title, sizeof(print_data->title));

  QPrinter printer;
  QPrintDialog printDialog(&printer, (QWidget*)parent_widget);
  if (printDialog.exec() == QDialog::Accepted) {
    print_data->painter = new QPainter();
    print_data->painter->begin(&printer);

    int pages;
    brow_PrintGetPages((brow_tCtx)print_data->flow_ctx, print_data->orientation,
        print_data->scale, &pages);
    for (int page = 0; page < pages; page++) {
      if (print_data->orientation == flow_eOrientation_Landscape) {
        printer.setOrientation(QPrinter::Landscape);
      } else {
        printer.setOrientation(QPrinter::Portrait);
      }

      brow_PrintDrawPage((brow_tCtx)print_data->flow_ctx, print_data->painter,
          print_data->title, page, print_data->orientation, print_data->scale);

      if (page < pages - 1) {
        printer.newPage();
      }
    }
    print_data->painter->end();
    *sts = WOW__SUCCESS;
  }
  delete print_data;
}

void CoWowQt::CreateFlowPrintDialogQt(const char* title, void* flow_ctx,
    int orientation, double scale, void* parent_widget, pwr_tStatus* sts)
{
  if (m_printdialog_disable && strcmp(m_default_printer, "") == 0) {
    *sts = WOW__PRINTDIALOGDISABLED;
    return;
  }

  wow_sPrintData* print_data = new wow_sPrintData();
  print_data->flow_ctx = (flow_tCtx)flow_ctx;
  print_data->orientation = (flow_eOrientation)orientation;
  print_data->scale = scale;
  strncpy(print_data->title, title, sizeof(print_data->title));

  QPrinter printer;
  QPrintDialog printDialog(&printer, (QWidget*)parent_widget);
  if (printDialog.exec() == QDialog::Accepted) {
    print_data->painter = new QPainter();
    print_data->painter->begin(&printer);

    int pages;
    flow_PrintGetPages(print_data->flow_ctx, print_data->orientation,
        print_data->scale, &pages);
    for (int page = 0; page < pages; page++) {
      flow_eOrientation orientation;
      flow_PrintDrawGetOrientation(print_data->flow_ctx, page, &orientation);
      if (orientation == flow_eOrientation_Landscape) {
        printer.setOrientation(QPrinter::Landscape);
      } else {
        printer.setOrientation(QPrinter::Portrait);
      }

      flow_PrintDrawPage(print_data->flow_ctx, print_data->painter,
          print_data->title, page, print_data->orientation, print_data->scale);

      if (page < pages - 1) {
        printer.newPage();
      }
    }
    print_data->painter->end();
    *sts = WOW__SUCCESS;
  }
  delete print_data;
}

void CoWowQt::update_title(QWidget* w, int editmode)
{
  QString title = w->windowTitle();
  if (editmode) {
    if (!title.startsWith("*** ")) {
      w->setWindowTitle(title.prepend("*** "));
    }
  } else {
    if (title.startsWith("*** ")) {
      w->setWindowTitle(title.remove(0, 4));
    }
  }
}

CoWowQt::CoWowQt(QWidget* parent)
{
  object = new CoWowQtObject(parent);
}

CoWowQt::~CoWowQt()
{
  delete object;
}

void CoWowQt::SetParent(QWidget* parent)
{
  object->parent_wid = parent;
}