/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "cow_qt_helpers.h"
#include "cow_xhelp_qt.h"
#include "cow_xhelpnav_qt.h"

#include <QInputDialog>
#include <QMenu>
#include <QMenuBar>
#include <QVBoxLayout>

void CoXHelpQt::open_input_dialog(const char* text, const char* title,
    const char* init_text, void (*ok_cb)(CoXHelp*, char*))
{
  bool ok;
  QString str = QInputDialog::getText(toplevel, fl("Input Dialog"),
      fl("Graph Name"), QLineEdit::Normal, fl(init_text), &ok);
  if (ok) {
    (ok_cb)(this, qPrintableLatin1(str));
  }
}

void CoXHelpQtWidget::activate_print()
{
  xhelp->activate_print();
}

void CoXHelpQtWidget::activate_home()
{
  xhelp->home();
}

void CoXHelpQtWidget::activate_back()
{
  xhelp->back();
}

void CoXHelpQtWidget::activate_nexttopic()
{
  xhelp->next_topic();
}

void CoXHelpQtWidget::activate_previoustopic()
{
  xhelp->previous_topic();
}

void CoXHelpQtWidget::activate_zoom_in()
{
  double zoom_factor;
  xhelp->xhelpnav->get_zoom(&zoom_factor);
  if (zoom_factor > 40) {
    return;
  }

  xhelp->xhelpnav->zoom(1.18);
}

void CoXHelpQtWidget::activate_zoom_out()
{
  double zoom_factor;
  xhelp->xhelpnav->get_zoom(&zoom_factor);
  if (zoom_factor < 15) {
    return;
  }

  xhelp->xhelpnav->zoom(1.0 / 1.18);
}

void CoXHelpQtWidget::activate_zoom_reset()
{
  xhelp->xhelpnav->unzoom();
}

void CoXHelpQtWidget::activate_search()
{
  xhelp->open_input_dialog(
      "Search string", "Search string", "", &CoXHelp::find_ok);
}

void CoXHelpQtWidget::activate_searchnext()
{
  xhelp->xhelpnav->search_next();
}

void CoXHelpQtWidget::activate_searchprevious()
{
  xhelp->xhelpnav->search_next_reverse();
}

void CoXHelpQtWidget::activate_help()
{
  CoXHelp::dhelp("helpwindow_refman", 0, navh_eHelpFile_Other,
      "$pwr_lang/man_dg.dat", true);
}

void CoXHelpQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!xhelp->focustimer.disabled()) {
    if (xhelp->xhelpnav && xhelp->displayed) {
      xhelp->xhelpnav->set_inputfocus();
    }
    xhelp->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void CoXHelpQt::set_dimension(int width, int height)
{
  toplevel->resize(width, height);
}

void CoXHelpQt::print()
{
  char title[80];
  strcpy(title, qPrintable(translate_utf8("Help")));

  CoWowQt::CreateBrowPrintDialogQt(title, xhelpnav->brow->ctx, ((CoXHelpNavQt*)xhelpnav)->brow_widget);
}

void CoXHelpQtWidget::closeEvent(QCloseEvent* event)
{
  if (xhelp->close_cb) {
    (xhelp->close_cb)(xhelp->parent_ctx, xhelp);
  } else {
    setVisible(false);
    xhelp->displayed = 0;
  }

  QWidget::closeEvent(event);
}

void CoXHelpQt::pop()
{
  ::pop(toplevel);
  displayed = 1;
}

CoXHelpQt::~CoXHelpQt()
{
  debug_print("~CoXHelpQt()\n");
  delete xhelpnav;
}

CoXHelpQt::CoXHelpQt(QWidget* xa_parent_wid, void* xa_parent_ctx,
    xhelp_eUtility utility, int* xa_sts)
    : CoXHelp(xa_parent_ctx, utility, xa_sts), parent_wid(xa_parent_wid)
{
  int sts;
  char title[80];

  strcpy(title, Lng::translate("Help"));

  toplevel = new CoXHelpQtWidget(this, xa_parent_wid);
  toplevel->setMinimumSize(700, 600);
  toplevel->setWindowTitle(fl(title));

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(toplevel, file, "&Home", SLOT(activate_home()), "CTRL+A");
  addMenuItem(toplevel, file, "&Back", SLOT(activate_back()), "CTRL+B");
  addMenuItem(
      toplevel, file, "&Next Topic", SLOT(activate_nexttopic()), "CTRL+N");
  addMenuItem(toplevel, file, "&Previous Topic", SLOT(activate_previoustopic()),
      "CTRL+P");
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Edit entry
  QMenu* edit = menu_bar->addMenu(translate_utf8("&Edit"));
  addMenuItem(toplevel, edit, "&Search", SLOT(activate_search()), "CTRL+F",
      "system-search");
  addMenuItem(
      toplevel, edit, "Search &Next", SLOT(activate_searchnext()), "CTRL+G");
  addMenuItem(toplevel, edit, "Search &Previous",
      SLOT(activate_searchprevious()), "CTRL+D");

  // Menu View
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "zoom-original");

  // Menu Help
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Go to start page", SLOT(activate_home()),
      "$pwr_exe/xtt_home.png");
  addToolItem(toplevel, tools, "Go back", SLOT(activate_back()),
      "$pwr_exe/xtt_back.png");
  addToolItem(toplevel, tools, "Previous topic", SLOT(activate_previoustopic()),
      "$pwr_exe/xtt_previous.png");
  addToolItem(toplevel, tools, "Next topic", SLOT(activate_nexttopic()),
      "$pwr_exe/xtt_next.png");

  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  QVBoxLayout* vbox = new QVBoxLayout();

  xhelpnav
      = new CoXHelpNavQt(this, toplevel, title, utility, &brow_widget, &sts);
  xhelpnav->open_URL_cb = CoXHelp::open_URL;

  vbox->setMenuBar(menu_bar);
  vbox->addWidget(tools);
  vbox->addWidget(brow_widget);

  toplevel->setLayout(vbox);
  toplevel->show(); // The xhelpnav must be realized.
  toplevel->hide();

  *xa_sts = 1;
}