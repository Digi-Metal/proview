/** 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2015 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 **/

/* cow_wow.cpp -- useful windows */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "pwr.h"
#include "cow_wow.h"
#include "co_dcli.h"

bool CoWow::m_autoremove = false;
bool CoWow::m_printdialog_disable = false;
char CoWow::m_default_printer[80] = "";
void *CoWow::m_transient_wid = 0;

CoWow::~CoWow() {}

int CoWow::HideWarranty()
{
  static int hide = 0;
  int prev = hide;

  hide = 1;
  return prev;
}

#define FILELIST_TEXTSIZE 80

void *CoWow::CreateFileList( 
  const char *title,
  const char *dir,
  const char *pattern,
  const char *type,
  void	    (action_cb)( void *, char *),
  void	    (cancel_cb)( void *),
  void	    *ctx,
  int	    show_apply_button
)
{
  int sts;
  pwr_tFileName file_spec, found_file, stype, item;
  char *s;
  char *texts;
  int i, cnt;

  if ( type) {
    if ( type[0] == '.')
      strncat( stype, type, sizeof(stype));
    else {
      strcpy( stype, ".");
      strncat( stype, type, sizeof(stype)-1);
    }
    sprintf( file_spec, "%s/%s%s", dir, pattern, stype);
  }
  else
    sprintf( file_spec, "%s/%s", dir, pattern);

  // Count number of items
  cnt = 0;
  sts = dcli_search_file( file_spec, found_file, DCLI_DIR_SEARCH_INIT);
  while( ODD(sts)) {
    cnt++;
    sts = dcli_search_file( file_spec, found_file, DCLI_DIR_SEARCH_NEXT);
  }
  dcli_search_file( file_spec, found_file, DCLI_DIR_SEARCH_END);

  texts = (char *)calloc( cnt+1, FILELIST_TEXTSIZE);

  i = 0;
  sts = dcli_search_file( file_spec, found_file, DCLI_DIR_SEARCH_INIT);
  while( ODD(sts)) {
    
    if (( s = strrchr( found_file, '/')))
      strncpy( item, s+1, sizeof(item));
    else
      strncpy( item, found_file, sizeof(item));

    if ( type) {
      if ( (s = strstr( item, stype)))
	*s = 0;
    }
    strncpy( &texts[ FILELIST_TEXTSIZE * i], item, FILELIST_TEXTSIZE);
    sts = dcli_search_file( file_spec, found_file, DCLI_DIR_SEARCH_NEXT);
    i++;
  }
  dcli_search_file( file_spec, found_file, DCLI_DIR_SEARCH_END);

  return CreateList( title, texts, FILELIST_TEXTSIZE, action_cb, cancel_cb,
		     ctx, show_apply_button);
}
