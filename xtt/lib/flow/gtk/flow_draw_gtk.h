/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef flow_draw_gtk_h
#define flow_draw_gtk_h

#include <stdlib.h>

#include <gtk/gtk.h>
#include "flow_draw.h"

class DrawWind {
public:
    GdkWindow* window = NULL;
    GdkPixmap* buffer = NULL;
};

class FlowDrawGtk : public FlowDraw {
public:
  GtkWidget* toplevel;
  GtkWidget* nav_shell;
  GtkWidget* nav_toplevel;
  GdkDisplay* display;
  DrawWind m_wind;
  DrawWind nav_wind;
  DrawWind* w = NULL;
  GdkScreen* screen;
  GdkGC* gc;
  GdkGC* gc_erase;
  GdkGC* gc_inverse;
  GdkGC* gc_yellow;
  GdkGC* gc_green;
  GdkGC* gc_darkgray;
  GdkGC* gcs[flow_eDrawType__][DRAW_TYPE_SIZE];
  // XFontStruct	*font_struct[draw_eFont__][DRAW_FONT_SIZE];
  GdkFont* font[draw_eFont__][DRAW_FONT_SIZE];
  GdkColormap* colormap;
  GdkCursor* cursors[draw_eCursor__];
  GdkColor background;
  GdkColor foreground;
  guint timer_id;
  GdkColor color_vect[20];
  int color_vect_cnt;
  int closing_down;
  guint redraw_timer;

  FlowDrawGtk(GtkWidget* toplevel, void** flow_ctx,
      int (*init_proc)(GtkWidget* w, FlowCtx* ctx, void* client_data),
      void* client_data, flow_eCtxType type);
  ~FlowDrawGtk();
  void init_nav(GtkWidget* nav_widget, void* flow_ctx);
  void event_handler(FlowCtx* ctx, GdkEvent event);
  void enable_event(FlowCtx* ctx, flow_eEvent event, flow_eEventType event_type,
      int (*event_cb)(FlowCtx* ctx, flow_tEvent event));
  void create_buffer(DrawWind *wind);
  void clear();

  void get_window_size(DrawWind *wind, int* width, int* height);
  void set_window_size(DrawWind *wind, int width, int height);

  int begin(DrawWind *wind);
  void end();

  void rect(int x, int y, int width, int height, flow_eDrawType gc_type,
      int fill, int idx, int highlight = 0, int dimmed = 0);
  void triangle(int x, int y, int width, int height, flow_eDrawType gc_type,
      int fill, int idx, int highlight = 0, int dimmed = 0);
  void arrow(int x1, int y1, int x2, int y2, int x3, int y3,
      flow_eDrawType gc_type, int idx, int highlight = 0);
  void arc(int x, int y, int width, int height, int angle1, int angle2,
      flow_eDrawType gc_type, int idx, int highlight = 0, int dimmed = 0);
  void line(int x1, int y1, int x2, int y2, flow_eDrawType gc_type, int idx,
      int highlight = 0, int dimmed = 0);
  void text(int x, int y, char* text, int len, flow_eDrawType gc_type, int idx,
      double size, int highlight = 0, int dimmed = 0);
  void image(int x, int y, int width, int height, flow_tImImage image,
      flow_tPixmap pixmap, flow_tPixmap clip_mask);
  void pixmaps_create(flow_sPixmapData* pixmap_data, void** pixmaps);
  void pixmaps_delete(void* pixmaps);
  void pixmap(int x, int y, flow_sPixmapData* pixmap_data, void* pixmaps,
      flow_eDrawType gc_bg, flow_eDrawType gc_fg, int idx);

  void set_timer(FlowCtx* ctx, int time_ms, void (*callback_func)(FlowCtx* ctx),
      void** id);
  void cancel_timer(void* id);
  void set_cursor(DrawWind *wind, draw_eCursor cursor);
  void get_text_extent(const char* text, int len, flow_eDrawType gc_type,
      int idx, int* width, int* height, double size);
  void delete_secondary_ctx(FlowCtx* ctx);
  void create_secondary_ctx(FlowCtx* flow_ctx, void** secondary_flow_ctx,
      int (*init_proc)(FlowCtx*, void*), void* client_data, flow_eCtxType type);
  void change_ctx(FlowCtx* from_ctx, FlowCtx* to_ctx);
  void set_click_sensitivity(int value);
  void set_white_background();
  int image_get_width(flow_tImImage image);
  int image_get_height(flow_tImImage image);
  void image_scale(float scale, flow_tImImage orig_im, flow_tImImage* im,
      flow_tPixmap* im_pixmap, flow_tPixmap* im_mask);
  int image_load(const char* imagefile, float scale, float nav_scale,
      flow_tImImage* orig_im, flow_tImImage* im, flow_tPixmap* im_pixmap,
      flow_tPixmap* im_mask, flow_tPixmap* im_nav_pixmap,
      flow_tPixmap* im_nav_mask);
  FlowPrintDraw* print_draw_new(void* context, const char* title, int page,
      void* flow_ctx, int page_border, int* sts);
};

#endif
