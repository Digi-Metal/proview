/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

#include <stdlib.h>
#include <math.h>

#include "glow_std.h"

#include "flow.h"
#include "flow_ctx.h"
#include "flow_browctx.h"
#include "flow_draw.h"
#include "flow_draw_qt.h"
#include "flow_browwidget_qt.h"

#include "flow_scroll_widget_qt.h"

#include "cow_qt_helpers.h"

static void scroll_callback(flow_sScroll *data)
{
  widget_sScroll *scroll_data = (widget_sScroll *) data->scroll_data;
  QtScrollWidgetFlow *brow = ((QtScrollWidgetFlow *) scroll_data->parent);

  if (brow->scroll_timerid) {
    delete brow->scroll_timerid;
  }

  brow->scroll_timerid = new QTimer();
  brow->scroll_timerid->setSingleShot(true);
  QObject::connect(brow->scroll_timerid, SIGNAL(timeout()), brow,
                   SLOT(scroll_callback_cb()));
  brow->scroll_timerid->start(200);
  brow->scroll_data = *data;
}

static int brow_init_proc(QWidget *w, FlowCtx *fctx, void *client_data)
{
  QtScrollWidgetFlow *brow = ((QtScrollWidgetFlow *) w);
  BrowCtx *ctx = ((BrowCtx *) brow->parent_ctx);

  if (brow->scroll_h) {
    widget_sScroll *scroll_data = new widget_sScroll();
    scroll_data->parent = w;
    scroll_data->scroll_h = brow->scroll_h;
    scroll_data->scroll_v = brow->scroll_v;
    scroll_data->scroll_h_managed = 1;
    scroll_data->scroll_v_managed = 1;

    ctx->register_scroll_callback((void *) scroll_data, scroll_callback);
  }
  return (brow->init_proc)(ctx, client_data);
}

QWidget *browwidgetqt_new(int (*init_proc)(FlowCtx *ctx, void *client_data),
                          void *client_data)
{
  QtScrollWidgetFlow *w = new QtScrollWidgetFlow();
  debug_print("creating a new flow scroll widget\n");
  w->init(flow_eCtxType_Brow, init_proc, client_data, brow_init_proc);
  return w;
}

QWidget *scrolledbrowwidgetqt_new(
    int (*init_proc)(FlowCtx *ctx, void *client_data), void *client_data,
    QWidget **browwidget)
{
  QtScrollWidgetFlow *w = new QtScrollWidgetFlow();
  debug_print("creating a new flow scroll widget\n");
  QWidget *form = w->initScroll(flow_eCtxType_Brow, init_proc, client_data,
                                brow_init_proc);
  *browwidget = w;
  return form;
}

QWidget *brownavwidgetqt_new(QWidget *main_brow)
{
  QtScrollWidgetFlow *w = new QtScrollWidgetFlow();
  debug_print("creating a new flow scroll widget\n");
  w->init(flow_eCtxType_Brow, main_brow);
  return w;
}

void browwidgetqt_modify_ctx(QWidget *w, void *ctx)
{
  ((QtScrollWidgetFlow *) w)->parent_ctx = ctx;
}