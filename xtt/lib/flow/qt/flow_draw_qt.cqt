/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <assert.h>
#include <stdlib.h>

#include "co_dcli.h"

#include "cow_qt_helpers.h"

#include "flow_browctx.h"
#include "flow_browwidget_qt.h"
#include "flow_draw_qt.h"
#include "flow_msg.h"
#include "flow_scroll_widget_qt.h"
#include "flow_widget_qt.h"

#include <QApplication>
#include <QBitmap>
#include <QKeyEvent>
#include <QTimer>

#define DRAW_PRESS_PIX 9

typedef struct {
  QPixmap pixmap[DRAW_PIXMAP_SIZE];
} draw_sPixmap;

static FlowCtx* last_ctx;
static QMouseEvent* last_event;
static QWidget* last_target;

static QColor flow_allocate_color(
    FlowDrawQt* draw_ctx, const char* named_color);

static QColor draw_type_to_color(FlowDrawQt* draw_ctx, int painter_type)
{
  switch (painter_type) {
  case flow_eDrawType_Line:
  case flow_eDrawType_LineDashed:
  case flow_eDrawType_TextHelvetica:
  case flow_eDrawType_TextHelveticaBold:
    return draw_ctx->foreground;
  case flow_eDrawType_LineErase:
  case flow_eDrawType_TextHelveticaErase:
  case flow_eDrawType_TextHelveticaEraseBold:
    return draw_ctx->background;
  case flow_eDrawType_LineRed:
  case flow_eDrawType_LineDashedRed:
    return flow_allocate_color(draw_ctx, "red");
  case flow_eDrawType_LineGray:
    return flow_allocate_color(draw_ctx, "gray");
  case flow_eDrawType_Green:
    return flow_allocate_color(draw_ctx, "green");
  case flow_eDrawType_Yellow:
    return flow_allocate_color(draw_ctx, "yellow");
  case flow_eDrawType_DarkGray:
    return flow_allocate_color(draw_ctx, "gray28");
  default:
    return flow_allocate_color(draw_ctx, "black");
  }
}

#define FONT_SCALE 0.7

static QFont get_font(int painter_type, double size, const char* fontstr = "Lucida Sans")
{
  QFont res(fontstr);
  res.setPointSizeF(size);
  if (painter_type == flow_eDrawType_TextHelveticaBold
      || painter_type == flow_eDrawType_TextHelveticaEraseBold) {
    res.setBold(true);
  }
  return res;
}

static QColor flow_allocate_color(FlowDrawQt* draw_ctx, const char* named_color)
{
  QColor color(named_color);
  if (!color.isValid()) {
    color = Qt::black;
  }

  return color;
}

FlowDrawQt::~FlowDrawQt()
{
  closing_down = 1;

  ctx->set_nodraw();
  delete ctx;
}

void FlowDrawQt::create_secondary_ctx(FlowCtx* flow_ctx,
    void** secondary_flow_ctx,
    int (*init_proc)(FlowCtx* ctx, void* client_data), void* client_data,
    flow_eCtxType type)
{
  FlowCtx* ctx;
  if (type == flow_eCtxType_Brow) {
    ctx = (FlowCtx*)new BrowCtx("Claes context", 20);
  } else {
    ctx = new FlowCtx("Claes context", 20);
  }

  ctx->fdraw = this;
  ctx->mw = &m_wind;
  ctx->navw = &nav_wind;
  ctx->set_nodraw();
  ctx->trace_connect_func = flow_ctx->trace_connect_func;
  ctx->trace_disconnect_func = flow_ctx->trace_disconnect_func;
  ctx->trace_scan_func = flow_ctx->trace_scan_func;
  ctx->trace_started = flow_ctx->trace_started;
  ctx->zoom_factor = flow_ctx->zoom_factor;
  if (type == flow_eCtxType_Brow) {
    ((BrowCtx*)ctx)->scroll_callback = ((BrowCtx*)flow_ctx)->scroll_callback;
    ((BrowCtx*)ctx)->scroll_data = ((BrowCtx*)flow_ctx)->scroll_data;
  }

  init_proc(ctx, client_data);
  *secondary_flow_ctx = (void*)ctx;
}

void FlowDrawQt::change_ctx(FlowCtx* from_ctx, FlowCtx* to_ctx)
{
  if (from_ctx->type() == flow_eCtxType_Brow) {
    browwidgetqt_modify_ctx(toplevel, to_ctx);
  } else {
    flowwidgetqt_modify_ctx(toplevel, to_ctx);
  }

  to_ctx->window_width = from_ctx->window_width;
  to_ctx->window_height = from_ctx->window_height;
  from_ctx->set_nodraw();
  to_ctx->reset_nodraw();
  if (from_ctx->type() == flow_eCtxType_Brow) {
    to_ctx->zoom_factor = from_ctx->zoom_factor;
    ((BrowCtx*)to_ctx)->configure();
  }
  to_ctx->set_dirty();
  to_ctx->redraw_if_dirty();
}

void FlowDrawQt::delete_secondary_ctx(FlowCtx* ctx)
{
  ctx->set_nodraw();
  delete ctx;
}

FlowDrawQt::FlowDrawQt(QWidget* x_toplevel, void** flow_ctx,
    int (*init_proc)(QWidget* w, FlowCtx* ctx, void* client_data),
    void* client_data, flow_eCtxType type)
    : toplevel(x_toplevel), closing_down(0)
{
  timer_id = new QTimer(this);
  draw_timer_id = new QTimer(this);

  if (type == flow_eCtxType_Brow) {
    ctx = (FlowCtx*)new BrowCtx("Claes context", 20);
  } else {
    ctx = new FlowCtx("Claes context", 20);
  }
  *flow_ctx = (void*)ctx;

  ctx->fdraw = this;

  assert(dynamic_cast<QtScrollWidgetFlow*>(toplevel) != NULL);
  m_wind.window = dynamic_cast<QtScrollWidgetFlow*>(toplevel);
  m_wind.buffer = &(dynamic_cast<QtScrollWidgetFlow*>(toplevel)->image);

  ctx->mw = &m_wind;
  ctx->navw = &nav_wind;

  foreground = flow_allocate_color(this, "black");

  set_white_background();

  init_proc(toplevel, ctx, client_data);
}

void FlowDrawQt::init_nav(QWidget* nav_widget, void* flow_ctx)
{
  assert(dynamic_cast<QtScrollWidgetFlow*>(nav_widget) != NULL);
  nav_wind.window = dynamic_cast<QtScrollWidgetFlow*>(nav_widget);
  nav_wind.buffer = &(dynamic_cast<QtScrollWidgetFlow*>(nav_widget)->image);

  QPalette pal;
  pal.setColor(QPalette::Background, background);
  nav_widget->setAutoFillBackground(true);
  nav_widget->setPalette(pal);

  ((FlowCtx*)flow_ctx)->no_nav = 0;
}

void FlowDrawQt::event_handler(FlowCtx* ctx, QEvent* event, QWidget* target)
{
  static int button_pressed = 0;
  static int button_clicked = 0;
  static int button_clicked_and_pressed = 0;
  static int button1_pressed = 0;
  static int button2_pressed = 0;
  static int button3_pressed = 0;
  static int last_press_x = 0;
  static int last_press_y = 0;
  int sts = 1;

  if (closing_down) {
    return;
  }

  if (target == m_wind.window || event->type() == QEvent::KeyPress) {
    switch (event->type()) {
    case QEvent::KeyPress: {
      QKeyEvent* keyEvent = ((QKeyEvent*)event);

      switch (keyEvent->key()) {
      case Qt::Key_Return:
        sts = ctx->event_handler(flow_eEvent_Key_Return, 0, 0, 0, 0);
        break;
      case Qt::Key_Up:
        if (keyEvent->modifiers() & Qt::ShiftModifier) {
          sts = ctx->event_handler(flow_eEvent_Key_ShiftUp, 0, 0, 0, 0);
        } else {
          sts = ctx->event_handler(flow_eEvent_Key_Up, 0, 0, 0, 0);
        }
        break;
      case Qt::Key_Down:
        if (keyEvent->modifiers() & Qt::ShiftModifier) {
          sts = ctx->event_handler(flow_eEvent_Key_ShiftDown, 0, 0, 0, 0);
        } else {
          sts = ctx->event_handler(flow_eEvent_Key_Down, 0, 0, 0, 0);
        }
        break;
      case Qt::Key_Right:
        if (keyEvent->modifiers() & Qt::ShiftModifier) {
          sts = ctx->event_handler(flow_eEvent_Key_ShiftRight, 0, 0, 0, 0);
        } else {
          sts = ctx->event_handler(flow_eEvent_Key_Right, 0, 0, 0, 0);
        }
        break;
      case Qt::Key_Left:
        if (keyEvent->modifiers() & Qt::ShiftModifier) {
          sts = ctx->event_handler(flow_eEvent_Key_ShiftLeft, 0, 0, 0, 0);
        } else {
          sts = ctx->event_handler(flow_eEvent_Key_Left, 0, 0, 0, 0);
        }
        break;
      case Qt::Key_PageUp:
        sts = ctx->event_handler(flow_eEvent_Key_PageUp, 0, 0, 0, 0);
        break;
      case Qt::Key_PageDown:
        sts = ctx->event_handler(flow_eEvent_Key_PageDown, 0, 0, 0, 0);
        break;
      case Qt::Key_Backspace:
        sts = ctx->event_handler(flow_eEvent_Key_BackSpace, 0, 0, 0, 0);
        break;
      case Qt::Key_F1:
        sts = ctx->event_handler(flow_eEvent_Key_PF1, 0, 0, 0, 0);
        break;
      case Qt::Key_F2:
        sts = ctx->event_handler(flow_eEvent_Key_PF2, 0, 0, 0, 0);
        break;
      case Qt::Key_F3:
        sts = ctx->event_handler(flow_eEvent_Key_PF3, 0, 0, 0, 0);
        break;
      case Qt::Key_F4:
        sts = ctx->event_handler(flow_eEvent_Key_PF4, 0, 0, 0, 0);
        break;
      case Qt::Key_Tab:
        sts = ctx->event_handler(flow_eEvent_Key_Tab, 0, 0, 0, 0);
        break;
      default:;
      }
      break;
    }
    case QEvent::MouseButtonDblClick:
    case QEvent::MouseButtonPress: {
      QMouseEvent* mouseEvent = ((QMouseEvent*)event);
      switch (mouseEvent->button()) {
      case Qt::LeftButton:
        ctx->event_handler(
            flow_eEvent_MB1Down, mouseEvent->x(), mouseEvent->y(), 0, 0);
        if (click_sensitivity & flow_mSensitivity_MB1Click
            && !(click_sensitivity & flow_mSensitivity_MB1DoubleClick)
            && !(click_sensitivity & flow_mSensitivity_MB1Press)) {
          button_pressed = 0;
          button_clicked = 1;
          last_press_x = mouseEvent->x();
          last_press_y = mouseEvent->y();
          return;
        } else if (!(click_sensitivity & flow_mSensitivity_MB1Click)
            && !(click_sensitivity & flow_mSensitivity_MB1DoubleClick)
            && click_sensitivity & flow_mSensitivity_MB1Press) {
          button_pressed = 1;
          button_clicked = 0;
          last_press_x = mouseEvent->x();
          last_press_y = mouseEvent->y();
        }
        break;
      case Qt::MidButton:
        ctx->event_handler(
            flow_eEvent_MB2Down, mouseEvent->x(), mouseEvent->y(), 0, 0);
        if (click_sensitivity & flow_mSensitivity_MB2Click
            && !(click_sensitivity & flow_mSensitivity_MB2DoubleClick)
            && !(click_sensitivity & flow_mSensitivity_MB2Press)) {
          button_pressed = 0;
          button_clicked = 1;
          last_press_x = mouseEvent->x();
          last_press_y = mouseEvent->y();
          return;
        } else if (!(click_sensitivity & flow_mSensitivity_MB2Click)
            && !(click_sensitivity & flow_mSensitivity_MB2DoubleClick)
            && click_sensitivity & flow_mSensitivity_MB2Press) {
          button_pressed = 1;
          button_clicked = 0;
          last_press_x = mouseEvent->x();
          last_press_y = mouseEvent->y();
        }
        break;
      case Qt::RightButton:
        ctx->event_handler(
            flow_eEvent_MB3Down, mouseEvent->x(), mouseEvent->y(), 0, 0);
        if (click_sensitivity & flow_mSensitivity_MB3Press
            && !(click_sensitivity & flow_mSensitivity_MB3DoubleClick)
            && !(click_sensitivity & flow_mSensitivity_MB3Click)) {
          ctx->event_handler(
              flow_eEvent_MB3Press, mouseEvent->x(), mouseEvent->y(), 0, 0);
          click_sensitivity = 0;
          return;
        }
        break;
      default:;
      }
      /* Detect press or click event */
      if (button_clicked) {
        /* Wait for release */
        button_clicked_and_pressed = 1;
        cancel_event_timer(ctx);
        button_clicked = 0;
        button_pressed = mouseEvent->button();
        last_press_x = mouseEvent->x();
        last_press_y = mouseEvent->y();
        event_timer(ctx, mouseEvent, target);
        return;
      }
      if (!button_pressed) {
        button_pressed = mouseEvent->button();
        last_press_x = mouseEvent->x();
        last_press_y = mouseEvent->y();
        event_timer(ctx, mouseEvent, target);
        return;
      } else {
        /* Press event, callback from timer */
        button_pressed = 0;
        button_clicked_and_pressed = 0;
        switch (mouseEvent->button()) {
        case Qt::LeftButton: // Button1
          button1_pressed = 1;
          if ((mouseEvent->modifiers() & Qt::ShiftModifier)
              && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(flow_eEvent_MB1PressShift,
                mouseEvent->x(), mouseEvent->y(), 0, 0);
          } else if (!(mouseEvent->modifiers() & Qt::ShiftModifier)
              && (mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(flow_eEvent_MB1PressCtrl,
                mouseEvent->x(), mouseEvent->y(), 0, 0);
          } else if ((mouseEvent->modifiers() & Qt::ShiftModifier)
              && (mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(flow_eEvent_MB1PressShiftCtrl,
                mouseEvent->x(), mouseEvent->y(), 0, 0);
          } else {
            ctx->event_handler(
                flow_eEvent_MB1Press, mouseEvent->x(), mouseEvent->y(), 0, 0);
          }
          click_sensitivity = 0;
          break;
        case Qt::MidButton: // Button2
          button2_pressed = 1;
          if ((mouseEvent->modifiers() & Qt::ShiftModifier)
              && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(flow_eEvent_MB2PressShift,
                mouseEvent->x(), mouseEvent->y(), 0, 0);
          } else if (!(mouseEvent->modifiers() & Qt::ShiftModifier)
              && (mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(flow_eEvent_MB2PressShift,
                mouseEvent->x(), mouseEvent->y(), 0, 0);
          } else if ((mouseEvent->modifiers() & Qt::ShiftModifier)
              && (mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(flow_eEvent_MB2PressShiftCtrl,
                mouseEvent->x(), mouseEvent->y(), 0, 0);
          } else {
            sts = ctx->event_handler(
                flow_eEvent_MB2Press, mouseEvent->x(), mouseEvent->y(), 0, 0);
          }
          click_sensitivity = 0;
          break;
        case Qt::RightButton: // Button3
          button3_pressed = 1;
          sts = ctx->event_handler(
              flow_eEvent_MB3Press, mouseEvent->x(), mouseEvent->y(), 0, 0);
          click_sensitivity = 0;
          break;
        default:
          break;
        }
      }
      break;
    }
    case QEvent::MouseButtonRelease: {
      QMouseEvent* mouseEvent = ((QMouseEvent*)event);
      button1_pressed = 0;
      button2_pressed = 0;
      button3_pressed = 0;

      if (!button_pressed) {
        if (button_clicked) {
          /* Button click, callback from timer */
          button_clicked = 0;
          switch (mouseEvent->button()) {
          case Qt::LeftButton: // Button1
            if ((mouseEvent->modifiers() & Qt::ShiftModifier)
                && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB1ClickShift,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else if (!(mouseEvent->modifiers() & Qt::ShiftModifier)
                && (mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB1ClickCtrl,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else if ((mouseEvent->modifiers() & Qt::ShiftModifier)
                && (mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB1ClickShiftCtrl,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else {
              sts = ctx->event_handler(
                  flow_eEvent_MB1Click, mouseEvent->x(), mouseEvent->y(), 0, 0);
            }
            click_sensitivity = 0;
            break;
          case Qt::MidButton: // Button2
            if ((mouseEvent->modifiers() & Qt::ShiftModifier)
                && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB2ClickShift,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else if (!(mouseEvent->modifiers() & Qt::ShiftModifier)
                && (mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB2ClickCtrl,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else if ((mouseEvent->modifiers() & Qt::ShiftModifier)
                && (mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB2ClickShiftCtrl,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else {
              sts = ctx->event_handler(
                  flow_eEvent_MB2Click, mouseEvent->x(), mouseEvent->y(), 0, 0);
            }
            click_sensitivity = 0;
            break;
          case Qt::RightButton: // Button3
            sts = ctx->event_handler(
                flow_eEvent_MB3Click, mouseEvent->x(), mouseEvent->y(), 0, 0);
            click_sensitivity = 0;
            break;
          default:
            break;
          }
        } else {
          /* Button release */
          sts = ctx->event_handler(flow_eEvent_ButtonRelease,
              mouseEvent->x(), mouseEvent->y(), 0, 0);
        }
      } else {
        /* Button click */
        cancel_event_timer(ctx);
        if (!button_clicked_and_pressed) {
          /* wait for button double click */
          button_clicked = 1;
          event_timer(ctx, mouseEvent, target);
          button_pressed = 0;
          return;
        } else {
          /* Button double click */
          cancel_event_timer(ctx);
          button_clicked = 0;
          button_pressed = 0;
          button_clicked_and_pressed = 0;
          switch (mouseEvent->button()) {
          case Qt::LeftButton: // Button1
            if ((mouseEvent->modifiers() & Qt::ShiftModifier)
                && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB1DoubleClickShift,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else if (!(mouseEvent->modifiers() & Qt::ShiftModifier)
                && (mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB1DoubleClickCtrl,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else if ((mouseEvent->modifiers() & Qt::ShiftModifier)
                && (mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB1DoubleClickShiftCtrl,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else {
              sts = ctx->event_handler(flow_eEvent_MB1DoubleClick,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            }
            if (sts == FLOW__TERMINATED) {
              return;
            }
            click_sensitivity = 0;

            break;
          case Qt::MidButton: // Button2
            if ((mouseEvent->modifiers() & Qt::ShiftModifier)
                && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB2DoubleClickShift,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else if (!(mouseEvent->modifiers() & Qt::ShiftModifier)
                && (mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB2DoubleClickCtrl,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else if ((mouseEvent->modifiers() & Qt::ShiftModifier)
                && (mouseEvent->modifiers() & Qt::ControlModifier)) {
              sts = ctx->event_handler(flow_eEvent_MB2DoubleClickShiftCtrl,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            } else {
              sts = ctx->event_handler(flow_eEvent_MB2DoubleClick,
                  mouseEvent->x(), mouseEvent->y(), 0, 0);
            }
            click_sensitivity = 0;
            break;
          case Qt::RightButton: // Button3
            click_sensitivity = 0;
            break;
          default:
            break;
          }
        }
      }
      break;
    }
    case QEvent::Paint:
    case QEvent::UpdateRequest: {
      QPaintEvent* paintEvent = ((QPaintEvent*)event);
      sts = ctx->event_handler(flow_eEvent_Exposure, paintEvent->rect().x(),
          paintEvent->rect().y(), paintEvent->rect().width(),
          paintEvent->rect().height());
      break;
    }
    case QEvent::WindowUnblocked: {
      sts = ctx->event_handler(
          flow_eEvent_VisibilityUnobscured, 0, 0, 0, 0);
      break;
    }
    case QEvent::WindowBlocked: {
      sts = ctx->event_handler(flow_eEvent_VisibilityObscured, 0, 0, 0, 0);
      break;
    }
    case QEvent::MouseMove: {
      QMouseEvent* mouseEvent = ((QMouseEvent*)event);
      QPoint pos = mouseEvent->pos();

      if (button3_pressed) {
        button3_pressed = 0;
        button_pressed = 0;
        button_clicked_and_pressed = 0;
      }

      if (button_pressed
          && (ABS(pos.x() - last_press_x) > DRAW_PRESS_PIX
                 || ABS(pos.y() - last_press_y) > DRAW_PRESS_PIX)) {
        pos.setX(last_press_x);
        pos.setY(last_press_y);

        /* Button press */
        cancel_event_timer(ctx);
        switch (button_pressed) {
        case Qt::LeftButton: // Button1
          button1_pressed = 1;
          if ((mouseEvent->modifiers() & Qt::ShiftModifier)
              && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(
                flow_eEvent_MB1PressShift, pos.x(), pos.y(), 0, 0);
          } else if (!(mouseEvent->modifiers() & Qt::ShiftModifier)
              && (mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(
                flow_eEvent_MB1PressCtrl, pos.x(), pos.y(), 0, 0);
          } else if ((mouseEvent->modifiers() & Qt::ShiftModifier)
              && (mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(
                flow_eEvent_MB1PressShiftCtrl, pos.x(), pos.y(), 0, 0);
          } else {
            ctx->event_handler(
                flow_eEvent_MB1Press, pos.x(), pos.y(), 0, 0);
          }
          break;
        case Qt::MidButton: // Button2
          button2_pressed = 1;
          if ((mouseEvent->modifiers() & Qt::ShiftModifier)
              && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(
                flow_eEvent_MB2PressShift, pos.x(), pos.y(), 0, 0);
          } else if (!(mouseEvent->modifiers() & Qt::ShiftModifier)
              && (mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(
                flow_eEvent_MB2PressShift, pos.x(), pos.y(), 0, 0);
          } else if ((mouseEvent->modifiers() & Qt::ShiftModifier)
              && (mouseEvent->modifiers() & Qt::ControlModifier)) {
            sts = ctx->event_handler(
                flow_eEvent_MB2PressShiftCtrl, pos.x(), pos.y(), 0, 0);
          } else {
            sts = ctx->event_handler(
                flow_eEvent_MB2Press, pos.x(), pos.y(), 0, 0);
          }
          break;
        case Qt::RightButton: // Button3
          button3_pressed = 1;
          sts = ctx->event_handler(
              flow_eEvent_MB3Press, pos.x(), pos.y(), 0, 0);
          break;
        }
        button_pressed = 0;
        button_clicked_and_pressed = 0;
      }
      if (button1_pressed || button2_pressed || button3_pressed) {
        sts = ctx->event_handler(
            flow_eEvent_ButtonMotion, pos.x(), pos.y(), 0, 0);
      } else {
        sts = ctx->event_handler(
            flow_eEvent_CursorMotion, pos.x(), pos.y(), 0, 0);
      }
      break;
    }
    case QEvent::Enter: {
      QPoint pos = QCursor::pos();
      sts = ctx->event_handler(flow_eEvent_Enter, pos.x(), pos.y(), 0, 0);
      break;
    }
    case QEvent::Leave: {
      QPoint pos = QCursor::pos();
      sts = ctx->event_handler(flow_eEvent_Leave, pos.x(), pos.y(), 0, 0);
      break;
    }
    case QEvent::Show: {
      sts = ctx->event_handler(flow_eEvent_Map, 0, 0, 0, 0);
      break;
    }
    case QEvent::Hide: {
      sts = ctx->event_handler(flow_eEvent_Unmap, 0, 0, 0, 0);
      break;
    }
    case QEvent::FocusIn:
    case QEvent::FocusOut:
      break;
    case QEvent::Wheel: {
      QWheelEvent* wheelEvent = ((QWheelEvent*)event);
      if (wheelEvent->delta() > 0) {
        sts = ctx->event_handler(flow_eEvent_ScrollUp, wheelEvent->x(), wheelEvent->y(), 0, 0);
      } else if (wheelEvent->delta() < 0) {
        sts = ctx->event_handler(flow_eEvent_ScrollDown, wheelEvent->x(), wheelEvent->y(), 0, 0);
      }
      break;
    }
    default:
      break;
    }
  } else if (target == nav_wind.window) {
    switch (event->type()) {
    case QEvent::MouseButtonPress: {
      QMouseEvent* mouseEvent = ((QMouseEvent*)event);
      switch (mouseEvent->button()) {
      case Qt::LeftButton: // Button1
        button1_pressed = 1;
        sts = ctx->event_handler_nav(
            flow_eEvent_MB1Press, mouseEvent->x(), mouseEvent->y());
        break;
      case Qt::MidButton: // Button2
        button2_pressed = 1;
        sts = ctx->event_handler_nav(
            flow_eEvent_MB2Press, mouseEvent->x(), mouseEvent->y());
        break;
      case Qt::RightButton: // Button3
        button3_pressed = 1;
        break;
      default:
        break;
      }
      break;
    }
    case QEvent::MouseButtonRelease: {
      QMouseEvent* mouseEvent = ((QMouseEvent*)event);
      switch (mouseEvent->button()) {
      case Qt::LeftButton: // Button1
        button1_pressed = 0;
        break;
      case Qt::MidButton: // Button2
        button2_pressed = 0;
        break;
      case Qt::RightButton: // Button3
        button3_pressed = 0;
        break;
      default:
        break;
      }
      if (mouseEvent->button() == Qt::LeftButton
          && (mouseEvent->modifiers() & Qt::ShiftModifier)
          && !(mouseEvent->modifiers() & Qt::ControlModifier)) {
        sts = ctx->event_handler_nav(
            flow_eEvent_MB1ClickShift, mouseEvent->x(), mouseEvent->y());
      } else {
        sts = ctx->event_handler_nav(
            flow_eEvent_ButtonRelease, mouseEvent->x(), mouseEvent->y());
      }
      break;
    }
    case QEvent::Paint:
    case QEvent::UpdateRequest: {
      sts = ctx->event_handler_nav(flow_eEvent_Exposure, 0, 0);
      nav_wind.window->update();
      break;
    }
    case QEvent::MouseMove: {
      QMouseEvent* mouseEvent = ((QMouseEvent*)event);
      if (button1_pressed || button2_pressed || button3_pressed) {
        sts = ctx->event_handler_nav(
            flow_eEvent_ButtonMotion, mouseEvent->x(), mouseEvent->y());
      } else {
        sts = ctx->event_handler_nav(
            flow_eEvent_CursorMotion, mouseEvent->x(), mouseEvent->y());
      }
      break;
    }
    default:;
    }
  }

  if (sts == FLOW__DESTROYED) {
    return;
  }

  m_wind.window->update();
}

void FlowDrawQt::enable_event(FlowCtx* ctx, flow_eEvent event, flow_eEventType event_type,
    int (*event_cb)(FlowCtx* ctx, flow_tEvent event))
{
  ctx->enable_event(event, event_type, event_cb);
}

int FlowDrawQt::begin(DrawWind *w) {
  if (!this->w) {
    this->w = w;
    return 1;
  }
  return 0;
}

void FlowDrawQt::end() {
  this->w = NULL;
}

unique_ptr<QPainter> FlowDrawQt::get_painter(int painter_type, int size)
{
  unique_ptr<QPainter> painter(new QPainter(w->buffer));
  painter->setBrush(QBrush(draw_type_to_color(this, painter_type)));
  painter->setBackground(QBrush(this->background));
  switch (painter_type) {
  case flow_eDrawType_LineDashed:
  case flow_eDrawType_LineDashedRed: {
    QPen pen = QPen(painter->brush(), size + 1, Qt::DashLine);
    QVector<double> dashes;
    dashes << 7 + size << 7 + size;
    pen.setDashPattern(dashes);
    painter->setPen(pen);
    return painter;
  }
  case flow_eDrawType_TextHelvetica:
  case flow_eDrawType_TextHelveticaBold:
  case flow_eDrawType_TextHelveticaErase:
  case flow_eDrawType_TextHelveticaEraseBold: {
    painter->setPen(QPen(painter->brush(), size + 1));
    int sizes[9] = {8, 10, 12, 14, 14, 18, 18, 18, 24};
    painter->setFont(get_font(painter_type, sizes[size], "Helvetica"));
    return painter;
  }
  case flow_eDrawType_Green:
  case flow_eDrawType_Yellow:
  case flow_eDrawType_DarkGray:
  case flow_eDrawType_Line:
  case flow_eDrawType_LineErase:
  case flow_eDrawType_LineRed:
  case flow_eDrawType_LineGray:
  default:
    painter->setPen(QPen(painter->brush(), size + 1));
    return painter;
  }
}

void FlowDrawQt::rect(int x, int y, int width, int height,
    flow_eDrawType painter_type, int fill, int idx, int highlight, int dimmed)
{
  if (dimmed) {
    painter_type = flow_eDrawType_LineGray;
  } else if (painter_type == flow_eDrawType_LineGray && highlight) {
    painter_type = flow_eDrawType_Line;
  } else if (highlight) {
    painter_type = flow_eDrawType(painter_type + 1);
  }

  unique_ptr<QPainter> painter = get_painter(painter_type, idx);
  if (!fill) {
    painter->setBrush(Qt::NoBrush);
  }
  painter->drawRect(x, y, width, height);
}

void FlowDrawQt::triangle(int x, int y, int width, int height,
    flow_eDrawType painter_type, int fill, int idx, int highlight, int dimmed)
{
  if (dimmed) {
    painter_type = flow_eDrawType_LineGray;
  } else if (painter_type == flow_eDrawType_LineGray && highlight) {
    painter_type = flow_eDrawType_Line;
  } else if (highlight) {
    painter_type = flow_eDrawType(painter_type + 1);
  }

  unique_ptr<QPainter> painter = get_painter(painter_type, idx);

  QPolygon poly(4);
  poly[0] = QPoint(x, y + height);
  poly[1] = QPoint(x + width / 2, y);
  poly[2] = QPoint(x + width, y + height);
  poly[3] = QPoint(x, y + height);

  if (!fill) {
    painter->setBrush(Qt::NoBrush);
  }
  painter->drawPolygon(poly);
}

void FlowDrawQt::arrow(int x1, int y1, int x2, int y2, int x3,
    int y3, flow_eDrawType painter_type, int idx, int highlight)
{
  if (painter_type == flow_eDrawType_LineGray && highlight) {
    painter_type = flow_eDrawType_Line;
  }

  unique_ptr<QPainter> painter = get_painter(painter_type, idx);

  QPolygon poly(4);
  poly[0] = QPoint(x1, y1);
  poly[1] = QPoint(x2, y2);
  poly[2] = QPoint(x3, y3);
  poly[3] = QPoint(x1, y1);

  QPainterPath path;
  path.addPolygon(poly);
  painter->fillPath(path, painter->brush());
}

void FlowDrawQt::arc(int x, int y, int width, int height,
    int angle1, int angle2, flow_eDrawType painter_type, int idx, int highlight,
    int dimmed)
{
  if (dimmed) {
    painter_type = flow_eDrawType_LineGray;
  } else if (painter_type == flow_eDrawType_LineGray && highlight) {
    painter_type = flow_eDrawType_Line;
  } else if (highlight) {
    painter_type = flow_eDrawType(painter_type + 1);
  }

  unique_ptr<QPainter> painter = get_painter(painter_type, idx);
  painter->setBrush(Qt::NoBrush);
  painter->drawArc(x, y, width, height, angle1 * 16, angle2 * 16);
}

void FlowDrawQt::line(int x1, int y1, int x2, int y2,
    flow_eDrawType painter_type, int idx, int highlight, int dimmed)
{
  if (dimmed) {
    painter_type = flow_eDrawType_LineGray;
  } else if (painter_type == flow_eDrawType_LineGray && highlight) {
    painter_type = flow_eDrawType_Line;
  } else if (highlight) {
    painter_type = flow_eDrawType(painter_type + 1);
  }

  unique_ptr<QPainter> painter = get_painter(painter_type, idx);
  painter->drawLine(x1, y1, x2, y2);
}

void FlowDrawQt::text(int x, int y, char* text, int len, flow_eDrawType painter_type, int idx, double size, int highlight, int dimmed)
{
  unique_ptr<QPainter> painter = get_painter(painter_type, idx);
  if (dimmed) {
    painter->setBrush(QBrush(flow_allocate_color(this, "gray")));
    painter->setPen(QPen(painter->brush(), size+1));
  }

  QString str;
  if (ctx->text_coding != flow_eTextCoding_UTF_8) {
    str = QString::fromLatin1(text);
  } else {
    str = QString::fromUtf8(text);
  }

  painter->setFont(get_font(painter_type, FONT_SCALE * size));

  QRect rect = painter->fontMetrics().boundingRect(str);

  painter->drawText(x, ROUND(y - 0.8 * rect.height()), rect.width(), rect.height(), Qt::TextDontClip, str, &rect);
}

void FlowDrawQt::pixmaps_create(
    flow_sPixmapData* pixmap_data, void** pixmaps)
{
  flow_sPixmapDataElem *prev_pdata = NULL,
                       *pdata = (flow_sPixmapDataElem *)pixmap_data;

  draw_sPixmap* pms = new draw_sPixmap();
  for (int i = 0; i < DRAW_PIXMAP_SIZE; i++) {
    if (i == 0 || (i > 0 && pdata->bits != prev_pdata->bits)) {
      pms->pixmap[i] = QBitmap::fromData(QSize(pdata->width, pdata->height),
          (uchar*)pdata->bits, QImage::Format_MonoLSB);
    } else {
      pms->pixmap[i] = pms->pixmap[i - 1];
    }
    prev_pdata = pdata;
    pdata++;
  }
  *pixmaps = (void*)pms;
}

void FlowDrawQt::pixmaps_delete(void* pixmaps)
{
  delete ((draw_sPixmap*)pixmaps);
}

void FlowDrawQt::pixmap(int x, int y, flow_sPixmapData* pixmap_data,
    void* pixmaps, flow_eDrawType gc_bg, flow_eDrawType gc_fg, int idx)
{
  flow_sPixmapDataElem* pdata = (flow_sPixmapDataElem*)pixmap_data + idx;
  draw_sPixmap* pms = (draw_sPixmap*)pixmaps;

  {
    unique_ptr<QPainter> painter = get_painter(gc_bg, idx);
    painter->fillRect(x, y, pdata->width, pdata->height, painter->brush());
  }

  unique_ptr<QPainter> painter = get_painter(gc_fg, idx);

  QRegion clipRegion = QRegion(pms->pixmap[idx].createMaskFromColor(Qt::black));
  painter->setClipRegion(clipRegion.translated(x, y));
  painter->setClipping(true);

  painter->fillRect(x, y, pdata->width, pdata->height, painter->brush());
}

void FlowDrawQt::image(int x, int y, int width, int height,
    flow_tImImage image, flow_tPixmap pixmap, flow_tPixmap clip_mask)
{
  if (width == 0 || height == 0) {
    return;
  }

  unique_ptr<QPainter> painter = get_painter(flow_eDrawType_Line, 0);

  if (clip_mask) {
    QRegion clipRegion
      = QRegion(((QPixmap*)clip_mask)->createMaskFromColor(Qt::black));
    painter->setClipRegion(clipRegion.translated(x, y));
    painter->setClipping(true);
  }

  painter->drawImage(QRect(x, y, width, height), *((QImage*)image));
}

void FlowDrawQt::clear()
{
  unique_ptr<QPainter> painter = new QPainter(w->buffer);
  painter->setBackground(QBrush(background));
  painter->eraseRect(w->buffer->rect());
}

void FlowDrawQt::get_window_size(DrawWind *wind, int* width, int* height)
{
  *width = wind->buffer->width();
  *height = wind->buffer->height();
}

void FlowDrawQt::set_window_size(DrawWind *wind, int width, int height)
{
  wind->window->resize(width, height);
}

bool FlowDrawQt::draw_timer_cb()
{
  draw_timer_id->stop();
  (draw_timer_callback_func)(ctx);
  m_wind.window->update();
  return FALSE;
}

bool FlowDrawQt::event_timer_cb()
{
  timer_id->stop();
  event_handler(last_ctx, last_event, last_target);
  return FALSE;
}

void FlowDrawQt::cancel_event_timer(FlowCtx* ctx)
{
  FlowDrawQt* draw_ctx = (FlowDrawQt*)ctx->fdraw;
  if (draw_ctx->timer_id) {
    draw_ctx->timer_id->stop();
  }
}

void FlowDrawQt::event_timer(FlowCtx* ctx, QMouseEvent* event, QWidget *target)
{
  if (last_event) {
    delete last_event;
  }
  last_event = new QMouseEvent(event->type(), event->pos(), event->globalPos(),
      event->button(), event->buttons(), event->modifiers());
  last_target = target;
  last_ctx = ctx;

  initOneShotTimer(timer_id, SLOT(event_timer_cb()), 200);
}

void FlowDrawQt::set_timer(FlowCtx* ctx, int time_ms,
    void (*callback_func)(FlowCtx* ctx), void** id)
{
  draw_timer_callback_func = callback_func;
  initOneShotTimer(draw_timer_id, SLOT(draw_timer_cb()), time_ms);
  *id = (void*)draw_timer_id;
}

void FlowDrawQt::cancel_timer(void* ctx)
{
  if (draw_timer_id) {
    draw_timer_id->stop();
  }
}

void FlowDrawQt::set_cursor(DrawWind *wind, draw_eCursor cursor)
{
  if (cursor == draw_eCursor_Normal) {
    wind->window->unsetCursor();
  } else {
    switch (cursor) {
    case draw_eCursor_CrossHair:
      wind->window->setCursor(QCursor(Qt::CrossCursor));
      break;
    case draw_eCursor_DiamondCross:
      wind->window->setCursor(QCursor(Qt::SizeAllCursor));
      break;
    case draw_eCursor_Hand:
      wind->window->setCursor(QCursor(Qt::PointingHandCursor));
      break;
    default:
      break;
    }
  }
}

void FlowDrawQt::get_text_extent(const char* text, int len,
    flow_eDrawType painter_type, int idx, int* width, int* height, double size)
{
  QString str;
  if (ctx->text_coding != flow_eTextCoding_UTF_8) {
    str = QString::fromLatin1(text);
  } else {
    str = QString::fromUtf8(text);
  }

  QFont font = get_font(painter_type, FONT_SCALE * size);

  QRect boundingRect = QFontMetrics(font).boundingRect(str);

  *width = boundingRect.width();
  *height = boundingRect.height();
}

void FlowDrawQt::set_click_sensitivity(int value)
{
  click_sensitivity = value;
}

void FlowDrawQt::set_white_background()
{
  background = flow_allocate_color(this, "white");

  QPalette pal;
  pal.setColor(QPalette::Background, background);
  toplevel->setAutoFillBackground(true);
  toplevel->setPalette(pal);
}

int FlowDrawQt::image_get_width(flow_tImImage image)
{
  return ((QImage*)image)->width();
}

int FlowDrawQt::image_get_height(flow_tImImage image)
{
  return ((QImage*)image)->height();
}

void FlowDrawQt::image_scale(float scale, flow_tImImage orig_im,
    flow_tImImage* im, flow_tPixmap* im_pixmap, flow_tPixmap* im_mask)
{
  int width = int(scale * image_get_width(orig_im));
  int height = int(scale * image_get_height(orig_im));

  if (*im) {
    delete ((QImage*)*im);
  }
  *im = new QImage(((QImage*)orig_im)->scaled(width, height));
}

int FlowDrawQt::image_load(const char* imagefile, float scale, float nav_scale,
    flow_tImImage* orig_im, flow_tImImage* im, flow_tPixmap* im_pixmap,
    flow_tPixmap* im_mask, flow_tPixmap* im_nav_pixmap,
    flow_tPixmap* im_nav_mask)
{
  pwr_tFileName filename;
  bool found = false;

  // Look for file in $pwrp_exe, $pwr_doc/en_us/orm and $pwr_exe
  for (int i = 0; i < 3; i++) {
    switch (i) {
    case 0:
      strcpy(filename, "$pwrp_exe/");
      break;
    case 1:
      strcpy(filename, "$pwr_doc/en_us/orm/");
      break;
    case 2:
      strcpy(filename, "$pwr_exe/");
      break;
    }
    strcat(filename, imagefile);
    dcli_translate_filename(filename, filename);
    FILE* fp = fopen(filename, "r");
    if (!fp) {
      continue;
    }
    fclose(fp);
    found = true;
    break;
  }
  if (!found) {
    return 0;
  }

  if (*orig_im) {
    delete ((QImage*)*orig_im);
  }
  *orig_im = (flow_tImImage*)new QImage(filename);

  image_scale(scale, *orig_im, im, im_pixmap, im_mask);

  return 1;
}

FlowPrintDraw* FlowDrawQt::print_draw_new(void* context, const char* title, int page,
    void* flow_ctx, int page_border, int* sts) {
  fprintf(stderr, "ERROR!\nFlowDrawQt::print_draw_new called.\nThis should never happend!\n");
  assert(false);
  return NULL;
}
