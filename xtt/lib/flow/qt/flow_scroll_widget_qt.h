/**
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/**
 * WARNING! This file is a mirrored version of glow_scroll_widget_qt.
 * If you modify it, you must modify flow_scroll_widget_qt in the same way!
 */
#ifndef FLOW_SCROLL_WIDGET_QT_H
#define FLOW_SCROLL_WIDGET_QT_H

#include "flow.h"
#include "flow_ctx.h"
#include "flow_draw_qt.h"

#include <QPaintEvent>
#include <QScrollBar>
#include <QScrollArea>
#include <QWidget>

typedef struct {
  QWidget *parent;
  QWidget *form;
  QScrollBar *scroll_h;
  QScrollBar *scroll_v;
  int scroll_h_managed;
  int scroll_v_managed;
} widget_sScroll;

class QtScrollWidgetFlow : public QWidget {
  Q_OBJECT

public:
  void init(unsigned int eCtxType,
            int (*init_proc)(FlowCtx *ctx, void *client_data),
            void *client_data,
            int (*init_proc2)(QWidget *w, FlowCtx *ctx, void *client_data));
  QWidget *initScroll(unsigned int eCtxType,
                          int (*init_proc)(FlowCtx *ctx, void *client_data),
                          void *client_data,
                          int (*init_proc2)(QWidget *w, FlowCtx *ctx,
                                            void *client_data));
  void init(unsigned int eCtxType, QWidget *main);

  void *parent_ctx;
  FlowDrawQt *draw_ctx;
  int (*init_proc)(FlowCtx *ctx, void *clien_data);
  int (*init_widget_proc)(QWidget *w, FlowCtx *ctx, void *client_data);
  int is_navigator;
  void *client_data;
  QWidget *main_widget;
  QScrollBar *scroll_h;
  QScrollBar *scroll_v;
  int scroll_h_ignore;
  int scroll_v_ignore;
  double scroll_h_value;
  double scroll_v_value;
  int scroll_h_pagesize;
  int scroll_v_pagesize;
  int scroll_h_upper;
  int scroll_v_upper;
  QTimer *scroll_timerid;
  flow_sScroll scroll_data;
  int scroll_configure;
  int destroyed;

  QImage image;

  virtual void handleEvent(QEvent *event);

protected:
  virtual void realize();

  void paintEvent(QPaintEvent *event);
  void closeEvent(QCloseEvent *event);

  bool event(QEvent *event);

  bool is_realized;
  unsigned int ctxType;

private:
  void createBuffer(QSize size);

public slots:
  void scroll_h_action(int value);
  void scroll_v_action(int value);
  void scroll_callback_cb();
};

#endif //FLOW_SCROLL_WIDGET_QT_H