/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef flow_draw_h
#define flow_draw_h

#include "flow_ctx.h"

class FlowPrintDraw;

class FlowDraw {
public:
  FlowCtx* ctx;
  int click_sensitivity;
  flow_tImData imlib;

  FlowDraw();
  virtual ~FlowDraw();
  virtual void enable_event(FlowCtx* ctx, flow_eEvent event,
      flow_eEventType event_type,
      int (*event_cb)(FlowCtx* ctx, flow_tEvent event)) = 0;
  virtual void clear() = 0;

  virtual void get_window_size(DrawWind* wind, int* width, int* height) = 0;
  virtual void set_window_size(DrawWind* wind, int width, int height) = 0;

  virtual int begin(DrawWind* wind);
  virtual void end();

  virtual void rect(int x, int y, int width, int height, flow_eDrawType gc_type,
      int fill, int idx, int highlight = 0, int dimmed = 0) = 0;
  virtual void triangle(int x, int y, int width, int height,
      flow_eDrawType gc_type, int fill, int idx, int highlight = 0,
      int dimmed = 0) = 0;
  virtual void arrow(int x1, int y1, int x2, int y2, int x3, int y3,
      flow_eDrawType gc_type, int idx, int highlight = 0) = 0;
  virtual void arc(int x, int y, int width, int height, int angle1, int angle2,
      flow_eDrawType gc_type, int idx, int highlight = 0, int dimmed = 0) = 0;
  virtual void line(int x1, int y1, int x2, int y2, flow_eDrawType gc_type,
      int idx, int highlight = 0, int dimmed = 0) = 0;
  virtual void text(int x, int y, char* text, int len, flow_eDrawType gc_type,
      int idx, double size, int highlight = 0, int dimmed = 0) = 0;
  virtual void image(int x, int y, int width, int height, flow_tImImage image,
      flow_tPixmap pixmap, flow_tPixmap clip_mask) = 0;
  virtual void pixmap(int x, int y, flow_sPixmapData* pixmap_data,
      void* pixmaps, flow_eDrawType gc_bg, flow_eDrawType gc_fg, int idx) = 0;

  virtual void pixmaps_create(flow_sPixmapData* pixmap_data, void** pixmaps) = 0;
  virtual void pixmaps_delete(void* pixmaps) = 0;

  virtual void set_timer(FlowCtx* ctx, int time_ms,
      void (*callback_func)(FlowCtx* ctx), void** id) = 0;
  virtual void cancel_timer(void* id) = 0;

  virtual void set_cursor(DrawWind* wind, draw_eCursor cursor) = 0;

  virtual void get_text_extent(const char* text, int len,
      flow_eDrawType gc_type, int idx, int* width, int* height, double size) = 0;

  virtual void create_secondary_ctx(FlowCtx* flow_ctx,
      void** secondary_flow_ctx, int (*init_proc)(FlowCtx*, void*),
      void* client_data, flow_eCtxType type) = 0;
  virtual void delete_secondary_ctx(FlowCtx* ctx) = 0;
  virtual void change_ctx(FlowCtx* from_ctx, FlowCtx* to_ctx) = 0;
  virtual void set_click_sensitivity(int value) = 0;
  virtual void set_white_background() = 0;
  virtual int image_get_width(flow_tImImage image) = 0;
  virtual int image_get_height(flow_tImImage image) = 0;
  virtual void image_scale(float scale, flow_tImImage orig_im,
      flow_tImImage* im, flow_tPixmap* im_pixmap, flow_tPixmap* im_mask) = 0;
  virtual int image_load(const char* imagefile, float scale, float nav_scale,
      flow_tImImage* orig_im, flow_tImImage* im, flow_tPixmap* im_pixmap,
      flow_tPixmap* im_mask, flow_tPixmap* im_nav_pixmap,
      flow_tPixmap* im_nav_mask) = 0;
  virtual FlowPrintDraw* print_draw_new(void* context, const char* title,
      int page, void* flow_ctx, int page_border, int* sts);
};

#endif
