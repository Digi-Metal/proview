/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

extern "C" {
#include "co_cdh.h"
#include "co_time.h"
#include "pwr_baseclasses.h"
#include "co_dcli.h"
}

#include <Xm/Xm.h>
#include <Xm/XmP.h>
#include <Xm/Text.h>
#include <Mrm/MrmPublic.h>
#include <X11/Intrinsic.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "flow_browwidget_motif.h"

#include "glow.h"
#include "glow_growctx.h"
#include "glow_growapi.h"
#include "glow_growwidget_motif.h"

#include "ge_attr.h"
#include "ge_subpalette_motif.h"

//
// Create the navigator widget
//
SubPaletteMotif::SubPaletteMotif(void* xn_parent_ctx, Widget xn_parent_wid,
    const char* xn_name, Widget* w, pwr_tStatus* status)
    : SubPalette(xn_parent_ctx, xn_name, status), parent_wid(xn_parent_wid)
{
  form_widget = ScrolledBrowCreate(parent_wid, name, NULL, 0,
      SubPalette::init_brow_cb, this, (Widget*)&brow_widget);
  XtManageChild(form_widget);

  // Create the root item
  *w = form_widget;

  *status = 1;
}

//
//  Delete a nav context
//
SubPaletteMotif::~SubPaletteMotif()
{
  delete brow;
  XtDestroyWidget(form_widget);
}

void SubPaletteMotif::set_inputfocus(int focus)
{
  Arg args[2];
  Pixel bg, fg;

  if (!displayed)
    return;

  XtVaGetValues(form_widget, XmNbackground, &bg, XmNforeground, &fg, NULL);
  if (!focus) {
    XtSetArg(args[0], XmNborderColor, bg);
    XtSetValues(form_widget, args, 1);
  } else {
    XtCallAcceptFocus(brow_widget, CurrentTime);
    XtSetArg(args[0], XmNborderColor, fg);
    XtSetValues(form_widget, args, 1);
  }
}
