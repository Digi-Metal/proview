/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* ge_attr.cpp -- Display object attributes */

#include "co_string.h"

#include "cow_qt_helpers.h"

#include "ge_attr_qt.h"
#include "ge_attrnav_qt.h"
#include "ge_dyn.h"
#include "ge_msg.h"

#include <QDialogButtonBox>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

CoWowRecall AttrQt::value_recall;

void AttrQt::message(char severity, const char* message)
{
  if (msg_label) {
    msg_label->setText(fl(message));
    if (!streq(message, "")) {
      msg_label->setVisible(true);
    }
  }
}

void AttrQt::message_popup(char severity, const char* message)
{
  char title[40];

  switch (severity) {
  case 'I':
    strcpy(title, "Info message");
    break;
  case 'W':
    strcpy(title, "Warning message");
    break;
  default:
    strcpy(title, "Error message");
  }

  CoWowQt wow(toplevel);
  wow.DisplayError(title, message);
}

void AttrQt::set_prompt(const char* prompt)
{
  if (streq(prompt, "")) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setVisible(true);
  }
}

void AttrQt::change_value()
{
  int sts;
  int multiline;
  char* value;
  int size;

  sts = attrnav->check_attr_value(&multiline, &size, &value);
  if (EVEN(sts)) {
    if (sts == GE__NOATTRSEL) {
      message('E', "No attribute is selected");
    } else {
      message('E', "Attribute can't be modified");
    }
    return;
  }

  if (embedded) {
    if (open_value_input_cb) {
      (open_value_input_cb)(parent_ctx, multiline, size, value);
    }
    return;
  }

  if (input_open) {
    statusbar->setMaximumHeight(25);
    cmd_entry->setVisible(false);
    cmd_scrolledinput->setVisible(false);
    set_prompt("");
    input_open = 0;
    return;
  }

  if (multiline) {
    statusbar->setMaximumHeight(QWIDGETSIZE_MAX);
    cmd_scrolledinput->setVisible(true);

    set_pane_position(pane, -170);
    cmd_scrolled_buffer->setFocus();
    input_max_length = size - 1;
  } else {
    cmd_entry->setVisible(true);
    cmd_entry->setFocus();
  }

  message(' ', "");

  if (value) {
    if (multiline) {
      cmd_scrolled_buffer->setPlainText(fl(value));
    } else {
      cmd_entry->setText(fl(value));

      // Select the text
      cmd_entry->setCursorPosition(cmd_entry->text().size());
      cmd_entry->selectAll();
    }
  } else {
    cmd_entry->setText("");
  }
  set_prompt("value >");
  input_open = 1;
}

int AttrQt::reconfigure_attr()
{
  attr_sItem* itemlist;
  int item_cnt;
  int sts;

  if (!reconfigure_attr_cb) {
    return 0;
  }
  reconfigure_attr_cb(parent_ctx, object, &itemlist, &item_cnt, &client_data);

  attrnav = new AttrNavQt(this, type, "Plant", itemlist, item_cnt, &brow_widget,
      &sts);
  if (pane->widget(0)) {
    pane->widget(0)->setParent(NULL);
  }
  brow_widget->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
  pane->insertWidget(0, brow_widget);

  attrnav->message_cb = &Attr::message;
  attrnav->change_value_cb = &Attr::change_value_c;
  attrnav->get_subgraph_info_cb = &Attr::get_subgraph_info_c;
  attrnav->get_dyn_info_cb = &Attr::get_dyn_info_c;
  attrnav->reconfigure_attr_cb = &Attr::reconfigure_attr_c;
  attrnav->set_inputfocus();
  attrnav->get_plant_select_cb = &Attr::get_plant_select_c;
  attrnav->get_current_colors_cb = &Attr::get_current_colors_c;
  attrnav->get_current_color_tone_cb = &Attr::get_current_color_tone_c;
  attrnav->get_object_list_cb = &Attr::get_object_list_c;

  return 1;
}

void AttrQtWidget::closeEvent(QCloseEvent* event)
{
  if (attr->close_cb) {
    (attr->close_cb)(
        attr->parent_ctx, attr, attr->object, attr->client_data, 0);
  } else {
    delete attr;
  }
  event->ignore();
}

void AttrQtWidget::focusInEvent(QFocusEvent* event)
{
  bool scrolledinput_visible = attr->cmd_scrolledinput->isVisible();
  bool input_visible = attr->cmd_entry->isVisible();
  if (scrolledinput_visible) {
    attr->cmd_scrolled_buffer->setFocus();
  } else if (input_visible) {
    attr->cmd_entry->setFocus();
  } else if (attr->attrnav) {
    attr->attrnav->set_inputfocus();
  }

  QWidget::focusInEvent(event);
}

void AttrQtWidget::attr_activate_cmd_entry()
{
  attr->cmd_prompt->setVisible(false);
  attr->cmd_entry->setVisible(false);

  attr->attrnav->set_inputfocus();

  if (attr->input_open) {
    attr->attrnav->set_attr_value(
        qPrintableLatin1(attr->cmd_entry->text()), 0, 0);
    attr->cmd_entry->setVisible(false);
    attr->set_prompt("");
    attr->input_open = 0;
    if (attr->redraw_cb) {
      (attr->redraw_cb)(
          attr->parent_ctx, attr, attr->object, attr->client_data);
    }
  }
}

void AttrQtWidget::attr_activate_cmd_scrolled_ok()
{
  if (attr->input_open) {
    attr->attrnav->set_attr_value(
        qPrintableLatin1(attr->cmd_scrolled_buffer->toPlainText()), 0, 0);
    attr->statusbar->setMaximumHeight(25);
    attr->cmd_scrolledinput->setVisible(false);
    attr->set_prompt("");
    attr->input_open = 0;

    set_pane_position(attr->pane, -50);

    if (attr->redraw_cb) {
      (attr->redraw_cb)(
          attr->parent_ctx, attr, attr->object, attr->client_data);
    }

    attr->attrnav->set_inputfocus();
  }
}

void AttrQtWidget::attr_activate_cmd_scrolled_ca()
{
  if (attr->input_open) {
    attr->statusbar->setMaximumHeight(25);
    attr->cmd_scrolledinput->setVisible(false);

    set_pane_position(attr->pane, -50);

    attr->set_prompt("");
    attr->input_open = 0;
  }
}

void AttrQtWidget::attr_activate_changevalue()
{
  attr->change_value();
}

void AttrQtWidget::attr_activate_store()
{
  attr->store();
}

void AttrQtWidget::attr_activate_recall()
{
  attr->recall_next();
}

void AttrQtWidget::attr_activate_help()
{
  // Not yet implemented
}

void AttrQtWidget::attr_activate_recall_prev()
{
  attr->recall_prev();
}

void AttrQtWidget::action_text_inserted()
{
  int count = attr->cmd_scrolled_buffer->toPlainText().size();

  if (count > attr->input_max_length) {
    // Remove inserted chars (note that iter now points at the end of the
    // inserted text)
    QString txt = attr->cmd_scrolled_buffer->toPlainText();
    txt.truncate(attr->input_max_length);
    attr->cmd_scrolled_buffer->setPlainText(txt);

    CoWowQt wow(this);
    wow.DisplayError("Error message", "Attribute size exceeded");
  }
}

AttrQt::AttrQt(QWidget* a_parent_wid, void* a_parent_ctx, attr_eType a_type,
    void* a_object, attr_sItem* itemlist, int item_cnt)
    : Attr(a_parent_ctx, a_type, a_object, itemlist, item_cnt), msg_label(0),
      input_max_length(0)
{
  int sts;

  if (!embedded) {
    toplevel = new AttrQtWidget(this, a_parent_wid);
    toplevel->setMinimumSize(500, 700);
    toplevel->setWindowTitle(fl("Object Attributes"));
    toplevel->setAttribute(Qt::WA_DeleteOnClose);

    CoWowQt::SetWindowIcon(toplevel);

    // Menu
    QMenuBar* menu_bar = new QMenuBar(toplevel);

    // File entry
    QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
    addMenuItem(
        toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

    // Functions entry
    QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
    addMenuItem(toplevel, functions, "&Change Value",
        SLOT(attr_activate_changevalue()), "CTRL+Q");
    addMenuItem(
        toplevel, functions, "&Store", SLOT(attr_activate_store()), "CTRL+T");
    addMenuItem(
        toplevel, functions, "&Recall", SLOT(attr_activate_recall()), "CTRL+N");
    addMenuItem(toplevel, functions, "Recall &previous",
        SLOT(attr_activate_recall_prev()), "CTRL+P");

    // Help entry
    QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
    addMenuItem(toplevel, help, "&Help", SLOT(attr_activate_help()), "CTRL+H",
        "system-help");

    pane = new QSplitter(Qt::Vertical);

    attrnav = new AttrNavQt(this, type, "Plant", itemlist, item_cnt,
        &brow_widget, &sts);
    attrnav->message_cb = &Attr::message;
    attrnav->change_value_cb = &Attr::change_value_c;
    attrnav->get_subgraph_info_cb = &Attr::get_subgraph_info_c;
    attrnav->get_dyn_info_cb = &Attr::get_dyn_info_c;
    attrnav->reconfigure_attr_cb = &Attr::reconfigure_attr_c;
    attrnav->get_plant_select_cb = &Attr::get_plant_select_c;
    attrnav->get_current_colors_cb = &Attr::get_current_colors_c;
    attrnav->get_current_color_tone_cb = &Attr::get_current_color_tone_c;
    attrnav->get_object_list_cb = &Attr::get_object_list_c;

    statusbar = new QStatusBar();
    msg_label = new QLabel("");
    cmd_prompt = new QLabel("value > ");
    cmd_entry = new CoWowEntryQt(&value_recall);
    QObject::connect(cmd_entry, SIGNAL(returnPressed()), toplevel,
        SLOT(attr_activate_cmd_entry()));

    statusbar->addWidget(msg_label);
    statusbar->addWidget(cmd_prompt);
    add_expanding(statusbar, cmd_entry);
    statusbar->setFixedHeight(25);

    QVBoxLayout* vbox = new QVBoxLayout();
    vbox->setMenuBar(menu_bar);

    add_expanding(pane, brow_widget);

    cmd_scrolled_buffer = new QPlainTextEdit();
    QObject::connect(cmd_scrolled_buffer, SIGNAL(textChanged()), toplevel,
        SLOT(action_text_inserted()));

    QDialogButtonBox* buttons = new QDialogButtonBox();
    buttons->addButton(QDialogButtonBox::Ok);
    buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
    buttons->addButton(QDialogButtonBox::Cancel);
    buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
    QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
        toplevel, SLOT(attr_activate_cmd_scrolled_ok()));
    QObject::connect(buttons->button(QDialogButtonBox::Cancel),
        SIGNAL(clicked()), toplevel, SLOT(attr_activate_cmd_scrolled_ca()));

    QVBoxLayout* cmd_scrolledinput_layout = new QVBoxLayout();
    add_expanding(cmd_scrolledinput_layout, cmd_scrolled_buffer);
    cmd_scrolledinput_layout->addWidget(buttons);
    cmd_scrolledinput = layout_to_widget(cmd_scrolledinput_layout);

    add_expanding(statusbar, cmd_scrolledinput);

    pane->addWidget(statusbar);

    vbox->addWidget(pane);

    toplevel->setLayout(vbox);

    toplevel->show();

    msg_label->setVisible(false);
    cmd_prompt->setVisible(false);
    cmd_entry->setVisible(false);
    cmd_scrolledinput->setVisible(false);

    set_pane_position(pane, -50);

    if (a_parent_wid) {
      toplevel->setParent(a_parent_wid);
      toplevel->setModal(true);
    }
  } else {
    attrnav = new AttrNavQt(this, type, "Plant", itemlist, item_cnt,
        &brow_widget, &sts);
    attrnav->message_cb = &Attr::message;
    attrnav->change_value_cb = &Attr::change_value_c;
    attrnav->get_subgraph_info_cb = &Attr::get_subgraph_info_c;
    attrnav->get_dyn_info_cb = &Attr::get_dyn_info_c;
    attrnav->reconfigure_attr_cb = &Attr::reconfigure_attr_c;
    attrnav->get_plant_select_cb = &Attr::get_plant_select_c;
    attrnav->get_current_colors_cb = &Attr::get_current_colors_c;
    attrnav->get_current_color_tone_cb = &Attr::get_current_color_tone_c;
    attrnav->get_object_list_cb = &Attr::get_object_list_c;
    attrnav->set_inputfocus_cb = &Attr::set_inputfocus_c;
    attrnav->traverse_inputfocus_cb = &Attr::traverse_inputfocus_c;
  }
}

AttrQt::~AttrQt()
{
  if (original_data) {
    delete original_data;
  }
  delete (AttrNavQt*)attrnav;

  if (!embedded) {
    delete toplevel;
  }
}
