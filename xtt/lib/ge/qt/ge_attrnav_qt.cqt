/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

/* ge_attrnav.cpp -- Display object info */

#include "glow_std.h"

#include <stdio.h>
#include <stdlib.h>
#include <vector>

#include "co_cdh.h"
#include "co_time.h"

#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "flow_browwidget_qt.h"
#include "flow_msg.h"

#include "glow.h"
#include "glow_growctx.h"
#include "glow_growapi.h"
#include "glow_growwidget_qt.h"

#include "glow_growapi.h"
#include "ge_dyn.h"
#include "ge_attr.h"
#include "ge_attrnav_qt.h"
#include "ge_msg.h"

#include "cow_qt_helpers.h"

AttrNavQt::AttrNavQt(void *xn_parent_ctx, QWidget *xn_parent_wid,
                     attr_eType xn_type, const char *xn_name,
                     attr_sItem *xn_itemlist, int xn_item_cnt, QWidget **w,
                     pwr_tStatus *status)
    : AttrNav(xn_parent_ctx, xn_type, xn_name, xn_itemlist, xn_item_cnt,
              status)
{
  trace_obj = new AttrNavQtTraceObject(this);

  form_widget =
      scrolledbrowwidgetqt_new(AttrNav::init_brow_cb, this, &brow_widget);

  showNow(brow_widget);

  // Create the root item
  *w = form_widget;

  *status = 1;
}

AttrNavQt::~AttrNavQt()
{
  delete trace_obj;

  delete brow;
  form_widget->close();
}

void AttrNavQt::trace_start()
{
  trace_obj->trace_scan();
}

AttrNavQtTraceObject::~AttrNavQtTraceObject()
{
  delete trace_timerid;
}

void AttrNavQtTraceObject::trace_scan()
{
  int time = 200;

  if (attrnav->trace_started) {
    brow_TraceScan(attrnav->brow->ctx);

    trace_timerid = new QTimer();
    trace_timerid->setSingleShot(true);
    connect(trace_timerid, SIGNAL(timeout()), this, SLOT(trace_scan()));
    trace_timerid->start(time);
  }
}

void AttrNavQt::set_inputfocus()
{
  brow_widget->setFocus();
}