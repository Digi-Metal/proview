/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_curve_qt_h
#define ge_curve_qt_h

/* ge_curve_qt.h -- Curve widget */

#include "cow_wow_qt.h"

#ifndef ge_curve_h
#include "ge_curve.h"
#endif

#include <QComboBox>

class GeCurveQtWidget;

class GeCurveQt : public GeCurve {
public:
  GeCurveQt(void* gc_parent_ctx, QWidget* parent_widget, char* curve_name,
      char* filename, GeCurveData* curve_data, int pos_right, int gc_width,
      int gc_height, unsigned int gc_options, int gc_color_theme,
      void* basewidget);
  ~GeCurveQt();

  GeCurveQtWidget* toplevel;
  QWidget* grow_widget;
  QWidget* curve_widget;
  QWidget* axisform_widget;
  QWidget* nameform_widget;
  QWidget* curveform_widget;
  QWidget* pane_widget;
  QWidget* vbox;
  QWidget* growcurve_main_widget;
  QWidget* growaxis_main_widget;
  QWidget* grownames_main_widget;
  QWidget* nav_widget;
  QWidget* minmax_widget;
  QLineEdit* minmax_textmin_widget;
  QLineEdit* minmax_textmax_widget;
  QWidget* menu_new;
  QWidget* menu_save;
  QWidget* menu_open;
  QWidget* menu_snapshot;
  QWidget* menu_export;
  QWidget* menu_add;
  QAction* tools_snapshot;
  QAction* tools_add;
  QAction* tools_curvetype_line;
  QAction* tools_curvetype_points;
  QAction* tools_curvetype_linepoints;
  QAction* tools_curvetype_square;
  QAction* tools_curve_fill;
  QAction* tools_curve_digsplit;
  QWidget* export_widget;
  QComboBox* export_attrcombo_widget;
  QLineEdit* export_fromtime_widget;
  QLineEdit* export_totime_widget;
  QLineEdit* export_rows_widget;
  QLineEdit* export_filename_widget;
  QWidget* sea_timebox;
  QLineEdit* timebox_start_time;
  QLineEdit* timebox_stop_time;
  QComboBox* timebox_timecombo;
  CoWowFocusTimerQt focustimer;
  int disable_timecombo_callback;

  void pop();
  void write_title(char* str);
  void resize();
  void open_minmax(int idx);
  void open_export(pwr_tTime* from, pwr_tTime* to, int rows, char* filename);
  void axis_set_width(int width);
  void create_minmax_dialog();
  void create_export_dialog();
  void set_inputfocus();
  void enable(unsigned int mask);
  void setup(unsigned int mask);
  void set_times(pwr_tTime* from, pwr_tTime* to);
  void set_times_sensitivity(int sensitive);
  pwr_tStatus get_times(pwr_tTime* from, pwr_tTime* to);
  int get_period(time_ePeriod* period);
  void set_period(time_ePeriod period, int nocallback);
  void set_clock_cursor();
  void reset_cursor();
  void* get_widget();

  static void export_file_selected_cb(
      void* ctx, char* filename, wow_eFileSelType file_type);
};

class GeCurveQtWidget : public QDialog {
  Q_OBJECT

public:
  GeCurveQtWidget(GeCurveQt* parent_ctx, QWidget* parent)
      : QDialog(parent), curve(parent_ctx)
  {
  }

protected:
  void focusInEvent(QFocusEvent* event);
  void closeEvent(QCloseEvent* event);

public slots:
  void activate_configure();
  void activate_print();
  void activate_new();
  void activate_save();
  void activate_open();
  void activate_snapshot();
  void activate_export();
  void activate_zoomin();
  void activate_zoomout();
  void activate_zoomreset();
  void activate_page_left();
  void activate_page_right();
  void activate_scroll_left();
  void activate_scroll_right();
  void activate_increase_period();
  void activate_decrease_period();
  void activate_reload();
  void activate_prev_period();
  void activate_next_period();
  void activate_add();
  void activate_madd();
  void activate_remove();
  void activate_timecombo(int index);
  void activate_background();
  void activate_showname();
  void activate_filledcurves(bool set = false);
  void activate_curvetype();
  void activate_digsplit();
  void activate_xlimits();
  void activate_help();
  void activate_minmax_ok();
  void activate_minmax_cancel();
  void activate_minmax_save();
  void activate_export_ok();
  void activate_export_cancel();
  void activate_export_browse();

private:
  GeCurveQt* curve;
};

#endif