/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* ge_subgraphs_qt.cpp -- Display object info */

#include <stdlib.h>

#include "cow_qt_helpers.h"

#include "flow_browwidget_qt.h"

#include "ge_attr_qt.h"
#include "ge_subgraphs_qt.h"

#include <QMenuBar>
#include <QTimer>
#include <QVBoxLayout>

void SubGraphsQtWidget::closeEvent(QCloseEvent* event)
{
  debug_print("SubGraphsQtWidget::closeEvent\n");
  if (subgraphs->close_cb) {
    (subgraphs->close_cb)(subgraphs);
  } else {
    delete subgraphs;
  }
  QWidget::closeEvent(event);
}

void SubGraphsQtWidget::focusInEvent(QFocusEvent* event)
{
  subgraphs->brow_widget->window()->setFocus();
}

void SubGraphsQtWidget::subgraphs_activate_attr()
{
  ItemSubGraph* item;
  int sts;

  sts = subgraphs->get_select((void**)&item);
  if (ODD(sts)) {
    subgraphs->edit_attributes(item->nodeclass);
  }
}

void SubGraphsQtWidget::subgraphs_activate_set_extern()
{
  ItemSubGraph* item;
  int sts;

  sts = subgraphs->get_select((void**)&item);
  if (ODD(sts)) {
    item->set_extern(1);
  }
}

void SubGraphsQtWidget::subgraphs_activate_set_intern()
{
  ItemSubGraph* item;
  int sts;

  sts = subgraphs->get_select((void**)&item);
  if (ODD(sts)) {
    item->set_extern(0);
  }
}

void SubGraphsQtWidget::subgraphs_activate_set_all_intern()
{
  subgraphs->set_all_extern(0);
}

void SubGraphsQtWidget::subgraphs_activate_set_all_extern()
{
  subgraphs->set_all_extern(1);
}

void SubGraphsQtWidget::subgraphs_activate_help()
{
}

SubGraphsQt::SubGraphsQt(void* xn_parent_ctx, QWidget* xn_parent_wid,
    const char* xn_name, void* xn_growctx, QWidget** w, pwr_tStatus* status)
    : SubGraphs(xn_parent_ctx, xn_name, xn_growctx, status),
      parent_wid(xn_parent_wid)
{
  toplevel = new SubGraphsQtWidget(this, xn_parent_wid);
  toplevel->setToolTip(fl("ge_subgraphs widget"));

  toplevel->setMinimumSize(300, 500);
  toplevel->setWindowTitle(fl(name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  // Menu
  QMenuBar* menu_bar = new QMenuBar(toplevel);

  // File entry
  QMenu* file = menu_bar->addMenu(fl("&File"));
  addMenuItem(
      toplevel, file, "&Attributes", SLOT(subgraphs_activate_attr()), "CTRL+A");
  addMenuItem(toplevel, file, "Set &Extern",
      SLOT(subgraphs_activate_set_extern()), "CTRL+E");
  addMenuItem(toplevel, file, "Set &Intern",
      SLOT(subgraphs_activate_set_intern()), "CTRL+I");
  addMenuItem(toplevel, file, "Set &All Intern",
      SLOT(subgraphs_activate_set_all_intern()), "CTRL+L");
  addMenuItem(toplevel, file, "Set A&ll Extern",
      SLOT(subgraphs_activate_set_all_extern()), "CTRL+K");
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Help entry
  QMenu* help = menu_bar->addMenu(fl("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(subgraphs_activate_help()), "CTRL+H");

  debug_print("creating a scrolledbrowwidgetqt\n");
  form_widget
      = scrolledbrowwidgetqt_new(SubGraphs::init_brow_cb, this, &brow_widget);

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);
  vbox->setMenuBar(menu_bar);
  add_expanding(vbox, form_widget);

  toplevel->setLayout(vbox);

  toplevel->show();

  *w = toplevel;
  *status = 1;
}

SubGraphsQt::~SubGraphsQt()
{
  debug_print("SubGraphsQt::~SubGraphsQt\n");
  subgraphs_tAttr attrlist_p, next_p;

  // Delete all attr-widgets in attrlist
  attrlist_p = attrlist;
  next_p = NULL;
  while (attrlist_p) {
    next_p = attrlist_p->next;
    delete attrlist_p->attrctx;
    free((char*)attrlist_p);
    attrlist_p = next_p;
  }
}

void SubGraphsQt::trace_start()
{
  toplevel->trace_scan();
}

SubGraphsQtWidget::SubGraphsQtWidget(SubGraphsQt* parent_ctx, QWidget* parent)
    : QWidget(), subgraphs(parent_ctx)
{
  trace_timerid = new QTimer(this);
}

void SubGraphsQtWidget::trace_scan()
{
  if (subgraphs->trace_started) {
    brow_TraceScan(subgraphs->brow->ctx);

    initOneShotTimer(trace_timerid, SLOT(trace_scan()), 200);
  }
}

Attr* SubGraphsQt::new_attr(void* object, attr_sItem* items, int num)
{
  return new AttrQt(
      parent_wid, this, attr_eType_Attributes, object, items, num);
}