/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

#include <stdio.h>

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include "flow_browwidget_qt.h"

#include "ge_subpalette_qt.h"

#include <QMenu>

SubPaletteQt::SubPaletteQt(void* xn_parent_ctx, QWidget* xn_parent_wid,
    const char* xn_name, QWidget** w, pwr_tStatus* status)
    : SubPalette(xn_parent_ctx, xn_name, status)
{
  debug_print("creating a scrolledbrowwidgetqt\n");
  form_widget
      = scrolledbrowwidgetqt_new(SubPalette::init_brow_cb, this, &brow_widget);

  // Create the root item
  *w = form_widget;

  toplevel = new SubPaletteQtWidget(this, xn_parent_wid);

  *status = 1;
}

SubPaletteQt::~SubPaletteQt()
{
  delete brow;
}

void SubPaletteQt::set_inputfocus(int focus)
{
  // TODO if ( focus) Set border ...
  if (focus) {
    brow_widget->setFocus();
  }
}

void SubPaletteQt::create_popup_menu(char* filename, int x, int y)
{
  int wind_x, wind_y;

  strncpy(popup_help_filename, filename, sizeof(popup_help_filename));

  CoWowQt::PopupPosition(form_widget, x, y, &wind_x, &wind_y);

  QMenu* menu = new QMenu(toplevel);
  addMenuItem(toplevel, menu, "Help", SLOT(activate_help()));

  menu->popup(QPoint(wind_x, wind_y));
}

//	Callback from the menu.
void SubPaletteQtWidget::activate_help()
{
  char helpfile[80] = "$pwr_exe/man_subgraph.dat";
  char topic[200];
  char* s;

  printf("Help callback %s\n", subpalette->popup_help_filename);

  if ((s = strrchr(subpalette->popup_help_filename, '/'))) {
    strncpy(topic, s + 1, sizeof(topic));
  } else {
    strncpy(topic, subpalette->popup_help_filename, sizeof(topic));
  }
  if ((s = strrchr(topic, '.'))) {
    *s = 0;
  }

  if (subpalette->help_cb) {
    (subpalette->help_cb)(subpalette->parent_ctx, topic, helpfile);
  }
}