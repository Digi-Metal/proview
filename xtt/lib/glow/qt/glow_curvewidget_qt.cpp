/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 **/

#include "cow_qt_helpers.h"

#include "glow_curvectx.h"
#include "glow_curvewidget_qt.h"

static void scroll_callback(glow_sScroll* data)
{
  widget_sScroll* scroll_data = (widget_sScroll*)data->scroll_data;
  CurveWidgetQt* curve = ((CurveWidgetQt*)scroll_data->parent);

  initOneShotTimer(curve->scroll_timerid, SLOT(scroll_callback_cb()), 200);

  curve->scroll_data = *data;
}

static int curve_init_proc(QWidget* w, GlowCtx* fctx, void* client_data)
{
  CurveWidgetQt* curve = ((CurveWidgetQt*)w);
  CurveCtx* ctx = (CurveCtx*)curve->parent_ctx;

  if (curve->scroll_h) {
    widget_sScroll* scroll_data = new widget_sScroll();
    scroll_data->parent = w;
    scroll_data->scroll_h = curve->scroll_h;
    scroll_data->scroll_v = curve->scroll_v;
    scroll_data->scroll_h_managed = 0;
    scroll_data->scroll_v_managed = 1;

    ctx->register_scroll_callback((void*)scroll_data, scroll_callback);
  }
  return (curve->init_proc)(ctx, client_data);
}

void CurveWidgetQt::realize()
{
  if (is_navigator) {
    if (!parent_ctx) {
      CurveWidgetQt* main_curve = (CurveWidgetQt*)main_widget;

      if (!main_curve->is_realized) {
        main_curve->realize_navigator = 1;
        main_curve->navigator_widget = this;
      } else {
        parent_ctx = main_curve->parent_ctx;
        draw_ctx = main_curve->draw_ctx;
        ((GlowDrawQt*)draw_ctx)->init_nav(this);
      }
    }
  } else {
    if (!parent_ctx) {
      draw_ctx = new GlowDrawQt(
          this, &parent_ctx, curve_init_proc, client_data, glow_eCtxType_Curve);
    }
    if (realize_navigator) {
      CurveWidgetQt* nav_curve = (CurveWidgetQt*)navigator_widget;
      nav_curve->parent_ctx = parent_ctx;
      nav_curve->draw_ctx = draw_ctx;
      ((GlowDrawQt*)nav_curve->draw_ctx)->init_nav(nav_curve);
    }
  }
}

QWidget* curvewidgetqt_new(
    int (*init_proc)(GlowCtx* ctx, void* client_data), void* client_data)
{
  CurveWidgetQt* w = new CurveWidgetQt();
  w->init(glow_eCtxType_Curve, init_proc, client_data, curve_init_proc);
  return (QWidget*)w;
}

QWidget* scrolledcurvewidgetqt_new(
    int (*init_proc)(GlowCtx* ctx, void* client_data), void* client_data,
    QWidget** curvewidget)
{
  CurveWidgetQt* w = new CurveWidgetQt();
  *curvewidget = w;
  return w->initScroll(
      glow_eCtxType_Curve, init_proc, client_data, curve_init_proc);
}

QWidget* curvenavwidgetqt_new(QWidget* main_curve)
{
  CurveWidgetQt* w = new CurveWidgetQt();
  w->init(glow_eCtxType_Curve, main_curve);
  return (QWidget*)w;
}