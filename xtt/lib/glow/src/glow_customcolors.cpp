/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2015 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 **/

#include "glow_std.h"


#include <stdlib.h>
#include <iostream>
#include "co_dcli.h"
#include "glow_customcolors.h"
#include "glow_growctx.h"
#include "glow_draw.h"
#include "glow_msg.h"

int GlowCustomColors::get_color( glow_eDrawType dtype, double *r, double *g, double *b) {
  if ( dtype < glow_eDrawType_CustomColor1 || dtype >= glow_eDrawType_CustomColor__)
    return 0;

  int idx = dtype - glow_eDrawType_CustomColor1;
  *r = colors[idx][0];
  *g = colors[idx][1];
  *b = colors[idx][2];

  return 1;
}

int GlowCustomColors::set_color( glow_eDrawType dtype, double r, double g, double b) {
  if ( dtype < glow_eDrawType_CustomColor1 || dtype >= glow_eDrawType_CustomColor__)
    return 0;

  int idx = dtype - glow_eDrawType_CustomColor1;
  colors[idx][0] = r;
  colors[idx][1] = g;
  colors[idx][2] = b;

  // Shadow
  colors[idx+1][0] = max( r - 0.12, 0);
  colors[idx+1][1] = max( g - 0.12, 0);
  colors[idx+1][2] = max( b - 0.12, 0);;

  // Light
  colors[idx+2][0] = min( r + 0.18, 1);
  colors[idx+2][1] = min( g + 0.18, 1);
  colors[idx+2][2] = min( b + 0.18, 1);

  // Hot
  colors[idx+3][0] = min( r + 0.12, 1);
  colors[idx+3][1] = min( g + 0.12, 1);
  colors[idx+3][2] = min( b + 0.12, 1);

  return 1;
}

void GlowCustomColors::reset_colors()
{
  for ( int i = 0; i < colors_size; i++)
    colors[i][0] = colors[i][1] = colors[i][2] = 1;
}

void GlowCustomColors::save( ofstream& fp, glow_eSaveMode mode)
{
  fp << int(glow_eSave_CustomColors) << endl;
  fp << int(glow_eSave_CustomColors_colors_size) << FSPACE << colors_size << endl;
  fp << int(glow_eSave_CustomColors_colors) << endl;
  for ( int i = 0; i < colors_size; i++)
    fp << colors[i][0] << " " << colors[i][1] << " " << colors[i][2] << endl;
  fp << int(glow_eSave_End) << endl;
}

void GlowCustomColors::open( ifstream& fp)
{
  int		type;
  int 		end_found = 0;
  char		dummy[40];
  int 		csize = 0;

  for (;;)
  {
    if ( !fp.good()) {
      fp.clear();
      fp.getline( dummy, sizeof(dummy));
      printf( "** Read error GlowCustomColors: \"%d %s\"\n", type, dummy);      
    }

    fp >> type;
    switch( type) {
      case glow_eSave_CustomColors: break;
      case glow_eSave_CustomColors_colors_size: fp >> csize; break;
      case glow_eSave_CustomColors_colors:
	for ( int i = 0; i < csize; i++) {
	  fp >> colors[i][0]; fp >> colors[i][1]; fp  >> colors[i][2];
	}
	break;
      case glow_eSave_End: end_found = 1; break;
      default:
        cout << "GlowCustomColors:open syntax error" << endl;
        fp.getline( dummy, sizeof(dummy));
    }
    if ( end_found)
      break;
  }
}

int GlowCustomColors::write_colorfile( char *name)
{
  char path_name[120];
  ofstream	fp;

  if ( strchr( name, '/') == 0) {
    if ( !strstr( name, ".pwgc"))
      sprintf( path_name, "$pwrp_exe/%s.pwgc", name);
    else
      sprintf( path_name, "$pwrp_exe/%s", name);
  }
  else if ( !strstr( name, ".pwgc"))
    sprintf( path_name, "%s.pwgc", name);

  dcli_translate_filename( path_name, path_name);
  fp.open( path_name);
  if ( !fp)
    return GLOW__FILEOPEN;

  save( fp, glow_eSaveMode_Edit);
  fp.close();

  return GLOW__SUCCESS;
}


int GlowCustomColors::read_colorfile( GrowCtx *ctx, char *name)
{
  char filename[120];
  char path_name[120];
  ifstream	fp;

  strcpy( filename, name);
  if ( !strstr( filename, ".pwgc"))
    strcat( filename, ".pwgc");

  dcli_translate_filename( filename, filename);

  int found = 0;
  if ( check_file( filename))
    found = 1;
  
  // Add some search path
  if ( !found) {
    for ( int i = 0; i < ctx->path_cnt; i++) {
      strcpy( path_name, ctx->path[i]);
      strcat( path_name, filename);
      dcli_translate_filename( path_name, path_name);
      if ( check_file( path_name)) {
	found = 1;
	break;
      }
    }
  }
  else
    strcpy( path_name, filename);

  if ( !found)
    return GLOW__FILEOPEN;

  fp.open( path_name);
  if ( !fp)
    return GLOW__FILEOPEN;

  open( fp);
  fp.close();

  ctx->gdraw->reset_customcolors( this);


  return GLOW__SUCCESS;
}
