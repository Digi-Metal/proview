/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "glow_draw.h"

#include <math.h>

GlowDraw::GlowDraw() : ctx(0), imlib(0)
{
}

GlowDraw::~GlowDraw()
{
}

void GlowDraw::reset_clip_rectangle(DrawWind* w)
{
  if (w->clip_cnt == 0) {
    printf("** Draw clip mismatch\n");
    return;
  }
  w->clip_cnt--;
}

glow_eGradient GlowDraw::gradient_rotate(double rot, glow_eGradient gradient)
{
  glow_eGradient g = gradient;
  double rotation = (rot / 360 - floor(rot / 360)) * 360;

  while (rotation > 45) {
    switch (g) {
    case glow_eGradient_HorizontalUp:
      g = glow_eGradient_VerticalRight;
      break;
    case glow_eGradient_HorizontalDown:
      g = glow_eGradient_VerticalLeft;
      break;
    case glow_eGradient_HorizontalTube1:
      g = glow_eGradient_VerticalTube1;
      break;
    case glow_eGradient_HorizontalTube2:
      g = glow_eGradient_VerticalTube2;
      break;
    case glow_eGradient_VerticalLeft:
      g = glow_eGradient_HorizontalUp;
      break;
    case glow_eGradient_VerticalRight:
      g = glow_eGradient_HorizontalDown;
      break;
    case glow_eGradient_VerticalTube1:
      g = glow_eGradient_HorizontalTube1;
      break;
    case glow_eGradient_VerticalTube2:
      g = glow_eGradient_HorizontalTube2;
      break;
    case glow_eGradient_DiagonalUpperLeft:
      g = glow_eGradient_DiagonalUpperRight;
      break;
    case glow_eGradient_DiagonalLowerLeft:
      g = glow_eGradient_DiagonalUpperLeft;
      break;
    case glow_eGradient_DiagonalUpperRight:
      g = glow_eGradient_DiagonalLowerRight;
      break;
    case glow_eGradient_DiagonalLowerRight:
      g = glow_eGradient_DiagonalLowerLeft;
      break;
    case glow_eGradient_DiagonalUpTube:
      g = glow_eGradient_DiagonalDownTube;
      break;
    case glow_eGradient_DiagonalDownTube:
      g = glow_eGradient_DiagonalUpTube;
      break;
    case glow_eGradient_RadialUpperLeft:
      g = glow_eGradient_RadialUpperRight;
      break;
    case glow_eGradient_RadialLowerLeft:
      g = glow_eGradient_RadialUpperLeft;
      break;
    case glow_eGradient_RadialUpperRight:
      g = glow_eGradient_RadialLowerRight;
      break;
    case glow_eGradient_RadialLowerRight:
      g = glow_eGradient_RadialLowerLeft;
      break;
    default:
      break;
    }
    rotation -= 90;
  }
  return g;
}

DrawWind::DrawWind() : clip_cnt(0)
{
}
