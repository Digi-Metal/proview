/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 **/

#include "glow_std.h"


#include <iostream>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include "glow_growcurve.h"
#include "glow_grownode.h"
#include "glow_draw.h"
#include "glow_growctx.h"

GrowCurve::GrowCurve( GrowCtx *glow_ctx, const char *name, glow_sCurveData *data,
                double x, double y,
		double w, double h, glow_eDrawType border_d_type, int line_w,
		glow_mDisplayLevel display_lev,
		int fill_rect, int display_border, 
		glow_eDrawType fill_d_type, int nodraw) : 
                GrowTrend(glow_ctx,name,x,y,w,h,border_d_type,line_w,
		display_lev, fill_rect, display_border, fill_d_type, 1)
{
  if ( data)
    configure_curves( data);
  if ( !nodraw)
    draw( &ctx->mw, (GlowTransform *)NULL, highlight, hot, NULL, NULL);

}

void GrowCurve::configure_curves( glow_sCurveData *data)
{
  glow_eDrawType dt, dt_fill;
  int points;
  glow_sPoint *pointarray;
  glow_sPoint *point_p;
  int	i, idx;
  double y_value, x_value;

  // Remove old curves
  ctx->nodraw++;
  for ( i = 0; i < curve_cnt; i++) {
    if ( curve[i])
      delete curve[i];
  }
  ctx->nodraw--;

  if ( data->type == glow_eCurveDataType_CommonX) {

    curve_cnt = data->curves;
    no_of_points = data->rows[0];

    for ( i = 0; i < curve_cnt; i++) {
      y_max_value[i] = data->y_max_value[i];
      y_min_value[i] = data->y_min_value[i];
      curve_drawtype[i] = data->color[i];
      curve_fill_drawtype[i] = data->fillcolor[i];
    }

    points = no_of_points;
    if ( fill_curve)
      points += 2;
    curve_width = MIN( DRAW_TYPE_SIZE, MAX( 1, curve_width));

    pointarray = (glow_sPoint *) calloc( points, sizeof(glow_sPoint));
    for ( idx = 0; idx < curve_cnt; idx++) {
      point_p = pointarray;
      for ( i = 0; i < points; i++) {
	if ( !fill_curve) {
	  if ( data->x_reverse)
	    x_value = ur.x - (data->x_data[0][i] - data->x_min_value[0]) / 
	      (data->x_max_value[0] - data->x_min_value[0]) * (ur.x - ll.x);
	  else
	    x_value = ll.x + (data->x_data[0][i] - data->x_min_value[0]) / 
	      (data->x_max_value[0] - data->x_min_value[0]) * (ur.x - ll.x);

	  x_value = MAX( ll.x, MIN( x_value, ur.x));

	  y_value = ur.y - (data->y_data[idx][i] - y_min_value[idx]) / 
	    (y_max_value[idx] - y_min_value[idx]) * (ur.y - ll.y);

	  y_value = MAX( ll.y, MIN( y_value, ur.y));

	  point_p->y = y_value;
	  point_p->x = x_value;
	}
	else {
	  if ( i == 0) {
	    point_p->y = ur.y;
	    // point_p->x = ur.x;
	    if ( data->x_reverse)
	      point_p->x = ur.x - (data->x_data[0][i] - data->x_min_value[0]) / 
	        (data->x_max_value[0] - data->x_min_value[0]) * (ur.x - ll.x);
	    else
	      point_p->x = ll.x + (data->x_data[0][i] - data->x_min_value[0]) / 
	        (data->x_max_value[0] - data->x_min_value[0]) * (ur.x - ll.x);
	  }
	  else if ( i == points - 1) {
	    point_p->y = ur.y;
	    if ( data->x_reverse)
	      point_p->x = ur.x - (data->x_data[0][i-2] - data->x_min_value[0]) / 
	        (data->x_max_value[0] - data->x_min_value[0]) * (ur.x - ll.x);
	    else
	      point_p->x = ll.x + (data->x_data[0][i-2] - data->x_min_value[0]) / 
	        (data->x_max_value[0] - data->x_min_value[0]) * (ur.x - ll.x);
	    // point_p->x = ll.x;
	  }
	  else {
	    if ( data->x_reverse)
	      x_value = ur.x - (data->x_data[0][i-1] - data->x_min_value[0]) / 
	        (data->x_max_value[0] - data->x_min_value[0]) * (ur.x - ll.x);
	    else
	      x_value = ll.x + (data->x_data[0][i-1] - data->x_min_value[0]) / 
	        (data->x_max_value[0] - data->x_min_value[0]) * (ur.x - ll.x);

	    x_value = MAX( ll.x, MIN( x_value, ur.x));

	    y_value = ur.y - (data->y_data[idx][i-1] - y_min_value[idx]) / 
	      (y_max_value[idx] - y_min_value[idx]) * (ur.y - ll.y);

	    y_value = MAX( ll.y, MIN( y_value, ur.y));

	    point_p->y = y_value;
	    point_p->x = x_value;
	  }
	}
	point_p++;
      }

      if ( curve_drawtype[idx] != glow_eDrawType_Inherit)
	dt = curve_drawtype[idx];
      else
	dt = draw_type;
      
      if ( curve_fill_drawtype[idx] != glow_eDrawType_Inherit)
	dt_fill = curve_fill_drawtype[idx];
      else
	dt_fill = draw_type;

      ctx->nodraw++;
      curve[idx] = new GrowPolyLine( ctx, "", pointarray, points, dt, 
				     curve_width,
				     0, fill_curve, 1, 0, dt_fill);
      ctx->nodraw--;
    }
    free( (char *) pointarray);

    draw();
  }
  else if ( data->type == glow_eCurveDataType_SeparateX) {

    curve_cnt = data->curves;
    no_of_points = data->rows[0];

    for ( i = 0; i < curve_cnt; i++) {
      y_max_value[i] = data->y_max_value[i];
      y_min_value[i] = data->y_min_value[i];
      curve_drawtype[i] = data->color[i];
      curve_fill_drawtype[i] = data->fillcolor[i];
    }

    curve_width = MIN( DRAW_TYPE_SIZE, MAX( 1, curve_width));

    for ( idx = 0; idx < curve_cnt; idx++) {
      points = data->rows[idx];
      if ( fill_curve)
	points += 2;
      
      pointarray = (glow_sPoint *) calloc( points, sizeof(glow_sPoint));

      point_p = pointarray;
      for ( i = 0; i < points; i++) {
	if ( !fill_curve) {
	  if ( data->x_reverse)
	    x_value = ur.x - (data->x_data[idx][i] - data->x_min_value[idx]) / 
	      (data->x_max_value[idx] - data->x_min_value[idx]) * (ur.x - ll.x);
	  else
	    x_value = ll.x + (data->x_data[idx][i] - data->x_min_value[idx]) / 
	      (data->x_max_value[idx] - data->x_min_value[idx]) * (ur.x - ll.x);

	  x_value = MAX( ll.x, MIN( x_value, ur.x));

	  y_value = ur.y - (data->y_data[idx][i] - y_min_value[idx]) / 
	    (y_max_value[idx] - y_min_value[idx]) * (ur.y - ll.y);

	  y_value = MAX( ll.y, MIN( y_value, ur.y));

	  point_p->y = y_value;
	  point_p->x = x_value;
	}
	else {
	  if ( i == 0) {
	    point_p->y = ur.y;
	    // point_p->x = ur.x;
	    if ( data->x_reverse)
	      point_p->x = ur.x - (data->x_data[idx][i] - data->x_min_value[idx]) / 
	        (data->x_max_value[idx] - data->x_min_value[idx]) * (ur.x - ll.x);
	    else
	      point_p->x = ll.x + (data->x_data[0][i] - data->x_min_value[0]) / 
	        (data->x_max_value[idx] - data->x_min_value[idx]) * (ur.x - ll.x);
	  }
	  else if ( i == points - 1) {
	    point_p->y = ur.y;
	    if ( data->x_reverse)
	      point_p->x = ur.x - (data->x_data[0][i-2] - data->x_min_value[0]) / 
	        (data->x_max_value[idx] - data->x_min_value[idx]) * (ur.x - ll.x);
	    else
	      point_p->x = ll.x + (data->x_data[0][i-2] - data->x_min_value[0]) / 
	        (data->x_max_value[idx] - data->x_min_value[idx]) * (ur.x - ll.x);
	    // point_p->x = ll.x;
	  }
	  else {
	    if ( data->x_reverse)
	      x_value = ur.x - (data->x_data[idx][i-1] - data->x_min_value[idx]) / 
	        (data->x_max_value[idx] - data->x_min_value[idx]) * (ur.x - ll.x);
	    else
	      x_value = ll.x + (data->x_data[idx][i-1] - data->x_min_value[idx]) / 
	        (data->x_max_value[idx] - data->x_min_value[idx]) * (ur.x - ll.x);

	    x_value = MAX( ll.x, MIN( x_value, ur.x));

	    y_value = ur.y - (data->y_data[idx][i-1] - y_min_value[idx]) / 
	      (y_max_value[idx] - y_min_value[idx]) * (ur.y - ll.y);

	    y_value = MAX( ll.y, MIN( y_value, ur.y));

	    point_p->y = y_value;
	    point_p->x = x_value;
	  }
	}
	point_p++;
      }

      if ( curve_drawtype[idx] != glow_eDrawType_Inherit)
	dt = curve_drawtype[idx];
      else
	dt = draw_type;
      
      if ( curve_fill_drawtype[idx] != glow_eDrawType_Inherit)
	dt_fill = curve_fill_drawtype[idx];
      else
	dt_fill = draw_type;

      ctx->nodraw++;
      curve[idx] = new GrowPolyLine( ctx, "", pointarray, points, dt, 
				     curve_width,
				     0, fill_curve, 1, 0, dt_fill);
      ctx->nodraw--;

      free( (char *) pointarray);
    }

    draw();
  }
}


void GrowCurve::add_points( glow_sCurveData *data, unsigned int no_of_points)
{
  if ( data->type == glow_eCurveDataType_CommonX) {

    // Remove old curves
    ctx->nodraw++;
    if ( no_of_points == 1) {
      double y_value;
      int	idx;

      for ( idx = 0; idx < curve_cnt; idx++) {
	y_value = ur.y - (data->y_data[idx][0] - y_min_value[idx]) / 
	  (y_max_value[idx] - y_min_value[idx]) * (ur.y - ll.y);

	y_value = MAX( ll.y, MIN( y_value, ur.y));

	if ( !fill)
	  erase( &ctx->mw);

	if ( !fill_curve)
	  curve[idx]->add_and_shift_y_value( y_value);
	else
	  curve[idx]->add_and_shift_y_value_filled( y_value);
      }
    }
    else {
      double *y_values;
      int i, idx;

      for ( idx = 0; idx < curve_cnt; idx++) {
	y_values = (double *)calloc( 1, no_of_points * sizeof(double));

	for ( i = 0; i < (int)no_of_points; i++) {
	  y_values[i] = ur.y - (data->y_data[idx][i] - y_min_value[idx]) / 
	    (y_max_value[idx] - y_min_value[idx]) * (ur.y - ll.y);

	  y_values[i] = MAX( ll.y, MIN( y_values[i], ur.y));
	}
	if ( !fill)
	  erase( &ctx->mw);

	if ( !fill_curve)
	  curve[idx]->add_and_shift_y_values( y_values, no_of_points);
	else
	  curve[idx]->add_and_shift_y_values_filled( y_values, no_of_points);

	free( (char *)y_values);
      }
    }
    ctx->nodraw--;
    
    draw();
    // draw( (GlowTransform *)NULL, highlight, hot, NULL, NULL);
    ctx->nav_draw( &ctx->navw, 0, 0, ctx->navw.window_width, ctx->navw.window_height);
    // nav_draw( (GlowTransform *) NULL, highlight, NULL, NULL);
  }
}






