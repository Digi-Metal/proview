/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <limits.h>
#include <math.h>
#include <stdlib.h>

#include <iostream>

#include "co_string.h"

#include "glow_growpolyline.h"
#include "glow_grownode.h"

GrowPolyLine::GrowPolyLine(GrowCtx* glow_ctx, const char* name,
    glow_sPoint* pointarray, int point_cnt, glow_eDrawType border_d_type,
    int line_w, int fix_line_w, int fill, int display_border,
    int display_shadow, glow_eDrawType fill_d_type, int closed, int nodraw,
    int noround, glow_eCurveType ctype)
    : GlowPolyLine(glow_ctx, pointarray, point_cnt, border_d_type, line_w,
          fix_line_w, fill, closed),
      x_right(0), x_left(0), y_high(0), y_low(0), hot(0), pzero(ctx),
      highlight(0), inverse(0), user_data(NULL), dynamic(0), dynamicsize(0),
      original_border_drawtype(border_d_type),
      original_fill_drawtype(fill_d_type), fill_drawtype(fill_d_type),
      background_drawtype(glow_eDrawType_No), border(display_border),
      fill_eq_border(0), current_point(0), shadow(display_shadow),
      shadow_width(5), relief(glow_eRelief_Up), shadow_contrast(2),
      disable_shadow(0), fill_eq_light(0), fill_eq_shadow(0),
      fill_eq_bglight(0), fill_eq_bgshadow(0), fill_eq_background(0),
      fixcolor(0), fixposition(0), gradient(glow_eGradient_No),
      gradient_contrast(4), disable_gradient(0), round(0.5), curvetype(ctype)
{
  strcpy(n_name, name);
  pzero.nav_zoom();
  strcpy(last_group, "");
  if (noround)
    round = 0;

  if (ctx->grid_on && point_cnt > 0) {
    double x_grid, y_grid;

    if (point_cnt <= 2) {
      // Position all points on the grid
      for (int i = 0; i < a_points.a_size; i++) {
        ctx->find_grid(((GlowPoint*)a_points[i])->x,
            ((GlowPoint*)a_points[i])->y, &x_grid, &y_grid);
        ((GlowPoint*)a_points[i])->posit(x_grid, y_grid);
      }
    } else {
      // Position the first on the grid
      double x = ((GlowPoint*)a_points[0])->x;
      double y = ((GlowPoint*)a_points[0])->y;
      ctx->find_grid(x, y, &x_grid, &y_grid);
      for (int i = 0; i < a_points.a_size; i++) {
        ((GlowPoint*)a_points[i])
            ->posit(((GlowPoint*)a_points[i])->x + x_grid - x,
                ((GlowPoint*)a_points[i])->y + y_grid - y);
      }
    }
  }
  if (!nodraw)
    ctx->set_dirty();
  get_node_borders();
}

int GrowPolyLine::shadow_direction()
{
  double a1, a2, a1_old = 0.0, a0_old = 0.0;
  double a_sum1 = 0;
  double a_sum2 = 0;
  int p_num = a_points.a_size;
  if ((points[p_num - 1].x == points[0].x
          && points[p_num - 1].y == points[0].y))
    p_num--;

  for (int i = 0; i < p_num; i++) {
    if (i == p_num - 1) {
      if (points[0].x == points[i].x) {
        a1 = 90;
        if (points[0].y < points[i].y)
          a1 += 180;
      } else
        a1 = atan(double(points[0].y - points[i].y)
                 / (points[0].x - points[i].x))
            * 180 / M_PI;
      if (points[0].x < points[i].x)
        a1 += 180;
    } else {
      if (points[i + 1].x == points[i].x) {
        a1 = 90;
        if (points[i + 1].y < points[i].y)
          a1 += 180;
      } else
        a1 = atan(double(points[i + 1].y - points[i].y)
                 / (points[i + 1].x - points[i].x))
            * 180 / M_PI;
      if (points[i + 1].x < points[i].x)
        a1 += 180;
    }
    if (i == 0) {
      a0_old = a1;
      // printf( "a1: %d %f\n", i, a1);
    } else if (i > 0) {
      a2 = a1 - (a1_old - 180);
      if (a2 < 0)
        a2 += 360;
      else if (a2 >= 360)
        a2 -= 360;
      a_sum1 += a2;
      a_sum2 += 360 - a2;

      // printf( "a1: %d %f %f %f\n", i, a1, a2, 360 - a2);
    }
    if (i == p_num - 1) {
      a2 = a0_old - (a1 - 180);
      if (a2 < 0)
        a2 += 360;
      else if (a2 >= 360)
        a2 -= 360;
      a_sum1 += a2;
      a_sum2 += 360 - a2;
      // printf( "a1: %d %f %f %f sum: %f %f diff: %f\n", i, a1, a2, 360 - a2,
      // a_sum1, a_sum2, a_sum2 - a_sum1);
    }
    a1_old = a1;
  }
  int dir;
  glow_sPointX last_point;
  if (points[0].x == points[a_points.a_size - 1].x
      && points[0].y == points[a_points.a_size - 1].y)
    last_point = points[a_points.a_size - 2];
  else
    last_point = points[a_points.a_size - 1];

  if (a_sum2 - a_sum1 < 0) {
    if (points[0].x == last_point.x) {
      if (points[0].x < points[1].x)
        dir = 1;
      else
        dir = -1;
    } else if (points[0].x > last_point.x)
      dir = 1;
    else
      dir = -1;
  } else {
    if (points[0].x == last_point.x) {
      if (points[0].x < points[1].x)
        dir = 1;
      else
        dir = -1;
    } else if (points[0].x < last_point.x)
      dir = 1;
    else
      dir = -1;
  }
  return dir;
}

void GrowPolyLine::calculate_shadow(glow_sShadowInfo** s, int* num, int ish,
    int highlight, void* colornode, int javaexport, int chot)
{
  glow_sShadowInfo* sp;
  double x;
  int pos01;
  int pos12;
  glow_eDrawType light_drawtype;
  glow_eDrawType dark_drawtype;

  int p_num = a_points.a_size;
  if (points[0].x == points[p_num - 1].x && points[0].y == points[p_num - 1].y)
    p_num--;
  sp = (glow_sShadowInfo*)calloc(p_num + 1, sizeof(glow_sShadowInfo));

  glow_eDrawType fillcolor = ctx->get_drawtype(fill_drawtype,
      glow_eDrawType_FillHighlight, highlight, (GrowNode*)colornode, 1);

  int drawtype_incr = shadow_contrast;
  if (relief == glow_eRelief_Down)
    drawtype_incr = -shadow_contrast;
  if (javaexport) {
    light_drawtype = (glow_eDrawType)-drawtype_incr;
    dark_drawtype = (glow_eDrawType)drawtype_incr;
  } else {
    light_drawtype = ctx->shift_drawtype(
        fillcolor, -drawtype_incr + chot, (GrowNode*)colornode);
    dark_drawtype = ctx->shift_drawtype(
        fillcolor, drawtype_incr + chot, (GrowNode*)colornode);
  }

  pos01 = shadow_direction();

  for (int i = 0; i < p_num; i++) {
    double sx0, sx1, sx2, sy0, sy1, sy2;
    double k01, m01, k12, m12;

    if (i == 0) {
      sx0 = points[p_num - 1].x;
      sy0 = points[p_num - 1].y;
    } else {
      sx0 = points[i - 1].x;
      sy0 = points[i - 1].y;
    }
    sx1 = points[i].x;
    sy1 = points[i].y;
    if (i == p_num - 1) {
      sx2 = points[0].x;
      sy2 = points[0].y;
    } else {
      sx2 = points[i + 1].x;
      sy2 = points[i + 1].y;
    }

    pos12 = pos01;
    if (i == -1) {
    } else {
      if (fabs(sx0 - sx1) < DBL_EPSILON) {
        if (sx1 > sx2 && sy1 < sy0)
          pos12 = -pos01;
        else if (sx1 < sx2 && sy1 > sy0)
          pos12 = -pos01;
      } else if (fabs(sx1 - sx2) < DBL_EPSILON) {
        if (sx0 < sx1 && sy2 > sy1)
          pos12 = -pos01;
        else if (sx0 > sx1 && sy2 < sy1)
          pos12 = -pos01;
      } else if (sx1 > sx0 && sx2 < sx1)
        pos12 = -pos01;
      else if (sx1 < sx0 && sx2 > sx1)
        pos12 = -pos01;
    }

    if (fabs(sx0 - sx1) < DBL_EPSILON) {
      if (fabs(sx1 - sx2) < DBL_EPSILON) {
        x = sx1 + pos01 * ish;
        sp[i].x = int(x + 0.5);
        sp[i].y = int(sy1 + 0.5);
      } else {
        k12 = (sy2 - sy1) / (sx2 - sx1);
        m12 = sy1 - sx1 * k12 + pos12 * ish / fabs(cos(atan(k12)));

        x = sx1 + pos01 * ish;
        sp[i].x = int(x + 0.5);
        sp[i].y = int(k12 * x + m12 + 0.5);
      }
    } else if (fabs(sx1 - sx2) < DBL_EPSILON) {
      k01 = (sy1 - sy0) / (sx1 - sx0);
      m01 = sy0 - sx0 * k01 + pos01 * ish / fabs(cos(atan(k01)));

      x = sx1 + pos12 * ish;
      sp[i].x = int(x + 0.5);
      sp[i].y = int(k01 * x + m01 + 0.5);
    } else {
      k01 = (sy1 - sy0) / (sx1 - sx0);
      k12 = (sy2 - sy1) / (sx2 - sx1);
      m01 = sy0 - sx0 * k01 + pos01 * ish / fabs(cos(atan(k01)));
      m12 = sy1 - sx1 * k12 + pos12 * ish / fabs(cos(atan(k12)));
      if (fabs(k01 - k12) < DBL_EPSILON) {
        // Identical lines
        if (fabs(k01) < DBL_EPSILON) {
          sp[i].x = int(sx1 + 0.5);
          sp[i].y = int(m01 + 0.5);
        } else {
          k12 = -k12;
          m12 = sy2 - k12 * sx2;

          x = (m12 - m01) / (k01 - k12);
          sp[i].x = int(x + 0.5);
          sp[i].y = int(k12 * x + m12 + 0.5);
          k12 = k01;
          m12 = m01;
        }
      } else {
        x = (m12 - m01) / (k01 - k12);
        sp[i].x = int(x + 0.5);
        sp[i].y = int(k12 * x + m12 + 0.5);
      }
    }
    if (pos12 == 1)
      sp[i].drawtype = light_drawtype;
    else
      sp[i].drawtype = dark_drawtype;
    pos01 = pos12;
  }
  sp[p_num].x = sp[0].x;
  sp[p_num].y = sp[0].y;
  if (points[0].x == points[a_points.a_size - 1].x
      && points[0].y == points[a_points.a_size - 1].y)
    p_num++;

  *s = sp;
  *num = p_num;
}

void GrowPolyLine::draw(GlowWind* w, GlowTransform* t, int highlight, int hot,
    void* node, void* colornode)
{
  hot = (w == &ctx->navw) ? 0 : hot;
  int chot = 0;
  if (hot && ctx->environment != glow_eEnv_Development) {
    if (ctx->hot_indication == glow_eHotIndication_No)
      hot = 0;
    else if (ctx->hot_indication == glow_eHotIndication_DarkColor) {
      chot = hot;
      hot = 0;
    } else if (ctx->hot_indication == glow_eHotIndication_LightColor) {
      chot = -hot;
      hot = 0;
    }
  }

  int idx;

  if (fixcolor)
    colornode = 0;

  if (node && ((GrowNode*)node)->line_width)
    idx = int(
        w->zoom_factor_y / w->base_zoom_factor * ((GrowNode*)node)->line_width
        - 1);
  else
    idx = int(w->zoom_factor_y / w->base_zoom_factor * line_width - 1);
  idx += hot;
  idx = MAX(0, idx);
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  glow_sPointX* point_p = points;
  glow_sPoint p1;
  Matrix tmp = t ? (*t * trf) : trf;

  for (int i = 0; i < a_points.a_size; i++) {
    p1 = tmp * (*((GlowPoint*)a_points[i]));

    if (p1.x * w->zoom_factor_x - w->offset_x > SHRT_MAX)
      point_p->x = SHRT_MAX;
    else if (p1.x * w->zoom_factor_x - w->offset_x < SHRT_MIN)
      point_p->x = SHRT_MIN;
    else
      point_p->x = int(p1.x * w->zoom_factor_x + round) - w->offset_x;
    point_p->y = int(p1.y * w->zoom_factor_y + round) - w->offset_y;
    point_p++;
  }
  if (fill) {
    glow_eGradient grad = gradient;
    if (gradient == glow_eGradient_No
        && (node && ((GrowNode*)node)->gradient != glow_eGradient_No)
        && !disable_gradient)
      grad = ((GrowNode*)node)->gradient;

    glow_eDrawType drawtype;
    if (fill_eq_border)
      drawtype = ctx->get_drawtype(draw_type, glow_eDrawType_LineHighlight,
          highlight, (GrowNode*)colornode, 0);
    else if (fill_eq_background)
      drawtype = ctx->get_drawtype(background_drawtype,
          glow_eDrawType_FillHighlight, highlight, (GrowNode*)colornode, 3);
    else
      drawtype = ctx->get_drawtype(fill_drawtype, glow_eDrawType_FillHighlight,
          highlight, (GrowNode*)colornode, 1);

    if (fill_eq_light && node && ((GrowNode*)node)->shadow)
      drawtype = ctx->shift_drawtype(
          drawtype, -shadow_contrast + chot, (GrowNode*)colornode);
    else if (fill_eq_bglight) {
      if (node
          && ((GrowNode*)colornode)->background_drawtype != glow_eDrawType_No)
        drawtype
            = ctx->shift_drawtype(((GrowNode*)colornode)->background_drawtype,
                -shadow_contrast + chot, (GrowNode*)colornode);
      else
        drawtype = ctx->shift_drawtype(original_fill_drawtype,
            -shadow_contrast + chot, (GrowNode*)colornode);
    } else if (fill_eq_shadow && node && ((GrowNode*)node)->shadow)
      drawtype = ctx->shift_drawtype(
          drawtype, shadow_contrast + chot, (GrowNode*)colornode);
    else if (fill_eq_bgshadow) {
      if (node
          && ((GrowNode*)colornode)->background_drawtype != glow_eDrawType_No)
        drawtype
            = ctx->shift_drawtype(((GrowNode*)colornode)->background_drawtype,
                shadow_contrast + chot, (GrowNode*)colornode);
      else
        drawtype = ctx->shift_drawtype(original_fill_drawtype,
            shadow_contrast + chot, (GrowNode*)colornode);
    } else if (chot)
      drawtype = GlowColor::shift_drawtype(drawtype, chot, 0);

    if (grad == glow_eGradient_No || drawtype == glow_eDrawType_ColorRed)
      ctx->gdraw->polyline(points, a_points.a_size, drawtype, 1, 0);
    else {
      glow_eDrawType f1, f2;
      if (gradient_contrast >= 0) {
        f2 = GlowColor::shift_drawtype(drawtype, -gradient_contrast / 2, 0);
        f1 = GlowColor::shift_drawtype(
            drawtype, int(float(gradient_contrast) / 2 + 0.6), 0);
      } else {
        f2 = GlowColor::shift_drawtype(
            drawtype, -int(float(gradient_contrast) / 2 - 0.6), 0);
        f1 = GlowColor::shift_drawtype(drawtype, gradient_contrast / 2, 0);
      }

      ctx->gdraw->gradient_fill_polyline(points, a_points.a_size, drawtype,
          f1, f2, ctx->gdraw->gradient_rotate(tmp.rotation, grad));
    }
  }

  int display_shadow = ((node && ((GrowNode*)node)->shadow) || shadow)
      && !disable_shadow && !fill_eq_light && !fill_eq_shadow;

  if (display_shadow && !feq(shadow_width, 0.0)) {
    glow_sShadowInfo* sp;
    int p_num;

    int ish = int(shadow_width / 100 * tmp.vertical_scale() *
                  MIN((x_right - x_left) * w->zoom_factor_x,
                      (y_high - y_low) * w->zoom_factor_y) + 0.5);

    if (ish >= 1) {
      calculate_shadow(&sp, &p_num, ish, highlight, colornode, 0, chot);

      glow_sPointX p[4];
      for (int i = 0; i < p_num - 1; i++) {
        p[0].x = points[i].x;
        p[0].y = points[i].y;
        p[1].x = sp[i].x;
        p[1].y = sp[i].y;
        p[3].x = points[i + 1].x;
        p[3].y = points[i + 1].y;
        p[2].x = sp[i + 1].x;
        p[2].y = sp[i + 1].y;

        ctx->gdraw->polyline(p, 4, sp[i].drawtype, 1, 0);
      }
      free(sp);
    }
  }
  if (border || !(fill || (display_shadow && !feq(shadow_width, 0.0)))) {
    glow_eDrawType drawtype = ctx->get_drawtype(draw_type,
        glow_eDrawType_LineHighlight, highlight, (GrowNode*)colornode, 0);
    switch (curvetype) {
    case glow_eCurveType_Line:
    case glow_eCurveType_Square:
    case glow_eCurveType_DigSquare:
    case glow_eCurveType_Inherit:
      ctx->gdraw->polyline(points, a_points.a_size, drawtype, 0, idx);
      break;
    case glow_eCurveType_Points:
      ctx->gdraw->draw_points(points, a_points.a_size, drawtype, 3);
      break;
    case glow_eCurveType_LinePoints:
      ctx->gdraw->polyline(points, a_points.a_size, drawtype, 0, idx);
      ctx->gdraw->draw_points(points, a_points.a_size, drawtype, 3);
      break;
    }
  }
}

void GrowPolyLine::erase(GlowWind* w, GlowTransform* t, int hot, void* node)
{
  hot = (w == &ctx->navw) ? 0 : hot;
  if (hot && ctx->environment != glow_eEnv_Development
      && ctx->hot_indication != glow_eHotIndication_LineWidth)
    hot = 0;

  int idx;
  if (node && ((GrowNode*)node)->line_width)
    idx = int(
        w->zoom_factor_y / w->base_zoom_factor * ((GrowNode*)node)->line_width
        - 1);
  else
    idx = int(w->zoom_factor_y / w->base_zoom_factor * line_width - 1);
  idx += hot;
  idx = MAX(0, idx);
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);

  glow_sPointX* point_p = points;
  Matrix tmp = t ? (*t * trf) : trf;
  for (int i = 0; i < a_points.a_size; i++) {
    glow_sPoint p1 = tmp * (*((GlowPoint*)a_points[i]));
    point_p->x = int(p1.x * w->zoom_factor_x + round) - w->offset_x;
    point_p->y = int(p1.y * w->zoom_factor_y + round) - w->offset_y;
    point_p++;
  }
  int display_shadow = ((node && ((GrowNode*)node)->shadow) || shadow)
      && !disable_shadow && !fill_eq_light && !fill_eq_shadow;

  if (border || !(fill || (display_shadow && !feq(shadow_width, 0.0))))
    ctx->gdraw->polyline(points, a_points.a_size, glow_eDrawType_LineErase, 0, idx);
  if (fill || (display_shadow && !feq(shadow_width, 0.0)))
    ctx->gdraw->polyline(points, a_points.a_size, glow_eDrawType_LineErase, 1, 0);
}

void GrowPolyLine::move(double delta_x, double delta_y, int grid)
{
  if (fixposition)
    return;

  if (grid) {
    double x_grid, y_grid;

    /* Move to closest grid point */
    ctx->find_grid(x_left + delta_x / ctx->mw.zoom_factor_x,
        y_low + delta_y / ctx->mw.zoom_factor_y, &x_grid, &y_grid);
    trf.move(x_grid - x_left, y_grid - y_low);
    get_node_borders();
  } else {
    double dx = delta_x / ctx->mw.zoom_factor_x;
    double dy = delta_y / ctx->mw.zoom_factor_y;
    trf.move(dx, dy);
    x_right += dx;
    x_left += dx;
    y_high += dy;
    y_low += dy;
  }
  if (!feq(delta_x, 0.0) || !feq(delta_y, 0.0)) {
    ctx->set_dirty();
  }
}

void GrowPolyLine::move_current_point(int delta_x, int delta_y, int grid)
{
  glow_sPoint p = trf * (*((GlowPoint*)a_points[current_point]));
  p.x += double(delta_x) / ctx->mw.zoom_factor_x;
  p.y += double(delta_y) / ctx->mw.zoom_factor_y;

  if (grid) {
    double x_grid, y_grid;
    ctx->find_grid(p.x, p.y, &x_grid, &y_grid);
    p.x = x_grid;
    p.y = y_grid;
  }
  glow_sPoint tmp = trf.reverse(p.x, p.y);
  ((GlowPoint*)a_points[current_point])->x = tmp.x;
  ((GlowPoint*)a_points[current_point])->y = tmp.y;
  zoom();
  get_node_borders();
  if (delta_x != 0 || delta_y != 0) {
    ctx->set_dirty();
  }
}

GrowPolyLine::~GrowPolyLine()
{
  ctx->object_deleted(this);
  ctx->set_dirty();
  if (hot)
    ctx->gdraw->set_cursor(ctx->mw.window, glow_eDrawCursor_Normal);
}

int GrowPolyLine::local_event_handler(glow_eEvent event, double x, double y)
{
  if (ctx->edit_mode == grow_eMode_EditPolyLine && ctx->a_sel[0] == this) {
    int dx = 4;
    int dy = 4;

    glow_sPoint c = trf * glow_sPoint({x, y});
    c.x = c.x * ctx->mw.zoom_factor_x + ctx->mw.offset_x;
    c.y = c.y * ctx->mw.zoom_factor_y + ctx->mw.offset_y;

    glow_sPoint p1;
    for (int i = 0; i < a_points.a_size; i++) {
      p1 = trf * (*((GlowPoint*)a_points[i]));
      p1.x = p1.x * ctx->mw.zoom_factor_x + ctx->mw.offset_x;
      p1.y = p1.y * ctx->mw.zoom_factor_y + ctx->mw.offset_y;

      if (ABS(p1.x - c.x) < dx && ABS(p1.y - c.y) < dy) {
        current_point = i;
        return 1;
      }
    }
  } else if (ctx->edit_mode != grow_eMode_EditPolyLine) {
    glow_sPoint p2 = trf.reverse(0.1 * line_width, 0.1 * line_width);
    glow_sPoint p1 = trf.reverse(0, 0);
    double dx = fabs(p2.x - p1.x);
    double dy = fabs(p2.y - p1.y);

    for (int i = 0; i < a_points.a_size - 1; i++) {
      p1 = *((GlowPoint *) a_points[i]);
      p2 = *((GlowPoint *) a_points[i + 1]);

      if ((feq(p1.x, p2.x) && p1.y < p2.y && // Vertical
           fabs(p1.x - x) < dx && p1.y < y && y < p2.y)
          || (feq(p1.x, p2.x) && p1.y > p2.y && // Vertical
              fabs(p1.x - x) < dx && p2.y < y && y < p1.y)
          || (feq(p1.y, p2.y) && p1.x < p2.x && // Horizontal
              fabs(p1.y - y) < dy && p1.x < x && x < p2.x)
          || (feq(p1.y, p2.y) && p1.x > p2.x && // Horizontal
              fabs(p1.y - y) < dy && p2.x < x && x < p1.x)) {
        return 1;
      } else if (
          (!(feq(p1.x, p2.x) || feq(p1.y, p2.y)) && p1.x < p2.x && p1.x <= x &&
           x <= p2.x && fabs(y - (p2.y - p1.y) / (p2.x - p1.x) * x - p1.y +
                             (p2.y - p1.y) / (p2.x - p1.x) * p1.x) < dx) ||
          (!(feq(p1.x, p2.x) || feq(p1.y, p2.y)) && p1.x > p2.x && p2.x <= x &&
           x <= p1.x && fabs(y - (p2.y - p1.y) / (p2.x - p1.x) * x - p1.y +
                             (p2.y - p1.y) / (p2.x - p1.x) * p1.x) < dx)) {
        return 1;
      }
    }
  }
  return 0;
}

int GrowPolyLine::event_handler(glow_eEvent event, double fx, double fy)
{
  glow_sPoint p = trf.reverse(fx, fy);
  return local_event_handler(event, p.x, p.y);
}

int GrowPolyLine::event_handler(glow_eEvent event, int x, int y, double fx, double fy)
{
  // Convert koordinates to local koordinates
  glow_sPoint r = trf.reverse(fx, fy);

  int sts = 0;
  if (event == ctx->event_move_node) {
    sts = local_event_handler(event, r.x, r.y);
    if (sts) {
      /* Register node for potential movement */
      ctx->move_insert(this);
    }
    return sts;
  }
  switch (event) {
  case glow_eEvent_CursorMotion: {
    if (ctx->hot_mode == glow_eHotMode_TraceAction)
      sts = 0;
    else if (ctx->hot_found)
      sts = 0;
    else {
      sts = local_event_handler(event, r.x, r.y);
      if (sts)
        ctx->hot_found = 1;
    }
    if (sts && !hot
        && !(ctx->node_movement_active || ctx->node_movement_paste_active)) {
      ctx->gdraw->set_cursor(ctx->mw.window, glow_eDrawCursor_CrossHair);
      set_hot(1);
    }
    if (!sts && hot) {
      if (!ctx->hot_found)
        ctx->gdraw->set_cursor(ctx->mw.window, glow_eDrawCursor_Normal);
      set_hot(0);
    }
    break;
  }
  default:
    sts = local_event_handler(event, r.x, r.y);
  }
  if (sts)
    ctx->register_callback_object(glow_eObjectType_Node, this);
  return sts;
}

void GrowPolyLine::save(std::ofstream& fp, glow_eSaveMode mode)
{
  char* s;

  fp << int(glow_eSave_GrowPolyLine) << '\n';
  fp << int(glow_eSave_GrowPolyLine_n_name) << FSPACE << n_name << '\n';
  fp << int(glow_eSave_GrowPolyLine_x_right) << FSPACE << x_right << '\n';
  fp << int(glow_eSave_GrowPolyLine_x_left) << FSPACE << x_left << '\n';
  fp << int(glow_eSave_GrowPolyLine_y_high) << FSPACE << y_high << '\n';
  fp << int(glow_eSave_GrowPolyLine_y_low) << FSPACE << y_low << '\n';
  fp << int(glow_eSave_GrowPolyLine_polyline_part) << '\n';
  GlowPolyLine::save(fp, mode);
  fp << int(glow_eSave_GrowPolyLine_original_border_drawtype) << FSPACE
     << int(original_border_drawtype) << '\n';
  fp << int(glow_eSave_GrowPolyLine_original_fill_drawtype) << FSPACE
     << int(original_fill_drawtype) << '\n';
  fp << int(glow_eSave_GrowPolyLine_background_drawtype) << FSPACE
     << int(background_drawtype) << '\n';
  fp << int(glow_eSave_GrowPolyLine_fill_drawtype) << FSPACE
     << int(fill_drawtype) << '\n';
  fp << int(glow_eSave_GrowPolyLine_border) << FSPACE << border << '\n';
  fp << int(glow_eSave_GrowPolyLine_shadow) << FSPACE << shadow << '\n';
  fp << int(glow_eSave_GrowPolyLine_shadow_width) << FSPACE << shadow_width
     << '\n';
  fp << int(glow_eSave_GrowPolyLine_shadow_contrast) << FSPACE
     << shadow_contrast << '\n';
  fp << int(glow_eSave_GrowPolyLine_relief) << FSPACE << int(relief) << '\n';
  fp << int(glow_eSave_GrowPolyLine_disable_shadow) << FSPACE << disable_shadow
     << '\n';
  fp << int(glow_eSave_GrowPolyLine_dynamicsize) << FSPACE << dynamicsize
     << '\n';
  fp << int(glow_eSave_GrowPolyLine_dynamic) << '\n';
  if (dynamic) {
    fp << "\"";
    for (s = dynamic; *s; s++) {
      if (*s == '"')
        fp << "\\";
      fp << *s;
    }
    fp << "\"\n";
  }
  fp << int(glow_eSave_GrowPolyLine_trf) << '\n';
  trf.save(fp, mode);
  fp << int(glow_eSave_GrowPolyLine_fill_eq_border) << FSPACE << fill_eq_border
     << '\n';
  fp << int(glow_eSave_GrowPolyLine_fill_eq_light) << FSPACE << fill_eq_light
     << '\n';
  fp << int(glow_eSave_GrowPolyLine_fill_eq_shadow) << FSPACE << fill_eq_shadow
     << '\n';
  fp << int(glow_eSave_GrowPolyLine_fill_eq_bglight) << FSPACE
     << fill_eq_bglight << '\n';
  fp << int(glow_eSave_GrowPolyLine_fill_eq_bgshadow) << FSPACE
     << fill_eq_bgshadow << '\n';
  fp << int(glow_eSave_GrowPolyLine_fixcolor) << FSPACE << fixcolor << '\n';
  fp << int(glow_eSave_GrowPolyLine_fixposition) << FSPACE << fixposition
     << '\n';
  fp << int(glow_eSave_GrowPolyLine_gradient) << FSPACE << int(gradient)
     << '\n';
  fp << int(glow_eSave_GrowPolyLine_gradient_contrast) << FSPACE
     << gradient_contrast << '\n';
  fp << int(glow_eSave_GrowPolyLine_disable_gradient) << FSPACE
     << disable_gradient << '\n';
  fp << int(glow_eSave_GrowPolyLine_fill_eq_background) << FSPACE
     << fill_eq_background << '\n';
  fp << int(glow_eSave_End) << '\n';
}

void GrowPolyLine::open(std::ifstream& fp)
{
  int type = 0;
  int end_found = 0;
  char dummy[40];
  int tmp;

  for (;;) {
    if (!fp.good()) {
      fp.clear();
      fp.getline(dummy, sizeof(dummy));
      printf("** Read error GrowPolyLine: \"%d %s\"\n", type, dummy);
    }

    fp >> type;
    switch (type) {
    case glow_eSave_GrowPolyLine:
      break;
    case glow_eSave_GrowPolyLine_n_name:
      fp.get();
      fp.getline(n_name, sizeof(n_name));
      break;
    case glow_eSave_GrowPolyLine_x_right:
      fp >> x_right;
      break;
    case glow_eSave_GrowPolyLine_x_left:
      fp >> x_left;
      break;
    case glow_eSave_GrowPolyLine_y_high:
      fp >> y_high;
      break;
    case glow_eSave_GrowPolyLine_y_low:
      fp >> y_low;
      break;
    case glow_eSave_GrowPolyLine_original_border_drawtype:
      fp >> tmp;
      original_border_drawtype = (glow_eDrawType)tmp;
      break;
    case glow_eSave_GrowPolyLine_original_fill_drawtype:
      fp >> tmp;
      original_fill_drawtype = (glow_eDrawType)tmp;
      break;
    case glow_eSave_GrowPolyLine_fill_drawtype:
      fp >> tmp;
      fill_drawtype = (glow_eDrawType)tmp;
      break;
    case glow_eSave_GrowPolyLine_background_drawtype:
      fp >> tmp;
      background_drawtype = (glow_eDrawType)tmp;
      break;
    case glow_eSave_GrowPolyLine_border:
      fp >> border;
      break;
    case glow_eSave_GrowPolyLine_shadow_width:
      fp >> shadow_width;
      break;
    case glow_eSave_GrowPolyLine_shadow_contrast:
      fp >> shadow_contrast;
      break;
    case glow_eSave_GrowPolyLine_shadow:
      fp >> shadow;
      break;
    case glow_eSave_GrowPolyLine_relief:
      fp >> tmp;
      relief = (glow_eRelief)tmp;
      break;
    case glow_eSave_GrowPolyLine_disable_shadow:
      fp >> disable_shadow;
      break;
    case glow_eSave_GrowPolyLine_gradient:
      fp >> tmp;
      gradient = (glow_eGradient)tmp;
      break;
    case glow_eSave_GrowPolyLine_gradient_contrast:
      fp >> gradient_contrast;
      break;
    case glow_eSave_GrowPolyLine_disable_gradient:
      fp >> disable_gradient;
      break;
    case glow_eSave_GrowPolyLine_dynamicsize:
      fp >> dynamicsize;
      break;
    case glow_eSave_GrowPolyLine_dynamic:
      fp.getline(dummy, sizeof(dummy));
      if (dynamicsize) {
        dynamic = (char*)calloc(1, dynamicsize);
        fp.get();
        for (int j = 0; j < dynamicsize; j++) {
          char c;
          if ((c = fp.get()) == '"') {
            if (dynamic[j - 1] == '\\')
              j--;
            else {
              dynamic[j] = 0;
              break;
            }
          }
          dynamic[j] = c;
        }
        fp.getline(dummy, sizeof(dummy));
      }
      break;
    case glow_eSave_GrowPolyLine_polyline_part:
      GlowPolyLine::open(fp);
      break;

    case glow_eSave_GrowPolyLine_trf:
      trf.open(fp);
      break;
    case glow_eSave_GrowPolyLine_fill_eq_border:
      fp >> fill_eq_border;
      break;
    case glow_eSave_GrowPolyLine_fill_eq_light:
      fp >> fill_eq_light;
      break;
    case glow_eSave_GrowPolyLine_fill_eq_shadow:
      fp >> fill_eq_shadow;
      break;
    case glow_eSave_GrowPolyLine_fill_eq_bglight:
      fp >> fill_eq_bglight;
      break;
    case glow_eSave_GrowPolyLine_fill_eq_bgshadow:
      fp >> fill_eq_bgshadow;
      break;
    case glow_eSave_GrowPolyLine_fixcolor:
      fp >> fixcolor;
      break;
    case glow_eSave_GrowPolyLine_fixposition:
      fp >> fixposition;
      break;
    case glow_eSave_GrowPolyLine_fill_eq_background:
      fp >> fill_eq_background;
      break;
    case glow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "GrowPolyLine:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

void GrowPolyLine::draw(GlowWind* w, int ll_x, int ll_y, int ur_x, int ur_y)
{
  int tmp;

  if (ll_x > ur_x) {
    /* Shift */
    tmp = ll_x;
    ll_x = ur_x;
    ur_x = tmp;
  }
  if (ll_y > ur_y) {
    /* Shift */
    tmp = ll_y;
    ll_y = ur_y;
    ur_y = tmp;
  }

  if (x_right * w->zoom_factor_x - w->offset_x >= ll_x
      && x_left * w->zoom_factor_x - w->offset_x <= ur_x
      && y_high * w->zoom_factor_y - w->offset_y >= ll_y
      && y_low * w->zoom_factor_y - w->offset_y <= ur_y) {
    draw(w, (GlowTransform*)NULL, highlight, hot, NULL, NULL);
  }
}

void GrowPolyLine::draw(GlowWind* w, int* ll_x, int* ll_y, int* ur_x, int* ur_y)
{
  int tmp;
  int obj_ur_x = int(x_right * w->zoom_factor_x) - w->offset_x;
  int obj_ll_x = int(x_left * w->zoom_factor_x) - w->offset_x;
  int obj_ur_y = int(y_high * w->zoom_factor_y) - w->offset_y;
  int obj_ll_y = int(y_low * w->zoom_factor_y) - w->offset_y;

  if (*ll_x > *ur_x) {
    /* Shift */
    tmp = *ll_x;
    *ll_x = *ur_x;
    *ur_x = tmp;
  }
  if (*ll_y > *ur_y) {
    /* Shift */
    tmp = *ll_y;
    *ll_y = *ur_y;
    *ur_y = tmp;
  }

  if (obj_ur_x >= *ll_x && obj_ll_x <= *ur_x && obj_ur_y >= *ll_y
      && obj_ll_y <= *ur_y) {
    draw(w, (GlowTransform*)NULL, highlight, hot, NULL, NULL);

    // Increase the redraw area
    if (obj_ur_x > *ur_x)
      *ur_x = obj_ur_x;
    if (obj_ur_y > *ur_y)
      *ur_y = obj_ur_y;
    if (obj_ll_x < *ll_x)
      *ll_x = obj_ll_x;
    if (obj_ll_y < *ll_y)
      *ll_y = obj_ll_y;
  }
}

void GrowPolyLine::set_highlight(int on)
{
  if (highlight != on) {
    highlight = on;
    ctx->set_dirty();
  }
}

void GrowPolyLine::get_borders(GlowTransform* t, double* x_right,
    double* x_left, double* y_high, double* y_low)
{
  glow_sPoint p1, p2;
  Matrix tmp = t ? (*t * trf) : trf;
  for (int i = 0; i < a_points.a_size - 1; i++) {
    if (i == 0) {
      p1 = tmp * (*((GlowPoint*)a_points[i]));
    } else {
      p1 = p2;
    }
    p2 = tmp * (*((GlowPoint*)a_points[i + 1]));

    *x_left = MIN(*x_left, MIN(p1.x, p2.x));
    *x_right = MAX(*x_right, MAX(p1.x, p2.x));
    *y_low = MIN(*y_low, MIN(p1.y, p2.y));
    *y_high = MAX(*y_high, MAX(p1.y, p2.y));
  }
}

void GrowPolyLine::select_region_insert(double ll_x, double ll_y, double ur_x,
    double ur_y, glow_eSelectPolicy select_policy)
{
  if (select_policy == glow_eSelectPolicy_Surround) {
    if (x_left > ll_x && x_right < ur_x && y_high < ur_y && y_low > ll_y)
      ctx->select_insert(this);
  } else {
    if (x_right > ll_x && x_left < ur_x && y_low < ur_y && y_high > ll_y)
      ctx->select_insert(this);
  }
}

void GrowPolyLine::add_points(glow_sPoint* point_array, int point_cnt)
{
  if (ctx->grid_on && point_cnt == 1) {
    double x_grid, y_grid;

    // If one point, move to gridpoint, otherwise...
    ctx->find_grid(point_array->x, point_array->y, &x_grid, &y_grid);
    point_array->x = x_grid;
    point_array->y = y_grid;
  }

  GlowPolyLine::add_points(
      (void*)&pzero, point_array, point_cnt, highlight, hot);
  get_node_borders();
}

void GrowPolyLine::set_fill(int fillval)
{
  GlowPolyLine::set_fill(fillval);
}

void GrowPolyLine::set_border(int borderval)
{
  if (border != borderval) {
    border = borderval;
    ctx->set_dirty();
  }
}

void GrowPolyLine::set_drawtype(glow_eDrawType drawtype)
{
  GlowPolyLine::set_drawtype(drawtype);
}

void GrowPolyLine::set_linewidth(int linewidth)
{
  GlowPolyLine::set_linewidth(linewidth);
}

void GrowPolyLine::set_dynamic(char* code, int size)
{
  if (!dynamic) {
    dynamic = (char*)calloc(1, size + 1);
    dynamicsize = size + 1;
  } else if (dynamicsize < size + 1) {
    free(dynamic);
    dynamic = (char*)calloc(1, size + 1);
    dynamicsize = size + 1;
  }
  strncpy(dynamic, code, size + 1);
}

void GrowPolyLine::exec_dynamic()
{
  if (dynamicsize && !streq(dynamic, ""))
    ctx->dynamic_cb(this, dynamic, glow_eDynamicType_Object);
}

void GrowPolyLine::set_position(double x, double y)
{
  if (feq(trf.a13, x) && feq(trf.a23, y))
    return;

  trf.posit(x, y);
  get_node_borders();
  ctx->set_dirty();
}

void GrowPolyLine::set_scale(
    double scale_x, double scale_y, double x0, double y0, glow_eScaleType type)
{
  double old_x_left, old_x_right, old_y_low, old_y_high;

  if (trf.s.a11 && trf.s.a22
      && fabs(scale_x - trf.a11 / trf.s.a11) < FLT_EPSILON
      && fabs(scale_y - trf.a22 / trf.s.a22) < FLT_EPSILON)
    return;

  switch (type) {
  case glow_eScaleType_LowerLeft:
    x0 = x_left;
    y0 = y_low;
    break;
  case glow_eScaleType_LowerRight:
    x0 = x_right;
    y0 = y_low;
    break;
  case glow_eScaleType_UpperRight:
    x0 = x_right;
    y0 = y_high;
    break;
  case glow_eScaleType_UpperLeft:
    x0 = x_left;
    y0 = y_high;
    break;
  case glow_eScaleType_FixPoint:
    break;
  case glow_eScaleType_Center:
    x0 = (x_left + x_right) / 2;
    y0 = (y_low + y_high) / 2;
    break;
  default:;
  }

  old_x_left = x_left;
  old_x_right = x_right;
  old_y_low = y_low;
  old_y_high = y_high;
  trf.scale_from_stored(scale_x, scale_y, x0, y0);
  get_node_borders();

  switch (type) {
  case glow_eScaleType_LowerLeft:
    x_left = old_x_left;
    y_low = old_y_low;
    break;
  case glow_eScaleType_LowerRight:
    x_right = old_x_right;
    y_low = old_y_low;
    break;
  case glow_eScaleType_UpperRight:
    x_right = old_x_right;
    y_high = old_y_high;
    break;
  case glow_eScaleType_UpperLeft:
    x_left = old_x_left;
    y_high = old_y_high;
    break;
  case glow_eScaleType_FixPoint:
    break;
  case glow_eScaleType_Center:
    x0 = (x_left + x_right) / 2;
    y0 = (y_low + y_high) / 2;
    break;
  default:;
  }
  ctx->set_dirty();
}

void GrowPolyLine::set_rotation(
    double angle, double x0, double y0, glow_eRotationPoint type)
{
  if (fabs(angle - trf.rotation + trf.s.rotation) < FLT_EPSILON)
    return;

  switch (type) {
  case glow_eRotationPoint_LowerLeft:
    x0 = x_left;
    y0 = y_low;
    break;
  case glow_eRotationPoint_LowerRight:
    x0 = x_right;
    y0 = y_low;
    break;
  case glow_eRotationPoint_UpperRight:
    x0 = x_right;
    y0 = y_high;
    break;
  case glow_eRotationPoint_UpperLeft:
    x0 = x_left;
    y0 = y_high;
    break;
  case glow_eRotationPoint_Center:
    x0 = (x_left + x_right) / 2;
    y0 = (y_high + y_low) / 2;
    break;
  default:;
  }

  trf.rotate_from_stored(angle, x0, y0);
  get_node_borders();
  ctx->set_dirty();
}

void GrowPolyLine::set_transform(GlowTransform* t)
{
  trf.set(*t * trf);
  get_node_borders();
}

void GrowPolyLine::add_and_shift_y_value(double value)
{
  for (int i = a_points.size() - 1; i > 0; i--) {
    ((GlowPoint*)a_points[i])->y = ((GlowPoint*)a_points[i - 1])->y;
  }
  ((GlowPoint*)a_points[0])->y = value;
  zoom();
  nav_zoom();
}

void GrowPolyLine::add_and_shift_y_values(
    double* values, unsigned int no_of_values)
{
  if (!no_of_values)
    return;

  if (no_of_values >= (unsigned int)a_points.size()) {
    for (unsigned int i = 0; i < (unsigned int)a_points.size(); i++)
      ((GlowPoint*)a_points[i])->y = *(values + i);
  } else {
    for (unsigned int i = a_points.size() - 1; i >= no_of_values; i--)
      ((GlowPoint*)a_points[i])->y
          = ((GlowPoint*)a_points[i - no_of_values])->y;

    for (unsigned int i = 0; i < no_of_values; i++)
      ((GlowPoint*)a_points[i])->y = *(values + i);
  }
  zoom();
  nav_zoom();
}

void GrowPolyLine::add_and_shift_y_value_filled(double value)
{
  for (int i = a_points.size() - 2; i > 1; i--) {
    ((GlowPoint*)a_points[i])->y = ((GlowPoint*)a_points[i - 1])->y;
  }
  ((GlowPoint*)a_points[1])->y = value;
  zoom();
  nav_zoom();
}

void GrowPolyLine::add_and_shift_y_values_filled(
    double* values, unsigned int no_of_values)
{
  if (!no_of_values)
    return;

  for (unsigned int i = a_points.size() - 2; i >= no_of_values + 1; i--)
    ((GlowPoint*)a_points[i])->y = ((GlowPoint*)a_points[i - no_of_values])->y;

  for (unsigned int i = 0; i < no_of_values; i++)
    ((GlowPoint*)a_points[i + 1])->y = *(values + i);
  zoom();
  nav_zoom();
}

void GrowPolyLine::align(double x, double y, glow_eAlignDirection direction)
{
  if (fixposition)
    return;

  double dx, dy;
  switch (direction) {
  case glow_eAlignDirection_CenterVert:
    dx = x - (x_right + x_left) / 2;
    dy = 0;
    break;
  case glow_eAlignDirection_CenterHoriz:
    dx = 0;
    dy = y - (y_high + y_low) / 2;
    break;
  case glow_eAlignDirection_CenterCenter:
    dx = x - (x_right + x_left) / 2;
    dy = y - (y_high + y_low) / 2;
    break;
  case glow_eAlignDirection_Right:
    dx = x - x_right;
    dy = 0;
    break;
  case glow_eAlignDirection_Left:
    dx = x - x_left;
    dy = 0;
    break;
  case glow_eAlignDirection_Up:
    dx = 0;
    dy = y - y_high;
    break;
  case glow_eAlignDirection_Down:
    dx = 0;
    dy = y - y_low;
    break;
  }
  if (!feq(dx, 0.0) || !feq(dy, 0.0)) {
    ctx->set_dirty();
  }
  trf.move(dx, dy);
  x_right += dx;
  x_left += dx;
  y_high += dy;
  y_low += dy;
}

void GrowPolyLine::export_javabean(GlowTransform* t, void* node,
    glow_eExportPass pass, int* shape_cnt, int node_cnt, int in_nc,
    std::ofstream& fp)
{
  int idx;
  if (node && ((GrowNode*)node)->line_width)
    idx = int(ctx->mw.zoom_factor_y / ctx->mw.base_zoom_factor
            * ((GrowNode*)node)->line_width
        - 1);
  else
    idx = int(
        ctx->mw.zoom_factor_y / ctx->mw.base_zoom_factor * line_width - 1);
  idx += hot;
  idx = MAX(0, idx);
  idx = MIN(idx, DRAW_TYPE_SIZE - 1);
  int jshadow = !disable_shadow && !feq(shadow_width, 0.0) && !fill_eq_light
      && !fill_eq_shadow;

  glow_sPoint* p = (glow_sPoint*)malloc(a_points.a_size * sizeof(glow_sPoint));

  Matrix tmp = t ? (*t * trf) : trf;
  for (int i = 0; i < a_points.a_size; i++) {
    glow_sPoint p1 = tmp * (*((GlowPoint*)a_points[i]));
    p[i].x = p1.x * ctx->mw.zoom_factor_x - ctx->mw.offset_x;
    p[i].y = p1.y * ctx->mw.zoom_factor_y - ctx->mw.offset_y;

    if (jshadow) {
      points[i].x = int(p[i].x + round);
      points[i].y = int(p[i].y + round);
    }
  }

  int p_num = 0;
  glow_sShadowInfo* sp = 0;
  if (jshadow) {
    int ish = int(shadow_width / 100 * tmp.vertical_scale() *
                  MIN((x_right - x_left) * ctx->mw.zoom_factor_x,
                      (y_high - y_low) * ctx->mw.zoom_factor_y) + round);

    if (ish)
      calculate_shadow(&sp, &p_num, ish, 0, 0, 1, 0);
    else
      jshadow = 0;
  }
  int jborder = border || !(fill || (!disable_shadow && !feq(shadow_width, 0.0)));

  glow_eGradient grad = gradient;
  if (disable_gradient)
    grad = glow_eGradient_No;

  int gc1, gc2;
  if (gradient_contrast >= 0) {
    gc1 = gradient_contrast / 2;
    gc2 = -int(float(gradient_contrast) / 2 + 0.6);
  } else {
    gc1 = int(float(gradient_contrast) / 2 - 0.6);
    gc2 = -gradient_contrast / 2;
  }

  ctx->export_jbean->polyline(p, a_points.a_size, fill, jborder, fill_drawtype,
      draw_type, fill_eq_border, fill_eq_light, fill_eq_shadow, idx, jshadow,
      shadow, shadow_contrast, sp, p_num, fixcolor, grad, gc1, gc2, pass,
      shape_cnt, node_cnt, fp);
  free((char*)p);
  free(sp);
}

void GrowPolyLine::set_last_group(char* name)
{
  strcpy(last_group, name);
}

void GrowPolyLine::flip(double x0, double y0, glow_eFlipDirection dir)
{
  switch (dir) {
  case glow_eFlipDirection_Horizontal:
    trf.store();
    set_scale(1, -1, x0, y0, glow_eScaleType_FixPoint);
    break;
  case glow_eFlipDirection_Vertical:
    trf.store();
    set_scale(-1, 1, x0, y0, glow_eScaleType_FixPoint);
    break;
  }
}

void GrowPolyLine::convert(glow_eConvert version)
{
  switch (version) {
  case glow_eConvert_V34: {
    // Conversion of colors
    draw_type = GlowColor::convert(version, draw_type);
    original_border_drawtype
        = GlowColor::convert(version, original_border_drawtype);
    original_fill_drawtype
        = GlowColor::convert(version, original_fill_drawtype);
    fill_drawtype = GlowColor::convert(version, fill_drawtype);

    break;
  }
  }
}
