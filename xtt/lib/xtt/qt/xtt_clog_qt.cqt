/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_clog_qt.cpp -- Console log in xtt */

//#include "pwr_baseclasses.h"

#include "co_syi.h"
#include "co_time.h"

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include "xtt_clog_qt.h"
#include "xtt_clognav_qt.h"

#include <QDialogButtonBox>
#include <QLabel>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

void CLogQtWidget::closeEvent(QCloseEvent* event)
{
  debug_print("CLogQtWidget::closeEvent\n");
  if (clog->close_cb) {
    (clog->close_cb)(clog->parent_ctx);
  } else {
    delete clog;
  }
  QWidget::closeEvent(event);
}

CLogQt::CLogQt(void* clog_parent_ctx, QWidget* clog_parent_wid,
    const char* clog_name, pwr_tStatus* status)
    : CLog(clog_parent_ctx, clog_name, status), parent_wid(clog_parent_wid),
      filter_form(0)
{
  toplevel = new CLogQtWidget(this, clog_parent_wid);
  toplevel->setToolTip(fl("xtt_clog widget"));
  toplevel->setMinimumSize(1000, 800);
  toplevel->setWindowTitle(translate_utf8(clog_name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Filter", SLOT(activate_filter()));
  addMenuItem(toplevel, file, "&Select File", SLOT(activate_select_file()));
  addMenuItem(
      toplevel, file, "&Next File", SLOT(activate_next_file()), "CTRL+N");
  addMenuItem(
      toplevel, file, "&Previous File", SLOT(activate_prev_file()), "CTRL+P");
  addMenuItem(toplevel, file, "&Update", SLOT(activate_update()), "CTRL+U");
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()),
      "CTRL+B", "zoom-original");

  // Menu Help
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Help on System Messages", SLOT(activate_help()),
      "CTRL+H", "system-help");
  addMenuItem(
      toplevel, help, "Help on &Selected Message", SLOT(activate_helpmsg()));

  clognav = new CLogNavQt(this, toplevel, &clognav_widget);

  vbox->setMenuBar(menu_bar);
  add_expanding(vbox, clognav_widget);

  toplevel->setLayout(vbox);
  toplevel->show();

  wow = new CoWowQt(toplevel);

  *status = 1;
}

void CLogQt::pop()
{
  ::pop(toplevel);
}

void CLogQt::set_clock_cursor()
{
  toplevel->window()->setCursor(Qt::WaitCursor);
}

void CLogQt::reset_cursor()
{
  toplevel->window()->unsetCursor();
}

void CLogQtWidget::focusInEvent(QFocusEvent* event)
{
  if (clog->clog_displayed) {
    clog->clognav->set_input_focus();
  }

  QWidget::focusInEvent(event);
}

void CLogQtWidget::activate_zoom_in()
{
  clog->clognav->zoom(1.2);
}

void CLogQtWidget::activate_zoom_out()
{
  clog->clognav->zoom(5.0 / 6);
}

void CLogQtWidget::activate_zoom_reset()
{
  clog->clognav->unzoom();
}

void CLogQtWidget::activate_filter()
{
  clog->create_filter_dialog();

  bool success, info, warning, error, fatal, text;
  clog->clognav->get_filter(&success, &info, &warning, &error, &fatal, &text);
  clog->show_success_w->setChecked(success);
  clog->show_info_w->setChecked(info);
  clog->show_warning_w->setChecked(warning);
  clog->show_error_w->setChecked(error);
  clog->show_fatal_w->setChecked(fatal);
  clog->show_text_w->setChecked(text);
}

void CLogQtWidget::activate_select_file()
{
  char* s;
  pwr_tString80* str;

  str = (pwr_tString80*)calloc(
      clog->clognav->file_list.size() + 1, sizeof(*str));
  for (int i = 0; i < (int)clog->clognav->file_list.size(); i++) {
    time_AtoAscii(&clog->clognav->file_list[i].time,
        time_eFormat_ComprDateAndTime, str[i], sizeof(str[i]));
    str[i][17] = 0;
    strcat(str[i], "    ");
    s = strrchr(clog->clognav->file_list[i].name, '/');
    if (s) {
      strcat(str[i], s + 1);
    } else {
      strcat(str[i], clog->clognav->file_list[i].name);
    }
  }
  clog->wow->CreateList(
      "Select File", (char*)str, 80, CLogQt::file_selected_cb, 0, clog);

  free(str);
}

void CLogQt::file_selected_cb(void* ctx, char* text, int ok_pressed)
{
  CLog* clog = (CLog*)ctx;
  int idx = -1;
  char* s;

  // Indentify the index of the selected text
  for (int i = 0; i < (int)clog->clognav->file_list.size(); i++) {
    s = strrchr(clog->clognav->file_list[i].name, '/');
    if (s) {
      s++;
    } else {
      s = clog->clognav->file_list[i].name;
    }
    if (strcmp(s, &text[21]) == 0) {
      idx = i + 1;
      break;
    }
  }
  if (idx == -1) {
    return;
  }

  clog->set_clock_cursor();
  clog->clognav->read(&idx, 1);
  clog->reset_cursor();
}

void CLogQtWidget::activate_next_file()
{
  clog->activate_next_file();
}

void CLogQtWidget::activate_prev_file()
{
  clog->activate_prev_file();
}

void CLogQtWidget::activate_update()
{
  clog->set_clock_cursor();
  clog->clognav->update();
  clog->reset_cursor();
}

void CLogQtWidget::activate_print()
{
  clog->activate_print();
}

void CLogQtWidget::activate_help()
{
  clog->activate_help();
}

void CLogQtWidget::activate_helpmsg()
{
}

void CLogQtWidget::filter_apply_cb()
{
  bool success = clog->show_success_w->isChecked();
  bool info = clog->show_info_w->isChecked();
  bool warning = clog->show_warning_w->isChecked();
  bool error = clog->show_error_w->isChecked();
  bool fatal = clog->show_fatal_w->isChecked();
  bool text = clog->show_text_w->isChecked();

  clog->set_clock_cursor();
  clog->clognav->set_filter(success, info, warning, error, fatal, text,
      qPrintable(clog->filter_string_w->text()));
  clog->reset_cursor();
}

void CLogQt::create_filter_dialog()
{
  if (filter_form) {
    filter_form->setVisible(true);
    return;
  }

  // Create the options dialog
  filter_form = new QDialog(toplevel);
  filter_form->setFixedSize(450, 300);
  filter_form->setWindowTitle(fl("Filter Messages"));
  filter_form->setAttribute(Qt::WA_DeleteOnClose);

  QLabel* severity_label = new QLabel("Message Severity");
  severity_label->setFixedWidth(140);
  QLabel* string_label = new QLabel("String");
  string_label->setFixedWidth(140);
  filter_string_w = new QLineEdit();

  show_success_w = new QCheckBox("Success");
  show_info_w = new QCheckBox("Info");
  show_warning_w = new QCheckBox("Warning");
  show_error_w = new QCheckBox("Error");
  show_fatal_w = new QCheckBox("Fatal");
  show_text_w = new QCheckBox("Text");

  QVBoxLayout* severity_vbox = new QVBoxLayout();
  severity_vbox->addWidget(show_success_w);
  severity_vbox->addWidget(show_info_w);
  severity_vbox->addWidget(show_warning_w);
  severity_vbox->addWidget(show_error_w);
  severity_vbox->addWidget(show_fatal_w);
  severity_vbox->addWidget(show_text_w);

  QHBoxLayout* severity_hbox = new QHBoxLayout();
  severity_hbox->addWidget(severity_label);
  severity_hbox->addLayout(severity_vbox);

  QHBoxLayout* string_hbox = new QHBoxLayout();
  string_hbox->addWidget(string_label);
  add_expanding(string_hbox, filter_string_w);

  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Apply);
  buttons->addButton(QDialogButtonBox::Cancel);
  buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
  buttons->button(QDialogButtonBox::Apply)->setFixedSize(70, 25);
  buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      toplevel, SLOT(filter_apply_cb()));
  QObject::connect(buttons->button(QDialogButtonBox::Apply), SIGNAL(clicked()),
      toplevel, SLOT(filter_apply_cb()));

  QVBoxLayout* filter_vbox = new QVBoxLayout(filter_form);
  filter_vbox->addLayout(severity_hbox);
  add_expanding(filter_vbox, string_hbox);
  filter_vbox->addWidget(separator(QFrame::HLine));
  filter_vbox->addWidget(buttons);

  filter_form->setLayout(filter_vbox);

  filter_form->show();
}

void CLogQt::print()
{
  char nodename[80];
  pwr_tStatus sts;
  char title[80];

  strcpy(title, Lng::translate("System Messages"));
  syi_NodeName(&sts, nodename, sizeof(nodename));
  if (ODD(sts)) {
    strcat(title, " ");
    strcat(title, nodename);
  }

  wow->CreateBrowPrintDialog(title, clognav->brow->ctx,
      flow_eOrientation_Landscape, 1.0, parent_wid, &sts);
  if (sts == WOW__PRINTDIALOGDISABLED) {
    wow->DisplayError("Disabled", "Print Dialog is disabled");
  }
}