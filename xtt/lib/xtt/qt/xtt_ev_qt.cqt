/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_ev_qt.cpp -- Alarm and event window in xtt */

#include "rt_gdh.h"
#include "rt_xnav_msg.h"

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include "xtt_ev_qt.h"
#include "xtt_evala_qt.h"
#include "xtt_eveve_qt.h"
#include "xtt_evlist_qt.h"
#include "xtt_methodtoolbar_qt.h"

#include <QMenuBar>
#include <QVBoxLayout>

class CallbackWidget : public QDialog {
public:
  CallbackWidget(EvQtObject* parent, void (EvQtObject::*close)(), void (EvQtObject::*focus)())
      : QDialog(), ev(parent), close_cb(close), focus_cb(focus) {}

protected:
  void closeEvent(QCloseEvent* event);
  void focusInEvent(QFocusEvent* event);

private:
  EvQtObject* ev;
  void (EvQtObject::*close_cb)();
  void (EvQtObject::*focus_cb)();
};

void CallbackWidget::closeEvent(QCloseEvent* event)
{
  ((ev)->*(close_cb))();
  QDialog::closeEvent(event);
}

void CallbackWidget::focusInEvent(QFocusEvent* event)
{
  ((ev)->*(focus_cb))();
  QDialog::focusInEvent(event);
}

EvQt::EvQt(void* ev_parent_ctx, char* eve_name, char* ala_name, char* blk_name,
    pwr_tObjid ev_user, int display_ala, int display_eve, int display_blk,
    int display_return, int display_ack, int ev_beep, pwr_tMask ev_pop_mask,
    int ev_eventname_seg, pwr_tStatus* status)
    : Ev(ev_parent_ctx, eve_name, ala_name, blk_name, ev_user, display_ala,
          display_eve, display_blk, display_return, display_ack, ev_beep,
          ev_pop_mask, ev_eventname_seg, status),
      parent_wid_eve(0), parent_wid_ala(0), parent_wid_blk(0)
{
  pwr_tStatus sts;
  pwr_sClass_OpPlace* opp;
  const int eve_width = 700;
  const int eve_height = 600;
  const int ala_width = 700;
  const int ala_height = 300;
  const int blk_width = 700;
  const int blk_height = 300;

  *status = 1;

  // Check user object
  if (cdh_ObjidIsNull(user)) {
    *status = XNAV__NOUSER;
    return;
  }

  sts = gdh_ObjidToPointer(user, (pwr_tAddress*)&opp);
  if (EVEN(sts)) {
    *status = XNAV__NOUSER;
    return;
  }
  ala_size = opp->MaxNoOfAlarms;
  eve_size = opp->MaxNoOfEvents;
  blk_size = 0;
  create_aliaslist(opp);

  // Qt
  object = new EvQtObject(this);
  // Eve Window
  {
    parent_wid_eve = new CallbackWidget(
        object, &EvQtObject::eve_activate_exit, &EvQtObject::eve_action_inputfocus);
    parent_wid_eve->setMinimumSize(eve_width, eve_height);
    parent_wid_eve->setWindowTitle(translate_utf8(eve_name));
    // Do not set the DeleteOnClose attribute.

    CoWowQt::SetWindowIcon(parent_wid_eve);

    QVBoxLayout* eve_vbox = new QVBoxLayout(parent_wid_eve);

    // Menu
    QMenuBar* menu_bar = new QMenuBar(parent_wid_eve);

    // File entry
    QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
    addMenuItem(object, file, "&Print", SLOT(eve_activate_print()), "",
        "document-print");
    addMenuItem(object, file, "&Export", SLOT(eve_activate_export()));
    addMenuItem(object, file, "&Analyse", SLOT(eve_activate_analyse()));
    addMenuItem(
        object, file, "&Close", SLOT(eve_activate_exit()), "CTRL+W", "window-close");

    // Functions entry
    QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
    addMenuItem(object, functions, "Open &Program",
        SLOT(eve_activate_open_plc()), "CTRL+L");
    addMenuItem(object, functions, "&Display object in Navigator",
        SLOT(eve_activate_display_in_xnav()), "CTRL+D");

    // View entry
    QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
    addMenuItem(object, view, "Zoom &In", SLOT(eve_activate_zoom_in()),
        "CTRL+I", "zoom-in");
    addMenuItem(object, view, "Zoom &Out", SLOT(eve_activate_zoom_out()),
        "CTRL+O", "zoom-out");
    addMenuItem(object, view, "Zoom &Reset", SLOT(eve_activate_zoom_reset()),
        "CTRL+B", "zoom-original");
    addCheckableMenuItem(object, view, "&Display hundredth",
        SLOT(eve_activate_disp_hundredth(bool)));
    addCheckableMenuItem(
        object, view, "&Hide Event Name", SLOT(eve_activate_hide_object(bool)));
    addCheckableMenuItem(
        object, view, "Hide &Event Text", SLOT(eve_activate_hide_text(bool)));

    // Help entry
    QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
    addMenuItem(object, help, "&Help", SLOT(eve_activate_help()), "CTRL+H",
        "system-help");
    addMenuItem(
        object, help, "Help Selected Event", SLOT(eve_activate_helpevent()));

    // Create eve evlist
    eve = new EvListQt(this, ev_eType_EventList, eve_size, eventname_seg,
        &eve_widget);
    eve->start_trace_cb = &eve_start_trace_cb;
    eve->display_in_xnav_cb = &eve_display_in_xnav_cb;
    eve->name_to_alias_cb = &ev_name_to_alias_cb;
    eve->popup_menu_cb = &ev_popup_menu_cb;
    eve->selection_changed_cb = &eve_selection_changed_cb;
    eve->help_event_cb = &help_event_cb;

    // ToolBar
    QToolBar* tools = new QToolBar(parent_wid_eve);
    addToolItem(object, tools, "Zoom in", SLOT(eve_activate_zoom_in()),
        "$pwr_exe/xtt_zoom_in.png");
    addToolItem(object, tools, "Zoom out", SLOT(eve_activate_zoom_out()),
        "$pwr_exe/xtt_zoom_out.png");
    addToolItem(object, tools, "Zoom reset", SLOT(eve_activate_zoom_reset()),
        "$pwr_exe/xtt_zoom_reset.png");

    eve_methodtoolbar = new XttMethodToolbarQt(
        0, 0, ~pwr_mXttOpMethodsMask_ParentObjectGraph, ~0, "");
    QToolBar* tools_meth
        = (QToolBar*)((XttMethodToolbarQt*)eve_methodtoolbar)->build();
    eve_methodtoolbar->m_xnav = (XNav*)parent_ctx;
    eve_methodtoolbar->m_parent_ctx = eve;
    eve_methodtoolbar->get_select_cb = eve->get_select;

    eve_sup_methodtoolbar = new XttMethodToolbarQt(0, 0, 0,
        pwr_mXttMntMethodsMask_OpenTrace | pwr_mXttMntMethodsMask_RtNavigator,
        " for supervisory object");
    QToolBar* tools_sup
        = (QToolBar*)((XttMethodToolbarQt*)eve_sup_methodtoolbar)->build();
    eve_sup_methodtoolbar->m_xnav = (XNav*)parent_ctx;
    eve_sup_methodtoolbar->m_parent_ctx = eve;
    eve_sup_methodtoolbar->get_select_cb = eve->get_select_supobject;

    QHBoxLayout* eve_toolsbox = new QHBoxLayout();
    eve_toolsbox->addWidget(tools);
    eve_toolsbox->addWidget(separator(QFrame::VLine));
    eve_toolsbox->addWidget(tools_sup);
    eve_toolsbox->addWidget(separator(QFrame::VLine));
    eve_toolsbox->addWidget(tools_meth);

    eve_vbox->setMenuBar(menu_bar);
    eve_vbox->addLayout(eve_toolsbox);
    add_expanding(eve_vbox, eve_widget);

    parent_wid_eve->setLayout(eve_vbox);

    eve_methodtoolbar->set_sensitive();
    eve_sup_methodtoolbar->set_sensitive();
  }

  // Ala Window
  {
    parent_wid_ala = new CallbackWidget(
        object, &EvQtObject::ala_activate_exit, &EvQtObject::ala_action_inputfocus);
    parent_wid_ala->setMinimumSize(ala_width, ala_height);
    parent_wid_ala->setWindowTitle(translate_utf8(ala_name));
    // Do not set the DeleteOnClose attribute.

    CoWowQt::SetWindowIcon(parent_wid_ala);

    QVBoxLayout* ala_vbox = new QVBoxLayout(parent_wid_ala);

    // Menu
    QMenuBar* menu_bar = new QMenuBar(parent_wid_ala);

    // File entry
    QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
    addMenuItem(object, file, "&Print", SLOT(ala_activate_print()), "",
        "document-print");
    addMenuItem(
        object, file, "&Close", SLOT(ala_activate_exit()), "CTRL+W", "window-close");

    // Functions entry
    QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
    addMenuItem(object, functions, "&Acknowledge",
        SLOT(ala_activate_ack_last()), "CTRL+K");
    addMenuItem(
        object, functions, "A&cknowledge All", SLOT(ala_activate_ack_all()));
    addMenuItem(object, functions, "Open &Program",
        SLOT(ala_activate_open_plc()), "CTRL+L");
    addMenuItem(object, functions, "&Display object in Navigator",
        SLOT(ala_activate_display_in_xnav()), "CTRL+D");

    // View entry
    QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
    addMenuItem(
        object, view, "S&hift View", SLOT(ala_activate_shift_view()), "CTRL+N");

    // Submenu Select View
    QMenu* view_select = view->addMenu("&Select View");
    addMenuItem(object, view_select, "&Flat", SLOT(ala_activate_select_flat()));

    for (unsigned int i = 0;
         i < sizeof(opp->AlarmViews) / sizeof(opp->AlarmViews[0]); i++) {
      pwr_sClass_AlarmView* viewp;

      if (cdh_ObjidIsNull(opp->AlarmViews[i])) {
        break;
      }

      sts = gdh_ObjidToPointer(opp->AlarmViews[i], (void**)&viewp);
      if (ODD(sts)) {
        alarm_views[i] = opp->AlarmViews[i];
        QAction* a = addMenuItem(
            object, view, viewp->Name, SLOT(ala_activate_select_view()));
        a->setData(i);
      }
    }

    addMenuItem(object, view, "Zoom &In", SLOT(ala_activate_zoom_in()),
        "CTRL+I", "zoom-in");
    addMenuItem(object, view, "Zoom &Out", SLOT(ala_activate_zoom_out()),
        "CTRL+O", "zoom-out");
    addMenuItem(object, view, "Zoom &Reset", SLOT(ala_activate_zoom_reset()),
        "CTRL+B", "zoom-original");
    addCheckableMenuItem(object, view, "&Display hundredth",
        SLOT(ala_activate_disp_hundredth(bool)));
    addCheckableMenuItem(
        object, view, "&Hide Event Name", SLOT(ala_activate_hide_object(bool)));
    addCheckableMenuItem(
        object, view, "Hide &Event Text", SLOT(ala_activate_hide_text(bool)));

    // Help entry
    QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
    addMenuItem(object, help, "&Help", SLOT(ala_activate_help()), "CTRL+H",
        "system-help");
    addMenuItem(
        object, help, "Help Selected Event", SLOT(ala_activate_helpevent()));

    // Create ala evlist
    ala = new EvListQt(this, ev_eType_AlarmList, ala_size, eventname_seg,
        &ala_widget);
    ala->start_trace_cb = &ala_start_trace_cb;
    ala->display_in_xnav_cb = &ala_display_in_xnav_cb;
    ala->name_to_alias_cb = &ev_name_to_alias_cb;
    ala->popup_menu_cb = &ev_popup_menu_cb;
    ala->sound_cb = &ev_sound_cb;
    ala->selection_changed_cb = &ala_selection_changed_cb;
    ala->help_event_cb = &help_event_cb;

    // ToolBar
    QToolBar* tools = new QToolBar(parent_wid_ala);
    addToolItem(object, tools, "Acknowledge", SLOT(ala_activate_ack_last()),
        "$pwr_exe/xtt_acknowledge.png");
    addToolItem(object, tools, "Zoom in", SLOT(ala_activate_zoom_in()),
        "$pwr_exe/xtt_zoom_in.png");
    addToolItem(object, tools, "Zoom out", SLOT(ala_activate_zoom_out()),
        "$pwr_exe/xtt_zoom_out.png");
    addToolItem(object, tools, "Zoom reset", SLOT(ala_activate_zoom_reset()),
        "$pwr_exe/xtt_zoom_reset.png");

    ala_methodtoolbar = new XttMethodToolbarQt(
        0, 0, ~pwr_mXttOpMethodsMask_ParentObjectGraph, ~0, "");
    QToolBar* tools_meth
        = (QToolBar*)((XttMethodToolbarQt*)ala_methodtoolbar)->build();

    ala_methodtoolbar->m_xnav = (XNav*)parent_ctx;
    ala_methodtoolbar->m_parent_ctx = ala;
    ala_methodtoolbar->get_select_cb = ala->get_select;

    ala_sup_methodtoolbar = new XttMethodToolbarQt(0, 0, 0,
        pwr_mXttMntMethodsMask_OpenTrace | pwr_mXttMntMethodsMask_RtNavigator,
        " for supervisory object");
    QToolBar* tools_sup
        = (QToolBar*)((XttMethodToolbarQt*)ala_sup_methodtoolbar)->build();
    ala_sup_methodtoolbar->m_xnav = (XNav*)parent_ctx;
    ala_sup_methodtoolbar->m_parent_ctx = ala;
    ala_sup_methodtoolbar->get_select_cb = ala->get_select_supobject;

    QHBoxLayout* ala_toolsbox = new QHBoxLayout();
    ala_toolsbox->addWidget(tools);
    ala_toolsbox->addWidget(separator(QFrame::VLine));
    ala_toolsbox->addWidget(tools_sup);
    ala_toolsbox->addWidget(separator(QFrame::VLine));
    ala_toolsbox->addWidget(tools_meth);

    ala_vbox->setMenuBar(menu_bar);
    ala_vbox->addLayout(ala_toolsbox);
    add_expanding(ala_vbox, ala_widget);

    parent_wid_ala->setLayout(ala_vbox);

    ala_methodtoolbar->set_sensitive();
    ala_sup_methodtoolbar->set_sensitive();
    ala->get_alarm_tables(user);
  }

  // Blk Window
  {
    parent_wid_blk = new CallbackWidget(
        object, &EvQtObject::blk_activate_exit, &EvQtObject::blk_action_inputfocus);
    parent_wid_blk->setMinimumSize(blk_width, blk_height);
    parent_wid_blk->setWindowTitle(translate_utf8(blk_name));
    // Do not set the DeleteOnClose attribute.

    CoWowQt::SetWindowIcon(parent_wid_blk);

    QVBoxLayout* blk_vbox = new QVBoxLayout(parent_wid_blk);

    // Menu
    QMenuBar* menu_bar = new QMenuBar(parent_wid_blk);

    // File entry
    QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
    addMenuItem(object, file, "&Print", SLOT(blk_activate_print()), "",
        "document-print");
    addMenuItem(
        object, file, "&Close", SLOT(blk_activate_exit()), "CTRL+W", "window-close");

    // Functions entry
    QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
    addMenuItem(object, functions, "&Remove Blocking",
        SLOT(blk_activate_block_remove()));
    addMenuItem(object, functions, "Open &Program",
        SLOT(blk_activate_open_plc()), "CTRL+L");
    addMenuItem(object, functions, "&Display object in Navigator",
        SLOT(blk_activate_display_in_xnav()), "CTRL+D");

    // View entry
    QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
    addMenuItem(object, view, "Zoom &In", SLOT(blk_activate_zoom_in()),
        "CTRL+I", "zoom-in");
    addMenuItem(object, view, "Zoom &Out", SLOT(blk_activate_zoom_out()),
        "CTRL+O", "zoom-out");
    addMenuItem(object, view, "Zoom &Reset", SLOT(blk_activate_zoom_reset()),
        "CTRL+B", "zoom-original");

    // Help entry
    QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
    addMenuItem(object, help, "&Help", SLOT(blk_activate_help()), "CTRL+H",
        "system-help");

    // Create blk evlist
    blk = new EvListQt(this, ev_eType_BlockList, blk_size, eventname_seg,
        &blk_widget);
    blk->start_trace_cb = &blk_start_trace_cb;
    blk->display_in_xnav_cb = &blk_display_in_xnav_cb;
    blk->name_to_alias_cb = &ev_name_to_alias_cb;
    blk->popup_menu_cb = &ev_popup_menu_cb;

    blk_vbox->setMenuBar(menu_bar);
    add_expanding(blk_vbox, blk_widget);

    parent_wid_blk->setLayout(blk_vbox);
  }

  // Store this for the mh callbacks
  ev = this;

  if (display_eve) {
    parent_wid_eve->show();
    eve_displayed = 1;
  } else {
    parent_wid_eve->setVisible(false);
  }

  if (display_ala) {
    parent_wid_ala->show();
    ala_displayed = 1;
  } else {
    parent_wid_ala->setVisible(false);
  }

  if (display_blk) {
    parent_wid_blk->show();
    blk_displayed = 1;
  } else {
    parent_wid_blk->setVisible(false);
  }

  wow = new CoWowQt(parent_wid_ala);

  sts = outunit_connect(user);
  if (EVEN(sts)) {
    *status = sts;
  }
}

EvAla* EvQt::open_alarmlist_satellite(const char* title, pwr_tStatus* sts,
    int width, int height, int x, int y, pwr_tObjid view, unsigned int options,
    void* widget)
{
  if (sala_cnt >= (int)(sizeof(sala) / sizeof(sala[0]))) {
    return 0;
  }

  sala[sala_cnt++] = new EvAlaQt(this, (char*)title, user, eventname_seg, width,
      height, x, y, view, options, widget, sts);
  if (EVEN(*sts)) {
    return 0;
  }

  sala[sala_cnt - 1]->start_trace_cb = ala_start_trace_cb;
  sala[sala_cnt - 1]->display_in_xnav_cb = ala_display_in_xnav_cb;
  sala[sala_cnt - 1]->help_cb = ala_help_cb;
  sala[sala_cnt - 1]->popup_menu_cb = ev_popup_menu_cb;
  sala[sala_cnt - 1]->sound_cb = ev_sound_cb;
  sala[sala_cnt - 1]->is_authorized_cb = ala_is_authorized_cb;
  sala[sala_cnt - 1]->acknowledge_cb = sala_acknowledge_cb;
  sala[sala_cnt - 1]->name_to_alias_cb = ev_name_to_alias_cb;
  sala[sala_cnt - 1]->copy_list_cb = sala_copy_list_cb;
  sala[sala_cnt - 1]->close_cb = sala_close_cb;
  sala[sala_cnt - 1]->init();

  return sala[sala_cnt - 1];
}

EvEve* EvQt::open_eventlist_satellite(const char* title, pwr_tStatus* sts,
    int width, int height, int x, int y, pwr_tObjid view, unsigned int options,
    void* widget)
{
  if (seve_cnt >= (int)(sizeof(seve) / sizeof(seve[0]))) {
    return 0;
  }

  seve[seve_cnt++] = new EvEveQt(this, (char*)title, user, eventname_seg, width,
      height, x, y, view, options, widget, sts);
  if (EVEN(*sts)) {
    return 0;
  }

  seve[seve_cnt - 1]->start_trace_cb = eve_start_trace_cb;
  seve[seve_cnt - 1]->display_in_xnav_cb = eve_display_in_xnav_cb;
  seve[seve_cnt - 1]->help_cb = ala_help_cb;
  seve[seve_cnt - 1]->popup_menu_cb = ev_popup_menu_cb;
  seve[seve_cnt - 1]->sound_cb = ev_sound_cb;
  seve[seve_cnt - 1]->is_authorized_cb = ala_is_authorized_cb;
  seve[seve_cnt - 1]->acknowledge_cb = seve_acknowledge_cb;
  seve[seve_cnt - 1]->name_to_alias_cb = ev_name_to_alias_cb;
  seve[seve_cnt - 1]->copy_list_cb = seve_copy_list_cb;
  seve[seve_cnt - 1]->close_cb = seve_close_cb;
  seve[seve_cnt - 1]->init();

  return seve[seve_cnt - 1];
}

EvQt::~EvQt()
{
  if (connected) {
    mh_OutunitDisconnect();
  }
  for (int i = 0; i < seve_cnt; i++) {
    if (seve[i]) {
      ((EvEveQt*)seve[i])->toplevel->close();
    }
  }
  for (int i = 0; i < sala_cnt; i++) {
    if (sala[i]) {
      ((EvAlaQt*)sala[i])->toplevel->close();
    }
  }
  if (eve) {
    delete eve;
  }
  if (ala) {
    delete ala;
  }
  if (blk) {
    delete blk;
  }
  ala = eve = blk = NULL;
  if (parent_wid_eve) {
    delete parent_wid_eve;
  }
  if (parent_wid_ala) {
    delete parent_wid_ala;
  }
  if (parent_wid_blk) {
    delete parent_wid_blk;
  }
  if (object)
    delete object;
}

void EvQt::map_eve(unsigned int options)
{
  pop(parent_wid_eve);
  eve_displayed = 1;

  if (options & ev_mAlaOptions_FullScreen) {
    parent_wid_eve->showFullScreen();
  } else if (options & ev_mAlaOptions_Maximize) {
    parent_wid_eve->showMaximized();
  } else if (options & ev_mAlaOptions_FullMaximize) {
    parent_wid_eve->showMaximized();
  }
}

void EvQt::map_ala(unsigned int options)
{
  pop(parent_wid_ala);
  ala_displayed = 1;

  if (options & ev_mAlaOptions_FullScreen) {
    parent_wid_ala->showFullScreen();
  } else if (options & ev_mAlaOptions_Maximize) {
    parent_wid_ala->showMaximized();
  } else if (options & ev_mAlaOptions_FullMaximize) {
    parent_wid_ala->showMaximized();
  }
}

void EvQt::map_blk(unsigned int options)
{
  pop(parent_wid_blk);
  blk_displayed = 1;

  if (options & ev_mAlaOptions_FullScreen) {
    parent_wid_blk->showFullScreen();
  } else if (options & ev_mAlaOptions_Maximize) {
    parent_wid_blk->showMaximized();
  } else if (options & ev_mAlaOptions_FullMaximize) {
    parent_wid_blk->showMaximized();
  }
}

void EvQt::unmap_eve()
{
  if (eve_displayed) {
    parent_wid_eve->setVisible(false);
    eve_displayed = 0;
  }
}

void EvQt::unmap_ala()
{
  if (ala_displayed) {
    parent_wid_ala->setVisible(false);
    ala_displayed = 0;
  }
}

void EvQt::unmap_blk()
{
  if (blk_displayed) {
    parent_wid_blk->setVisible(false);
    blk_displayed = 0;
  }
}

void EvQt::set_transient_eve(void* basewidget)
{
  parent_wid_eve->setParent(((QWidget*)basewidget));
  parent_wid_eve->setModal(true);
}

void EvQt::set_transient_ala(void* basewidget)
{
  parent_wid_ala->setParent(((QWidget*)basewidget));
  parent_wid_ala->setModal(true);
}

void EvQt::set_transient_blk(void* basewidget)
{
  parent_wid_blk->setParent(((QWidget*)basewidget));
  parent_wid_blk->setModal(true);
}

void EvQt::set_title_ala(char* title)
{
  parent_wid_ala->setWindowTitle(fl(title));
}

void EvQtObject::eve_action_inputfocus()
{
  if (ev->eve_displayed) {
    ev->eve->set_input_focus();
  }
}

void EvQtObject::ala_action_inputfocus()
{
  if (ev->ala_displayed) {
    ev->ala->set_input_focus();
  }
}

void EvQtObject::blk_action_inputfocus()
{
  if (ev->blk_displayed) {
    ev->blk->set_input_focus();
  }
}

void EvQtObject::eve_activate_exit()
{
  ev->unmap_eve();
  ev->eve_displayed = 0;
}

void EvQtObject::ala_activate_exit()
{
  ev->unmap_ala();
  ev->ala_displayed = 0;
}

void EvQtObject::blk_activate_exit()
{
  ev->unmap_blk();
  ev->blk_displayed = 0;
}

void EvQtObject::eve_activate_print()
{
  ev->eve_activate_print();
}

void EvQtObject::ala_activate_print()
{
  ev->ala_activate_print();
}

void EvQtObject::blk_activate_print()
{
  ev->blk_activate_print();
}

void EvQtObject::eve_activate_export()
{
  ev->eve_activate_export();
}

void EvQtObject::eve_activate_analyse()
{
  ev->eve_activate_analyse();
}

void EvQtObject::eve_activate_ack_last()
{
  ev->eve_activate_ack_last();
}

void EvQtObject::ala_activate_ack_last()
{
  ev->ala_activate_ack_last();
}

void EvQtObject::ala_activate_ack_all()
{
  ev->eve_activate_ack_all();
}

void EvQtObject::ala_activate_shift_view()
{
  ev->view_shift();
}

void EvQtObject::ala_activate_select_flat()
{
  ev->set_view(pwr_cNObjid);
}

void EvQtObject::ala_activate_select_view()
{
  QAction* a = ((QAction*)sender());
  ev->set_view(ev->alarm_views[a->data().toInt()]);
}

void EvQtObject::eve_activate_zoom_in()
{
  ev->eve->zoom(1.2);
}

void EvQtObject::ala_activate_zoom_in()
{
  ev->ala->zoom(1.2);
}

void EvQtObject::blk_activate_zoom_in()
{
  ev->blk->zoom(1.2);
}

void EvQtObject::eve_activate_zoom_out()
{
  ev->eve->zoom(5.0 / 6);
}

void EvQtObject::ala_activate_zoom_out()
{
  ev->ala->zoom(5.0 / 6);
}

void EvQtObject::blk_activate_zoom_out()
{
  ev->blk->zoom(5.0 / 6);
}

void EvQtObject::eve_activate_zoom_reset()
{
  ev->eve->unzoom();
}

void EvQtObject::ala_activate_zoom_reset()
{
  ev->ala->unzoom();
}

void EvQtObject::blk_activate_zoom_reset()
{
  ev->blk->unzoom();
}

void EvQtObject::blk_activate_block_remove()
{
  ev->blk->block_remove();
}

void EvQtObject::eve_activate_open_plc()
{
  ev->eve->start_trace();
}

void EvQtObject::ala_activate_open_plc()
{
  ev->ala->start_trace();
}

void EvQtObject::blk_activate_open_plc()
{
  ev->blk->start_trace();
}

void EvQtObject::eve_activate_display_in_xnav()
{
  ev->eve->display_in_xnav();
}

void EvQtObject::ala_activate_display_in_xnav()
{
  ev->ala->display_in_xnav();
}

void EvQtObject::blk_activate_display_in_xnav()
{
  ev->blk->display_in_xnav();
}

void EvQtObject::eve_activate_disp_hundredth(bool set)
{
  ev->eve->set_display_hundredth(set);
}

void EvQtObject::ala_activate_disp_hundredth(bool set)
{
  ev->ala->set_display_hundredth(set);
}

void EvQtObject::eve_activate_hide_object(bool set)
{
  ev->eve->set_hide_object(set);
}

void EvQtObject::ala_activate_hide_object(bool set)
{
  ev->ala->set_hide_object(set);
}

void EvQtObject::eve_activate_hide_text(bool set)
{
  ev->eve->set_hide_text(set);
}

void EvQtObject::ala_activate_hide_text(bool set)
{
  ev->ala->set_hide_text(set);
}

void EvQtObject::eve_activate_help()
{
  ev->eve_activate_help();
}

void EvQtObject::eve_activate_helpevent()
{
  ev->eve_activate_helpevent();
}

void EvQtObject::ala_activate_help()
{
  ev->ala_activate_help();
}

void EvQtObject::ala_activate_helpevent()
{
  ev->ala_activate_helpevent();
}

void EvQtObject::blk_activate_help()
{
  ev->blk_activate_help();
}
