/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_ev_qt.cpp -- Alarm and event window in xtt */

#include "rt_gdh.h"
#include "rt_xnav_msg.h"

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include "xtt_ev.h"
#include "xtt_evala_qt.h"
#include "xtt_evlist_qt.h"
#include "xtt_methodtoolbar_qt.h"

#include <QMenuBar>
#include <QToolBar>

EvAlaQt::EvAlaQt(void* ev_parent_ctx, char* ala_name, pwr_tObjid ev_user,
    int ev_eventname_seg, int ev_width, int ev_height, int ev_x, int ev_y,
    pwr_tObjid ev_view, unsigned int ev_options, void* widget,
    pwr_tStatus* status)
    : EvAla(ev_parent_ctx, ala_name, ev_user, ev_eventname_seg, ev_width,
            ev_height, ev_x, ev_y, ev_view, ev_options, status)
{
  int ala_width = (ev_width != 0) ? ev_width : 700;
  int ala_height = (ev_height != 0) ? ev_height : 300;

  *status = 1;

  // Check user object
  if (cdh_ObjidIsNull(user)) {
    *status = XNAV__NOUSER;
    return;
  }

  pwr_sClass_OpPlace* opp;
  pwr_tStatus sts = gdh_ObjidToPointer(user, (pwr_tAddress*)&opp);
  if (EVEN(sts)) {
    *status = XNAV__NOUSER;
    return;
  }
  ala_size = opp->MaxNoOfAlarms;
  // create_aliaslist( opp);

  // Ala Window

  toplevel = new EvAlaQtWidget(this);
  if (!(options & ev_mAlaOptions_Embedded)) {
    toplevel->setWindowTitle(translate_utf8(ala_name));
    toplevel->setAttribute(Qt::WA_DeleteOnClose);

    CoWowQt::SetWindowIcon(toplevel);
  }

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Print", SLOT(ala_activate_print()), "",
      "document-print");
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "&Acknowledge",
      SLOT(ala_activate_ack_last()), "CTRL+K");
  addMenuItem(
      toplevel, functions, "A&cknowledge All", SLOT(ala_activate_ack_all()));
  addMenuItem(toplevel, functions, "Open &Program",
      SLOT(ala_activate_open_plc()), "CTRL+L");
  addMenuItem(toplevel, functions, "&Display object in Navigator",
      SLOT(ala_activate_display_in_xnav()), "CTRL+D");

  // View entry
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(
      toplevel, view, "S&hift View", SLOT(ala_activate_shift_view()), "CTRL+N");

  // Submenu Select View
  QMenu* view_select = view->addMenu("&Select View");
  addMenuItem(toplevel, view_select, "&Flat", SLOT(ala_activate_select_flat()));

  for (unsigned int i = 0;
       i < sizeof(opp->AlarmViews) / sizeof(opp->AlarmViews[0]); i++) {
    pwr_sClass_AlarmView* viewp;

    if (cdh_ObjidIsNull(opp->AlarmViews[i])) {
      break;
    }

    sts = gdh_ObjidToPointer(opp->AlarmViews[i], (void**)&viewp);
    if (ODD(sts)) {
      alarm_views[i] = opp->AlarmViews[i];
      QAction* a = addMenuItem(
          toplevel, view, viewp->Name, SLOT(ala_activate_select_view()));
      a->setData(i);
    }
  }

  addMenuItem(toplevel, view, "Zoom &In", SLOT(ala_activate_zoom_in()),
      "CTRL+I", "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(ala_activate_zoom_out()),
      "CTRL+O", "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(ala_activate_zoom_reset()),
      "CTRL+B", "zoom-original");
  addCheckableMenuItem(toplevel, view, "&Display hundredth",
      SLOT(ala_activate_disp_hundredth(bool)));
  addCheckableMenuItem(
      toplevel, view, "&Hide Event Name", SLOT(ala_activate_hide_object(bool)));
  addCheckableMenuItem(
      toplevel, view, "Hide &Event Text", SLOT(ala_activate_hide_text(bool)));

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Help", SLOT(ala_activate_help()), "CTRL+H",
      "system-help");
  addMenuItem(
      toplevel, help, "Help Selected Event", SLOT(ala_activate_helpevent()));

  // Create ala evlist
  ala = new EvListQt(this, ev_eType_AlarmList, ala_size, eventname_seg,
      &ala_widget, ala_init_cb);
  ala->start_trace_cb = &ala_start_trace_cb;
  ala->display_in_xnav_cb = &ala_display_in_xnav_cb;
  ala->name_to_alias_cb = &ala_name_to_alias_cb;
  ala->popup_menu_cb = &ala_popup_menu_cb;
  ala->sound_cb = &ala_sound_cb;
  ala->help_event_cb = &help_event_cb;
  ala->selection_changed_cb = &ala_selection_changed_cb;

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Acknowledge", SLOT(ala_activate_ack_last()),
      "$pwr_exe/xtt_acknowledge.png");
  addToolItem(toplevel, tools, "Zoom in", SLOT(ala_activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(ala_activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(ala_activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  ala_methodtoolbar = new XttMethodToolbarQt(
      0, 0, ~pwr_mXttOpMethodsMask_ParentObjectGraph, ~0, "");
  QToolBar* tools_meth
      = (QToolBar*)((XttMethodToolbarQt*)ala_methodtoolbar)->build();

  ala_methodtoolbar->m_xnav = (XNav*)((Ev*)parent_ctx)->parent_ctx;
  ala_methodtoolbar->m_parent_ctx = ala;
  ala_methodtoolbar->get_select_cb = ala->get_select;

  ala_sup_methodtoolbar = new XttMethodToolbarQt(0, 0, 0,
      pwr_mXttMntMethodsMask_OpenTrace | pwr_mXttMntMethodsMask_RtNavigator,
      " for supervisory object");
  QToolBar* tools_sup
      = (QToolBar*)((XttMethodToolbarQt*)ala_sup_methodtoolbar)->build();
  ala_sup_methodtoolbar->m_xnav = (XNav*)((Ev*)parent_ctx)->parent_ctx;
  ala_sup_methodtoolbar->m_parent_ctx = ala;
  ala_sup_methodtoolbar->get_select_cb = ala->get_select_supobject;

  QHBoxLayout* ala_toolsbox = new QHBoxLayout();
  ala_toolsbox->addWidget(tools);
  ala_toolsbox->addWidget(separator(QFrame::VLine));
  ala_toolsbox->addWidget(tools_sup);
  ala_toolsbox->addWidget(separator(QFrame::VLine));
  ala_toolsbox->addWidget(tools_meth);

  ala_vbox = new QVBoxLayout();
  ala_vbox->setMenuBar(menu_bar);
  ala_vbox->addLayout(ala_toolsbox);
  add_expanding(ala_vbox, ala_widget);

  toplevel->setLayout(ala_vbox);

  ala_methodtoolbar->set_sensitive();
  ala_sup_methodtoolbar->set_sensitive();

  if (!(options & ev_mAlaOptions_Embedded)) {
    toplevel->resize(ala_width, ala_height);
    toplevel->show();
    if (!(EvAla::x == 0 && EvAla::y == 0)) {
      // Set position
      toplevel->move(EvAla::x, EvAla::y);
    }
  } else {
    ala_widget->resize(ala_width, ala_height);
  }

  ala_displayed = 1;

  wow = new CoWowQt(toplevel);

  *status = 1;
}

EvAlaQt::~EvAlaQt()
{
  if (ala) {
    delete ala;
  }
  ala = NULL;

  delete ala_methodtoolbar;
  delete ala_sup_methodtoolbar;
}

void EvAlaQt::map_ala()
{
  pop(toplevel);
  ala_displayed = 1;
}

void EvAlaQt::unmap_ala()
{
  if (ala_displayed) {
    toplevel->setVisible(false);
    ala_displayed = 0;
  }
}

void EvAlaQt::set_title_ala(char* title)
{
  if (!(options & ev_mAlaOptions_Embedded)) {
    toplevel->setWindowTitle(fl(title));
  }
}

QWidget* EvAlaQt::get_widget()
{
  return toplevel;
}

void EvAlaQtWidget::focusInEvent(QFocusEvent* event)
{
  if (ala->ala_displayed) {
    ala->ala->set_input_focus();
  }

  QWidget::focusInEvent(event);
}

void EvAlaQtWidget::closeEvent(QCloseEvent* event)
{
  if (!(ala->options & ev_mAlaOptions_Embedded)) {
    delete ala;
  }

  QWidget::closeEvent(event);
}

void EvAlaQtWidget::ala_activate_print()
{
  ala->ala_activate_print();
}

void EvAlaQtWidget::ala_activate_ack_last()
{
  ala->ala_activate_ack_last();
}

void EvAlaQtWidget::ala_activate_ack_all()
{
  ala->ala_activate_ack_all();
}

void EvAlaQtWidget::ala_activate_shift_view()
{
  ala->view_shift();
}

void EvAlaQtWidget::ala_activate_select_flat()
{
  ala->set_view(pwr_cNObjid);
}

void EvAlaQtWidget::ala_activate_select_view()
{
  QAction* a = ((QAction*)sender());
  ala->set_view(ala->alarm_views[a->data().toInt()]);
}

void EvAlaQtWidget::ala_activate_zoom_in()
{
  ala->ala->zoom(1.2);
}

void EvAlaQtWidget::ala_activate_zoom_out()
{
  ala->ala->zoom(5.0 / 6);
}

void EvAlaQtWidget::ala_activate_zoom_reset()
{
  ala->ala->unzoom();
}

void EvAlaQtWidget::ala_activate_open_plc()
{
  ala->ala->start_trace();
}

void EvAlaQtWidget::ala_activate_display_in_xnav()
{
  ala->ala->display_in_xnav();
}

void EvAlaQtWidget::ala_activate_disp_hundredth(bool set)
{
  ala->ala->set_display_hundredth(set);
}

void EvAlaQtWidget::ala_activate_hide_object(bool set)
{
  ala->ala->set_hide_object(set);
}

void EvAlaQtWidget::ala_activate_hide_text(bool set)
{
  ala->ala->set_hide_text(set);
}

void EvAlaQtWidget::ala_activate_help()
{
  ala->ala_activate_help();
}

void EvAlaQtWidget::ala_activate_helpevent()
{
  ala->ala_activate_helpevent();
}
