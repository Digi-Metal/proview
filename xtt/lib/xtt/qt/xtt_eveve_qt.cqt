/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_ev_qt.cpp -- Alarm and event window in xtt */

//#include "pwr_baseclasses.h"

#include "rt_gdh.h"
#include "rt_xnav_msg.h"

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include "xtt_ev.h"
#include "xtt_eveve_qt.h"
#include "xtt_evlist_qt.h"
#include "xtt_methodtoolbar_qt.h"

#include <QMenuBar>

EvEveQt::EvEveQt(void* ev_parent_ctx, QWidget* ev_parent_wid, char* eve_name,
    pwr_tObjid ev_user, int ev_eventname_seg, int ev_width, int ev_height,
    int ev_x, int ev_y, pwr_tObjid ev_view, unsigned int ev_options,
    void* widget, pwr_tStatus* status)
    : EvEve(ev_parent_ctx, eve_name, ev_user, ev_eventname_seg, ev_width,
          ev_height, ev_x, ev_y, ev_view, ev_options, status)
{
  pwr_tStatus sts;
  pwr_sClass_OpPlace* opp;
  int eve_width = 700;
  int eve_height = 300;

  *status = 1;

  if (ev_width != 0 && ev_height != 0) {
    eve_width = ev_width;
    eve_height = ev_height;
  }

  // Check user object
  if (cdh_ObjidIsNull(user)) {
    *status = XNAV__NOUSER;
    return;
  }

  sts = gdh_ObjidToPointer(user, (pwr_tAddress*)&opp);
  if (EVEN(sts)) {
    *status = XNAV__NOUSER;
    return;
  }
  eve_size = opp->MaxNoOfAlarms;

  // Eve Window
  if (!(options & ev_mAlaOptions_Embedded)) {
    toplevel = new EvEveQtWidget(this, ev_parent_wid);
    toplevel->setToolTip(fl("xtt_eveve widget"));
    toplevel->setMinimumSize(eve_width, eve_height);
    toplevel->setWindowTitle(translate_utf8(eve_name));
    toplevel->setAttribute(Qt::WA_DeleteOnClose);

    parent_wid_ala = toplevel;

    CoWowQt::SetWindowIcon(parent_wid_ala);
  } else {
    parent_wid_ala = (QWidget*)widget;
  }

  eve_vbox = new QVBoxLayout();

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Print", SLOT(eve_activate_print()), "",
      "document-print");
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "Open &Program",
      SLOT(eve_activate_open_plc()), "CTRL+L");
  addMenuItem(toplevel, functions, "&Display object in Navigator",
      SLOT(eve_activate_display_in_xnav()), "CTRL+D");

  // View entry
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(
      toplevel, view, "S&hift View", SLOT(eve_activate_shift_view()), "CTRL+N");

  for (unsigned int i = 0;
       i < sizeof(opp->AlarmViews) / sizeof(opp->AlarmViews[0]); i++) {
    pwr_sClass_AlarmView* viewp;

    if (cdh_ObjidIsNull(opp->AlarmViews[i])) {
      break;
    }

    sts = gdh_ObjidToPointer(opp->AlarmViews[i], (void**)&viewp);
    if (ODD(sts)) {
      alarm_views[i] = opp->AlarmViews[i];
      QAction* a = addMenuItem(
          toplevel, view, viewp->Name, SLOT(eve_activate_select_view()));
      a->setData(i);
    }
  }

  addMenuItem(toplevel, view, "Zoom &In", SLOT(eve_activate_zoom_in()),
      "CTRL+I", "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(eve_activate_zoom_out()),
      "CTRL+O", "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(eve_activate_zoom_reset()),
      "CTRL+B", "zoom-reset");
  addCheckableMenuItem(toplevel, view, "&Display hundredth",
      SLOT(eve_activate_disp_hundredth()));
  addCheckableMenuItem(
      toplevel, view, "&Hide Event Name", SLOT(eve_activate_hide_object()));
  addCheckableMenuItem(
      toplevel, view, "Hide &Event Text", SLOT(eve_activate_hide_text()));

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Help", SLOT(eve_activate_help()), "CTRL+H",
      "system-help");
  addMenuItem(
      toplevel, help, "Help Selected Event", SLOT(eve_activate_helpevent()));

  // Create ala evlist
  ala = new EvListQt(this, parent_wid_ala, ev_eType_EventList, eve_size,
      eventname_seg, &eve_widget, eve_init_cb);
  ala->start_trace_cb = &eve_start_trace_cb;
  ala->display_in_xnav_cb = &eve_display_in_xnav_cb;
  ala->name_to_alias_cb = &eve_name_to_alias_cb;
  ala->popup_menu_cb = &eve_popup_menu_cb;
  ala->sound_cb = &eve_sound_cb;
  ala->help_event_cb = &help_event_cb;
  ala->selection_changed_cb = &eve_selection_changed_cb;

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Zoom in", SLOT(eve_activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(eve_activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(eve_activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  eve_methodtoolbar = new XttMethodToolbarQt(
      0, 0, ~pwr_mXttOpMethodsMask_ParentObjectGraph, ~0, "");
  QToolBar* tools_meth
      = (QToolBar*)((XttMethodToolbarQt*)eve_methodtoolbar)->build();

  eve_methodtoolbar->m_xnav = (XNav*)((Ev*)parent_ctx)->parent_ctx;
  eve_methodtoolbar->m_parent_ctx = ala;
  eve_methodtoolbar->get_select_cb = ala->get_select;

  eve_sup_methodtoolbar = new XttMethodToolbarQt(0, 0, 0,
      pwr_mXttMntMethodsMask_OpenTrace | pwr_mXttMntMethodsMask_RtNavigator,
      " for supervisory object");
  QToolBar* tools_sup
      = (QToolBar*)((XttMethodToolbarQt*)eve_sup_methodtoolbar)->build();
  eve_sup_methodtoolbar->m_xnav = (XNav*)((Ev*)parent_ctx)->parent_ctx;
  eve_sup_methodtoolbar->m_parent_ctx = ala;
  eve_sup_methodtoolbar->get_select_cb = ala->get_select_supobject;

  QHBoxLayout* eve_toolsbox = new QHBoxLayout();
  eve_toolsbox->addWidget(tools);
  eve_toolsbox->addWidget(separator(QFrame::VLine));
  eve_toolsbox->addWidget(tools_sup);
  eve_toolsbox->addWidget(separator(QFrame::VLine));
  eve_toolsbox->addWidget(tools_meth);

  eve_vbox->setMenuBar(menu_bar);
  eve_vbox->addLayout(eve_toolsbox);
  add_expanding(eve_vbox, eve_widget);

  if (!(options & ev_mAlaOptions_Embedded)) {
    parent_wid_ala->setLayout(eve_vbox);
  }

  eve_methodtoolbar->set_sensitive();
  eve_sup_methodtoolbar->set_sensitive();

  if (!(options & ev_mAlaOptions_Embedded)) {
    parent_wid_ala->show();
    if (!(EvEve::x == 0 && EvEve::y == 0)) {
      // Set position
      parent_wid_ala->move(EvEve::x, EvEve::y);
    }
  } else {
    eve_widget->setMinimumSize(eve_width, eve_height);
  }

  eve_displayed = 1;

  wow = new CoWowQt(parent_wid_ala);

  *status = 1;
}

EvEveQt::~EvEveQt()
{
  delete eve_methodtoolbar;
  delete eve_sup_methodtoolbar;
}

void EvEveQt::map_ala()
{
  pop(parent_wid_ala);
  eve_displayed = 1;
}

void EvEveQt::unmap_ala()
{
  if (eve_displayed) {
    parent_wid_ala->setVisible(false);
    eve_displayed = 0;
  }
}

void EvEveQt::set_title_ala(char* title)
{
  if (!(options & ev_mAlaOptions_Embedded)) {
    parent_wid_ala->setWindowTitle(fl(title));
  }
}

void EvEveQtWidget::focusInEvent(QFocusEvent* event)
{
  if (eve->eve_displayed) {
    eve->ala->set_input_focus();
  }

  QWidget::focusInEvent(event);
}

void EvEveQtWidget::closeEvent(QCloseEvent* event)
{
  if (!(eve->options & ev_mAlaOptions_Embedded)) {
    delete eve;
  }

  QWidget::closeEvent(event);
}

void EvEveQtWidget::eve_activate_print()
{
  eve->eve_activate_print();
}

void EvEveQtWidget::eve_activate_shift_view()
{
  eve->view_shift();
}

void EvEveQtWidget::eve_activate_select_flat()
{
  eve->set_view(pwr_cNObjid);
}

void EvEveQtWidget::eve_activate_select_view()
{
  QAction* a = ((QAction*)sender());
  eve->set_view(eve->alarm_views[a->data().toInt()]);
}

void EvEveQtWidget::eve_activate_zoom_in()
{
  eve->ala->zoom(1.2);
}

void EvEveQtWidget::eve_activate_zoom_out()
{
  eve->ala->zoom(5.0 / 6);
}

void EvEveQtWidget::eve_activate_zoom_reset()
{
  eve->ala->unzoom();
}

void EvEveQtWidget::eve_activate_open_plc()
{
  eve->ala->start_trace();
}

void EvEveQtWidget::eve_activate_display_in_xnav()
{
  eve->ala->display_in_xnav();
}

void EvEveQtWidget::eve_activate_disp_hundredth(bool set)
{
  eve->ala->set_display_hundredth(set);
}

void EvEveQtWidget::eve_activate_hide_object(bool set)
{
  eve->ala->set_hide_object(set);
}

void EvEveQtWidget::eve_activate_hide_text(bool set)
{
  eve->ala->set_hide_text(set);
}

void EvEveQtWidget::eve_activate_help()
{
  eve->eve_activate_help();
}

void EvEveQtWidget::eve_activate_helpevent()
{
  eve->eve_activate_helpevent();
}