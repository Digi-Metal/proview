/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "co_string.h"

#include "cow_qt_helpers.h"

#include "ge_graph_qt.h"

#include "xtt_ge_qt.h"
#include "xtt_log.h"
#include "xtt_xnav.h"

#include <QMenuBar>
#include <QVBoxLayout>

void XttGeQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!ge->focustimer.disabled()) {
    if (ge->graph) {
      ge->graph->set_inputfocus(1);
    }

    ge->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void XttGeQt::iconify(int val)
{
  if (val) {
    toplevel->showMinimized();
  } else {
    toplevel->showNormal();
  }
}

void XttGeQt::set_below(int val)
{
  toplevel->setWindowFlags(
      toplevel->windowFlags() | Qt::WindowStaysOnBottomHint);
}

void XttGeQtWidget::resize(int width, int height)
{
  int default_width;
  int default_height;
  float rd = 0.05;
  ;

  default_width = width + 20;
  default_height = height + 20;
  if (width < 300 || height < 300) {
    rd = 0.2;
  }
  default_height = MIN(default_height, width * (1.0 + rd));
  default_height = MAX(default_height, width * (1.0 - rd));

  QWidget::resize(default_width, default_height);
}

void XttGeQt::set_size(int width, int height)
{
  toplevel->setFixedSize(width, height);
}

void XttGeQt::ge_change_value_cb(void* ge_ctx, void* value_object, char* text)
{
  XttGeQt* ge = (XttGeQt*)ge_ctx;

  if (ge->value_input_open) {
    ge->value_dialog->setVisible(false);
    ge->value_input_open = 0;
    return;
  }

  ge->value_dialog->setVisible(true);

  ge->message(' ', "");
  ge->value_input->setFocus();

  ge->value_input->setCursorPosition(ge->value_input->text().size());
  ge->value_input->selectAll();

  ge->value_input_open = 1;
  ge->current_value_object = value_object;
}

void XttGeQt::confirm_cb(void* ge_ctx, void* confirm_object, char* text)
{
  XttGeQt* ge = (XttGeQt*)ge_ctx;

  if (ge->confirm_open) {
    ge->confirm_open = 0;
    return;
  }

  ge->create_confirm_dialog();

  ge->message(' ', "");

  ge->confirm_widget->setText(QString::fromLatin1(text));

  ge->confirm_open = 1;
  ge->current_confirm_object = confirm_object;
}

void XttGeQt::message_dialog_cb(void* ge_ctx, const char* text)
{
  XttGeQt* ge = (XttGeQt*)ge_ctx;
  CoWowQt wow(ge->toplevel);
  char title[80];

  strcpy(title, Lng::translate("Message"));
  wow.DisplayError(title, Lng::translate(text), Lng::translatefile_coding());
}

void XttGeQt::confirm_reply(int ok)
{
  if (!confirm_open) {
    return;
  }

  confirm_widget->setVisible(false);
  confirm_open = 0;
  if (ok) {
    graph->confirm_ok(current_confirm_object);
  }
}

void XttGeQtWidget::activate_confirm_ok()
{
  ge->confirm_widget->setVisible(false);
  ge->confirm_open = 0;
  if (ge->eventlog_cb) {
    (ge->eventlog_cb)(ge->parent_ctx, ge, xttlog_eCategory_GeConfirmOk, 0, 0);
  }
  ge->graph->confirm_ok(ge->current_confirm_object);
}

void XttGeQtWidget::activate_confirm_cancel()
{
  ge->confirm_open = 0;
  ge->confirm_widget->setVisible(false);
  if (ge->eventlog_cb) {
    (ge->eventlog_cb)(
        ge->parent_ctx, ge, xttlog_eCategory_GeConfirmCancel, 0, 0);
  }
}

void XttGeQtWidget::activate_zoom_in()
{
  ge->graph->zoom(1.2);
}

void XttGeQtWidget::activate_zoom_out()
{
  ge->graph->zoom(5.0 / 6);
}

void XttGeQtWidget::activate_zoom_reset()
{
  ge->graph->unzoom();
}

void XttGeQtWidget::activate_help()
{
  if (ge->help_cb) {
    char key[80];
    str_ToLower(key, ge->name);
    (ge->help_cb)(ge->parent_ctx, key);
  }
}

void XttGeQtWidget::action_resize(QResizeEvent* event)
{
  if (ge->graph && !ge->scrollbar && !ge->navigator && ge->graph->grow) {
    ge->graph->set_default_layout();
  }
}

XttGeQt::~XttGeQt()
{
  if (close_cb) {
    (close_cb)(parent_ctx, this);
  }
  if (confirm_widget) {
    confirm_widget->close();
  }
  if (nav_shell) {
    nav_shell->close();
  }
  delete graph;
}

void XttGeQt::pop()
{
  ::pop(toplevel);
}

void XttGeQt::iconify()
{
  toplevel->showMinimized();
}

void XttGeQtWidget::closeEvent(QCloseEvent* event)
{
  if (ge->options & ge_mOptions_IsMain) {
    (ge->close_cb)(ge->parent_ctx, ge);
  } else if (!(ge->options & ge_mOptions_Embedded)) {
    delete ge;
  }
  QWidget::closeEvent(event);
}

XttGeQt::XttGeQt(QWidget* xg_parent_wid, void* xg_parent_ctx,
    const char* xg_name, const char* xg_filename, int xg_scrollbar, int xg_menu,
    int xg_navigator, int xg_width, int xg_height, int x, int y,
    double scan_time, const char* object_name, int use_default_access,
    unsigned int access, unsigned int options, void* basewidget,
    double* borders, int color_theme,
    int (*xg_command_cb)(void*, char*, char*, void*),
    int (*xg_get_current_objects_cb)(void*, pwr_sAttrRef**, int**),
    int (*xg_is_authorized_cb)(void*, unsigned int),
    void (*xg_keyboard_cb)(void*, void*, int, int))
    : XttGe(xg_parent_ctx, xg_name, xg_filename, xg_scrollbar, xg_menu,
          xg_navigator, xg_width, xg_height, x, y, scan_time, object_name,
          use_default_access, access, options, color_theme, xg_command_cb,
          xg_get_current_objects_cb, xg_is_authorized_cb, xg_keyboard_cb),
      nav_shell(0), value_dialog(0)
{
  int window_width = 600;
  int window_height = 500;
  pwr_tStatus sts;
  char title[300];

  if (xg_width != 0 && xg_height != 0) {
    window_width = xg_width;
    window_height = xg_height;
  } else {
    sts = Graph::get_dimension(
        filename, "pwrp_exe:", &window_width, &window_height);
    if (EVEN(sts)) {
      window_width = 600;
      window_height = 500;
    }
  }
  str_StrncpyCutOff(title, name, sizeof(title), 1);

  // Qt
  if (!(options & ge_mOptions_Embedded)) {
    toplevel = new XttGeQtWidget(this, xg_parent_wid);
    toplevel->setMinimumSize(window_width, window_height);
    toplevel->setWindowTitle(QString::fromLatin1(title));
    toplevel->setAttribute(Qt::WA_DeleteOnClose);

    if (options & ge_mOptions_HideDecorations) {
      toplevel->setWindowFlags(Qt::CustomizeWindowHint);
    }

    if (options & ge_mOptions_Dialog) {
      toplevel->setWindowFlags(Qt::Dialog);
      toplevel->setFixedSize(window_width, window_height);
    }

    CoWowQt::SetWindowIcon(toplevel);

    if (basewidget) {
      toplevel->setModal(true);
    }
    if (options & ge_mOptions_IsMain) {
      CoWow::SetTransient(toplevel);
    }
  }

  QVBoxLayout* graph_form = new QVBoxLayout();
  this->graph_form = layout_to_widget(graph_form);
  graph = new GraphQt(this, this->graph_form, "Plant", &grow_widget, &sts,
      "pwrp_exe:", graph_eMode_Runtime, scrollbar, 1, object_name,
      use_default_access, access, 0, color_theme, ge_keyboard_cb);
  // graph->set_scantime( scan_time);
  graph->message_cb = &message_cb;
  graph->close_cb = &graph_close_cb;
  graph->init_cb = &graph_init_cb;
  graph->change_value_cb = &ge_change_value_cb;
  graph->confirm_cb = &confirm_cb;
  graph->message_dialog_cb = &message_dialog_cb;
  graph->command_cb = &ge_command_cb;
  graph->display_in_xnav_cb = &ge_display_in_xnav_cb;
  graph->is_authorized_cb = &ge_is_authorized_cb;
  graph->get_current_objects_cb = &ge_get_current_objects_cb;
  graph->popup_menu_cb = &ge_popup_menu_cb;
  graph->call_method_cb = &ge_call_method_cb;
  graph->sound_cb = &ge_sound_cb;
  graph->eventlog_cb = &ge_eventlog_cb;

  QObject::connect(((GraphQt*)graph)->grow_widget,
      SIGNAL(resize_signal(QResizeEvent*)), toplevel,
      SLOT(action_resize(QResizeEvent*)));
  // TODO: grow_widget must emit a resize_signal signal in resizeEvent()

  if (xg_menu) {
    QMenuBar* menu_bar = new QMenuBar();

    // File Entry
    QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
    addMenuItem(
        toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

    // View menu
    QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
    addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
        "zoom-in");
    addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()),
        "CTRL+O", "zoom-out");
    addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
        "zoom-original");

    // Menu Help
    QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
    addMenuItem(toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H",
        "system-help");

    graph_form->setMenuBar(menu_bar);
  }
  add_expanding(graph_form, grow_widget);

  if (!(options & ge_mOptions_Embedded)) {
    toplevel->setLayout(graph_form);
    toplevel->show();

    if (navigator) {
      // Create navigator popup
      nav_shell = new QWidget();
      nav_shell->setFixedSize(200, 200);
      nav_shell->setWindowTitle(fl("Navigator"));
      nav_shell->setAttribute(Qt::WA_DeleteOnClose);

      ((GraphQt*)graph)->create_navigator(nav_shell);
      nav_shell->layout()->addWidget(((GraphQt*)graph)->nav_widget);

      nav_shell->show();
      ((Graph*)graph)->set_nav_background_color();
    }

    if (!(x == 0 && y == 0)) {
      // Set position
      toplevel->move(x, y);
    }

    if (options & ge_mOptions_FullScreen) {
      toplevel->showFullScreen();
    } else if (options & ge_mOptions_Maximize) {
      toplevel->showMaximized();
    } else if (options & ge_mOptions_FullMaximize) {
      toplevel->showMaximized();
    } else if (options & ge_mOptions_Iconify) {
      toplevel->showMinimized();
    } else if (options & ge_mOptions_Invisible) {
      toplevel->setVisible(false);
    }
  } else {
    this->graph_form->setMinimumSize(window_width, window_height);
  }

  if (borders) {
    ((Graph*)graph)->set_borders(borders);
  }

  if (streq(filename, "_none_") && xg_width == 0 && xg_height == 0) {
    // Set size from current layout
    double x0, y0, x1, y1, zoom;

    grow_GetLayout(graph->grow->ctx, &x0, &y0, &x1, &y1);
    grow_GetZoom(graph->grow->ctx, &zoom);
    window_width = zoom * (x1 - x0);
    window_height = zoom * (y1 - y0);

    toplevel->setMinimumSize(window_width, window_height);
  }
}

void XttGeQt::create_confirm_dialog()
{
  // Create a confirm window
  confirm_widget
      = new QMessageBox(QMessageBox::Question, translate_utf8("Confirm"), "",
          QMessageBox::Yes | QMessageBox::No, toplevel);
  QObject::connect(confirm_widget, SIGNAL(accepted()), toplevel,
      SLOT(activate_confirm_ok()));
  QObject::connect(confirm_widget, SIGNAL(rejected()), toplevel,
      SLOT(activate_confirm_cancel()));

  ::pop(confirm_widget);
}