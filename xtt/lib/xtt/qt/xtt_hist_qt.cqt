/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_hist_qt.cpp -- Historical event window in xtt */

#if defined PWRE_CONF_LIBDB

#include <stdio.h>

#include "co_lng.h"

#include "cow_qt_helpers.h"
#include "cow_wow_qt.h"

#include "xtt_evlist_qt.h"
#include "xtt_hist_qt.h"
#include "xtt_methodtoolbar_qt.h"

#include <QGroupBox>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

#define DONT_SET_SENS -1

void HistQtWidget::closeEvent(QCloseEvent* event)
{
  hist->close_cb(hist);
  QWidget::closeEvent(event);
}

HistQt::HistQt(void* hist_parent_ctx, char* hist_name, pwr_tAttrRef* arp,
    pwr_tStatus* status) : Hist(hist_parent_ctx, hist_name, arp, status)
{
  const int hist_width = 1335;
  const int hist_height = 700;

  // shall be MessageHandler.EventLogSize
  hist_size = 100000;

  // Qt
  toplevel = new HistQtWidget(this);
  toplevel->setMinimumSize(hist_width, hist_height);
  toplevel->setWindowTitle(translate_utf8(hist_name));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QVBoxLayout* hist_vbox = new QVBoxLayout(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(
      toplevel, file, "&Print", SLOT(activate_print()), "", "document-print");
  addMenuItem(
      toplevel, file, "&Export", SLOT(activate_export()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "Open &Program", SLOT(activate_open_plc()),
      "CTRL+L");
  addMenuItem(toplevel, functions, "&Display object in Navigator",
      SLOT(activate_display_in_xnav()), "CTRL+D");
  addMenuItem(toplevel, functions, "&Search", SLOT(ok_btn()), "CTRL+F");
  addMenuItem(toplevel, functions, "S&tatistics", SLOT(activate_stat()));

  // View entry
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()),
      "CTRL+B", "zoom-original");
  addCheckableMenuItem(toplevel, view, "Hide &Search Dialog",
      SLOT(activate_hide_search(bool)), "CTRL+E");
  addCheckableMenuItem(toplevel, view, "&Display hundredth",
      SLOT(activate_disp_hundredth(bool)));
  addCheckableMenuItem(
      toplevel, view, "&Hide Event Name", SLOT(activate_hide_object(bool)));
  addCheckableMenuItem(
      toplevel, view, "Hide &Event Text", SLOT(activate_hide_text(bool)));

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Help", SLOT(activate_help()),
      "CTRL+H", "system-help");
  addMenuItem(toplevel, help, "Help Selected Event", SLOT(activate_helpevent()));

  // Search dialog
  // Time box
  QLabel* sea_time_start_label = new QLabel(translate_utf8("Start time"));
  sea_time_start_label->setFixedWidth(120);
  start_time_entry_w = new QLineEdit();
  start_time_entry_w->setFixedWidth(160);

  QLabel* sea_time_stop_label = new QLabel(translate_utf8("Stop time"));
  sea_time_stop_label->setFixedWidth(120);
  stop_time_entry_w = new QLineEdit();
  stop_time_entry_w->setFixedWidth(160);

  // Time option menu
  QToolBar* sea_timebox = new QToolBar();
  sea_timebox->addWidget(sea_time_start_label);
  sea_timebox->addWidget(start_time_entry_w);
  sea_timebox->addWidget(sea_time_stop_label);
  sea_timebox->addWidget(stop_time_entry_w);

  QComboBox* sea_time_menu = addToolMenu(toplevel, sea_timebox, SLOT(time_cb(int)));
  sea_time_menu->addItem("All", time_ePeriod_AllTime);
  sea_time_menu->addItem("Today", time_ePeriod_Today);
  sea_time_menu->addItem("Yesterday", time_ePeriod_Yesterday);
  sea_time_menu->addItem("This Week", time_ePeriod_ThisWeek);
  sea_time_menu->addItem("Last Week", time_ePeriod_LastWeek);
  sea_time_menu->addItem("This Month", time_ePeriod_ThisMonth);
  sea_time_menu->addItem("Last Month", time_ePeriod_LastMonth);
  sea_time_menu->addItem("Time", time_ePeriod_UserDefined);

  // Event type box
  QLabel* sea_type_label = new QLabel(translate_utf8("Event type"));
  sea_type_label->setFixedWidth(120);

  info_toggle_w = new QCheckBox(translate_utf8("Info"));
  info_toggle_w->setFixedWidth(110);
  infosuccess_toggle_w = new QCheckBox(translate_utf8("InfoSuccess"));
  infosuccess_toggle_w->setFixedWidth(110);
  alarm_toggle_w = new QCheckBox(translate_utf8("Alarm"));
  alarm_toggle_w->setFixedWidth(110);
  mnt_alarm_toggle_w = new QCheckBox(translate_utf8("MaintenanceAlarm"));
  mnt_alarm_toggle_w->setFixedWidth(110);
  sys_alarm_toggle_w = new QCheckBox(translate_utf8("SystemAlarm"));
  sys_alarm_toggle_w->setFixedWidth(110);
  user_alarm1_toggle_w = new QCheckBox(translate_utf8("UserAlarm1"));
  user_alarm1_toggle_w->setFixedWidth(110);
  user_alarm2_toggle_w = new QCheckBox(translate_utf8("UserAlarm2"));
  user_alarm2_toggle_w->setFixedWidth(110);
  user_alarm3_toggle_w = new QCheckBox(translate_utf8("UserAlarm3"));
  user_alarm3_toggle_w->setFixedWidth(110);
  user_alarm4_toggle_w = new QCheckBox(translate_utf8("UserAlarm4"));
  user_alarm4_toggle_w->setFixedWidth(110);
  ret_toggle_w = new QCheckBox(translate_utf8("Return"));
  ret_toggle_w->setFixedWidth(110);
  ack_toggle_w = new QCheckBox(translate_utf8("Ack"));
  ack_toggle_w->setFixedWidth(110);

  QToolBar* sea_typebox = new QToolBar();
  sea_typebox->addWidget(sea_type_label);
  sea_typebox->addWidget(info_toggle_w);
  sea_typebox->addWidget(infosuccess_toggle_w);
  sea_typebox->addWidget(alarm_toggle_w);
  sea_typebox->addWidget(mnt_alarm_toggle_w);
  sea_typebox->addWidget(sys_alarm_toggle_w);
  sea_typebox->addWidget(user_alarm1_toggle_w);
  sea_typebox->addWidget(user_alarm2_toggle_w);
  sea_typebox->addWidget(user_alarm3_toggle_w);
  sea_typebox->addWidget(user_alarm4_toggle_w);
  sea_typebox->addWidget(ret_toggle_w);
  sea_typebox->addWidget(ack_toggle_w);

  // Event priority box
  QLabel* sea_prio_label = new QLabel(translate_utf8("Priority"));
  sea_prio_label->setFixedWidth(120);

  prioA_toggle_w = new QCheckBox(translate_utf8("A-Alarm"));
  prioA_toggle_w->setFixedWidth(110);
  prioB_toggle_w = new QCheckBox(translate_utf8("B-Alarm"));
  prioB_toggle_w->setFixedWidth(110);
  prioC_toggle_w = new QCheckBox(translate_utf8("C-Alarm"));
  prioC_toggle_w->setFixedWidth(110);
  prioD_toggle_w = new QCheckBox(translate_utf8("D-Alarm"));
  prioD_toggle_w->setFixedWidth(110);

  QToolBar* sea_priobox = new QToolBar();
  sea_priobox->addWidget(sea_prio_label);
  sea_priobox->addWidget(prioA_toggle_w);
  sea_priobox->addWidget(prioB_toggle_w);
  sea_priobox->addWidget(prioC_toggle_w);
  sea_priobox->addWidget(prioD_toggle_w);

  // Event name box
  QLabel* sea_eventname_label = new QLabel(translate_utf8("Event name"));
  sea_eventname_label->setFixedWidth(120);
  event_name_entry_w = new QLineEdit();

  QToolBar* sea_eventnamebox = new QToolBar();
  sea_eventnamebox->addWidget(sea_eventname_label);
  event_name_entry_w->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
  sea_eventnamebox->addWidget(event_name_entry_w);

  // Event text box
  QLabel* sea_eventtext_label = new QLabel(translate_utf8("Event text"));
  sea_eventtext_label->setFixedWidth(120);
  event_text_entry_w = new QLineEdit();

  QToolBar* sea_eventtextbox = new QToolBar();
  sea_eventtextbox->addWidget(sea_eventtext_label);
  event_text_entry_w->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
  sea_eventtextbox->addWidget(event_text_entry_w);

  // Number of events box
  QLabel* sea_numevents_label = new QLabel(translate_utf8("Number of Events: "));
  nrofevents_string_lbl_w = new QLabel("");

  QPushButton* sea_search_button = new QPushButton(translate_utf8("Search"));
  QObject::connect(
      sea_search_button, SIGNAL(clicked()), toplevel, SLOT(ok_btn()));

  QToolBar* sea_numeventsbox = new QToolBar();
  sea_numeventsbox->addWidget(sea_numevents_label);
  nrofevents_string_lbl_w->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
  sea_numeventsbox->addWidget(nrofevents_string_lbl_w);
  sea_numeventsbox->addWidget(sea_search_button);

  // Searchcondition box 1
  search_string_lbl_w = new QLabel("");
  search_string2_lbl_w = new QLabel("");
  search_string3_lbl_w = new QLabel("");
  search_string4_lbl_w = new QLabel("");

  QVBoxLayout* sea_stringbox = new QVBoxLayout();
  sea_stringbox->addWidget(search_string_lbl_w);
  sea_stringbox->addWidget(search_string2_lbl_w);
  sea_stringbox->addWidget(search_string3_lbl_w);
  sea_stringbox->addWidget(search_string4_lbl_w);

  QGroupBox* sea_stringframe
      = new QGroupBox(translate_utf8("Search Condition"));
  sea_stringframe->setLayout(sea_stringbox);

  QVBoxLayout* search_vbox_layout = new QVBoxLayout();
  search_vbox_layout->addWidget(sea_timebox);
  search_vbox_layout->addWidget(sea_typebox);
  search_vbox_layout->addWidget(sea_priobox);
  search_vbox_layout->addWidget(sea_eventnamebox);
  search_vbox_layout->addWidget(sea_eventtextbox);
  search_vbox_layout->addWidget(separator(QFrame::HLine));
  search_vbox_layout->addWidget(sea_numeventsbox);
  search_vbox_layout->addWidget(sea_stringframe);
  search_vbox = layout_to_widget(search_vbox_layout);

  // Create hist
  hist = new EvListQt(this, ev_eType_HistList, hist_size, 0, &hist_widget,
      hist_init_cb);
  hist->start_trace_cb = &hist_start_trace_cb;
  hist->display_in_xnav_cb = &hist_display_in_xnav_cb;
  hist->popup_menu_cb = &hist_popup_menu_cb;
  hist->help_event_cb = &help_event_cb;
  hist->selection_changed_cb = &selection_changed_cb;

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  // Hide search dialog checkbutton
  addCheckableToolItem(toplevel, tools, "Maximize",
      SLOT(activate_hide_search(bool)), "$pwr_exe/xtt_maximize.png");

  // Method toolbar
  methodtoolbar
      = new XttMethodToolbarQt(0, 0, ~(pwr_mXttOpMethodsMask_ParentObjectGraph
                                         | pwr_mXttOpMethodsMask_HistEvent),
          ~0, "");
  QToolBar* tools_meth
      = (QToolBar*)((XttMethodToolbarQt*)methodtoolbar)->build();
  methodtoolbar->m_xnav = (XNav*)parent_ctx;
  methodtoolbar->m_parent_ctx = hist;
  methodtoolbar->get_select_cb = hist->get_select;

  sup_methodtoolbar = new XttMethodToolbarQt(0, 0, 0,
      pwr_mXttMntMethodsMask_OpenTrace | pwr_mXttMntMethodsMask_RtNavigator,
      " for supervisory object");
  QToolBar* tools_sup
      = (QToolBar*)((XttMethodToolbarQt*)sup_methodtoolbar)->build();
  sup_methodtoolbar->m_xnav = (XNav*)parent_ctx;
  sup_methodtoolbar->m_parent_ctx = hist;
  sup_methodtoolbar->get_select_cb = hist->get_select_supobject;

  QToolBar* toolsbox = new QToolBar();
  toolsbox->addWidget(tools);
  toolsbox->addSeparator();
  toolsbox->addWidget(tools_sup);
  toolsbox->addSeparator();
  toolsbox->addWidget(tools_meth);
  hist_vbox->setMenuBar(menu_bar);
  hist_vbox->addWidget(search_vbox);
  hist_vbox->addWidget(toolsbox);
  add_expanding(hist_vbox, hist_widget);

  toplevel->setLayout(hist_vbox);
  toplevel->show();

  Hist::time_cb(time_ePeriod_AllTime);

  wow = new CoWowQt(toplevel);

  *status = 1;
}

HistQt::~HistQt()
{
  if (hist)
    delete hist;
}

void HistQtWidget::focusInEvent(QFocusEvent* event)
{
  hist->hist->set_input_focus();

  QWidget::focusInEvent(event);
}

void HistQtWidget::ok_btn()
{
  brow_DeleteAll(hist->hist->brow->ctx);

  hist->eventType_Info = hist->info_toggle_w->isChecked();
  hist->eventType_InfoSuccess = hist->infosuccess_toggle_w->isChecked();
  hist->eventType_Alarm = hist->alarm_toggle_w->isChecked();
  hist->eventType_MaintenanceAlarm = hist->mnt_alarm_toggle_w->isChecked();
  hist->eventType_SystemAlarm = hist->sys_alarm_toggle_w->isChecked();
  hist->eventType_UserAlarm1 = hist->user_alarm1_toggle_w->isChecked();
  hist->eventType_UserAlarm2 = hist->user_alarm2_toggle_w->isChecked();
  hist->eventType_UserAlarm3 = hist->user_alarm3_toggle_w->isChecked();
  hist->eventType_UserAlarm4 = hist->user_alarm4_toggle_w->isChecked();
  hist->eventType_Ack = hist->ack_toggle_w->isChecked();
  hist->eventType_Return = hist->ret_toggle_w->isChecked();
  hist->eventPrio_A = hist->prioA_toggle_w->isChecked();
  hist->eventPrio_B = hist->prioB_toggle_w->isChecked();
  hist->eventPrio_C = hist->prioC_toggle_w->isChecked();
  hist->eventPrio_D = hist->prioD_toggle_w->isChecked();

  hist->minTime_str = qPrintableLatin1(hist->start_time_entry_w->text());
  hist->maxTime_str = qPrintableLatin1(hist->stop_time_entry_w->text());
  hist->eventText_str = qPrintableLatin1(hist->event_text_entry_w->text());
  hist->eventName_str = qPrintableLatin1(hist->event_name_entry_w->text());

  hist->get_hist_list();
}

void HistQtWidget::activate_print()
{
  hist->activate_print();
}

void HistQtWidget::activate_export()
{
  hist->activate_export();
}

void HistQtWidget::activate_zoom_in()
{
  hist->hist->zoom(1.2);
}

void HistQtWidget::activate_zoom_out()
{
  hist->hist->zoom(5.0 / 6);
}

void HistQtWidget::activate_zoom_reset()
{
  hist->hist->unzoom();
}

void HistQtWidget::activate_hide_search(bool set)
{
  if (set) {
    hist->search_vbox->setVisible(false);
  } else {
    hist->search_vbox->setVisible(true);
  }
}

void HistQtWidget::activate_open_plc()
{
  hist->hist->start_trace();
}

void HistQtWidget::activate_display_in_xnav()
{
  hist->hist->display_in_xnav();
}

void HistQtWidget::activate_stat()
{
  hist->stat();
}

void HistQtWidget::activate_disp_hundredth(bool set)
{
  hist->hist->set_display_hundredth(set);
}

void HistQtWidget::activate_hide_object(bool set)
{
  hist->hist->set_hide_object(set);
}

void HistQtWidget::activate_hide_text(bool set)
{
  hist->hist->set_hide_text(set);
}

void HistQtWidget::activate_help()
{
  hist->activate_help();
}

void HistQtWidget::activate_helpevent()
{
  hist->activate_helpevent();
}

// callbackfunctions from the searchdialog
void HistQtWidget::cancel_cb()
{
  //  printf("hist_cancel_cb\n");
}

void HistQtWidget::time_cb(int idx)
{
  time_ePeriod data = static_cast<time_ePeriod>(((QComboBox*)sender())->itemData(idx).toInt());
  hist->time_cb(data);
}

void HistQt::set_num_of_events(int nrOfEvents)
{
  char buf[20];

  sprintf(buf, "    %u", nrOfEvents);
  nrofevents_string_lbl_w->setText(buf);
}

void HistQt::set_search_string(
    const char* s1, const char* s2, const char* s3, const char* s4)
{
  search_string_lbl_w->setText(convert_utf8(s1));
  search_string2_lbl_w->setText(convert_utf8(s2));
  search_string3_lbl_w->setText(convert_utf8(s3));
  search_string4_lbl_w->setText(convert_utf8(s4));
}

void HistQt::insert_eventname(const char* name)
{
  event_name_entry_w->setText(fl(name));
}

/************************************************************************
*
* Name:		SetListTime
*
* Type:
*
* TYPE		PARAMETER	IOGF	DESCRIPTION
*
*
* Description:	Sets the Time field for start and stop
*
*************************************************************************/
void HistQt::SetListTime(pwr_tTime StartTime, pwr_tTime StopTime, int Sensitive)
{
  char timestr[32];

  /* Show the resulting times */
  time_AtoFormAscii(&StopTime, SWE, SECOND, timestr, sizeof(timestr));
  stop_time_entry_w->setText(fl(timestr));

  time_AtoFormAscii(&StartTime, SWE, SECOND, timestr, sizeof(timestr));
  start_time_entry_w->setText(fl(timestr));

  if (Sensitive != DONT_SET_SENS) {
    start_time_entry_w->setEnabled(Sensitive);
    stop_time_entry_w->setEnabled(Sensitive);
  }
}

#endif