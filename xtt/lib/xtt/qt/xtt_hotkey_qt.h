/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

#ifndef  xtt_hotkey_qt_h
#define  xtt_hotkey_qt_h

#if defined OS_LINUX

#include <vector>
#include "pwr.h"

#include <QEvent>

using namespace std;

class HotkeyAction {
 public:
  char m_name[80];
  void (*m_action)(char *,void *);
  HotkeyAction(const char *name, void (* action)(char *,void *)) : m_action(action) {
    strcpy(m_name, name);
  }
  HotkeyAction(const HotkeyAction& x) : m_action(x.m_action) {
    strcpy(m_name, x.m_name);
  }
};

class HotkeyKey {
 public:
  int m_mod;
  int m_key;
  char m_action_name[80];
  char m_action_arg[200];
  void (*m_action)(char *,void *);
  void *m_userdata;

  HotkeyKey(int mod, int key, char *action_name, char *action_arg) :
    m_mod(mod), m_key(key), m_action(0), m_userdata(0) {
    strcpy(m_action_name, action_name);
    strcpy(m_action_arg, action_arg);
  }
  HotkeyKey(const HotkeyKey& x) : m_mod(x.m_mod), m_key(x.m_key),
    m_action(x.m_action), m_userdata(x.m_userdata) {
    strcpy(m_action_name, x.m_action_name);
    strcpy(m_action_arg, x.m_action_arg);
  }
  void set_action(HotkeyAction *action, void *userdata) {
    if (strcmp(m_action_name, action->m_name) == 0) {
      m_action = action->m_action;
      m_userdata = userdata;
    }
  }
};

class XttHotkey {
 public:
  pwr_tFileName m_filename;
  vector<HotkeyAction> m_actions;
  vector<HotkeyKey> m_keys;
  XttHotkey(const char *filename);
  ~XttHotkey()
  {
  }
  void register_action(const char *name, void (* action)(char *,void *), void *userdata);
  int read_file();
  static int event_handler(QEvent *xevent, QObject *obj);
};

#else
// Dummy for other platforms than OS_LINUX

class XttHotkey {
public:
  // pwr_tFileName m_filename;
  // vector<HotkeyAction> m_actions;
  // vector<HotkeyKey> m_keys;
  XttHotkey(const char *filename)
  {
  }

  ~XttHotkey()
  {
  }

  void register_action(const char *name, void (*action)(char *, void *),
                       void *userdata)
  {
  }

  //  int read_file()
  //  int grab_key(int key, int modifier);
  static int event_handler(QEvent *xevent, QObject *obj)
  {
    return 1;
  }
};

#endif

#endif