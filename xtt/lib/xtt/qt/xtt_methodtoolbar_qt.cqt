/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

/* xtt_methodtoolbar_qt.cpp -- Display method toolbar */

#include <stdio.h>
#include <stdlib.h>
#include "co_dcli.h"
#include "cow_wow_qt.h"
#include "co_cdh.h"
#include "rt_gdh.h"
#include "xtt_xnav.h"
#include "xtt_methodtoolbar_qt.h"
#include "ge_methods.h"

XttMethodToolbarQt::XttMethodToolbarQt(void *parent_ctx, void *xnav,
                                       unsigned int op_method_mask,
                                       unsigned int mnt_method_mask,
                                       const char *tooltip_suffix)
    : XttMethodToolbar(parent_ctx, xnav, op_method_mask, mnt_method_mask,
                       tooltip_suffix), m_timerid(0)
{
  for (int i = 0; i < 64; i++) {
    m_cb[i].mt = this;
    m_cb[i].idx = i;
  }

  object = new XttMethodToolbarQtObject(this);
}

XttMethodToolbarQt::~XttMethodToolbarQt()
{
  if (m_timerid) {
    delete m_timerid;
  }
  if (m_toolbar_w) {
    delete m_toolbar_w;
  }
  delete object;
}

void XttMethodToolbarQtObject::activate_button(QAction *action)
{
  int idx = action->data().toInt();

  int sts = 0;
  int is_attr;
  pwr_sAttrRef aref;
  pwr_tAName aname;
  pwr_tCmd cmd;
  xmenu_eItemType menu_type;

  if (toolbar->get_select_cb) {
    sts = (toolbar->get_select_cb)(toolbar->m_parent_ctx, &aref, &is_attr);
  }

  if (ODD(sts)) {
    if (aref.Flags.b.Object) {
      menu_type = xmenu_eItemType_Object;
    } else if (aref.Flags.b.ObjectAttr) {
      menu_type = xmenu_eItemType_AttrObject;
    } else {
      menu_type = xmenu_eItemType_Attribute;
    }

    sts =
        gdh_AttrrefToName(&aref, aname, sizeof(aname), cdh_mName_volumeStrict);
    if (idx < 32) {
      sprintf(cmd, "call method/function=%s/object=%s",
              GeMethods::op_method[idx], aname);
    } else {
      sprintf(cmd, "call method/function=%s/object=%s",
              GeMethods::mnt_method[idx - 32], aname);
    }

    toolbar->m_xnav->command(cmd);
  }
}

static int methods_command_cb(char *command, void *udata)
{
  XNav *xnav = (XNav *) udata;
  xnav->command(command);
  return xnav->get_command_sts();
}

QWidget *XttMethodToolbarQt::build()
{
  // Toolbar
  m_toolbar_w = new QToolBar();

  for (int i = 0; i < GeMethods::opmeth_size; i++) {
    if (m_op_method_mask & (1 << i) &&
        strcmp(GeMethods::op_image[i], "") != 0) {
      char tooltip[200];

      strcpy(tooltip, GeMethods::op_tooltip[i]);
      strcat(tooltip, m_tooltip_suffix);

      m_op_button_w[i] =
          addToolItem(object, m_toolbar_w, tooltip, SLOT(activate_button()),
                      GeMethods::op_image[i]);
      m_op_button_w[i]->setData(i);
    }
  }
  for (int i = 0; i < GeMethods::mntmeth_size; i++) {
    if (m_mnt_method_mask & (1 << i) &&
        strcmp(GeMethods::mnt_image[i], "") != 0) {
      char tooltip[200];

      strcpy(tooltip, GeMethods::mnt_tooltip[i]);
      strcat(tooltip, m_tooltip_suffix);

      m_mnt_button_w[i] =
          addToolItem(object, m_toolbar_w, tooltip, SLOT(activate_button()),
                      GeMethods::mnt_image[i]);
      m_mnt_button_w[i]->setData(32 + i);
    }
  }
  return m_toolbar_w;
}

void XttMethodToolbarQt::set_sensitive()
{
  if (m_timerid) {
    delete m_timerid;
  }

  m_timerid = new QTimer(object);
  m_timerid->setSingleShot(true);
  QObject::connect(m_timerid, SIGNAL(triggered()), object,
                   SLOT(set_sensitive_cb()));
  m_timerid->start(400);
}

void XttMethodToolbarQtObject::set_sensitive_cb()
{
  toolbar->m_timerid = 0;
  toolbar->set_current_sensitive();
}

void XttMethodToolbarQt::set_current_sensitive()
{
  if (m_disabled) {
    return;
  }

  int is_attr;
  pwr_sAttrRef aref;
  xmenu_eItemType menu_type;
  pwr_tStatus sts = 0;

  if (get_select_cb) {
    sts = (get_select_cb)(m_parent_ctx, &aref, &is_attr);
  }
  if (EVEN(sts)) {
    // Nothing selected
    for (int i = 0; i < GeMethods::opmeth_size; i++) {
      if (m_op_method_mask & (1 << i) &&
          strcmp(GeMethods::op_image[i], "") != 0) {
        m_op_button_w[i]->setEnabled(false);
      }
    }
    for (int i = 0; i < GeMethods::mntmeth_size; i++) {
      if (m_mnt_method_mask & (1 << i) &&
          strcmp(GeMethods::mnt_image[i], "") != 0) {
        m_mnt_button_w[i]->setEnabled(false);
      }
    }
  } else {
    gdh_sVolumeInfo info;

    // Skip extern volumes
    sts = gdh_GetVolumeInfo(aref.Objid.vid, &info);
    if (EVEN(sts)) { return; }

    if (info.cid == pwr_eClass_ExternVolume) {
      for (int i = 0; i < GeMethods::opmeth_size; i++) {
        if (m_op_method_mask & (1 << i) &&
            strcmp(GeMethods::op_image[i], "") != 0) {
          m_op_button_w[i]->setEnabled(false);
        }
      }
      for (int i = 0; i < GeMethods::mntmeth_size; i++) {
        if (m_mnt_method_mask & (1 << i) &&
            strcmp(GeMethods::mnt_image[i], "") != 0) {
          m_mnt_button_w[i]->setEnabled(false);
        }
      }
      return;
    }

    if (aref.Flags.b.Object) {
      menu_type = xmenu_eItemType_Object;
    } else if (aref.Flags.b.ObjectAttr) {
      menu_type = xmenu_eItemType_AttrObject;
    } else {
      menu_type = xmenu_eItemType_Attribute;
    }

    pwr_tAName aname;
    pwr_sClass_XttMethodsMask xm_mask;
    int mask_store = 0;

    sts =
        gdh_AttrrefToName(&aref, aname, sizeof(aname), cdh_mName_volumeStrict);
    if (EVEN(sts)) { return; }

    sts = GeMethods::get_xm_mask(0, aname, &xm_mask, &mask_store,
                                 methods_command_cb, m_xnav);

    for (int i = 0; i < GeMethods::opmeth_size; i++) {
      if (m_op_method_mask & (1 << i) &&
          strcmp(GeMethods::op_image[i], "") != 0) {
        if (xm_mask.OpMethods & (1 << i)) {
          m_op_button_w[i]->setEnabled(true);
        } else {
          m_op_button_w[i]->setEnabled(false);
        }
      }
    }
    for (int i = 0; i < GeMethods::mntmeth_size; i++) {
      if (m_mnt_method_mask & (1 << i) &&
          strcmp(GeMethods::mnt_image[i], "") != 0) {
        if (xm_mask.MntMethods & (1 << i)) {
          m_mnt_button_w[i]->setEnabled(true);
        } else {
          m_mnt_button_w[i]->setEnabled(false);
        }
      }
    }
    if (mask_store) {
      strcat(aname, ".XttMethodsMask");
      sts = gdh_SetObjectInfo(aname, &xm_mask, sizeof(xm_mask));
      if (EVEN(sts)) {
        printf("Set mask error %s\n", aname);
      }
    }
  }
}