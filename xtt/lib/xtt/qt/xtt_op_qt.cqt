/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2018 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_op_qt.cpp -- Alarm and event window in xtt */

#include <stdio.h>

#include "co_dcli.h"
#include "co_string.h"
#include "co_syi.h"
#include "co_time.h"

#include "rt_gdh.h"
#include "rt_xnav_msg.h"

#include "cow_qt_helpers.h"

#include "glow_growctx.h"
#include "glow_growapi.h"

#include "ge_graph.h"

#include "xtt_op_qt.h"

#include <QApplication>
#include <QDesktopWidget>
#include <QPushButton>

#define OP_HEIGHT_MIN 75
#define OP_HEIGHT_INC 20
#define OP_HEIGHT_STATUSBAR 30

static QPushButton* image_button(QWidget* parent, const char* filename)
{
  pwr_tFileName fname;
  dcli_translate_filename(fname, filename);
  return new QPushButton(QIcon(fl(fname)), "", parent);
}

static void cnv_qt_text(char* in, char* out, int size)
{
  char* s = in;
  char* t = out;

  for (int i = 0; i < size && *s; i++, s++) {
    *(t++) = *s;
    if (*s == '&') {
      // & -> &amp;
      if (i + 4 >= size) {
        break;
      }
      *(t++) = 'a';
      *(t++) = 'm';
      *(t++) = 'p';
      *(t++) = ';';
    }
  }
  *t = 0;
}

static void modifyBackground(QWidget* widget, QColor& color)
{
  QPalette pal;

  pal.setColor(QPalette::Background, color);
  widget->setAutoFillBackground(true);
  widget->setPalette(pal);
}

static void modifyForeground(QWidget* widget, QColor& color)
{
  QPalette pal;

  pal.setColor(QPalette::Foreground, color);
  widget->setPalette(pal);
}

void OpQt::alarm_box_helper(int i)
{
  QHBoxLayout* aalarm_box_layout = new QHBoxLayout();
  QWidget* aalarm_bbox1 = new QWidget();
  modifyBackground(aalarm_label[i], red_color);
  aalarm_info[i] = image_button(toplevel, "$pwr_exe/xtt_alarm_info.png");
  fixed_put(aalarm_bbox1, aalarm_active[i], 0, 0);
  fixed_put(aalarm_bbox1, aalarm_info[i], 21, 0);
  fixed_put(aalarm_bbox1, new QLabel(""), 43, 0);
  aalarm_box_layout->addWidget(aalarm_bbox1);
  add_expanding(aalarm_box_layout, aalarm_label[i]);
  aalarm_box[i] = layout_to_widget(aalarm_box_layout);
  aalarm_label[i]->setFixedHeight(20);
  aalarm_active[i]->setFixedHeight(20);
  aalarm_info[i]->setFixedSize(20, 20);
  QObject::connect(
      aalarm_info[i], SIGNAL(clicked()), toplevel, SLOT(activate_info()));
}

OpQt::OpQt(void* op_parent_ctx, QWidget* op_parent_wid, char* opplace,
    pwr_tStatus* status)
    : Op(op_parent_ctx, opplace, status), title_label(0), a_height(2),
      text_size(12)
{
  pwr_tStatus sts;

  memset(a_exist, 0, sizeof(a_exist));
  memset(a_active, 0, sizeof(a_active));
  memset(appl_buttons, 0, sizeof(appl_buttons));

  red_color = QColor("#FF7575");
  yellow_color = QColor("yellow");
  green_color = QColor("green");
  gray_color = QColor("gray");
  QColor black_color = QColor("black");
  white_color = QColor("white");

  toplevel = new OpQtWidget(this, op_parent_wid);
  toplevel->setToolTip(fl("xtt_op widget"));
  toplevel->setMinimumSize(1100, OP_HEIGHT_MIN);
  toplevel->setWindowFlags(Qt::CustomizeWindowHint);

  CoWowQt::SetWindowIcon(toplevel);
  QRect xtt_monitor_geometry = QApplication::desktop()->screenGeometry();

  pwr_tFileName fname;
  dcli_translate_filename(fname, "$pwr_exe/xtt_alarm_active.png");
  for (int i = 0; i < 5; i++) {
    aalarm_active[i] = new_image_label(toplevel, fname);
    aalarm_label[i] = new QLabel("");
  }

  alarmcnt_label = new QLabel("");
  aalarm_mark = new QLabel("A");

  dcli_translate_filename(fname, "$pwr_exe/xtt_alarm_active.png");
  balarm_active = new_image_label(toplevel, fname);
  balarm_mark = new QLabel("");
  balarm_label = new QLabel("");

  QVBoxLayout* vbox_aalarm = new QVBoxLayout();
  for (int i = 0; i < 5; i++) {
    alarm_box_helper(i);
    vbox_aalarm->addWidget(aalarm_box[i]);
  }

  balarm_active->setFixedSize(20, 20);
  balarm_info = image_button(toplevel, "$pwr_exe/xtt_alarm_info.png");

  QHBoxLayout* balarm_box_layout = new QHBoxLayout();
  QWidget* balarm_bbox = new QWidget();
  fixed_put(balarm_bbox, balarm_active, 0, 0);
  fixed_put(balarm_bbox, balarm_info, 21, 0);
  fixed_put(balarm_bbox, new QLabel(""), 43, 0);
  balarm_box_layout->addWidget(balarm_bbox);
  add_expanding(balarm_box_layout, balarm_label);
  balarm_box = layout_to_widget(balarm_box_layout);
  balarm_info->setFixedSize(20, 20);
  QObject::connect(
      balarm_info, SIGNAL(clicked()), toplevel, SLOT(activate_info()));

  // Acknowledge button for a alarms
  QPushButton* aalarm_ack
      = image_button(toplevel, "$pwr_exe/xtt_acknowledge.png");
  aalarm_ack->setFixedSize(30, 20);
  aalarm_mark->setFixedHeight(20);
  QObject::connect(
      aalarm_ack, SIGNAL(clicked()), toplevel, SLOT(activate_aalarm_ack()));

  // Increment size button
  QPushButton* incr_button = image_button(toplevel, "$pwr_exe/xtt_down.png");
  incr_button->setFixedSize(30, 20);
  alarmcnt_label->setFixedHeight(20);
  QObject::connect(
      incr_button, SIGNAL(clicked()), toplevel, SLOT(activate_aalarm_incr()));

  // Decrement size button
  decr_button = image_button(toplevel, "$pwr_exe/xtt_up.png");
  decr_button->setFixedSize(30, 20);
  QObject::connect(
      decr_button, SIGNAL(clicked()), toplevel, SLOT(activate_aalarm_decr()));

  // Acknowledge button for b alarms
  QPushButton* balarm_ack
      = image_button(toplevel, "$pwr_exe/xtt_acknowledge.png");
  balarm_ack->setFixedSize(30, 20);
  balarm_mark->setFixedHeight(20);
  QObject::connect(
      balarm_ack, SIGNAL(clicked()), toplevel, SLOT(activate_balarm_ack()));

  QHBoxLayout* hbox_abutton = new QHBoxLayout();
  hbox_abutton->addWidget(aalarm_ack);
  hbox_abutton->addWidget(aalarm_mark);

  QHBoxLayout* hbox_incrbutton = new QHBoxLayout();
  hbox_incrbutton->addWidget(incr_button);
  hbox_incrbutton->addWidget(alarmcnt_label);

  QHBoxLayout* hbox_decrbutton = new QHBoxLayout();
  hbox_decrbutton->addWidget(decr_button);

  QVBoxLayout* vbox_abutton = new QVBoxLayout();
  vbox_abutton->addLayout(hbox_abutton);
  vbox_abutton->addLayout(hbox_incrbutton);
  vbox_abutton->addLayout(hbox_decrbutton);

  QHBoxLayout* hbox_bbutton = new QHBoxLayout();
  hbox_bbutton->addWidget(balarm_ack);
  hbox_bbutton->addWidget(balarm_mark);

  QHBoxLayout* hbox_a = new QHBoxLayout();
  hbox_a->addLayout(vbox_abutton);
  add_expanding(hbox_a, vbox_aalarm);

  QHBoxLayout* hbox_b = new QHBoxLayout();
  hbox_b->addLayout(hbox_bbutton);
  add_expanding(hbox_b, balarm_box);

  QVBoxLayout* vbox_ala = new QVBoxLayout();
  add_expanding(vbox_ala, hbox_a);
  vbox_ala->addWidget(separator(QFrame::HLine));
  vbox_ala->addLayout(hbox_b);

  // Menu
  menu_bar = new QMenuBar();

  // Functions entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  // Submenu Alarm
  QMenu* functions_alarm = functions->addMenu(translate_utf8("&Alarm"));
  addMenuItem(toplevel, functions_alarm, "&AlarmList",
      SLOT(activate_alarmlist()), "", "$pwr_exe/xtt_alarmlist.png");
  addMenuItem(toplevel, functions_alarm, "&EventList",
      SLOT(activate_eventlist()), "", "$pwr_exe/xtt_eventlist.png");
  addMenuItem(toplevel, functions_alarm, "Event&Log", SLOT(activate_eventlog()),
      "", "$pwr_exe/xtt_eventlog.png");
  addMenuItem(toplevel, functions_alarm, "&BlockList",
      SLOT(activate_blocklist()), "", "$pwr_exe/xtt_blocklist.png");
  // End Alarm submenu

  // Submenu Curves
  QMenu* functions_curves = functions->addMenu(translate_utf8("&Curves"));
  addMenuItem(toplevel, functions_curves, "&Trends", SLOT(activate_trend()), "",
      "$pwr_exe/xtt_meth_trend.png");
  addMenuItem(toplevel, functions_curves, "&Fast", SLOT(activate_fast()), "",
      "$pwr_exe/xtt_meth_fast.png");
  addMenuItem(
      toplevel, functions_curves, "&Process History", SLOT(activate_history()));
  // End Curves submenu

  addMenuItem(toplevel, functions, "&Process Graphics", SLOT(activate_graph()),
      "CTRL+G", "$pwr_exe/wtt_ge.png");
  addMenuItem(toplevel, functions, "&Navigator", SLOT(activate_navigator()),
      "CTRL+D", "$pwr_exe/xtt_navigator.png");

  // Submenu View
  QMenu* functions_view = functions->addMenu(translate_utf8("&View"));
  addMenuItem(
      toplevel, functions_view, "&Color theme", SLOT(activate_colortheme()));
  addMenuItem(toplevel, functions_view, "&Larger Text",
      SLOT(activate_zoom_in()), "", "$pwr_exe/xtt_zoom_in.png");
  addMenuItem(toplevel, functions_view, "&Smaller Text",
      SLOT(activate_zoom_out()), "", "$pwr_exe/xtt_zoom_out.png");
  // End View submenu

  // Submenu User
  QMenu* functions_user = functions->addMenu(translate_utf8("&User"));
  addMenuItem(
      toplevel, functions_user, "S&witch User", SLOT(activate_switch_user()));
  addMenuItem(
      toplevel, functions_user, "&Show User", SLOT(activate_show_user()));
  addMenuItem(toplevel, functions_user, "&Return", SLOT(activate_logout()));
  // End User submenu

  // Submenu Help
  QMenu* functions_help = functions->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, functions_help, "&Project", SLOT(activate_help()), "",
      "$pwr_exe/xtt_help.png");
  addMenuItem(
      toplevel, functions_help, "&Overview", SLOT(activate_help_overview()));
  addMenuItem(
      toplevel, functions_help, "&OperatorWindow", SLOT(activate_help_opwin()));
  addMenuItem(toplevel, functions_help, "&About Proview",
      SLOT(activate_help_proview()));
  // End Help submenu

  addMenuItem(
      toplevel, functions, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Toolbar
  tools = new QToolBar();
  tools2 = new QToolBar();

  addToolItem(toplevel, tools, "Larger Text", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Smaller Text", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(
      toplevel, tools, "Help", SLOT(activate_help()), "$pwr_exe/xtt_help.png");
  addToolItem(
      toplevel, tools, "Close", SLOT(close()), "$pwr_exe/xtt_close.png");

  addToolItem(toplevel, tools2, "Alarm List", SLOT(activate_alarmlist()),
      "$pwr_exe/xtt_alarmlist.png");
  addToolItem(toplevel, tools2, "Event List", SLOT(activate_eventlist()),
      "$pwr_exe/xtt_eventlist.png");
  addToolItem(toplevel, tools2, "Event Log", SLOT(activate_eventlog()),
      "$pwr_exe/xtt_eventlog.png");
  addToolItem(toplevel, tools2, "Blocked Alarms", SLOT(activate_blocklist()),
      "$pwr_exe/xtt_blocklist.png");
  addToolItem(toplevel, tools2, "Navigator", SLOT(activate_navigator()),
      "$pwr_exe/xtt_navigator.png");

  // System pushbuttons
  QVBoxLayout* sysbutton_box_layout = new QVBoxLayout();
  sysbutton_box_layout->setMenuBar(menu_bar);
  sysbutton_box_layout->addWidget(tools);
  sysbutton_box_layout->addWidget(tools2);
  QWidget* sysbutton_box = layout_to_widget(sysbutton_box_layout);
  sysbutton_box->setFixedWidth(160);

  sts = configure(opplace);
  if (EVEN(sts)) {
    return;
  }

  // Status bar
  QStatusBar* status_bar = NULL;
  if (!(layout_mask & pwr_mOpWindLayoutMask_HideStatusBar)) {
    char text[80];
    pwr_tTime time;

    dcli_translate_filename(fname, "$pwrp_exe/pwrp_logotype.png");
    if (EVEN(dcli_file_time(fname, &time))) {
      dcli_translate_filename(fname, "$pwr_exe/proview_icon17.png");
    }
    QLabel* icon_image = new_image_label(toplevel, fname);

    title_label = new QLabel("");

    status_bar = new QStatusBar();
    status_bar->addWidget(icon_image);
    status_bar->addWidget(title_label);

    // Add node supervision buttons
    int padding1, padding2, buttonwidth;
    if (sup_vect.size() > 10) {
      padding1 = 0;
      padding2 = 0;
      buttonwidth = (xtt_monitor_geometry.width() - 350) / sup_vect.size();
    } else if (sup_vect.size() > 6) {
      padding1 = 8;
      padding2 = 5;
      buttonwidth = (xtt_monitor_geometry.width() - 350) / sup_vect.size()
          - 2 * padding2;
    } else {
      padding1 = 8;
      padding2 = 5;
      buttonwidth = 0;
    }

    for (unsigned int i = 0; i < sup_vect.size(); i++) {
      QLabel* node_label = new QLabel("");
      snprintf(text, sizeof(text), "<span size=\"%d\">%s</span>", 11 * 1024,
          sup_vect[i].node_name);
      node_label->setText(convert_utf8(text));

      QHBoxLayout* node_hbox = new QHBoxLayout();

      QWidget* node_ind = new QWidget();
      QWidget* node_ind_frame = new QWidget();
      QWidget* node_ind_frame_box = new QWidget();
      fixed_put(node_ind_frame_box, node_ind_frame, 0, 0);
      fixed_put(node_ind_frame_box, node_ind, 1, 1);
      node_hbox->setContentsMargins(padding1, padding1, padding1, padding1);
      node_hbox->addWidget(node_ind_frame_box);
      add_expanding(node_hbox, node_label);

      QVBoxLayout* node_image_layout = new QVBoxLayout();
      QWidget* node_ind_filler1 = new QWidget();
      QWidget* node_ind_filler2 = new QWidget();
      add_expanding(node_image_layout, node_ind_filler1);
      node_image_layout->addLayout(node_hbox);
      add_expanding(node_image_layout, node_ind_filler2);

      modifyBackground(node_ind, gray_color);
      node_ind->setFixedSize(18, 18);
      modifyBackground(node_ind_frame, black_color);
      node_ind_frame->setFixedSize(20, 20);

      QWidget* node_image = layout_to_widget(node_image_layout);
      if (buttonwidth) {
        node_image->setFixedWidth(buttonwidth);
      }
      sup_vect[i].indw = (void*)node_ind;
      sup_vect[i].indfiller1w = (void*)node_ind_filler1;
      sup_vect[i].indfiller2w = (void*)node_ind_filler2;
      sup_vect[i].textw = (void*)node_label;
      sup_vect[i].textbgw = (void*)node_label;
      sup_vect[i].buttonw = (void*)node_image;
      QObject::connect(
          node_image, SIGNAL(clicked()), toplevel, SLOT(activate_sup_node()));
      status_bar->setContentsMargins(padding2, padding2, padding2, padding2);
      status_bar->addWidget(node_image);
    }
    if (buttonwidth) {
      status_bar->setFixedWidth(xtt_monitor_geometry.width());
    }
  }

  // Main window

  QHBoxLayout* hbox_conf = new QHBoxLayout();
  hbox_conf->addWidget(sysbutton_box);
  hbox_conf->addWidget(separator(QFrame::HLine));
  add_expanding(hbox_conf, appl_form);

  QSplitter* pane = new QSplitter(Qt::Horizontal);
  add_expanding(pane, vbox_ala);
  pane->addWidget(layout_to_widget(vbox_ala));
  pane->addWidget(layout_to_widget(hbox_conf));

  QVBoxLayout* vbox_conf = new QVBoxLayout();
  if (!(layout_mask & pwr_mOpWindLayoutMask_HideStatusBar)) {
    vbox_conf->addWidget(status_bar);
    vbox_conf->addWidget(separator(QFrame::HLine));
  }
  vbox_conf->addWidget(pane);

  QColor background("black");
  modifyBackground(toplevel, background);

  toplevel->setLayout(vbox_conf);
  toplevel->setFrameStyle(QFrame::StyledPanel | QFrame::Sunken);
  toplevel->show();

  if (start_jop) {
    jop = new Jop((void*)this);
    jop->command_cb = &jop_command_cb;
  }

  set_pane_position(pane, 500);
  aalarm_box[0]->setVisible(false);
  aalarm_box[1]->setVisible(false);
  aalarm_box[2]->setVisible(false);
  aalarm_box[3]->setVisible(false);
  aalarm_box[4]->setVisible(false);
  balarm_box->setVisible(false);
  decr_button->setVisible(false);
  if (layout_mask & pwr_mOpWindLayoutMask_HideCloseButton) {
    tools_close->setVisible(false);
    functions_close->setVisible(false);
  }

  if (a_height == 5) {
    toplevel->activate_aalarm_decr();
  }
  if (a_height == 4) {
    toplevel->activate_aalarm_decr();
    toplevel->activate_aalarm_decr();
  }

  toplevel->resize(xtt_monitor_geometry.width(), OP_HEIGHT_MIN);
  toplevel->move(0, 0);

  wow = new CoWowQt(toplevel);
  sup_timerid = wow->timer_new();
  wow->DisplayWarranty();

  if (!(layout_mask & pwr_mOpWindLayoutMask_HideStatusBar)) {
    sup_scan(this);
  }

  *status = 1;
}

OpQt::~OpQt()
{
  debug_print("OpQt::~OpQt\n");
  if (jop) {
    delete jop;
  }
  if (sup_timerid) {
    sup_timerid->remove();
    delete sup_timerid;
  }
}

void OpQtWidget::closeEvent(QCloseEvent* event)
{
  debug_print("OpQtWidget::closeEvent\n");
  if (op->close_cb) {
    (op->close_cb)(op->parent_ctx);
  }
  QWidget::closeEvent(event);
}

void OpQt::map()
{
  if (poptimer.disabled()) {
    return;
  }

  pop(toplevel);

  poptimer.disable(1000);
}

void OpQt::add_close_button()
{
  tools_close->setVisible(true);
  functions_close->setVisible(true);
}

int OpQt::create_menu_item(
    const char* name, int pixmap, int append, const char* cmd)
{
  QMenu* w;
  int sts;

  sts = wow->CreateMenuItem(name, (void*)menu_bar, pixmap, append, (void*)&w);
  if (EVEN(sts)) {
    return sts;
  }

  OpCmd opcmd(w, cmd);
  cmd_vect.push_back(opcmd);
  QObject::connect(
      w, SIGNAL(triggered()), toplevel, SLOT(activate_cmd_menu_item()));

  return 1;
}

int OpQt::delete_menu_item(const char* name)
{
  return wow->DeleteMenuItem("Functions-View", (void*)menu_bar);
}

void OpQt::update_alarm_info()
{
  evlist_sAlarmInfo info;
  int sts;
  int i;
  int height, active_height;
  char str[40];
  char text[500], ctext[500];
  char timestr[40] = "";
  int fsize = text_size * 1024;
  int show_time = 0;
  time_eFormat time_format = time_eFormat_Time;
  char* s;

  if (get_alarm_info_cb) {
    sts = (get_alarm_info_cb)(parent_ctx, &info);
    if (EVEN(sts)) {
      return;
    }

    QColor bg_color = QColor("gray");

    height = 22;
    active_height = 22;

    snprintf(str, sizeof(str), "%d", info.alarms_total);
    alarmcnt_label->setText(str);

    if (layout_mask & pwr_mOpWindLayoutMask_ShowAlarmDateAndTime) {
      time_format = time_eFormat_ComprDateAndTime;
      show_time = 1;
    } else if (layout_mask & pwr_mOpWindLayoutMask_ShowAlarmTime) {
      time_format = time_eFormat_Time;
      show_time = 1;
    }

    for (i = 0; i < 5; i++) {
      a_exist[i] = info.a_alarm_exist[i];
      a_active[i] = info.a_alarm_active[i];
      strcpy(a_alarm_moretext[i], info.a_alarm_moretext[i]);

      if (info.a_alarm_exist[i]) {
        cnv_qt_text(info.a_alarm_text[i], ctext, sizeof(ctext));

        if (show_time) {
          sts = time_AtoAscii(
              &info.a_alarm_time[i], time_format, timestr, sizeof(timestr));
          if ((s = strrchr(timestr, '.'))) {
            *s = 0;
          }

          snprintf(text, sizeof(text), "<span size=\"%d\">%s %s  %s</span>",
              fsize, timestr, info.a_alarm_alias[i], ctext);
        } else {
          snprintf(text, sizeof(text), "<span size=\"%d\">%s  %s</span>", fsize,
              info.a_alarm_alias[i], ctext);
        }

        aalarm_label[i]->setText(convert_utf8(text));

        snprintf(
            text, sizeof(text), "<span size=\"%d\">%s</span>", fsize, timestr);

        if (i < a_height) {
          aalarm_box[i]->setVisible(true);
          if (info.a_alarm_active[i]) {
            aalarm_active[i]->setVisible(true);
          } else {
            aalarm_active[i]->setVisible(false);
          }
          if (!streq(info.a_alarm_moretext[i], "")) {
            aalarm_info[i]->setVisible(true);
          } else {
            aalarm_info[i]->setVisible(false);
          }
        }
      } else {
        aalarm_label[i]->setText("");
        aalarm_active[i]->setVisible(false);
        aalarm_box[i]->setVisible(false);
      }
    }

    if (info.b_alarm_exist[0]) {
      balarm_type = evlist_eEventType_Alarm;
      balarm_prio = mh_eEventPrio_B;
      strcpy(b_alarm_moretext, info.b_alarm_moretext[0]);

      cnv_qt_text(info.b_alarm_text[0], ctext, sizeof(ctext));

      if (show_time) {
        sts = time_AtoAscii(
            &info.b_alarm_time[0], time_format, timestr, sizeof(timestr));
        if ((s = strrchr(timestr, '.'))) {
          *s = 0;
        }

        snprintf(text, sizeof(text), "<span size=\"%d\">%s %s  %s</span>",
            fsize, timestr, info.b_alarm_alias[0], ctext);
      } else {
        snprintf(text, sizeof(text), "<span size=\"%d\">%s  %s</span>", fsize,
            info.b_alarm_alias[0], ctext);
      }

      balarm_label->setText(convert_utf8(text));
      modifyBackground(balarm_ebox, yellow_color);
      balarm_box->setVisible(true);

      balarm_mark->setText(fl("B"));

      if (info.b_alarm_active[0]) {
        balarm_active->setVisible(true);
      } else {
        balarm_active->setVisible(false);
      }
      if (!streq(info.b_alarm_moretext[0], "")) {
        balarm_info->setVisible(true);
      } else {
        balarm_info->setVisible(false);
      }
    } else if (info.c_alarm_exist[0]) {
      QColor blue_color("lightblue");

      balarm_type = evlist_eEventType_Alarm;
      balarm_prio = mh_eEventPrio_C;
      strcpy(b_alarm_moretext, info.c_alarm_moretext[0]);
      cnv_qt_text(info.c_alarm_text[0], ctext, sizeof(ctext));
      if (show_time) {
        sts = time_AtoAscii(
            &info.c_alarm_time[0], time_format, timestr, sizeof(timestr));
        if ((s = strrchr(timestr, '.'))) {
          *s = 0;
        }

        snprintf(text, sizeof(text), "<span size=\"%d\">%s %s  %s</span>",
            fsize, timestr, info.c_alarm_alias[i], ctext);
      } else {
        snprintf(text, sizeof(text), "<span size=\"%d\">%s  %s</span>", fsize,
            info.c_alarm_alias[0], ctext);
      }
      balarm_label->setText(convert_utf8(text));
      modifyBackground(balarm_ebox, blue_color);
      balarm_box->setVisible(true);

      balarm_mark->setText(fl("C"));

      if (info.c_alarm_active[0]) {
        balarm_active->setVisible(true);
      } else {
        balarm_active->setVisible(false);
      }
      if (!streq(info.c_alarm_moretext[0], "")) {
        balarm_info->setVisible(true);
      } else {
        balarm_info->setVisible(false);
      }
    } else if (info.d_alarm_exist[0]) {
      QColor violet_color("violet");

      balarm_type = evlist_eEventType_Alarm;
      balarm_prio = mh_eEventPrio_D;
      strcpy(b_alarm_moretext, info.d_alarm_moretext[0]);
      cnv_qt_text(info.d_alarm_text[0], ctext, sizeof(ctext));
      if (show_time) {
        sts = time_AtoAscii(
            &info.d_alarm_time[0], time_format, timestr, sizeof(timestr));
        if ((s = strrchr(timestr, '.'))) {
          *s = 0;
        }

        snprintf(text, sizeof(text), "<span size=\"%d\">%s %s  %s</span>",
            fsize, timestr, info.d_alarm_alias[0], ctext);
      } else {
        snprintf(text, sizeof(text), "<span size=\"%d\">%s  %s</span>", fsize,
            info.d_alarm_alias[0], ctext);
      }
      balarm_label->setText(convert_utf8(text));
      modifyBackground(balarm_ebox, violet_color);
      balarm_box->setVisible(true);

      balarm_mark->setText(fl("D"));

      if (info.b_alarm_active[0]) {
        balarm_active->setVisible(true);
      } else {
        balarm_active->setVisible(false);
      }
      if (!streq(info.d_alarm_moretext[0], "")) {
        balarm_info->setVisible(true);
      } else {
        balarm_info->setVisible(false);
      }
    } else if (info.i_alarm_exist[0]) {
      balarm_type = info.i_alarm_eventtype[0];
      strcpy(b_alarm_moretext, info.i_alarm_moretext[0]);
      cnv_qt_text(info.i_alarm_text[0], ctext, sizeof(ctext));
      if (show_time) {
        sts = time_AtoAscii(
            &info.i_alarm_time[0], time_format, timestr, sizeof(timestr));
        if ((s = strrchr(timestr, '.'))) {
          *s = 0;
        }

        snprintf(text, sizeof(text), "<span size=\"%d\">%s %s  %s</span>",
            fsize, timestr, info.i_alarm_alias[0], ctext);
      } else {
        snprintf(text, sizeof(text), "<span size=\"%d\">%s  %s</span>", fsize,
            info.i_alarm_alias[0], ctext);
      }
      balarm_label->setText(convert_utf8(text));
      if (balarm_type == evlist_eEventType_InfoSuccess) {
        modifyBackground(balarm_ebox, green_color);
      } else {
        modifyBackground(balarm_ebox, white_color);
      }
      balarm_box->setVisible(true);

      balarm_mark->setText(fl("I"));

      if (info.i_alarm_active[0]) {
        balarm_active->setVisible(true);
      } else {
        balarm_active->setVisible(false);
      }
      if (!streq(info.i_alarm_moretext[0], "")) {
        balarm_info->setVisible(true);
      } else {
        balarm_info->setVisible(false);
      }
    } else {
      balarm_label->setText("");
      modifyBackground(balarm_ebox, bg_color);
      balarm_mark->setText("");
      balarm_box->setVisible(false);

      balarm_active->setVisible(false);
      balarm_info->setVisible(false);
    }
  }
}

int OpQt::configure(char* opplace_str)
{
  int sts;
  unsigned int i;
  pwr_tObjid opplace;
  pwr_sClass_OpPlace* opplace_p;
  pwr_sAttrRef attrref;
  pwr_tTid tid;

  sts = gdh_NameToObjid(opplace_str, &opplace);
  if (EVEN(sts)) {
    return sts;
  }

  sts = gdh_ObjidToPointer(opplace, (void**)&opplace_p);
  if (EVEN(sts)) {
    return sts;
  }

  layout_mask = opplace_p->OpWindLayout;
  if (opplace_p->StartJavaProcess) {
    start_jop = 1;
  }

  // Examine Graph objects
  for (i = 0;
       i < sizeof(opplace_p->FastAvail) / sizeof(opplace_p->FastAvail[0]);
       i++) {
    button_aref[i].Objid = pwr_cNOid;
    if (cdh_ObjidIsNull(opplace_p->FastAvail[i].Objid)) {
      continue;
    }

    sts = gdh_GetAttrRefTid(&opplace_p->FastAvail[i], &tid);
    if (EVEN(sts)) {
      continue;
    }

    memset(&attrref, 0, sizeof(attrref));
    switch (tid) {
    case pwr_cClass_XttGraph:
      sts = gdh_ClassAttrToAttrref(
          pwr_cClass_XttGraph, ".ButtonText", &attrref);
      if (EVEN(sts)) {
        return sts;
      }
      break;
    case pwr_cClass_XttMultiView:
      sts = gdh_ClassAttrToAttrref(
          pwr_cClass_XttMultiView, ".ButtonText", &attrref);
      if (EVEN(sts)) {
        return sts;
      }
      break;
    case pwr_cClass_XttCamera:
      sts = gdh_ClassAttrToAttrref(
          pwr_cClass_XttCamera, ".ButtonText", &attrref);
      if (EVEN(sts)) {
        return sts;
      }
      break;
    case pwr_cClass_SevPlotGroup:
      sts = gdh_ClassAttrToAttrref(
          pwr_cClass_SevPlotGroup, ".ButtonText", &attrref);
      if (EVEN(sts)) {
        return sts;
      }
      break;
    case pwr_cClass_PlotGroup:
      sts = gdh_ClassAttrToAttrref(
          pwr_cClass_PlotGroup, ".ButtonText", &attrref);
      if (EVEN(sts)) {
        return sts;
      }
      break;
    default:
      continue;
    }

    attrref = cdh_ArefAdd(&opplace_p->FastAvail[i], &attrref);
    sts = gdh_GetObjectInfoAttrref(
        &attrref, (void*)button_title[i], sizeof(button_title[0]));
    if (EVEN(sts)) {
      continue;
    }

    if (streq(button_title[i], "")) {
      // Take object name instead
      sts = gdh_AttrrefToName(&opplace_p->FastAvail[i], button_title[i],
          sizeof(button_title[0]), cdh_mName_object);
      if (EVEN(sts)) {
        continue;
      }
    }

    button_aref[i] = opplace_p->FastAvail[i];
  }

  // Create the application buttons
  for (i = 0;
       i < sizeof(opplace_p->FastAvail) / sizeof(opplace_p->FastAvail[0]);
       i++) {
    if (cdh_ObjidIsNull(button_aref[i].Objid)) {
      continue;
    }

    appl_buttons[i] = new QPushButton(QString::fromLatin1(button_title[i]));
    appl_buttons[i]->setEnabled(false);
    appl_buttons[i]->setFixedHeight(28);
    QObject::connect(
        appl_buttons[i], SIGNAL(pressed()), toplevel, SLOT(activate_appl()));
  }

  appl_form = new QVBoxLayout();
  for (i = 0;
       i < sizeof(opplace_p->FastAvail) / sizeof(opplace_p->FastAvail[0]);
       i++) {
    if ((i + 1) % 5 == 0) {
      funcbox[(i + 1) / 5] = layout_to_widget(new QHBoxLayout());
      appl_form->addWidget(funcbox[(i + 1) / 5]);
    }

    int i2 = ((int)(i / 5));
    add_expanding(funcbox[i2]->layout(), appl_buttons[i]);
    if (i >= 15) {
      a_height = i2 + 1;
    }
  }

  return XNAV__SUCCESS;
}

void OpQtWidget::activate_aalarm_ack()
{
  op->activate_aalarm_ack();
}

void OpQtWidget::activate_balarm_ack()
{
  op->activate_balarm_ack();
}

void OpQtWidget::activate_zoom_in()
{
  if (op->text_size >= 18) {
    return;
  }

  op->text_size += 2;
  op->update_alarm_info();
  op->set_text_size();
}

void OpQtWidget::activate_zoom_out()
{
  if (op->text_size <= 8) {
    return;
  }

  op->text_size -= 2;
  op->update_alarm_info();
  op->set_text_size();
}

void OpQtWidget::activate_colortheme()
{
  if (op->command_cb) {
    op->command_cb(op->parent_ctx, (char*)"open colorthemeselector");
  }
}

void OpQtWidget::activate_aalarm_incr()
{
  int width = this->width();
  int height = this->height();

  if (op->a_height == 5) {
    return;
  }

  op->a_height++;
  height = OP_HEIGHT_MIN + (op->a_height - 2) * OP_HEIGHT_INC
      + ((op->layout_mask & pwr_mOpWindLayoutMask_HideStatusBar) ? 0 : 1)
          * OP_HEIGHT_STATUSBAR;

  if (op->a_height == 3) {
    op->decr_button->setVisible(true);
  } else if (op->a_height == 4) {
    op->funcbox[3]->setVisible(true);
  } else if (op->a_height == 5) {
    op->funcbox[4]->setVisible(true);
  }
  for (int i = 2; i < 5; i++) {
    if (i < op->a_height) {
      if (op->a_exist[i]) {
        op->aalarm_box[i]->setVisible(true);
        if (op->a_active[i]) {
          op->aalarm_active[i]->setVisible(true);
        } else {
          op->aalarm_active[i]->setVisible(false);
        }
      }
    }
  }
  resize(width, height);
}

void OpQtWidget::activate_aalarm_decr()
{
  int width = this->width();
  int height = this->height();

  if (op->a_height == 2) {
    return;
  }

  op->a_height--;
  height = OP_HEIGHT_MIN + (op->a_height - 2) * OP_HEIGHT_INC
      + ((op->layout_mask & pwr_mOpWindLayoutMask_HideStatusBar) ? 0 : 1)
          * OP_HEIGHT_STATUSBAR;

  if (op->a_height == 2) {
    op->decr_button->setVisible(false);
  } else if (op->a_height == 3) {
    op->funcbox[3]->setVisible(false);
  } else if (op->a_height == 4) {
    op->funcbox[4]->setVisible(false);
  }
  for (int i = 2; i < 5; i++) {
    if (i >= op->a_height) {
      if (op->a_exist[i]) {
        op->aalarm_box[i]->setVisible(false);
        op->aalarm_active[i]->setVisible(false);
        op->aalarm_info[i]->setVisible(false);
      }
    }
  }
  resize(width, height);
}

void OpQtWidget::activate_alarmlist()
{
  op->activate_alarmlist();
}

void OpQtWidget::activate_eventlist()
{
  op->activate_eventlist();
}

void OpQtWidget::activate_eventlog()
{
  op->activate_eventlog();
}

void OpQtWidget::activate_blocklist()
{
  op->activate_blocklist();
}

void OpQtWidget::activate_navigator()
{
  op->activate_navigator();
}

void OpQtWidget::activate_help()
{
  op->activate_help();
}

void OpQtWidget::activate_help_overview()
{
  op->activate_help_overview();
}

void OpQtWidget::activate_help_opwin()
{
  op->activate_help_opwin();
}

void OpQtWidget::activate_help_proview()
{
  op->activate_help_proview();
}

void OpQtWidget::activate_trend()
{
  op->activate_trend();
}

void OpQtWidget::activate_fast()
{
  op->activate_fast();
}

void OpQtWidget::activate_history()
{
  op->activate_history();
}

void OpQtWidget::activate_graph()
{
  op->activate_graph();
}

void OpQtWidget::activate_switch_user()
{
  op->activate_switch_user();
}

void OpQtWidget::activate_show_user()
{
  op->activate_show_user();
}

void OpQtWidget::activate_logout()
{
  op->activate_logout();
}

void OpQtWidget::activate_cmd_menu_item()
{
  pwr_tCmd cmd;
  int sts;

  sts = op->get_cmd(((QAction*)sender())->menu(), cmd);
  if (ODD(sts)) {
    op->activate_cmd_menu_item(cmd);
  }
}

void OpQtWidget::activate_sup_node()
{
  op->activate_sup_node(((QAction*)sender())->parentWidget());
}

void OpQtWidget::activate_appl()
{
  for (int i = 0; i < 25; i++) {
    if (sender() == op->appl_buttons[i]) {
      op->appl_action(i);
      return;
    }
  }
}

void OpQtWidget::activate_info()
{
  QPushButton* w = qobject_cast<QPushButton*>(sender());
  if (!w) {
    return;
  }

  char* more = NULL;

  for (int i = 0; i < 5; i++) {
    if (w == op->aalarm_info[i]) {
      more = op->a_alarm_moretext[i];
      break;
    }
  }

  if (!more) {
    return;
  }

  op->wow->DisplayText("Event MoreText", more);
}

int OpQt::get_cmd(QMenu* w, char* cmd)
{
  for (unsigned int i = 0; i < cmd_vect.size(); i++) {
    if (w == cmd_vect[i].w) {
      strcpy(cmd, cmd_vect[i].cmd);
      return 1;
    }
  }
  return 0;
}

void OpQt::change_sup_color(void* imagew, op_eSupColor color)
{
  QColor* col;

  switch (color) {
  case op_eSupColor_Gray:
    col = &gray_color;
    break;
  case op_eSupColor_Green:
    col = &green_color;
    break;
  case op_eSupColor_Yellow:
    col = &yellow_color;
    break;
  case op_eSupColor_Red:
    col = &red_color;
    break;
  case op_eSupColor_Black:
    col = &gray_color;
    break;
  default:
    col = &gray_color;
  }
  modifyBackground(((QMenu*)imagew), *col);
}

void OpQt::set_title(char* user)
{
  if (!title_label) {
    return;
  }

  pwr_tStatus sts;
  char nodename[32];
  syi_NodeName(&sts, nodename, sizeof(nodename));

  QString num;
  num.setNum(14 * 1024);
  QString text;
  text += "<span size=\"";
  text += num;
  text += "\">";
  text += convert_utf8(user);
  text += translate_utf8(" on ");
  text += convert_utf8(nodename);
  text += "</span>";

  title_label->setText(text);
}

static void setColorHelper(void* t, const char* name, QColor& color1,
    const char* state2, QColor& color2, const char* state3, QColor& color3)
{
  QWidget* target = ((QWidget*)t);
  QString str;
  str += name;
  str += " { background-color: ";
  str += color1.name();
  str += "; }\n";
  str += name;
  str += ":";
  str += state2;
  str += " { background-color: ";
  str += color2.name();
  str += "; }\n";
  str += name;
  str += ":";
  str += state3;
  str += " { background-color: ";
  str += color3.name();
  str += "; }\n";
  target->setStyleSheet(str);
}

void OpQt::set_color_theme(int idx)
{
  pwr_tFileName fname;
  int sts;
  double* colors;
  int csize;

  sprintf(fname, "$pwr_exe/pwr_colortheme%d.pwgc", idx);

  sts = Graph::get_colortheme_colors(fname, &colors, &csize);
  if (EVEN(sts)) {
    return;
  }

  QColor bg, bg_text, button_bg, button_text, button_prelight, button_active,
      menu, menu_text;

  red_color.setRedF(
      colors[(glow_eCtColor_RedIndicator - glow_eDrawType_CustomColor1) * 3]);
  red_color.setGreenF(
      colors[(glow_eCtColor_RedIndicator - glow_eDrawType_CustomColor1) * 3
          + 1]);
  red_color.setBlueF(
      colors[(glow_eCtColor_RedIndicator - glow_eDrawType_CustomColor1) * 3
          + 2]);

  green_color.setRedF(
      colors[(glow_eCtColor_GreenIndicator - glow_eDrawType_CustomColor1) * 3]);
  green_color.setGreenF(
      colors[(glow_eCtColor_GreenIndicator - glow_eDrawType_CustomColor1) * 3
          + 1]);
  green_color.setBlueF(
      colors[(glow_eCtColor_GreenIndicator - glow_eDrawType_CustomColor1) * 3
          + 2]);

  yellow_color.setRedF(
      colors[(glow_eCtColor_YellowIndicator - glow_eDrawType_CustomColor1)
          * 3]);
  yellow_color.setGreenF(
      colors[(glow_eCtColor_YellowIndicator - glow_eDrawType_CustomColor1) * 3
          + 1]);
  yellow_color.setBlueF(
      colors[(glow_eCtColor_YellowIndicator - glow_eDrawType_CustomColor1) * 3
          + 2]);

  gray_color.setRedF(
      colors[(glow_eCtColor_IndicatorLowColor - glow_eDrawType_CustomColor1)
          * 3]);
  gray_color.setGreenF(
      colors[(glow_eCtColor_IndicatorLowColor - glow_eDrawType_CustomColor1) * 3
          + 1]);
  gray_color.setBlueF(
      colors[(glow_eCtColor_IndicatorLowColor - glow_eDrawType_CustomColor1) * 3
          + 2]);

  bg.setRedF(
      colors[(glow_eCtColor_Background - glow_eDrawType_CustomColor1) * 3]);
  bg.setGreenF(
      colors[(glow_eCtColor_Background - glow_eDrawType_CustomColor1) * 3 + 1]);
  bg.setBlueF(
      colors[(glow_eCtColor_Background - glow_eDrawType_CustomColor1) * 3 + 2]);

  bg_text.setRedF(colors[(glow_eCtColor_BackgroundTextAndLines
                             - glow_eDrawType_CustomColor1)
      * 3]);
  bg_text.setGreenF(colors[(glow_eCtColor_BackgroundTextAndLines
                               - glow_eDrawType_CustomColor1)
          * 3
      + 1]);
  bg_text.setBlueF(colors[(glow_eCtColor_BackgroundTextAndLines
                              - glow_eDrawType_CustomColor1)
          * 3
      + 2]);

  button_bg.setRedF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1)
          * 3]);
  button_bg.setGreenF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1) * 3
          + 1]);
  button_bg.setBlueF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1) * 3
          + 2]);

  button_text.setRedF(
      colors[(glow_eCtColor_ButtonTextcolor - glow_eDrawType_CustomColor1)
          * 3]);
  button_text.setGreenF(
      colors[(glow_eCtColor_ButtonTextcolor - glow_eDrawType_CustomColor1) * 3
          + 1]);
  button_text.setBlueF(
      colors[(glow_eCtColor_ButtonTextcolor - glow_eDrawType_CustomColor1) * 3
          + 2]);

  button_prelight.setRedF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1 + 3)
          * 3]);
  button_prelight.setGreenF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1 + 3)
              * 3
          + 1]);
  button_prelight.setBlueF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1 + 3)
              * 3
          + 2]);

  button_active.setRedF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1 + 2)
          * 3]);
  button_active.setGreenF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1 + 2)
              * 3
          + 1]);
  button_active.setBlueF(
      colors[(glow_eCtColor_ButtonFillcolor - glow_eDrawType_CustomColor1 + 2)
              * 3
          + 2]);

  menu.setRedF(
      colors[(glow_eCtColor_MenuFillcolor - glow_eDrawType_CustomColor1) * 3]);
  menu.setGreenF(
      colors[(glow_eCtColor_MenuFillcolor - glow_eDrawType_CustomColor1) * 3
          + 1]);
  menu.setBlueF(
      colors[(glow_eCtColor_MenuFillcolor - glow_eDrawType_CustomColor1) * 3
          + 2]);

  menu_text.setRedF(
      colors[(glow_eCtColor_MenuTextcolor - glow_eDrawType_CustomColor1) * 3]);
  menu_text.setGreenF(
      colors[(glow_eCtColor_MenuTextcolor - glow_eDrawType_CustomColor1) * 3
          + 1]);
  menu_text.setBlueF(
      colors[(glow_eCtColor_MenuTextcolor - glow_eDrawType_CustomColor1) * 3
          + 2]);

  modifyBackground(toplevel, bg);
  modifyForeground(title_label, bg_text);

  modifyBackground(tools, bg);
  modifyBackground(tools2, bg);

  modifyBackground(alarmcnt_label, bg);
  modifyForeground(alarmcnt_label, bg_text);
  modifyBackground(aalarm_mark, bg);
  modifyForeground(aalarm_mark, bg_text);
  modifyBackground(balarm_mark, bg);
  modifyForeground(balarm_mark, bg_text);
  modifyBackground(balarm_active_box, bg);
  for (int i = 0; i < 5; i++) {
    modifyBackground(aalarm_active_box[i], bg);
  }

  modifyBackground(menu_bar, menu);
  modifyForeground(menu_bar, menu_text);

  for (unsigned int i = 0; i < sup_vect.size(); i++) {
    setColorHelper(sup_vect[i].buttonw, "QPushButton", button_bg, "hover",
        button_prelight, "pressed", button_active);
    setColorHelper(sup_vect[i].indfiller1w, "QPushButton", button_bg, "hover",
        button_prelight, "pressed", button_active);
    setColorHelper(sup_vect[i].indfiller2w, "QPushButton", button_bg, "hover",
        button_prelight, "pressed", button_active);
    modifyForeground((QWidget*)sup_vect[i].textw, button_text);
    setColorHelper(sup_vect[i].textbgw, "QPushButton", button_bg, "hover",
        button_prelight, "pressed", button_active);
    sup_vect[i].old_color = op_eSupColor_;
  }

  for (unsigned int i = 0; i < 25; i++) {
    if (appl_buttons[i]) {
      setColorHelper(appl_buttons[i], "QPushButton", button_bg, "hover",
          button_prelight, "pressed", button_active);
      modifyForeground(appl_buttons[i], button_text);
    }
  }
}

#define FONT_SCALE 0.7

void OpQt::set_text_size()
{
  QFont fd("Lucida Sans", FONT_SCALE * (text_size + 2));

  for (unsigned int i = 0; i < 25; i++) {
    if (appl_buttons[i]) {
      appl_buttons[i]->setFont(fd);
    }
  }
}