/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_xatt.cpp -- Display object attributes */

#include "glow_std.h"

#include <stdio.h>
#include <stdlib.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_time.h"
#include "rt_xnav_msg.h"

#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "co_lng.h"
#include "xtt_xatt_qt.h"
#include "xtt_xattnav_qt.h"
#include "xtt_xnav.h"
#include "rt_xatt_msg.h"

#include <QAction>
#include <QDialogButtonBox>
#include <QMenu>
#include <QMenuBar>
#include <QPushButton>
#include <QStatusBar>
#include <QVBoxLayout>

CoWowRecall XAttQt::value_recall;

void XAttQt::message(char severity, const char *message)
{
  msg_label->setText(fl(message));
}

void XAttQt::set_prompt(const char *prompt)
{
  if (strcmp(prompt, "") == 0) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setVisible(true);
  }
}

void XAttQt::change_value(int set_focus)
{
  int sts;
  int multiline;
  char *value;
  int input_size;

  if (input_open) {
    cmd_entry->setVisible(false);
    cmd_scrolledinput->setVisible(false);
    set_prompt("");
    input_open = 0;
    return;
  }

  sts = xattnav
      ->check_attr(&multiline, &input_node, input_name, &value, &input_size);
  if (EVEN(sts)) {
    if (sts == XATT__NOATTRSEL) {
      message('E', "No attribute is selected");
    } else {
      message('E', XNav::get_message(sts));
    }
    return;
  }

  if (multiline) {
    cmd_scrolledinput->setVisible(true);

    set_pane_position(pane, -170);
    if (set_focus) {
      cmd_scrolled_buffer->setFocus();
    }
    input_max_length = input_size - 1;
    input_multiline = 1;
  } else {
    cmd_entry->setMaxLength(input_size - 1);
    cmd_entry->setVisible(true);
    if (set_focus) {
      cmd_entry->setFocus();
    }
    input_multiline = 0;
  }

  message(' ', "");

  if (value) {
    if (multiline) {
      cmd_scrolled_buffer->setText(fl(value));
    } else {
      cmd_entry->setText(fl(value));

      // Select the text
      cmd_entry->selectAll();
    }
  } else {
    cmd_entry->setText("");
  }

  message(' ', "");
  set_prompt("value >");
  input_open = 1;
}

void XAttQtWidget::action_text_inserted()
{
  int count = xatt->cmd_scrolled_buffer->toPlainText().size();

  if (count > xatt->input_max_length) {
    // Remove inserted chars (note that iter now points at the end of the inserted text)
    QString txt = xatt->cmd_scrolled_buffer->toPlainText();
    txt.truncate(xatt->input_max_length);
    xatt->cmd_scrolled_buffer->setText(txt);

    CoWowQt wow(this);
    wow.DisplayError("Error message", "Attribute size exceeded");
  }
}

void XAttQtWidget::activate_change_value()
{
  xatt->change_value(1);
}

void XAttQtWidget::focusInEvent(QFocusEvent *event)
{
  if (!xatt->focustimer.disabled()) {
    if (xatt->cmd_scrolledinput->isVisible()) {
      xatt->cmd_scrolled_buffer->setFocus();
    } else if (xatt->cmd_entry->isVisible()) {
      xatt->cmd_entry->setFocus();
    } else if (xatt->xattnav) {
      xatt->xattnav->set_inputfocus();
    }

    xatt->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void XAttQt::change_value_close()
{
  if (input_open) {
    if (input_multiline) {
      QByteArray ba = cmd_scrolled_buffer->toPlainText().toLatin1();
      char *text = ba.data();

      if (text) {
        xattnav->set_attr_value(input_node, input_name, text);
      }

      cmd_scrolledinput->setVisible(false);
      set_prompt("");
      input_open = 0;

      set_pane_position(pane, -50);

      xattnav->redraw();
      xattnav->set_inputfocus();
      if (!text) {
        message('E', "Input error, invalid character");
      }
    } else {
      QByteArray ba = cmd_entry->text().toLatin1();
      char *text = ba.data();

      if (text) {
        xattnav->set_attr_value(input_node, input_name, text);
      }
      cmd_entry->setVisible(false);
      set_prompt("");
      input_open = 0;
      if (redraw_cb) {
        (redraw_cb)(this);
      }

      xattnav->set_inputfocus();
      if (!text) {
        message('E', "Input error, invalid character");
      }
    }
  }
}

void XAttQtWidget::activate_cmd_entry()
{
  xatt->cmd_prompt->setVisible(false);
  xatt->cmd_entry->setVisible(false);

  xatt->xattnav->set_inputfocus();

  QByteArray ba = xatt->cmd_entry->text().toLatin1();
  char *text = ba.data();

  if (xatt->input_open) {
    if (text) {
      xatt->xattnav->set_attr_value(xatt->input_node, xatt->input_name, text);
    }
    xatt->cmd_entry->setVisible(false);
    xatt->set_prompt("");
    xatt->input_open = 0;
    if (xatt->redraw_cb) {
      (xatt->redraw_cb)(xatt);
    }
    if (!text) {
      xatt->message('E', "Input error, invalid character");
    }
  }
}

void XAttQtWidget::activate_cmd_scrolled_ok()
{
  if (xatt->input_open) {
    QByteArray ba = xatt->cmd_scrolled_buffer->toPlainText().toLatin1();
    char *text = ba.data();

    if (text) {
      xatt->xattnav->set_attr_value(xatt->input_node, xatt->input_name, text);
    } else {
      xatt->message('E', "Input error, invalid character");
    }

    xatt->cmd_scrolledinput->setVisible(false);
    xatt->set_prompt("");
    xatt->input_open = 0;

    set_pane_position(xatt->pane, -50);

    xatt->xattnav->redraw();
    xatt->xattnav->set_inputfocus();
  }
}

void XAttQtWidget::activate_cmd_scrolled_ca()
{
  if (xatt->input_open) {
    xatt->cmd_scrolledinput->setVisible(false);

    set_pane_position(xatt->pane, -50);

    xatt->set_prompt("");
    xatt->input_open = 0;
    xatt->xattnav->set_inputfocus();
  }
}

void XAttQt::pop()
{
  ::pop(toplevel);
}

void XAttQt::print()
{
  pwr_tAName title;

  pwr_tStatus sts = gdh_AttrrefToName(&objar, title, sizeof(title), cdh_mNName);
  if (EVEN(sts)) { return; }

  CoWowQt::CreateBrowPrintDialogQt(title, xattnav->brow->ctx,
                                   flow_eOrientation_Portrait, 1.0,
                                   (void *) this, &sts);
}

void XAttQtWidget::closeEvent(QCloseEvent *event)
{
  if (xatt->close_cb) {
    (xatt->close_cb)(xatt->parent_ctx, xatt);
  } else {
    delete xatt;
  }
  QWidget::closeEvent(event);
}

XAttQt::XAttQt(QWidget *xa_parent_wid, void *xa_parent_ctx,
               pwr_sAttrRef *xa_objar, int xa_advanced_user, int *xa_sts)
    : XAtt(xa_parent_ctx, xa_objar, xa_advanced_user, xa_sts)
{
  int sts;
  pwr_tAName title;

  *xa_sts = gdh_AttrrefToName(&objar, title, sizeof(title), cdh_mNName);
  if (EVEN(*xa_sts)) { return; }

  cdh_StrncpyCutOff(title, title, 100, 1);

  toplevel = new XAttQtWidget(this, xa_parent_wid);
  toplevel->setToolTip(fl("xtt_xatt widget"));
  toplevel->setFixedSize(420, 600);
  toplevel->setWindowTitle(convert_utf8(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar *menu_bar = new QMenuBar();

  // File entry
  QMenu *file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions entry
  QMenu *functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "Change &Value", SLOT(activate_change_value()),
              "CTRL+Q");
  addMenuItem(toplevel, functions, "C&lose Change Value",
              SLOT(change_value_close()), "CTRL+T");
  addMenuItem(toplevel, functions, "Open &Program", SLOT(activate_open_plc()),
              "CTRL+L");
  addMenuItem(toplevel, functions, "&Display object in Navigator",
              SLOT(activate_display_object()), "CTRL+D");
  addMenuItem(toplevel, functions, "&Show C_rossreferences",
              SLOT(activate_show_cross()), "CTRL+R");
  addMenuItem(toplevel, functions, "Open &ClassGraph",
              SLOT(activate_open_classgraph()), "CTRL+G");

  // Help entry
  QMenu *help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H",
              "system-help");

  pane = new QSplitter(Qt::Vertical);

  xattnav =
      new XAttNavQt(this, pane, xattnav_eType_Object, "Plant", &objar,
                    xa_advanced_user, 0, &brow_widget, &sts);
  xattnav->message_cb = &message_cb;
  xattnav->change_value_cb = &change_value_cb;
  xattnav->popup_menu_cb = &xatt_popup_menu_cb;
  xattnav->is_authorized_cb = &xatt_is_authorized_cb;
  xattnav->init_cb = &init_cb;

  QStatusBar *statusbar = new QStatusBar();
  msg_label = new QLabel("");
  msg_label->setFixedHeight(25);
  cmd_prompt = new QLabel("value > ");
  cmd_prompt->setFixedHeight(25);
  cmd_entry = new CoWowEntryQt(&value_recall);
  cmd_entry->setFixedHeight(25);
  QObject::connect(cmd_entry, SIGNAL(editingFinished()), toplevel,
                   SLOT(activate_cmd_entry()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);

  QVBoxLayout *vbox = new QVBoxLayout();
  vbox->setMenuBar(menu_bar);

  add_expanding(pane, brow_widget);
  pane->addWidget(statusbar);

  vbox->addWidget(pane);

  toplevel->setLayout(vbox);

  cmd_scrolled_buffer = new QTextEdit();
  QObject::connect(cmd_scrolled_buffer, SIGNAL(textChanged()), toplevel,
                   SLOT(action_text_inserted()));

  QDialogButtonBox *buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
  buttons->addButton(QDialogButtonBox::Cancel);
  buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
                   toplevel, SLOT(activate_cmd_scrolled_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
                   toplevel, SLOT(activate_cmd_scrolled_ca()));

  QVBoxLayout *cmd_scrolledinput_layout = new QVBoxLayout();
  add_expanding(cmd_scrolledinput_layout, cmd_scrolled_buffer);
  cmd_scrolledinput_layout->addWidget(buttons);
  cmd_scrolledinput = layout_to_widget(cmd_scrolledinput_layout);

  add_expanding(statusbar, cmd_scrolledinput);

  toplevel->show();

  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);
  cmd_scrolledinput->setVisible(false);

  set_pane_position(pane, -50);

  *xa_sts = XATT__SUCCESS;
}