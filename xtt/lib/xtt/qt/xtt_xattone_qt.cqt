/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_xattone.cpp -- Display object attributes */

#include <stdlib.h>

#include "co_cdh.h"

#include "rt_xatt_msg.h"

#include "cow_qt_helpers.h"

#include "xtt_xattone_qt.h"
#include "xtt_xnav.h"

#include <QDialogButtonBox>
#include <QMenuBar>
#include <QPushButton>
#include <QStatusBar>
#include <QVBoxLayout>

CoWowRecall XAttOneQt::value_recall;

void XAttOneQt::message(char severity, const char* message)
{
  msg_label->setText(fl(message));
}

void XAttOneQt::set_prompt(char* prompt)
{
  if (strcmp(prompt, "") == 0) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setVisible(true);
  }
}

int XAttOneQt::set_value()
{
  if (input_open) {
    QString textutf8;
    if (input_multiline) {
      textutf8 = cmd_scrolled_buffer->toPlainText();
    } else {
      textutf8 = cmd_entry->text();
    }

    QByteArray text = textutf8.toLatin1();

    if (!text.data()) {
      message('E', "Input error, invalid character");
      return 0;
    }

    char buff[1024];
    int sts = XNav::attr_string_to_value(
        atype, text.data(), buff, sizeof(buff), asize);
    if (EVEN(sts)) {
      message('E', "Input syntax error");
      return sts;
    }
    sts = gdh_SetObjectInfoAttrref(&aref, buff, asize);
    if (EVEN(sts)) {
      message('E', "Unable to set value");
      return sts;
    }
    message(' ', "");
  }
  return XATT__SUCCESS;
}

int XAttOneQt::change_value(int set_focus)
{
  int sts = gdh_GetAttributeCharAttrref(&aref, &atype, &asize, &aoffs, &aelem);
  if (EVEN(sts)) {
    return sts;
  }

  int input_size;
  switch (atype) {
  case pwr_eType_String:
  case pwr_eType_Text:
    input_size = asize;
    break;
  default:
    input_size = 80;
  }

  char aval[1024];
  sts = gdh_GetObjectInfoAttrref(&aref, aval, sizeof(aval));
  if (EVEN(sts)) {
    return sts;
  }

  char* value = 0;
  char buf[1024];
  if (atype == pwr_eType_Text) {
    value = aval;
  } else {
    int len;
    XNav::attrvalue_to_string(
        atype, atype, &aval, buf, sizeof(buf), &len, NULL, 0);
    value = buf;
  }

  if (!access_rw) {
    cmd_label->setText(fl(buf));
  } else {
    if (atype == pwr_eType_Text) {
      cmd_entry->setVisible(false);
      cmd_scrolledinput->setVisible(true);

      // set_pane_position(pane, -170);
      if (set_focus) {
        cmd_scrolled_buffer->setFocus();
      }
      input_multiline = 1;

      if (value) {
        cmd_scrolled_buffer->setText(fl(value));
      } else {
        cmd_scrolled_buffer->setText("");
      }
    } else {
      cmd_entry->setVisible(true);
      cmd_scrolledinput->setVisible(false);
      if (set_focus) {
        cmd_entry->setFocus();
      }
      input_multiline = 0;

      cmd_entry->setMaxLength(input_size - 1);

      cmd_entry->setText("");

      if (value) {
        cmd_entry->setText(fl(value));

        // Select the text
        cmd_entry->setCursorPosition(cmd_entry->text().size());
        cmd_entry->selectAll();
      }
    }
    message(' ', "");
    set_prompt(Lng::translate("value >"));
    input_open = 1;
  }
  return XATT__SUCCESS;
}

void XAttOneQtWidget::activate_help()
{
  // Not yet implemented
}

void XAttOneQtWidget::focusInEvent(QFocusEvent* event)
{
  if (attone->input_open) {
    if (attone->input_multiline) {
      attone->cmd_scrolled_buffer->setFocus();
    } else {
      attone->cmd_entry->setFocus();
    }
  }

  QWidget::focusInEvent(event);
}

void XAttOneQt::change_value_close()
{
  set_value();
}

void XAttOneQtWidget::activate_cmd_entry()
{
  activate_cmd_scrolled_ok();
}

void XAttOneQtWidget::activate_cmd_scrolled_ok()
{
  int sts = attone->set_value();
  if (ODD(sts)) {
    close();
  }
}

void XAttOneQtWidget::activate_cmd_scrolled_ap()
{
  attone->set_value();
}

void XAttOneQt::pop()
{
  ::pop(toplevel);
}

void XAttOneQtWidget::closeEvent(QCloseEvent* event)
{
  if (attone->close_cb) {
    (attone->close_cb)(attone->parent_ctx, attone);
  } else {
    delete attone;
  }
  QWidget::closeEvent(event);
}

XAttOneQt::XAttOneQt(QWidget* xa_parent_wid, void* xa_parent_ctx,
    pwr_sAttrRef* xa_aref, char* xa_title, unsigned int xa_priv, int* xa_sts)
    : XAttOne(xa_parent_ctx, xa_aref, xa_title, xa_priv, xa_sts)
{
  pwr_tAName title;

  *xa_sts = gdh_AttrrefToName(&aref, title, sizeof(title), cdh_mNName);
  if (EVEN(*xa_sts)) {
    return;
  }

  toplevel = new XAttOneQtWidget(this, xa_parent_wid);
  toplevel->setToolTip(fl("xtt_xattone widget"));
  toplevel->setMinimumSize(500, 200);
  toplevel->setWindowTitle(convert_utf8(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  // Prompt, label, input entry
  msg_label = new QLabel("");
  msg_label->setFixedHeight(25);
  cmd_prompt = new QLabel("value > ");
  cmd_prompt->setFixedHeight(25);
  cmd_label = new QLabel("");
  cmd_label->setFixedHeight(25);
  cmd_entry = new CoWowEntryQt(&value_recall);
  cmd_entry->setFixedHeight(25);
  QObject::connect(cmd_entry, SIGNAL(editingFinished()), toplevel,
      SLOT(activate_cmd_entry()));

  // Scrolled text input
  cmd_scrolled_buffer = new QTextEdit();

  // Buttons
  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
  buttons->addButton(QDialogButtonBox::Apply);
  buttons->button(QDialogButtonBox::Apply)->setFixedSize(70, 25);
  buttons->addButton(QDialogButtonBox::Cancel);
  buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      toplevel, SLOT(activate_cmd_scrolled_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Apply), SIGNAL(clicked()),
      toplevel, SLOT(activate_cmd_scrolled_ap()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
      toplevel, SLOT(close()));

  // Horizontal box
  QStatusBar* statusbar = new QStatusBar();
  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_label);
  add_expanding(statusbar, cmd_entry);

  QVBoxLayout* cmd_scrolledinput_layout = new QVBoxLayout();
  add_expanding(cmd_scrolledinput_layout, cmd_scrolled_buffer);
  cmd_scrolledinput_layout->addWidget(buttons);
  cmd_scrolledinput = layout_to_widget(cmd_scrolledinput_layout);

  add_expanding(statusbar, cmd_scrolledinput);

  QVBoxLayout* vbox = new QVBoxLayout();
  vbox->setMenuBar(menu_bar);
  add_expanding(vbox, statusbar);

  toplevel->setLayout(vbox);
  toplevel->show();

  if (priv & pwr_mPrv_RtWrite || priv & pwr_mPrv_System) {
    access_rw = 1;
  } else {
    access_rw = 0;
  }

  if (access_rw) {
    cmd_label->setVisible(false);
  } else {
    cmd_entry->setVisible(false);
    cmd_scrolledinput->setVisible(false);
  }

  change_value(1);

  *xa_sts = XATT__SUCCESS;
}