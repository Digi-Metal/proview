/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_xcolwind.cpp -- Display object attributes */

#include "glow_std.h"

#include <stdio.h>
#include <stdlib.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "co_time.h"
#include "rt_xnav_msg.h"

#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "co_lng.h"
#include "xtt_xcolwind_qt.h"
#include "xtt_xattnav_qt.h"
#include "xtt_xnav.h"
#include "cow_wow_qt.h"
#include "rt_xatt_msg.h"

#include <QAction>
#include <QDialogButtonBox>
#include <QMenu>
#include <QMenuBar>
#include <QPushButton>
#include <QStatusBar>
#include <QVBoxLayout>

CoWowRecall XColWindQt::value_recall;

void XColWindQt::message(char severity, const char *message)
{
  msg_label->setText(fl(message));
}

void XColWindQt::set_prompt(const char *prompt)
{
  if (strcmp(prompt, "") == 0) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setVisible(true);
  }
}

void XColWindQt::change_value(int set_focus)
{
  int sts;
  int multiline;
  char *value;
  int input_size;

  if (input_open) {
    cmd_entry->setVisible(false);
    cmd_scrolledinput->setVisible(false);
    set_prompt("");
    input_open = 0;
    return;
  }

  sts = xattnav
      ->check_attr(&multiline, &input_node, input_name, &value, &input_size);
  if (EVEN(sts)) {
    if (sts == XATT__NOATTRSEL) {
      message('E', "No attribute is selected");
    } else {
      message('E', XNav::get_message(sts));
    }
    return;
  }

  if (multiline) {
    cmd_scrolledinput->setVisible(true);

    set_pane_position(pane, -170);
    if (set_focus) {
      cmd_scrolled_buffer->setFocus();
    }
    input_max_length = input_size - 1;
    input_multiline = 1;
  } else {
    cmd_entry->setMaxLength(input_size - 1);
    cmd_entry->setVisible(true);
    if (set_focus) {
      cmd_entry->setFocus();
    }
    input_multiline = 0;
  }

  message(' ', "");

  if (value) {
    if (multiline) {
      cmd_scrolled_buffer->setText(fl(value));
    } else {
      cmd_entry->setText("");
      cmd_entry->setText(fl(value));

      // Select the text
      cmd_entry->setCursorPosition(0);
      cmd_entry->selectAll();
    }
  } else {
    cmd_entry->setText("");
  }

  message(' ', "");
  set_prompt(Lng::translate("value >"));
  input_open = 1;
}

void XColWindQtWidget::action_text_inserted()
{
  int count = colwind->cmd_scrolled_buffer->toPlainText().size();

  if (count > colwind->input_max_length) {
    // Remove inserted chars (note that iter now points at the end of the inserted text)

    QString txt = colwind->cmd_scrolled_buffer->toPlainText();
    txt.truncate(colwind->input_max_length);
    colwind->cmd_scrolled_buffer->setText(txt);

    CoWowQt wow(this);
    wow.DisplayError("Error message", "Attribute size exceeded");
  }
}

//
//  Callbackfunctions from menu entries
//
void XColWindQtWidget::activate_change_value()
{
  colwind->change_value(1);
}

void XColWindQtWidget::activate_open()
{
  colwind->activate_open();
}

void XColWindQtWidget::activate_save()
{
  colwind->activate_save();
}

void XColWindQtWidget::activate_saveas()
{
  colwind->activate_saveas();
}

void XColWindQtWidget::activate_print()
{
  colwind->activate_print();
}

void XColWindQtWidget::activate_close_changeval()
{
  colwind->change_value_close();
}

void XColWindQtWidget::activate_insert()
{
  colwind->activate_collect_insert();
}

void XColWindQtWidget::activate_delete()
{
  colwind->activate_collect_delete();
}

void XColWindQtWidget::activate_moveup()
{
  colwind->activate_moveup();
}

void XColWindQtWidget::activate_movedown()
{
  colwind->activate_movedown();
}

void XColWindQtWidget::activate_display_object()
{
  colwind->activate_display_object();
}

void XColWindQtWidget::activate_show_cross()
{
  colwind->activate_show_cross();
}

void XColWindQtWidget::activate_open_classgraph()
{
  colwind->activate_open_classgraph();
}

void XColWindQtWidget::activate_open_plc()
{
  colwind->activate_open_plc();
}

void XColWindQtWidget::activate_zoomin()
{
  colwind->activate_zoomin();
}

void XColWindQtWidget::activate_zoomout()
{
  colwind->activate_zoomout();
}

void XColWindQtWidget::activate_zoomreset()
{
  colwind->xattnav->unzoom();
}

void XColWindQtWidget::activate_scantime()
{
  colwind->xattnav->set_scantime(((QAction *) sender())->data().toInt());
}

void XColWindQtWidget::activate_help()
{
  colwind->activate_help();
}

void XColWindQtWidget::focusInEvent(QFocusEvent *event)
{
  if (!colwind->focustimer.disabled()) {
    if (colwind->cmd_scrolledinput->isVisible()) {
      colwind->cmd_scrolled_buffer->setFocus();
    } else if (colwind->cmd_entry->isVisible()) {
      colwind->cmd_entry->setFocus();
    } else if (colwind->xattnav) {
      colwind->xattnav->set_inputfocus();
    }

    colwind->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void XColWindQt::change_value_close()
{
  if (input_open) {
    if (input_multiline) {
      QByteArray ba = cmd_scrolled_buffer->toPlainText().toLatin1();
      char *text = ba.data();

      if (text) {
        xattnav->set_attr_value(input_node, input_name, text);
      }

      cmd_scrolledinput->setVisible(false);
      set_prompt("");
      input_open = 0;

      set_pane_position(pane, -50);

      xattnav->redraw();
      xattnav->set_inputfocus();
      if (!text) {
        message('E', "Input error, invalid character");
      }
    } else {
      QByteArray ba = cmd_entry->text().toLatin1();
      char *text = ba.data();

      if (text) {
        xattnav->set_attr_value(input_node, input_name, text);
      }
      cmd_entry->setVisible(false);
      set_prompt("");
      input_open = 0;
      if (redraw_cb) {
        (redraw_cb)(this);
      }

      xattnav->set_inputfocus();
      if (!text) {
        message('E', "Input error, invalid character");
      }
    }
  }
}

void XColWindQtWidget::activate_cmd_entry()
{
  colwind->cmd_prompt->setVisible(false);
  colwind->cmd_entry->setVisible(false);

  colwind->xattnav->set_inputfocus();

  QByteArray ba = colwind->cmd_entry->text().toLatin1();
  char *text = ba.data();

  if (colwind->input_open) {
    if (text) {
      colwind->xattnav->set_attr_value(colwind->input_node, colwind->input_name,
                                       text);
    }
    colwind->cmd_entry->setVisible(false);
    colwind->set_prompt("");
    colwind->input_open = 0;
    if (colwind->redraw_cb) {
      (colwind->redraw_cb)(colwind);
    }
    if (!text) {
      colwind->message('E', "Input error, invalid character");
    }
    return;
  }
}

void XColWindQtWidget::activate_cmd_scrolled_ok()
{
  if (colwind->input_open) {
    QByteArray ba = colwind->cmd_scrolled_buffer->toPlainText().toLatin1();
    char *text = ba.data();

    if (text) {
      colwind->xattnav->set_attr_value(colwind->input_node, colwind->input_name, text);
    } else {
      colwind->message('E', "Input error, invalid character");
    }

    colwind->xattnav->set_attr_value(colwind->input_node, colwind->input_name, text);
    colwind->cmd_scrolledinput->setVisible(false);
    colwind->set_prompt("");
    colwind->input_open = 0;

    set_pane_position(colwind->pane, -50);

    colwind->xattnav->redraw();
    colwind->xattnav->set_inputfocus();
  }
}

void XColWindQtWidget::activate_cmd_scrolled_ca()
{
  if (colwind->input_open) {
    colwind->cmd_scrolledinput->setVisible(false);

    set_pane_position(colwind->pane, -50);

    colwind->set_prompt("");
    colwind->input_open = 0;
    colwind->xattnav->set_inputfocus();
  }
}

void XColWindQt::pop()
{
  ::pop(toplevel);
}

void XColWindQt::set_title(char *t)
{
  toplevel->setWindowTitle(fl(t));
}

void XColWindQt::set_window_size(int w, int h)
{
  toplevel->setFixedSize(w, h);
}

void XColWindQt::get_window_size(int *w, int *h)
{
  *w = toplevel->width();
  *h = toplevel->height();
}

void XColWindQt::print()
{
  pwr_tStatus sts;

  wow->CreateBrowPrintDialog(title, xattnav->brow->ctx,
                             flow_eOrientation_Portrait, 1.0, (void *) this,
                             &sts);
}

void XColWindQtWidget::closeEvent(QCloseEvent *event)
{
  if (colwind->close_cb) {
    (colwind->close_cb)(colwind->parent_ctx, colwind);
  } else {
    delete colwind;
  }
  QWidget::closeEvent(event);
}

XColWindQt::XColWindQt(QWidget *xa_parent_wid, void *xa_parent_ctx,
                       pwr_sAttrRef *xa_objar_list, char *xa_title,
                       int xa_advanced_user, xcolwind_eType xa_type,
                       int *xa_sts)
    :  XColWind(xa_parent_ctx, xa_objar_list, xa_title, xa_advanced_user,
                xa_type, xa_sts)
{
  int sts;
  pwr_tAttrRef ar;
  xattnav_eType xattnav_type;

  toplevel = new XColWindQtWidget(this, xa_parent_wid);
  toplevel->setToolTip(fl("xtt_xcolwind widget"));
  toplevel->setFixedSize(420, 600);
  toplevel->setWindowTitle(convert_utf8(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar *menu_bar = new QMenuBar();

  // File entry
  QMenu *file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Open", SLOT(activate_open()));
  addMenuItem(toplevel, file, "&Save", SLOT(activate_save()), "CTRL+S",
              "document-save");
  addMenuItem(toplevel, file, "S&ave as", SLOT(activate_saveas()), "",
              "document-save-as");
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Edit entry
  QMenu *edit = menu_bar->addMenu(translate_utf8("&Edit"));
  addMenuItem(toplevel, edit, "&Insert", SLOT(activate_insert()), "CTRL+V");
  addMenuItem(toplevel, edit, "&Delete", SLOT(activate_delete()), "Delete");
  addMenuItem(toplevel, edit, "Move &Up", SLOT(activate_moveup()), "Up");
  addMenuItem(toplevel, edit, "Move &Down", SLOT(activate_movedown()), "Down");

  // Functions entry
  QMenu *functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "Change &Value", SLOT(activate_change_value()),
              "CTRL+Q");
  addMenuItem(toplevel, functions, "C&lose Change Value",
              SLOT(change_value_close()), "CTRL+T");
  addMenuItem(toplevel, functions, "Open &Program", SLOT(activate_open_plc()),
              "CTRL+L");
  addMenuItem(toplevel, functions, "&Display object in Navigator",
              SLOT(activate_display_object()), "CTRL+D");
  addMenuItem(toplevel, functions, "&Show C_rossreferences",
              SLOT(activate_show_cross()), "CTRL+R");
  addMenuItem(toplevel, functions, "Open &ClassGraph",
              SLOT(activate_open_classgraph()), "CTRL+G");

  // View Entry
  QMenu *view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoomin()), "CTRL+I",
              "zoom-in");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoomout()), "CTRL+O",
              "zoom-out");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoomreset()), "CTRL+B",
              "zoom-original");

  // Submenu ScanTime
  QMenu *view_sc = view->addMenu(translate_utf8("&ScanTime"));
  QActionGroup *view_sc_group = new QActionGroup(toplevel);
  QAction *a = addMenuRadioItem(toplevel, view_sc, "0.50 s",
                                SLOT(activate_scantime()), view_sc_group);
  a->setData(500);
  a->setChecked(true);
  a = addMenuRadioItem(toplevel, view_sc, "0.20 s", SLOT(activate_scantime()),
                       view_sc_group);
  a->setData(200);
  a = addMenuRadioItem(toplevel, view_sc, "0.10 s", SLOT(activate_scantime()),
                       view_sc_group);
  a->setData(100);
  a = addMenuRadioItem(toplevel, view_sc, "0.05 s", SLOT(activate_scantime()),
                       view_sc_group);
  a->setData(50);
  a = addMenuRadioItem(toplevel, view_sc, "0.02 s", SLOT(activate_scantime()),
                       view_sc_group);
  a->setData(20);
  // End submenu
  // End View entry

  // Help entry
  QMenu *help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H",
              "system-help");

  pane = new QSplitter(Qt::Vertical);
  memset(&ar, 0, sizeof(ar));

  switch (type) {
    case xcolwind_eType_Collect:
      xattnav_type = xattnav_eType_Collect;
      break;
    case xcolwind_eType_CollectSignals:
      xattnav_type = xattnav_eType_CollectSignals;
      break;
    case xcolwind_eType_CollectIOSignals:
      xattnav_type = xattnav_eType_CollectSignals;
      break;
  }

  xattnav = new XAttNavQt(this, pane, xattnav_type, "Plant", &ar,
                          xa_advanced_user, objar_list, &brow_widget, &sts);
  xattnav->message_cb = &message_cb;
  xattnav->change_value_cb = &change_value_cb;
  xattnav->popup_menu_cb = &xcolwind_popup_menu_cb;
  xattnav->is_authorized_cb = &xcolwind_is_authorized_cb;
  xattnav->init_cb = &init_cb;

  QStatusBar *statusbar = new QStatusBar();
  msg_label = new QLabel("");
  msg_label->setFixedHeight(25);
  cmd_prompt = new QLabel("value > ");
  cmd_prompt->setFixedHeight(25);
  cmd_entry = new CoWowEntryQt(&value_recall);
  cmd_entry->setFixedHeight(25);
  QObject::connect(cmd_entry, SIGNAL(editingFinished()), toplevel,
                   SLOT(activate_cmd_entry()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);

  QVBoxLayout *vbox = new QVBoxLayout();
  vbox->setMenuBar(menu_bar);

  add_expanding(pane, brow_widget);
  pane->addWidget(statusbar);

  vbox->addWidget(pane);

  toplevel->setLayout(vbox);

  cmd_scrolled_buffer = new QTextEdit();
  QObject::connect(cmd_scrolled_buffer, SIGNAL(textChanged()), toplevel,
                   SLOT(action_text_inserted()));

  QDialogButtonBox *buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->button(QDialogButtonBox::Ok)->setFixedSize(70, 25);
  buttons->addButton(QDialogButtonBox::Cancel);
  buttons->button(QDialogButtonBox::Cancel)->setFixedSize(70, 25);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
                   toplevel, SLOT(activate_cmd_scrolled_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
                   toplevel, SLOT(activate_cmd_scrolled_ca()));

  QVBoxLayout *cmd_scrolledinput_layout = new QVBoxLayout();
  add_expanding(cmd_scrolledinput_layout, cmd_scrolled_buffer);
  cmd_scrolledinput_layout->addWidget(buttons);
  cmd_scrolledinput = layout_to_widget(cmd_scrolledinput_layout);

  add_expanding(statusbar, cmd_scrolledinput);

  toplevel->show();

  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);
  cmd_scrolledinput->setVisible(false);

  set_pane_position(pane, -50);

  wow = new CoWowQt(toplevel);

  *xa_sts = XATT__SUCCESS;
}