/*
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2017 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of Proview (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* xtt_xcrr_qt.cpp -- Display object crossreferences */

#include "co_cdh.h"

#include "rt_gdh.h"

#include "rt_xatt_msg.h"

#include "cow_qt_helpers.h"

#include "xtt_xattnav_qt.h"
#include "xtt_xcrr_qt.h"

#include <QAction>
#include <QMenu>
#include <QMenuBar>
#include <QVBoxLayout>

void XCrrQtWidget::activate_print()
{
  xcrr->activate_print();
}

void XCrrQtWidget::activate_open_plc()
{
  xcrr->xcrrnav->start_trace();
}

void XCrrQtWidget::activate_help()
{
  // Not yet implemented
}

void XCrrQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!xcrr->focustimer.disabled()) {
    if (xcrr->xcrrnav) {
      xcrr->xcrrnav->set_inputfocus();
    }
    xcrr->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void XCrrQt::pop()
{
  ::pop(toplevel);
}

void XCrrQt::print()
{
  pwr_tStatus sts;
  pwr_tAName title;

  sts = gdh_AttrrefToName(&objar, title, sizeof(title), cdh_mNName);
  if (EVEN(sts)) {
    return;
  }

  CoWowQt::CreateBrowPrintDialogQt(title, xcrrnav->brow->ctx,
      flow_eOrientation_Portrait, 1.0, toplevel, &sts);
}

void XCrrQtWidget::closeEvent(QCloseEvent* event)
{
  debug_print("XCrrQtWidget::closeEvent\n");
  if (xcrr->close_cb) {
    (xcrr->close_cb)(xcrr->parent_ctx, xcrr);
  } else {
    delete xcrr;
  }
  QWidget::closeEvent(event);
}

XCrrQt::XCrrQt(QWidget* xa_parent_wid, void* xa_parent_ctx,
    pwr_sAttrRef* xa_objar, int xa_advanced_user, int* xa_sts)
    : XCrr(xa_parent_ctx, xa_objar, xa_advanced_user, xa_sts)
{
  int sts;
  pwr_tAName title;

  *xa_sts = gdh_AttrrefToName(&objar, title, sizeof(title), cdh_mNName);
  if (EVEN(*xa_sts)) {
    return;
  }

  toplevel = new XCrrQtWidget(this, xa_parent_wid);
  toplevel->setToolTip(fl("xtt_xcrr widget"));
  toplevel->setFixedSize(600, 420);
  toplevel->setWindowTitle(convert_utf8(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(toplevel, file, "&Print", SLOT(activate_print()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "window-close");

  // Functions entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "Open &Program", SLOT(activate_open_plc()),
      "CTRL+L");

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "system-help");

  QVBoxLayout* vbox = new QVBoxLayout();
  xcrrnav = new XAttNavQt(this, toplevel, xattnav_eType_CrossRef, "Plant",
      &objar, xa_advanced_user, 0, &brow_widget, &sts);
  xcrrnav->popup_menu_cb = &xcrr_popup_menu_cb;
  xcrrnav->start_trace_cb = &xcrr_start_trace_cb;
  xcrrnav->close_cb = &xcrr_close_cb;
  xcrrnav->init_cb = &init_cb;

  vbox->setMenuBar(menu_bar);
  vbox->addWidget(brow_widget);

  toplevel->setLayout(vbox);
  toplevel->show();

  *xa_sts = XATT__SUCCESS;
}