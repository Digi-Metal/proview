/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2014 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

#include "flow_std.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "pwr.h"
#include "pwr_baseclasses.h"
#include "rt_gdh.h"
#include "rt_gdh_msg.h"
#include "co_cdh.h"
#include "co_time.h"
#include "co_dcli.h"
#include "cow_wow.h"
#include "rt_xnav_msg.h"

#include "flow.h"
#include "flow_browctx.h"
#include "flow_browapi.h"
#include "glow_growctx.h"
#include "glow_growapi.h"
#include "glow_curvectx.h"
#include "glow_curveapi.h"

#include "xtt_xnav.h"
#include "xtt_stream.h"

void XttStream::action_click( int x, int y)
{
  pwr_tCmd cmd;
  pwr_tURL node;
  char *s;

  strncpy( node, uri, sizeof(node));
  s = strchr( node, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    *s = 0;

  x = 700. / width * x;
  y = 580. / height * y; 

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&center=%d,%d",
	   node, x, y);
  system( cmd);
}

void XttStream::action_areaselect( int x, int y, int w, int h)
{
  pwr_tCmd cmd;
  pwr_tURL node;
  char *s;
  int zoom;
  float fzoom;

  strncpy( node, uri, sizeof(node));
  s = strchr( node, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    *s = 0;

  x += w/2;
  y += h/2;

  x = 700. / width * x;
  y = 580. / height * y; 
  if ( w == 0 || h == 0)
    return;

  fzoom = min( (float)width/w, (float)height/h);
  zoom = 100 * fzoom;
  if ( zoom > 9999)
    zoom = 9999;

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&areazoom=%d,%d,%d",
	   node, x, y, zoom);
  system( cmd);
}

void XttStream::action_scroll( int direction, int x, int y, int cnt)
{
  pwr_tCmd cmd;
  pwr_tURL node;
  char *s;
  int zoom;

  if ( direction)
    zoom = cnt * 150;
  else
    zoom = - cnt * 150;

  strncpy( node, uri, sizeof(node));
  s = strchr( node, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    *s = 0;

  x = 700. / width * x;
  y = 580. / height * y; 

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&rzoom=%d",
	   node, zoom);
  system( cmd);
}

void XttStream::action_mb2click( int x, int y)
{
  pwr_tCmd cmd;
  pwr_tURL node;
  char *s;
  int zoom = 1;

  strncpy( node, uri, sizeof(node));
  s = strchr( node, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    *s = 0;

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&zoom=%d",
	   node, zoom);
  system( cmd);
}

void XttStream::action_mb3click( int x, int y)
{
  create_popup_menu( x, y);
}

void XttStream::activate_preset_position( int idx)
{
  if ( cdh_ObjidIsNull( aref.Objid))
    return;

  pwr_tOName aname;
  pwr_tAttrRef aaref;
  pwr_tStatus sts;

  sprintf( aname, "PresetPosition[%d]", idx);

  sts = gdh_ArefANameToAref( &aref, aname, &aaref);
  if ( EVEN(sts)) return;

  pwr_sClass_CameraPosition pos;
  sts = gdh_GetObjectInfoAttrref( &aaref, &pos, sizeof(pos));
  if ( EVEN(sts)) return;

  camera_control->pan_tilt_zoom_absolute( pos.Pan, pos.Tilt, pos.Zoom);
}

void XttStream::activate_preset_store_pos( int idx)
{
  if ( cdh_ObjidIsNull( aref.Objid))
    return;

  pwr_tOName aname;
  pwr_tAttrRef aaref;
  pwr_tStatus sts;
  double pan, tilt, zoom;

  sprintf( aname, "PresetPosition[%d]", idx);

  sts = gdh_ArefANameToAref( &aref, aname, &aaref);
  if ( EVEN(sts)) return;

  camera_control->get_position( &pan, &tilt, &zoom);

  pwr_sClass_CameraPosition pos;
  pos.Pan = pan;
  pos.Tilt = tilt;
  pos.Zoom = zoom;

  sts = gdh_SetObjectInfoAttrref( &aaref, &pos, sizeof(pos));
  if ( EVEN(sts)) return;
}

XttCameraControlVapix::XttCameraControlVapix( char *x_url) :
  XttCameraControl(x_url)
{
  strncpy( url, x_url, sizeof(url));
  char *s = strchr( url, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    s = strchr( ++s, '/');
  if ( s)
    *s = 0;
}

// Relative zoom, factor is -100 - 100, - zoom out, + zoom in.
void XttCameraControlVapix::zoom_relative( double factor)
{
  pwr_tCmd cmd;
  int zoom = (int)(factor * 100);
  if ( zoom > 9999)
    zoom = 9999;
  if ( zoom < -9999)
    zoom = -9999;

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&rzoom=%d",
	   url, zoom);
  system( cmd);
}

// Absolute zoom, 0 - 100, 0 is max out, 100 is max in.
void XttCameraControlVapix::zoom_absolute( double factor)
{
  pwr_tCmd cmd;
  int zoom = (int)(factor * 100);
  if ( zoom < 1)
    zoom = 1;
  if ( zoom > 9999)
    zoom = 9999;

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&zoom=%d",
	   url, zoom);
  system( cmd);
}

// Relative pan, value is -100 - 100.
void XttCameraControlVapix::pan_relative( double value)
{
  pwr_tCmd cmd;
  int pan = (int)(value/100 * 360);
  if ( pan > 360)
    pan = 360;
  if ( pan < -360)
    pan = -360;

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&rpan=%d",
	   url, pan);
  system( cmd);
}

// Absolute pan, value is 0 - 100.
void XttCameraControlVapix::pan_absolute( double value)
{
  pwr_tCmd cmd;
  int pan = (int)(value / 100 * 360 - 180);
  if ( pan > 180)
    pan = 180;
  if ( pan < -180)
    pan = -180;
		  

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&rpan=%d",
	   url, pan);
  system( cmd);
}

// Relative tilt, value is -100 - 100.
void XttCameraControlVapix::tilt_relative( double value)
{
  pwr_tCmd cmd;
  int tilt = (int)(value/100 * 360);
  if ( tilt > 360)
    tilt = 360;
  if ( tilt < -360)
    tilt = -360;

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&rtilt=%d",
	   url, tilt);
  system( cmd);
}

// Absolute tilt, value is 0 - 100.
void XttCameraControlVapix::tilt_absolute( double value)
{
  pwr_tCmd cmd;
  int tilt = (int)(value / 100 * 360 - 180);
  if ( tilt > 180)
    tilt = 180;
  if ( tilt < -180)
    tilt = -180;
		  

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&rtilt=%d",
	   url, tilt);
  system( cmd);
}

// Absolute pan, tilt and zoom.
void XttCameraControlVapix::pan_tilt_zoom_absolute( double pan, double tilt, double zoom)
{
  pwr_tCmd cmd;
  int ipan = (int)(pan / 100 * 360 - 180);
  if ( ipan > 180)
    ipan = 180;
  if ( ipan < -180)
    ipan = -180;
		  
  int itilt = (int)(tilt / 100 * 360 - 180);
  if ( itilt > 180)
    itilt = 180;
  if ( itilt < -180)
    itilt = -180;
		  
  int izoom = (int)(zoom * 100);
  if ( izoom < 1)
    zoom = 1;
  if ( izoom > 9999)
    izoom = 9999;

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&pan=%d\\&tilt=%d\\&zoom=%d",
	   url, ipan, itilt, izoom);
  system( cmd);
}

// Get current pan, tilt and zoom.
int XttCameraControlVapix::get_position( double *pan, double *tilt, double *zoom)
{
  pwr_tCmd cmd;		  
  pwr_tFileName fname = "/tmp/campos.txt";
  FILE *fp;
  char line[100];
  char *s;
  int sts;
  float cpan, ctilt, czoom;
  int pan_found, tilt_found, zoom_found;
  pwr_tTime old_time;
  pwr_tTime time;
  int old_file_found;
  int new_file_found;
      
  old_file_found = 0;
  sts = dcli_file_time( fname, &old_time);
  if ( ODD(sts))
    old_file_found = 1;

  sprintf( cmd, "wget --ignore-length %s/axis-cgi/com/ptz.cgi?camera=1\\&query=position --output-document=%s",
	   url, fname);
  system( cmd);

  new_file_found = 0;
  sts = dcli_file_time( fname, &time);
  if ( ODD(sts)) {
    if ( !old_file_found)
      new_file_found = 1;
    else {
      if ( time_Acomp( &old_time, &time) != 0)
	new_file_found = 1;
    }
  }
  if ( !new_file_found)
    return 0;
  
  fp = fopen( fname, "r");
  if (!fp)
    return 0;

  pan_found = 0;
  tilt_found = 0;
  zoom_found = 0;
  while( ODD( dcli_read_line( line, sizeof(line), fp))) {
    if ( (s = strstr( line, "pan=")) != 0) {
      sts = sscanf( s+4, "%f", &cpan);
      if ( sts == 1)
	pan_found = 1;
    }
    else if ( (s = strstr( line, "tilt=")) != 0) {
      sts = sscanf( s+5, "%f", &ctilt);
      if ( sts == 1)
	tilt_found = 1;
    }
    else if ( (s = strstr( line, "zoom=")) != 0) {
      sts = sscanf( s+5, "%f", &czoom);
      if ( sts == 1)
	zoom_found = 1;
    }
    if ( pan_found && tilt_found && zoom_found) {
      break;
    }
  }
  fclose(fp);

  sprintf( cmd, "rm -f %s", fname);
  system( cmd);
      
  if ( !(pan_found && tilt_found && zoom_found))
    return 0;
  
  *pan = (cpan + 180) / 360 * 100;
  *tilt = (ctilt + 180) / 360 * 100;
  *zoom = czoom/100;

  return 1;
}



