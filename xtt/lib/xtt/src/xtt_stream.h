/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2014 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

#ifndef xtt_stream_h
#define xtt_stream_h

#ifndef pwr_h
# include "pwr.h"
#endif

class CoWow;
class CoWowTimer;

class XttCameraControl {
 public:
  pwr_tURL url;
  XttCameraControl( char *x_url) {}
  ~XttCameraControl() {}
  virtual void zoom_relative( double factor) {}
  virtual void zoom_absolute( double factor) {}
  virtual void pan_relative( double value) {}
  virtual void pan_absolute( double value) {}
  virtual void tilt_relative( double value) {}
  virtual void tilt_absolute( double value) {}  
  virtual void pan_tilt_zoom_absolute( double pan, double tilt, double zoom) {}
  virtual int get_position( double *pan, double *tilt, double *zoom) { return 0;}  
};

class XttCameraControlVapix : public XttCameraControl {
 public:
  XttCameraControlVapix( char *x_url);
  ~XttCameraControlVapix() {}
  void zoom_relative( double factor);
  void zoom_absolute( double factor);
  void pan_relative( double value);
  void pan_absolute( double value);
  void tilt_relative( double value);
  void tilt_absolute( double value);
  void pan_tilt_zoom_absolute( double pan, double tilt, double zoom);
  int get_position( double *pan, double *tilt, double *zoom);
};

class XttStream {
 public:
  void 		*parent_ctx;
  unsigned int  options;
  int		embedded;
  pwr_tURL      uri;
  CoWowTimer 	*timerid;
  CoWowTimer 	*scroll_timerid;
  CoWow	     	*wow;
  int		scan_time;
  int		width;
  int		height;
  void       	(*close_cb)( void *, XttStream *);  
  XttCameraControl *camera_control;
  pwr_tAttrRef  aref;

  XttStream( void *st_parent_ctx, const char *name, const char *st_uri,
	     int st_width, int st_height, int x, int y, 
	     double st_scan_time, unsigned int st_options, int st_embedded, pwr_tAttrRef *st_arp) :
    parent_ctx(st_parent_ctx), options(st_options), embedded(st_embedded), timerid(0), scroll_timerid(0),
    width(st_width), height(st_height), close_cb(0)  {
    strncpy( uri, st_uri, sizeof(uri)); 
    if ( st_scan_time < 0.02)
      scan_time = 1000;
    else
      scan_time = 1000 * st_scan_time;
    camera_control = new XttCameraControlVapix(uri);
    if ( st_arp)
      aref = *st_arp;
    else
      memset( &aref, 0, sizeof(aref));
  }
  virtual ~XttStream() {
    delete camera_control;
  }
    
  void action_click( int x, int  y);
  void action_mb2click( int x, int y);
  void action_mb3click( int x, int y);
  void action_areaselect( int x, int y, int w, int h);
  void action_scroll( int direction, int x, int  y, int cnt);
  void activate_preset_position( int idx);
  void activate_preset_store_pos( int idx);

  virtual void pop() {}
  virtual void set_size( int width, int height) {}
  virtual void *get_widget() { return 0;}
  virtual void create_popup_menu( int x, int y) {}
};

#endif






